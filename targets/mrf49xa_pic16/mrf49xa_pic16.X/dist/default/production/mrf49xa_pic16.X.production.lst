

Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Sat Apr  5 11:31:49 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	swtext2,local,class=CONST,delta=2
    23                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text46,local,class=CODE,merge=1,delta=2
    25                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	functab,global,reloc=256,class=CODE,delta=2
    27                           	psect	pa_nodes,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     	;# 
    30  0001                     	;# 
    31  0002                     	;# 
    32  0003                     	;# 
    33  0004                     	;# 
    34  0005                     	;# 
    35  0006                     	;# 
    36  0007                     	;# 
    37  0008                     	;# 
    38  0009                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000D                     	;# 
    43  000E                     	;# 
    44  0011                     	;# 
    45  0012                     	;# 
    46  0013                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0016                     	;# 
    50  0017                     	;# 
    51  0018                     	;# 
    52  0019                     	;# 
    53  001A                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  008C                     	;# 
    57  008D                     	;# 
    58  008E                     	;# 
    59  0091                     	;# 
    60  0092                     	;# 
    61  0093                     	;# 
    62  0095                     	;# 
    63  0096                     	;# 
    64  0097                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010D                     	;# 
    75  010E                     	;# 
    76  0111                     	;# 
    77  0112                     	;# 
    78  0113                     	;# 
    79  0114                     	;# 
    80  0115                     	;# 
    81  0116                     	;# 
    82  0117                     	;# 
    83  0118                     	;# 
    84  0119                     	;# 
    85  011D                     	;# 
    86  018C                     	;# 
    87  018D                     	;# 
    88  018E                     	;# 
    89  0191                     	;# 
    90  0191                     	;# 
    91  0192                     	;# 
    92  0193                     	;# 
    93  0193                     	;# 
    94  0194                     	;# 
    95  0195                     	;# 
    96  0196                     	;# 
    97  0199                     	;# 
    98  019A                     	;# 
    99  019B                     	;# 
   100  019B                     	;# 
   101  019C                     	;# 
   102  019D                     	;# 
   103  019E                     	;# 
   104  019F                     	;# 
   105  020C                     	;# 
   106  020D                     	;# 
   107  0211                     	;# 
   108  0211                     	;# 
   109  0212                     	;# 
   110  0212                     	;# 
   111  0213                     	;# 
   112  0213                     	;# 
   113  0214                     	;# 
   114  0214                     	;# 
   115  0215                     	;# 
   116  0215                     	;# 
   117  0215                     	;# 
   118  0216                     	;# 
   119  0216                     	;# 
   120  0217                     	;# 
   121  0217                     	;# 
   122  0391                     	;# 
   123  0392                     	;# 
   124  0393                     	;# 
   125  0394                     	;# 
   126  0395                     	;# 
   127  0396                     	;# 
   128  0498                     	;# 
   129  0498                     	;# 
   130  0499                     	;# 
   131  049A                     	;# 
   132  049B                     	;# 
   133  049B                     	;# 
   134  049C                     	;# 
   135  049E                     	;# 
   136  049F                     	;# 
   137  0611                     	;# 
   138  0612                     	;# 
   139  0613                     	;# 
   140  0613                     	;# 
   141  0614                     	;# 
   142  0615                     	;# 
   143  0616                     	;# 
   144  0616                     	;# 
   145  0617                     	;# 
   146  0618                     	;# 
   147  0619                     	;# 
   148  0619                     	;# 
   149  061A                     	;# 
   150  061B                     	;# 
   151  061C                     	;# 
   152  061C                     	;# 
   153  0691                     	;# 
   154  0692                     	;# 
   155  0693                     	;# 
   156  0694                     	;# 
   157  0695                     	;# 
   158  0F0F                     	;# 
   159  0F10                     	;# 
   160  0F11                     	;# 
   161  0F12                     	;# 
   162  0F13                     	;# 
   163  0F14                     	;# 
   164  0F15                     	;# 
   165  0F16                     	;# 
   166  0F17                     	;# 
   167  0F18                     	;# 
   168  0F19                     	;# 
   169  0F1A                     	;# 
   170  0F1B                     	;# 
   171  0F1C                     	;# 
   172  0F1D                     	;# 
   173  0F1E                     	;# 
   174  0F1F                     	;# 
   175  0F20                     	;# 
   176  0F21                     	;# 
   177  0F22                     	;# 
   178  0F23                     	;# 
   179  0F24                     	;# 
   180  0F25                     	;# 
   181  0F26                     	;# 
   182  0F27                     	;# 
   183  0F28                     	;# 
   184  0F29                     	;# 
   185  0F2A                     	;# 
   186  0F2B                     	;# 
   187  0F2C                     	;# 
   188  0F2D                     	;# 
   189  0F2E                     	;# 
   190  0F2F                     	;# 
   191  0F8C                     	;# 
   192  0F8D                     	;# 
   193  0F91                     	;# 
   194  0F95                     	;# 
   195  0F96                     	;# 
   196  0F97                     	;# 
   197  0F9C                     	;# 
   198  0F9D                     	;# 
   199  0F9E                     	;# 
   200  0FE3                     	;# 
   201  0FE4                     	;# 
   202  0FE5                     	;# 
   203  0FE6                     	;# 
   204  0FE7                     	;# 
   205  0FE8                     	;# 
   206  0FE9                     	;# 
   207  0FEA                     	;# 
   208  0FEB                     	;# 
   209  0FED                     	;# 
   210  0FEE                     	;# 
   211  0FEF                     	;# 
   212  0000                     	;# 
   213  0001                     	;# 
   214  0002                     	;# 
   215  0003                     	;# 
   216  0004                     	;# 
   217  0005                     	;# 
   218  0006                     	;# 
   219  0007                     	;# 
   220  0008                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  008C                     	;# 
   240  008D                     	;# 
   241  008E                     	;# 
   242  0091                     	;# 
   243  0092                     	;# 
   244  0093                     	;# 
   245  0095                     	;# 
   246  0096                     	;# 
   247  0097                     	;# 
   248  0099                     	;# 
   249  009A                     	;# 
   250  009B                     	;# 
   251  009B                     	;# 
   252  009C                     	;# 
   253  009D                     	;# 
   254  009E                     	;# 
   255  009F                     	;# 
   256  010C                     	;# 
   257  010D                     	;# 
   258  010E                     	;# 
   259  0111                     	;# 
   260  0112                     	;# 
   261  0113                     	;# 
   262  0114                     	;# 
   263  0115                     	;# 
   264  0116                     	;# 
   265  0117                     	;# 
   266  0118                     	;# 
   267  0119                     	;# 
   268  011D                     	;# 
   269  018C                     	;# 
   270  018D                     	;# 
   271  018E                     	;# 
   272  0191                     	;# 
   273  0191                     	;# 
   274  0192                     	;# 
   275  0193                     	;# 
   276  0193                     	;# 
   277  0194                     	;# 
   278  0195                     	;# 
   279  0196                     	;# 
   280  0199                     	;# 
   281  019A                     	;# 
   282  019B                     	;# 
   283  019B                     	;# 
   284  019C                     	;# 
   285  019D                     	;# 
   286  019E                     	;# 
   287  019F                     	;# 
   288  020C                     	;# 
   289  020D                     	;# 
   290  0211                     	;# 
   291  0211                     	;# 
   292  0212                     	;# 
   293  0212                     	;# 
   294  0213                     	;# 
   295  0213                     	;# 
   296  0214                     	;# 
   297  0214                     	;# 
   298  0215                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0216                     	;# 
   302  0216                     	;# 
   303  0217                     	;# 
   304  0217                     	;# 
   305  0391                     	;# 
   306  0392                     	;# 
   307  0393                     	;# 
   308  0394                     	;# 
   309  0395                     	;# 
   310  0396                     	;# 
   311  0498                     	;# 
   312  0498                     	;# 
   313  0499                     	;# 
   314  049A                     	;# 
   315  049B                     	;# 
   316  049B                     	;# 
   317  049C                     	;# 
   318  049E                     	;# 
   319  049F                     	;# 
   320  0611                     	;# 
   321  0612                     	;# 
   322  0613                     	;# 
   323  0613                     	;# 
   324  0614                     	;# 
   325  0615                     	;# 
   326  0616                     	;# 
   327  0616                     	;# 
   328  0617                     	;# 
   329  0618                     	;# 
   330  0619                     	;# 
   331  0619                     	;# 
   332  061A                     	;# 
   333  061B                     	;# 
   334  061C                     	;# 
   335  061C                     	;# 
   336  0691                     	;# 
   337  0692                     	;# 
   338  0693                     	;# 
   339  0694                     	;# 
   340  0695                     	;# 
   341  0F0F                     	;# 
   342  0F10                     	;# 
   343  0F11                     	;# 
   344  0F12                     	;# 
   345  0F13                     	;# 
   346  0F14                     	;# 
   347  0F15                     	;# 
   348  0F16                     	;# 
   349  0F17                     	;# 
   350  0F18                     	;# 
   351  0F19                     	;# 
   352  0F1A                     	;# 
   353  0F1B                     	;# 
   354  0F1C                     	;# 
   355  0F1D                     	;# 
   356  0F1E                     	;# 
   357  0F1F                     	;# 
   358  0F20                     	;# 
   359  0F21                     	;# 
   360  0F22                     	;# 
   361  0F23                     	;# 
   362  0F24                     	;# 
   363  0F25                     	;# 
   364  0F26                     	;# 
   365  0F27                     	;# 
   366  0F28                     	;# 
   367  0F29                     	;# 
   368  0F2A                     	;# 
   369  0F2B                     	;# 
   370  0F2C                     	;# 
   371  0F2D                     	;# 
   372  0F2E                     	;# 
   373  0F2F                     	;# 
   374  0F8C                     	;# 
   375  0F8D                     	;# 
   376  0F91                     	;# 
   377  0F95                     	;# 
   378  0F96                     	;# 
   379  0F97                     	;# 
   380  0F9C                     	;# 
   381  0F9D                     	;# 
   382  0F9E                     	;# 
   383  0FE3                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  0011                     	;# 
   411  0012                     	;# 
   412  0013                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0016                     	;# 
   416  0017                     	;# 
   417  0018                     	;# 
   418  0019                     	;# 
   419  001A                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0093                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  009F                     	;# 
   439  010C                     	;# 
   440  010D                     	;# 
   441  010E                     	;# 
   442  0111                     	;# 
   443  0112                     	;# 
   444  0113                     	;# 
   445  0114                     	;# 
   446  0115                     	;# 
   447  0116                     	;# 
   448  0117                     	;# 
   449  0118                     	;# 
   450  0119                     	;# 
   451  011D                     	;# 
   452  018C                     	;# 
   453  018D                     	;# 
   454  018E                     	;# 
   455  0191                     	;# 
   456  0191                     	;# 
   457  0192                     	;# 
   458  0193                     	;# 
   459  0193                     	;# 
   460  0194                     	;# 
   461  0195                     	;# 
   462  0196                     	;# 
   463  0199                     	;# 
   464  019A                     	;# 
   465  019B                     	;# 
   466  019B                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020C                     	;# 
   472  020D                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0391                     	;# 
   489  0392                     	;# 
   490  0393                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  0498                     	;# 
   495  0498                     	;# 
   496  0499                     	;# 
   497  049A                     	;# 
   498  049B                     	;# 
   499  049B                     	;# 
   500  049C                     	;# 
   501  049E                     	;# 
   502  049F                     	;# 
   503  0611                     	;# 
   504  0612                     	;# 
   505  0613                     	;# 
   506  0613                     	;# 
   507  0614                     	;# 
   508  0615                     	;# 
   509  0616                     	;# 
   510  0616                     	;# 
   511  0617                     	;# 
   512  0618                     	;# 
   513  0619                     	;# 
   514  0619                     	;# 
   515  061A                     	;# 
   516  061B                     	;# 
   517  061C                     	;# 
   518  061C                     	;# 
   519  0691                     	;# 
   520  0692                     	;# 
   521  0693                     	;# 
   522  0694                     	;# 
   523  0695                     	;# 
   524  0F0F                     	;# 
   525  0F10                     	;# 
   526  0F11                     	;# 
   527  0F12                     	;# 
   528  0F13                     	;# 
   529  0F14                     	;# 
   530  0F15                     	;# 
   531  0F16                     	;# 
   532  0F17                     	;# 
   533  0F18                     	;# 
   534  0F19                     	;# 
   535  0F1A                     	;# 
   536  0F1B                     	;# 
   537  0F1C                     	;# 
   538  0F1D                     	;# 
   539  0F1E                     	;# 
   540  0F1F                     	;# 
   541  0F20                     	;# 
   542  0F21                     	;# 
   543  0F22                     	;# 
   544  0F23                     	;# 
   545  0F24                     	;# 
   546  0F25                     	;# 
   547  0F26                     	;# 
   548  0F27                     	;# 
   549  0F28                     	;# 
   550  0F29                     	;# 
   551  0F2A                     	;# 
   552  0F2B                     	;# 
   553  0F2C                     	;# 
   554  0F2D                     	;# 
   555  0F2E                     	;# 
   556  0F2F                     	;# 
   557  0F8C                     	;# 
   558  0F8D                     	;# 
   559  0F91                     	;# 
   560  0F95                     	;# 
   561  0F96                     	;# 
   562  0F97                     	;# 
   563  0F9C                     	;# 
   564  0F9D                     	;# 
   565  0F9E                     	;# 
   566  0FE3                     	;# 
   567  0FE4                     	;# 
   568  0FE5                     	;# 
   569  0FE6                     	;# 
   570  0FE7                     	;# 
   571  0FE8                     	;# 
   572  0FE9                     	;# 
   573  0FEA                     	;# 
   574  0FEB                     	;# 
   575  0FED                     	;# 
   576  0FEE                     	;# 
   577  0FEF                     	;# 
   578  0000                     	;# 
   579  0001                     	;# 
   580  0002                     	;# 
   581  0003                     	;# 
   582  0004                     	;# 
   583  0005                     	;# 
   584  0006                     	;# 
   585  0007                     	;# 
   586  0008                     	;# 
   587  0009                     	;# 
   588  000A                     	;# 
   589  000B                     	;# 
   590  000C                     	;# 
   591  000D                     	;# 
   592  000E                     	;# 
   593  0011                     	;# 
   594  0012                     	;# 
   595  0013                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0016                     	;# 
   599  0017                     	;# 
   600  0018                     	;# 
   601  0019                     	;# 
   602  001A                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  008C                     	;# 
   606  008D                     	;# 
   607  008E                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0097                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  009F                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010E                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0113                     	;# 
   628  0114                     	;# 
   629  0115                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  0118                     	;# 
   633  0119                     	;# 
   634  011D                     	;# 
   635  018C                     	;# 
   636  018D                     	;# 
   637  018E                     	;# 
   638  0191                     	;# 
   639  0191                     	;# 
   640  0192                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0194                     	;# 
   644  0195                     	;# 
   645  0196                     	;# 
   646  0199                     	;# 
   647  019A                     	;# 
   648  019B                     	;# 
   649  019B                     	;# 
   650  019C                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  020C                     	;# 
   655  020D                     	;# 
   656  0211                     	;# 
   657  0211                     	;# 
   658  0212                     	;# 
   659  0212                     	;# 
   660  0213                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0214                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0216                     	;# 
   668  0216                     	;# 
   669  0217                     	;# 
   670  0217                     	;# 
   671  0391                     	;# 
   672  0392                     	;# 
   673  0393                     	;# 
   674  0394                     	;# 
   675  0395                     	;# 
   676  0396                     	;# 
   677  0498                     	;# 
   678  0498                     	;# 
   679  0499                     	;# 
   680  049A                     	;# 
   681  049B                     	;# 
   682  049B                     	;# 
   683  049C                     	;# 
   684  049E                     	;# 
   685  049F                     	;# 
   686  0611                     	;# 
   687  0612                     	;# 
   688  0613                     	;# 
   689  0613                     	;# 
   690  0614                     	;# 
   691  0615                     	;# 
   692  0616                     	;# 
   693  0616                     	;# 
   694  0617                     	;# 
   695  0618                     	;# 
   696  0619                     	;# 
   697  0619                     	;# 
   698  061A                     	;# 
   699  061B                     	;# 
   700  061C                     	;# 
   701  061C                     	;# 
   702  0691                     	;# 
   703  0692                     	;# 
   704  0693                     	;# 
   705  0694                     	;# 
   706  0695                     	;# 
   707  0F0F                     	;# 
   708  0F10                     	;# 
   709  0F11                     	;# 
   710  0F12                     	;# 
   711  0F13                     	;# 
   712  0F14                     	;# 
   713  0F15                     	;# 
   714  0F16                     	;# 
   715  0F17                     	;# 
   716  0F18                     	;# 
   717  0F19                     	;# 
   718  0F1A                     	;# 
   719  0F1B                     	;# 
   720  0F1C                     	;# 
   721  0F1D                     	;# 
   722  0F1E                     	;# 
   723  0F1F                     	;# 
   724  0F20                     	;# 
   725  0F21                     	;# 
   726  0F22                     	;# 
   727  0F23                     	;# 
   728  0F24                     	;# 
   729  0F25                     	;# 
   730  0F26                     	;# 
   731  0F27                     	;# 
   732  0F28                     	;# 
   733  0F29                     	;# 
   734  0F2A                     	;# 
   735  0F2B                     	;# 
   736  0F2C                     	;# 
   737  0F2D                     	;# 
   738  0F2E                     	;# 
   739  0F2F                     	;# 
   740  0F8C                     	;# 
   741  0F8D                     	;# 
   742  0F91                     	;# 
   743  0F95                     	;# 
   744  0F96                     	;# 
   745  0F97                     	;# 
   746  0F9C                     	;# 
   747  0F9D                     	;# 
   748  0F9E                     	;# 
   749  0FE3                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0015                     	;# 
   780  0016                     	;# 
   781  0016                     	;# 
   782  0017                     	;# 
   783  0018                     	;# 
   784  0019                     	;# 
   785  001A                     	;# 
   786  001B                     	;# 
   787  001C                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  0091                     	;# 
   792  0092                     	;# 
   793  0093                     	;# 
   794  0095                     	;# 
   795  0096                     	;# 
   796  0097                     	;# 
   797  0099                     	;# 
   798  009A                     	;# 
   799  009B                     	;# 
   800  009B                     	;# 
   801  009C                     	;# 
   802  009D                     	;# 
   803  009E                     	;# 
   804  009F                     	;# 
   805  010C                     	;# 
   806  010D                     	;# 
   807  010E                     	;# 
   808  0111                     	;# 
   809  0112                     	;# 
   810  0113                     	;# 
   811  0114                     	;# 
   812  0115                     	;# 
   813  0116                     	;# 
   814  0117                     	;# 
   815  0118                     	;# 
   816  0119                     	;# 
   817  011D                     	;# 
   818  018C                     	;# 
   819  018D                     	;# 
   820  018E                     	;# 
   821  0191                     	;# 
   822  0191                     	;# 
   823  0192                     	;# 
   824  0193                     	;# 
   825  0193                     	;# 
   826  0194                     	;# 
   827  0195                     	;# 
   828  0196                     	;# 
   829  0199                     	;# 
   830  019A                     	;# 
   831  019B                     	;# 
   832  019B                     	;# 
   833  019C                     	;# 
   834  019D                     	;# 
   835  019E                     	;# 
   836  019F                     	;# 
   837  020C                     	;# 
   838  020D                     	;# 
   839  0211                     	;# 
   840  0211                     	;# 
   841  0212                     	;# 
   842  0212                     	;# 
   843  0213                     	;# 
   844  0213                     	;# 
   845  0214                     	;# 
   846  0214                     	;# 
   847  0215                     	;# 
   848  0215                     	;# 
   849  0215                     	;# 
   850  0216                     	;# 
   851  0216                     	;# 
   852  0217                     	;# 
   853  0217                     	;# 
   854  0391                     	;# 
   855  0392                     	;# 
   856  0393                     	;# 
   857  0394                     	;# 
   858  0395                     	;# 
   859  0396                     	;# 
   860  0498                     	;# 
   861  0498                     	;# 
   862  0499                     	;# 
   863  049A                     	;# 
   864  049B                     	;# 
   865  049B                     	;# 
   866  049C                     	;# 
   867  049E                     	;# 
   868  049F                     	;# 
   869  0611                     	;# 
   870  0612                     	;# 
   871  0613                     	;# 
   872  0613                     	;# 
   873  0614                     	;# 
   874  0615                     	;# 
   875  0616                     	;# 
   876  0616                     	;# 
   877  0617                     	;# 
   878  0618                     	;# 
   879  0619                     	;# 
   880  0619                     	;# 
   881  061A                     	;# 
   882  061B                     	;# 
   883  061C                     	;# 
   884  061C                     	;# 
   885  0691                     	;# 
   886  0692                     	;# 
   887  0693                     	;# 
   888  0694                     	;# 
   889  0695                     	;# 
   890  0F0F                     	;# 
   891  0F10                     	;# 
   892  0F11                     	;# 
   893  0F12                     	;# 
   894  0F13                     	;# 
   895  0F14                     	;# 
   896  0F15                     	;# 
   897  0F16                     	;# 
   898  0F17                     	;# 
   899  0F18                     	;# 
   900  0F19                     	;# 
   901  0F1A                     	;# 
   902  0F1B                     	;# 
   903  0F1C                     	;# 
   904  0F1D                     	;# 
   905  0F1E                     	;# 
   906  0F1F                     	;# 
   907  0F20                     	;# 
   908  0F21                     	;# 
   909  0F22                     	;# 
   910  0F23                     	;# 
   911  0F24                     	;# 
   912  0F25                     	;# 
   913  0F26                     	;# 
   914  0F27                     	;# 
   915  0F28                     	;# 
   916  0F29                     	;# 
   917  0F2A                     	;# 
   918  0F2B                     	;# 
   919  0F2C                     	;# 
   920  0F2D                     	;# 
   921  0F2E                     	;# 
   922  0F2F                     	;# 
   923  0F8C                     	;# 
   924  0F8D                     	;# 
   925  0F91                     	;# 
   926  0F95                     	;# 
   927  0F96                     	;# 
   928  0F97                     	;# 
   929  0F9C                     	;# 
   930  0F9D                     	;# 
   931  0F9E                     	;# 
   932  0FE3                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0013                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0093                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  009F                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0111                     	;# 
   992  0112                     	;# 
   993  0113                     	;# 
   994  0114                     	;# 
   995  0115                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  0118                     	;# 
   999  0119                     	;# 
  1000  011D                     	;# 
  1001  018C                     	;# 
  1002  018D                     	;# 
  1003  018E                     	;# 
  1004  0191                     	;# 
  1005  0191                     	;# 
  1006  0192                     	;# 
  1007  0193                     	;# 
  1008  0193                     	;# 
  1009  0194                     	;# 
  1010  0195                     	;# 
  1011  0196                     	;# 
  1012  0199                     	;# 
  1013  019A                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019C                     	;# 
  1017  019D                     	;# 
  1018  019E                     	;# 
  1019  019F                     	;# 
  1020  020C                     	;# 
  1021  020D                     	;# 
  1022  0211                     	;# 
  1023  0211                     	;# 
  1024  0212                     	;# 
  1025  0212                     	;# 
  1026  0213                     	;# 
  1027  0213                     	;# 
  1028  0214                     	;# 
  1029  0214                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0216                     	;# 
  1034  0216                     	;# 
  1035  0217                     	;# 
  1036  0217                     	;# 
  1037  0391                     	;# 
  1038  0392                     	;# 
  1039  0393                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0498                     	;# 
  1044  0498                     	;# 
  1045  0499                     	;# 
  1046  049A                     	;# 
  1047  049B                     	;# 
  1048  049B                     	;# 
  1049  049C                     	;# 
  1050  049E                     	;# 
  1051  049F                     	;# 
  1052  0611                     	;# 
  1053  0612                     	;# 
  1054  0613                     	;# 
  1055  0613                     	;# 
  1056  0614                     	;# 
  1057  0615                     	;# 
  1058  0616                     	;# 
  1059  0616                     	;# 
  1060  0617                     	;# 
  1061  0618                     	;# 
  1062  0619                     	;# 
  1063  0619                     	;# 
  1064  061A                     	;# 
  1065  061B                     	;# 
  1066  061C                     	;# 
  1067  061C                     	;# 
  1068  0691                     	;# 
  1069  0692                     	;# 
  1070  0693                     	;# 
  1071  0694                     	;# 
  1072  0695                     	;# 
  1073  0F0F                     	;# 
  1074  0F10                     	;# 
  1075  0F11                     	;# 
  1076  0F12                     	;# 
  1077  0F13                     	;# 
  1078  0F14                     	;# 
  1079  0F15                     	;# 
  1080  0F16                     	;# 
  1081  0F17                     	;# 
  1082  0F18                     	;# 
  1083  0F19                     	;# 
  1084  0F1A                     	;# 
  1085  0F1B                     	;# 
  1086  0F1C                     	;# 
  1087  0F1D                     	;# 
  1088  0F1E                     	;# 
  1089  0F1F                     	;# 
  1090  0F20                     	;# 
  1091  0F21                     	;# 
  1092  0F22                     	;# 
  1093  0F23                     	;# 
  1094  0F24                     	;# 
  1095  0F25                     	;# 
  1096  0F26                     	;# 
  1097  0F27                     	;# 
  1098  0F28                     	;# 
  1099  0F29                     	;# 
  1100  0F2A                     	;# 
  1101  0F2B                     	;# 
  1102  0F2C                     	;# 
  1103  0F2D                     	;# 
  1104  0F2E                     	;# 
  1105  0F2F                     	;# 
  1106  0F8C                     	;# 
  1107  0F8D                     	;# 
  1108  0F91                     	;# 
  1109  0F95                     	;# 
  1110  0F96                     	;# 
  1111  0F97                     	;# 
  1112  0F9C                     	;# 
  1113  0F9D                     	;# 
  1114  0F9E                     	;# 
  1115  0FE3                     	;# 
  1116  0FE4                     	;# 
  1117  0FE5                     	;# 
  1118  0FE6                     	;# 
  1119  0FE7                     	;# 
  1120  0FE8                     	;# 
  1121  0FE9                     	;# 
  1122  0FEA                     	;# 
  1123  0FEB                     	;# 
  1124  0FED                     	;# 
  1125  0FEE                     	;# 
  1126  0FEF                     	;# 
  1127  0000                     	;# 
  1128  0001                     	;# 
  1129  0002                     	;# 
  1130  0003                     	;# 
  1131  0004                     	;# 
  1132  0005                     	;# 
  1133  0006                     	;# 
  1134  0007                     	;# 
  1135  0008                     	;# 
  1136  0009                     	;# 
  1137  000A                     	;# 
  1138  000B                     	;# 
  1139  000C                     	;# 
  1140  000D                     	;# 
  1141  000E                     	;# 
  1142  0011                     	;# 
  1143  0012                     	;# 
  1144  0013                     	;# 
  1145  0015                     	;# 
  1146  0016                     	;# 
  1147  0016                     	;# 
  1148  0017                     	;# 
  1149  0018                     	;# 
  1150  0019                     	;# 
  1151  001A                     	;# 
  1152  001B                     	;# 
  1153  001C                     	;# 
  1154  008C                     	;# 
  1155  008D                     	;# 
  1156  008E                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0095                     	;# 
  1161  0096                     	;# 
  1162  0097                     	;# 
  1163  0099                     	;# 
  1164  009A                     	;# 
  1165  009B                     	;# 
  1166  009B                     	;# 
  1167  009C                     	;# 
  1168  009D                     	;# 
  1169  009E                     	;# 
  1170  009F                     	;# 
  1171  010C                     	;# 
  1172  010D                     	;# 
  1173  010E                     	;# 
  1174  0111                     	;# 
  1175  0112                     	;# 
  1176  0113                     	;# 
  1177  0114                     	;# 
  1178  0115                     	;# 
  1179  0116                     	;# 
  1180  0117                     	;# 
  1181  0118                     	;# 
  1182  0119                     	;# 
  1183  011D                     	;# 
  1184  018C                     	;# 
  1185  018D                     	;# 
  1186  018E                     	;# 
  1187  0191                     	;# 
  1188  0191                     	;# 
  1189  0192                     	;# 
  1190  0193                     	;# 
  1191  0193                     	;# 
  1192  0194                     	;# 
  1193  0195                     	;# 
  1194  0196                     	;# 
  1195  0199                     	;# 
  1196  019A                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019D                     	;# 
  1201  019E                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020D                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0391                     	;# 
  1221  0392                     	;# 
  1222  0393                     	;# 
  1223  0394                     	;# 
  1224  0395                     	;# 
  1225  0396                     	;# 
  1226  0498                     	;# 
  1227  0498                     	;# 
  1228  0499                     	;# 
  1229  049A                     	;# 
  1230  049B                     	;# 
  1231  049B                     	;# 
  1232  049C                     	;# 
  1233  049E                     	;# 
  1234  049F                     	;# 
  1235  0611                     	;# 
  1236  0612                     	;# 
  1237  0613                     	;# 
  1238  0613                     	;# 
  1239  0614                     	;# 
  1240  0615                     	;# 
  1241  0616                     	;# 
  1242  0616                     	;# 
  1243  0617                     	;# 
  1244  0618                     	;# 
  1245  0619                     	;# 
  1246  0619                     	;# 
  1247  061A                     	;# 
  1248  061B                     	;# 
  1249  061C                     	;# 
  1250  061C                     	;# 
  1251  0691                     	;# 
  1252  0692                     	;# 
  1253  0693                     	;# 
  1254  0694                     	;# 
  1255  0695                     	;# 
  1256  0F0F                     	;# 
  1257  0F10                     	;# 
  1258  0F11                     	;# 
  1259  0F12                     	;# 
  1260  0F13                     	;# 
  1261  0F14                     	;# 
  1262  0F15                     	;# 
  1263  0F16                     	;# 
  1264  0F17                     	;# 
  1265  0F18                     	;# 
  1266  0F19                     	;# 
  1267  0F1A                     	;# 
  1268  0F1B                     	;# 
  1269  0F1C                     	;# 
  1270  0F1D                     	;# 
  1271  0F1E                     	;# 
  1272  0F1F                     	;# 
  1273  0F20                     	;# 
  1274  0F21                     	;# 
  1275  0F22                     	;# 
  1276  0F23                     	;# 
  1277  0F24                     	;# 
  1278  0F25                     	;# 
  1279  0F26                     	;# 
  1280  0F27                     	;# 
  1281  0F28                     	;# 
  1282  0F29                     	;# 
  1283  0F2A                     	;# 
  1284  0F2B                     	;# 
  1285  0F2C                     	;# 
  1286  0F2D                     	;# 
  1287  0F2E                     	;# 
  1288  0F2F                     	;# 
  1289  0F8C                     	;# 
  1290  0F8D                     	;# 
  1291  0F91                     	;# 
  1292  0F95                     	;# 
  1293  0F96                     	;# 
  1294  0F97                     	;# 
  1295  0F9C                     	;# 
  1296  0F9D                     	;# 
  1297  0F9E                     	;# 
  1298  0FE3                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310  0000                     	;# 
  1311  0001                     	;# 
  1312  0002                     	;# 
  1313  0003                     	;# 
  1314  0004                     	;# 
  1315  0005                     	;# 
  1316  0006                     	;# 
  1317  0007                     	;# 
  1318  0008                     	;# 
  1319  0009                     	;# 
  1320  000A                     	;# 
  1321  000B                     	;# 
  1322  000C                     	;# 
  1323  000D                     	;# 
  1324  000E                     	;# 
  1325  0011                     	;# 
  1326  0012                     	;# 
  1327  0013                     	;# 
  1328  0015                     	;# 
  1329  0016                     	;# 
  1330  0016                     	;# 
  1331  0017                     	;# 
  1332  0018                     	;# 
  1333  0019                     	;# 
  1334  001A                     	;# 
  1335  001B                     	;# 
  1336  001C                     	;# 
  1337  008C                     	;# 
  1338  008D                     	;# 
  1339  008E                     	;# 
  1340  0091                     	;# 
  1341  0092                     	;# 
  1342  0093                     	;# 
  1343  0095                     	;# 
  1344  0096                     	;# 
  1345  0097                     	;# 
  1346  0099                     	;# 
  1347  009A                     	;# 
  1348  009B                     	;# 
  1349  009B                     	;# 
  1350  009C                     	;# 
  1351  009D                     	;# 
  1352  009E                     	;# 
  1353  009F                     	;# 
  1354  010C                     	;# 
  1355  010D                     	;# 
  1356  010E                     	;# 
  1357  0111                     	;# 
  1358  0112                     	;# 
  1359  0113                     	;# 
  1360  0114                     	;# 
  1361  0115                     	;# 
  1362  0116                     	;# 
  1363  0117                     	;# 
  1364  0118                     	;# 
  1365  0119                     	;# 
  1366  011D                     	;# 
  1367  018C                     	;# 
  1368  018D                     	;# 
  1369  018E                     	;# 
  1370  0191                     	;# 
  1371  0191                     	;# 
  1372  0192                     	;# 
  1373  0193                     	;# 
  1374  0193                     	;# 
  1375  0194                     	;# 
  1376  0195                     	;# 
  1377  0196                     	;# 
  1378  0199                     	;# 
  1379  019A                     	;# 
  1380  019B                     	;# 
  1381  019B                     	;# 
  1382  019C                     	;# 
  1383  019D                     	;# 
  1384  019E                     	;# 
  1385  019F                     	;# 
  1386  020C                     	;# 
  1387  020D                     	;# 
  1388  0211                     	;# 
  1389  0211                     	;# 
  1390  0212                     	;# 
  1391  0212                     	;# 
  1392  0213                     	;# 
  1393  0213                     	;# 
  1394  0214                     	;# 
  1395  0214                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0216                     	;# 
  1400  0216                     	;# 
  1401  0217                     	;# 
  1402  0217                     	;# 
  1403  0391                     	;# 
  1404  0392                     	;# 
  1405  0393                     	;# 
  1406  0394                     	;# 
  1407  0395                     	;# 
  1408  0396                     	;# 
  1409  0498                     	;# 
  1410  0498                     	;# 
  1411  0499                     	;# 
  1412  049A                     	;# 
  1413  049B                     	;# 
  1414  049B                     	;# 
  1415  049C                     	;# 
  1416  049E                     	;# 
  1417  049F                     	;# 
  1418  0611                     	;# 
  1419  0612                     	;# 
  1420  0613                     	;# 
  1421  0613                     	;# 
  1422  0614                     	;# 
  1423  0615                     	;# 
  1424  0616                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  0619                     	;# 
  1430  061A                     	;# 
  1431  061B                     	;# 
  1432  061C                     	;# 
  1433  061C                     	;# 
  1434  0691                     	;# 
  1435  0692                     	;# 
  1436  0693                     	;# 
  1437  0694                     	;# 
  1438  0695                     	;# 
  1439  0F0F                     	;# 
  1440  0F10                     	;# 
  1441  0F11                     	;# 
  1442  0F12                     	;# 
  1443  0F13                     	;# 
  1444  0F14                     	;# 
  1445  0F15                     	;# 
  1446  0F16                     	;# 
  1447  0F17                     	;# 
  1448  0F18                     	;# 
  1449  0F19                     	;# 
  1450  0F1A                     	;# 
  1451  0F1B                     	;# 
  1452  0F1C                     	;# 
  1453  0F1D                     	;# 
  1454  0F1E                     	;# 
  1455  0F1F                     	;# 
  1456  0F20                     	;# 
  1457  0F21                     	;# 
  1458  0F22                     	;# 
  1459  0F23                     	;# 
  1460  0F24                     	;# 
  1461  0F25                     	;# 
  1462  0F26                     	;# 
  1463  0F27                     	;# 
  1464  0F28                     	;# 
  1465  0F29                     	;# 
  1466  0F2A                     	;# 
  1467  0F2B                     	;# 
  1468  0F2C                     	;# 
  1469  0F2D                     	;# 
  1470  0F2E                     	;# 
  1471  0F2F                     	;# 
  1472  0F8C                     	;# 
  1473  0F8D                     	;# 
  1474  0F91                     	;# 
  1475  0F95                     	;# 
  1476  0F96                     	;# 
  1477  0F97                     	;# 
  1478  0F9C                     	;# 
  1479  0F9D                     	;# 
  1480  0F9E                     	;# 
  1481  0FE3                     	;# 
  1482  0FE4                     	;# 
  1483  0FE5                     	;# 
  1484  0FE6                     	;# 
  1485  0FE7                     	;# 
  1486  0FE8                     	;# 
  1487  0FE9                     	;# 
  1488  0FEA                     	;# 
  1489  0FEB                     	;# 
  1490  0FED                     	;# 
  1491  0FEE                     	;# 
  1492  0FEF                     	;# 
  1493  0000                     	;# 
  1494  0001                     	;# 
  1495  0002                     	;# 
  1496  0003                     	;# 
  1497  0004                     	;# 
  1498  0005                     	;# 
  1499  0006                     	;# 
  1500  0007                     	;# 
  1501  0008                     	;# 
  1502  0009                     	;# 
  1503  000A                     	;# 
  1504  000B                     	;# 
  1505  000C                     	;# 
  1506  000D                     	;# 
  1507  000E                     	;# 
  1508  0011                     	;# 
  1509  0012                     	;# 
  1510  0013                     	;# 
  1511  0015                     	;# 
  1512  0016                     	;# 
  1513  0016                     	;# 
  1514  0017                     	;# 
  1515  0018                     	;# 
  1516  0019                     	;# 
  1517  001A                     	;# 
  1518  001B                     	;# 
  1519  001C                     	;# 
  1520  008C                     	;# 
  1521  008D                     	;# 
  1522  008E                     	;# 
  1523  0091                     	;# 
  1524  0092                     	;# 
  1525  0093                     	;# 
  1526  0095                     	;# 
  1527  0096                     	;# 
  1528  0097                     	;# 
  1529  0099                     	;# 
  1530  009A                     	;# 
  1531  009B                     	;# 
  1532  009B                     	;# 
  1533  009C                     	;# 
  1534  009D                     	;# 
  1535  009E                     	;# 
  1536  009F                     	;# 
  1537  010C                     	;# 
  1538  010D                     	;# 
  1539  010E                     	;# 
  1540  0111                     	;# 
  1541  0112                     	;# 
  1542  0113                     	;# 
  1543  0114                     	;# 
  1544  0115                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  0118                     	;# 
  1548  0119                     	;# 
  1549  011D                     	;# 
  1550  018C                     	;# 
  1551  018D                     	;# 
  1552  018E                     	;# 
  1553  0191                     	;# 
  1554  0191                     	;# 
  1555  0192                     	;# 
  1556  0193                     	;# 
  1557  0193                     	;# 
  1558  0194                     	;# 
  1559  0195                     	;# 
  1560  0196                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019F                     	;# 
  1569  020C                     	;# 
  1570  020D                     	;# 
  1571  0211                     	;# 
  1572  0211                     	;# 
  1573  0212                     	;# 
  1574  0212                     	;# 
  1575  0213                     	;# 
  1576  0213                     	;# 
  1577  0214                     	;# 
  1578  0214                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0216                     	;# 
  1583  0216                     	;# 
  1584  0217                     	;# 
  1585  0217                     	;# 
  1586  0391                     	;# 
  1587  0392                     	;# 
  1588  0393                     	;# 
  1589  0394                     	;# 
  1590  0395                     	;# 
  1591  0396                     	;# 
  1592  0498                     	;# 
  1593  0498                     	;# 
  1594  0499                     	;# 
  1595  049A                     	;# 
  1596  049B                     	;# 
  1597  049B                     	;# 
  1598  049C                     	;# 
  1599  049E                     	;# 
  1600  049F                     	;# 
  1601  0611                     	;# 
  1602  0612                     	;# 
  1603  0613                     	;# 
  1604  0613                     	;# 
  1605  0614                     	;# 
  1606  0615                     	;# 
  1607  0616                     	;# 
  1608  0616                     	;# 
  1609  0617                     	;# 
  1610  0618                     	;# 
  1611  0619                     	;# 
  1612  0619                     	;# 
  1613  061A                     	;# 
  1614  061B                     	;# 
  1615  061C                     	;# 
  1616  061C                     	;# 
  1617  0691                     	;# 
  1618  0692                     	;# 
  1619  0693                     	;# 
  1620  0694                     	;# 
  1621  0695                     	;# 
  1622  0F0F                     	;# 
  1623  0F10                     	;# 
  1624  0F11                     	;# 
  1625  0F12                     	;# 
  1626  0F13                     	;# 
  1627  0F14                     	;# 
  1628  0F15                     	;# 
  1629  0F16                     	;# 
  1630  0F17                     	;# 
  1631  0F18                     	;# 
  1632  0F19                     	;# 
  1633  0F1A                     	;# 
  1634  0F1B                     	;# 
  1635  0F1C                     	;# 
  1636  0F1D                     	;# 
  1637  0F1E                     	;# 
  1638  0F1F                     	;# 
  1639  0F20                     	;# 
  1640  0F21                     	;# 
  1641  0F22                     	;# 
  1642  0F23                     	;# 
  1643  0F24                     	;# 
  1644  0F25                     	;# 
  1645  0F26                     	;# 
  1646  0F27                     	;# 
  1647  0F28                     	;# 
  1648  0F29                     	;# 
  1649  0F2A                     	;# 
  1650  0F2B                     	;# 
  1651  0F2C                     	;# 
  1652  0F2D                     	;# 
  1653  0F2E                     	;# 
  1654  0F2F                     	;# 
  1655  0F8C                     	;# 
  1656  0F8D                     	;# 
  1657  0F91                     	;# 
  1658  0F95                     	;# 
  1659  0F96                     	;# 
  1660  0F97                     	;# 
  1661  0F9C                     	;# 
  1662  0F9D                     	;# 
  1663  0F9E                     	;# 
  1664  0FE3                     	;# 
  1665  0FE4                     	;# 
  1666  0FE5                     	;# 
  1667  0FE6                     	;# 
  1668  0FE7                     	;# 
  1669  0FE8                     	;# 
  1670  0FE9                     	;# 
  1671  0FEA                     	;# 
  1672  0FEB                     	;# 
  1673  0FED                     	;# 
  1674  0FEE                     	;# 
  1675  0FEF                     	;# 
  1676                           
  1677                           	psect	idataBANK0
  1678  0000                     __pidataBANK0:	
  1679  000B                     _INTCONbits	set	11
  1680  000C                     _PORTAbits	set	12
  1681  000E                     _PORTCbits	set	14
  1682  009D                     _ADCON0	set	157
  1683  009E                     _ADCON1	set	158
  1684  009F                     _ADCON2	set	159
  1685  0095                     _OPTION_REGbits	set	149
  1686  0099                     _OSCCON	set	153
  1687  008C                     _TRISAbits	set	140
  1688  008D                     _TRISBbits	set	141
  1689  008E                     _TRISCbits	set	142
  1690  0117                     _FVRCON	set	279
  1691  010C                     _LATAbits	set	268
  1692  010D                     _LATBbits	set	269
  1693  010E                     _LATCbits	set	270
  1694  018C                     _ANSELA	set	396
  1695  018D                     _ANSELB	set	397
  1696  018E                     _ANSELC	set	398
  1697  020C                     _WPUAbits	set	524
  1698                           
  1699                           	psect	cinit
  1700  000F                     start_initialization:	
  1701                           ; #config settings
  1702                           
  1703  000F                     __initialization:	
  1704                           
  1705                           ; Clear objects allocated to BANK0
  1706  000F  3020               	movlw	low __pbssBANK0
  1707  0010  0084               	movwf	4
  1708  0011  3000               	movlw	high __pbssBANK0
  1709  0012  0085               	movwf	5
  1710  0013  3032               	movlw	50
  1711  0014  3187  2716  3180   	fcall	clear_ram0
  1712                           
  1713                           ; Clear objects allocated to BANK1
  1714  0017  30A0               	movlw	low __pbssBANK1
  1715  0018  0084               	movwf	4
  1716  0019  3000               	movlw	high __pbssBANK1
  1717  001A  0085               	movwf	5
  1718  001B  3038               	movlw	56
  1719  001C  3187  2716  3180   	fcall	clear_ram0
  1720                           
  1721                           ;initializer for _delay
  1722  001F  30E8               	movlw	232
  1723  0020  00DD               	movwf	__pdataBANK0& (0+127)
  1724  0021  3003               	movlw	3
  1725  0022  00DE               	movwf	(__pdataBANK0+1)& (0+127)
  1726                           
  1727                           ;initializer for _rfRxCC
  1728  0023  302A               	movlw	_rfRxBf& (0+255)
  1729  0024  00DF               	movwf	(__pdataBANK0+2)& (0+127)
  1730  0025  3020               	movlw	32
  1731  0026  00E0               	movwf	(__pdataBANK0+3)& (0+127)
  1732  0027  3000               	movlw	0
  1733  0028  00E1               	movwf	(__pdataBANK0+4)& (0+127)
  1734  0029  00E2               	movwf	(__pdataBANK0+5)& (0+127)
  1735  002A                     end_of_initialization:	
  1736                           ;End of C runtime variable initialization code
  1737                           
  1738  002A                     __end_of__initialization:	
  1739  002A  0020               	movlb	0
  1740  002B  282C               	ljmp	_main	;jump to C main() function
  1741  002C                     __pmaintext:	
  1742 ;;
  1743 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1744 ;;
  1745 ;; *************** function _main *****************
  1746 ;; Defined at:
  1747 ;;		line 60 in file "../../../src/node/main.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;		None               void
  1754 ;; Registers used:
  1755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1756 ;; Tracked objects:
  1757 ;;		On entry : 17F/0
  1758 ;;		On exit  : 1F/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1761 ;;      Params:         0       0       0       0
  1762 ;;      Locals:         0       0       0       0
  1763 ;;      Temps:          0       0       0       0
  1764 ;;      Totals:         0       0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels required when called:   15
  1767 ;; This function calls:
  1768 ;;		_AdcInit
  1769 ;;		_ExtIntInit
  1770 ;;		_MRF49XAInit
  1771 ;;		_RfHalInit
  1772 ;;		_RfHalTickRxTh
  1773 ;;		_RfHalTickTxTh
  1774 ;;		_RfPacketsTickTh
  1775 ;;		_RfTrcvStatus
  1776 ;;		_SysInitGpio
  1777 ;;		_mrf49XaIsr
  1778 ;; This function is called by:
  1779 ;;		Startup code after reset
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           
  1784                           ;psect for function _main
  1785  002C                     _main:	
  1786                           
  1787                           ;main.c: 63: OSCCON = 0b01111000;
  1788                           
  1789                           ;incstack = 0
  1790                           ; Regs used in _main: [allreg]
  1791  002C  3078               	movlw	120
  1792  002D  0021               	movlb	1	; select bank1
  1793  002E  0099               	movwf	25	;volatile
  1794                           
  1795                           ;main.c: 65: SysInitGpio();
  1796  002F  239B  3180         	fcall	_SysInitGpio
  1797                           
  1798                           ;main.c: 66: AdcInit();
  1799  0031  205F  3180         	fcall	_AdcInit
  1800                           
  1801                           ;main.c: 68: ExtIntInit();
  1802  0033  206E  3180         	fcall	_ExtIntInit
  1803                           
  1804                           ;main.c: 70: MRF49XAInit();
  1805  0035  20A6  3180         	fcall	_MRF49XAInit
  1806                           
  1807                           ;main.c: 71: RfHalInit();
  1808  0037  2185  3180         	fcall	_RfHalInit
  1809  0039                     l2899:	
  1810                           
  1811                           ;main.c: 74: {
  1812                           ;main.c: 75: if (PORTAbits.RA2 == 0) mrf49XaIsr();
  1813  0039  190C               	btfsc	12,2	;volatile
  1814  003A  283E               	goto	l640
  1815  003B  3186  2651  3180   	fcall	_mrf49XaIsr
  1816  003E                     l640:	
  1817                           
  1818                           ;main.c: 77: RfHalTickRxTh(&halRxBfTh);
  1819  003E  304C               	movlw	_halRxBfTh& (0+255)
  1820  003F  21AF  3180         	fcall	_RfHalTickRxTh
  1821                           
  1822                           ;main.c: 78: RfHalTickTxTh(&halTxBfTh);
  1823  0041  304E               	movlw	_halTxBfTh& (0+255)
  1824  0042  2339               	fcall	_RfHalTickTxTh
  1825                           
  1826                           ;main.c: 80: RfPacketsTickTh(&halPkTh);
  1827  0043  304A               	movlw	_halPkTh& (0+255)
  1828  0044  3185  2591  3180   	fcall	_RfPacketsTickTh
  1829                           
  1830                           ;main.c: 82: RfTrcvStatus();
  1831  0047  22F7  3180         	fcall	_RfTrcvStatus
  1832                           
  1833                           ;main.c: 84: delay=1000;
  1834  0049  30E8               	movlw	232
  1835  004A  0020               	movlb	0	; select bank0
  1836  004B  00DD               	movwf	_delay
  1837  004C  3003               	movlw	3
  1838  004D  00DE               	movwf	_delay+1
  1839                           
  1840                           ;main.c: 85: isr = 0;
  1841  004E  01A9               	clrf	_isr	;volatile
  1842                           
  1843                           ;main.c: 86: while(delay-- > 0 && isr == 0) asm("nop");;
  1844  004F  2851               	goto	l2911
  1845  0050                     l642:	
  1846  0050  0000               	nop	;# 
  1847  0051                     l2911:	
  1848  0051  3001               	movlw	1
  1849  0052  0020               	movlb	0	; select bank0
  1850  0053  02DD               	subwf	_delay,f
  1851  0054  3000               	movlw	0
  1852  0055  3BDE               	subwfb	_delay+1,f
  1853  0056  0A5D               	incf	_delay,w
  1854  0057  1903               	skipnz
  1855  0058  0A5E               	incf	_delay+1,w
  1856  0059  1903               	skipnz
  1857  005A  2839               	goto	l2899
  1858  005B  0829               	movf	_isr,w	;volatile
  1859  005C  1903               	btfsc	3,2
  1860  005D  2850               	goto	l642
  1861  005E  2839               	goto	l2899
  1862  005F                     __end_of_main:	
  1863  005F                     __ptext38:	
  1864 ;; *************** function _AdcInit *****************
  1865 ;; Defined at:
  1866 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;		None               void
  1873 ;; Registers used:
  1874 ;;		wreg, status,2
  1875 ;; Tracked objects:
  1876 ;;		On entry : 17F/2
  1877 ;;		On exit  : 17F/1
  1878 ;;		Unchanged: 160/0
  1879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1880 ;;      Params:         0       0       0       0
  1881 ;;      Locals:         0       0       0       0
  1882 ;;      Temps:          0       0       0       0
  1883 ;;      Totals:         0       0       0       0
  1884 ;;Total ram usage:        0 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    8
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_main
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           
  1895                           ;psect for function _AdcInit
  1896  005F                     _AdcInit:	
  1897                           
  1898                           ;adc16.c: 6: ANSELA = 0;
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _AdcInit: [wreg+status,2]
  1902  005F  0023               	movlb	3	; select bank3
  1903  0060  018C               	clrf	12	;volatile
  1904                           
  1905                           ;adc16.c: 7: ANSELB = 0;
  1906  0061  018D               	clrf	13	;volatile
  1907                           
  1908                           ;adc16.c: 8: ANSELC = 0;
  1909  0062  018E               	clrf	14	;volatile
  1910                           
  1911                           ;adc16.c: 10: FVRCON = 0b11100001;
  1912  0063  30E1               	movlw	225
  1913  0064  0022               	movlb	2	; select bank2
  1914  0065  0097               	movwf	23	;volatile
  1915                           
  1916                           ;adc16.c: 12: ADCON2 = 0b00000000;
  1917  0066  0021               	movlb	1	; select bank1
  1918  0067  019F               	clrf	31	;volatile
  1919                           
  1920                           ;adc16.c: 13: ADCON1 = 0b11110000;
  1921  0068  30F0               	movlw	240
  1922  0069  009E               	movwf	30	;volatile
  1923                           
  1924                           ;adc16.c: 14: ADCON0 = 0b00000000;
  1925  006A  019D               	clrf	29	;volatile
  1926                           
  1927                           ;adc16.c: 16: ADCON0 = 0b00010011;
  1928  006B  3013               	movlw	19
  1929  006C  009D               	movwf	29	;volatile
  1930  006D  0008               	return
  1931  006E                     __end_of_AdcInit:	
  1932  006E                     __ptext37:	
  1933 ;; *************** function _ExtIntInit *****************
  1934 ;; Defined at:
  1935 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;		None               void
  1942 ;; Registers used:
  1943 ;;		None
  1944 ;; Tracked objects:
  1945 ;;		On entry : 17F/1
  1946 ;;		On exit  : 17F/1
  1947 ;;		Unchanged: 160/0
  1948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1949 ;;      Params:         0       0       0       0
  1950 ;;      Locals:         0       0       0       0
  1951 ;;      Temps:          0       0       0       0
  1952 ;;      Totals:         0       0       0       0
  1953 ;;Total ram usage:        0 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    8
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           
  1964                           ;psect for function _ExtIntInit
  1965  006E                     _ExtIntInit:	
  1966                           
  1967                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  1968                           
  1969                           ;incstack = 0
  1970                           ; Regs used in _ExtIntInit: []
  1971  006E  1315               	bcf	21,6	;volatile
  1972                           
  1973                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  1974  006F  108B               	bcf	11,1	;volatile
  1975                           
  1976                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  1977  0070  160B               	bsf	11,4	;volatile
  1978                           
  1979                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  1980  0071  178B               	bsf	11,7	;volatile
  1981  0072  0008               	return
  1982  0073                     __end_of_ExtIntInit:	
  1983  0073                     __ptext33:	
  1984 ;; *************** function _RfTrcvSetup *****************
  1985 ;; Defined at:
  1986 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  tx              1    wreg     unsigned char 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  tx              1    4[BANK0 ] unsigned char 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;		None               void
  1993 ;; Registers used:
  1994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 1D/0
  1997 ;;		On exit  : 1F/2
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2000 ;;      Params:         0       0       0       0
  2001 ;;      Locals:         0       1       0       0
  2002 ;;      Temps:          0       0       0       0
  2003 ;;      Totals:         0       1       0       0
  2004 ;;Total ram usage:        1 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:   11
  2007 ;; This function calls:
  2008 ;;		_MRF49XACommand
  2009 ;;		_RfTrcvPut
  2010 ;; This function is called by:
  2011 ;;		_MRF49XAInit
  2012 ;;		_RfTrcvMode
  2013 ;;		_mrf49XaIsr
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           
  2018                           ;psect for function _RfTrcvSetup
  2019  0073                     _RfTrcvSetup:	
  2020                           
  2021                           ;incstack = 0
  2022                           ; Regs used in _RfTrcvSetup: [allreg]
  2023                           ;RfTrcvSetup@tx stored from wreg
  2024  0073  0020               	movlb	0	; select bank0
  2025  0074  00D6               	movwf	RfTrcvSetup@tx
  2026                           
  2027                           ;mrf49xa.c: 63: if (tx)
  2028  0075  0856               	movf	RfTrcvSetup@tx,w
  2029  0076  1903               	btfsc	3,2
  2030  0077  2889               	goto	l2391
  2031                           
  2032                           ;mrf49xa.c: 64: {
  2033                           ;mrf49xa.c: 65: MRF49XACommand(0x8200);
  2034  0078  3082               	movlw	130
  2035  0079  01D3               	clrf	MRF49XACommand@cmd
  2036  007A  00D4               	movwf	MRF49XACommand@cmd+1
  2037  007B  2125  3180         	fcall	_MRF49XACommand
  2038                           
  2039                           ;mrf49xa.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  2040  007D  30A8               	movlw	168
  2041  007E  23CF  3180         	fcall	PL138	;call to abstracted procedure
  2042  0080  2125  3180         	fcall	_MRF49XACommand
  2043                           
  2044                           ;mrf49xa.c: 67: MRF49XACommand(0x8200 |0x0020);
  2045  0082  3020               	movlw	32
  2046  0083  23D4  3180         	fcall	PL140	;call to abstracted procedure
  2047  0085  2125               	fcall	_MRF49XACommand
  2048                           
  2049                           ;mrf49xa.c: 70: RfTrcvPut(0x55);
  2050  0086  3055               	movlw	85
  2051  0087  3186  2EBF         	ljmp	_RfTrcvPut
  2052  0089                     l2391:	
  2053                           ;mrf49xa.c: 71: }
  2054                           
  2055                           
  2056                           ;mrf49xa.c: 72: else
  2057                           ;mrf49xa.c: 73: {
  2058                           ;mrf49xa.c: 74: MRF49XACommand(0x8200);
  2059  0089  3000               	movlw	0
  2060  008A  00D3               	movwf	MRF49XACommand@cmd
  2061  008B  3082               	movlw	130
  2062  008C  00D4               	movwf	MRF49XACommand@cmd+1
  2063  008D  2125  3180         	fcall	_MRF49XACommand
  2064                           
  2065                           ;mrf49xa.c: 75: MRF49XACommand(0xCA81);
  2066  008F  3081               	movlw	129
  2067  0090  23CA  3180         	fcall	PL136	;call to abstracted procedure
  2068  0092  2125  3180         	fcall	_MRF49XACommand
  2069                           
  2070                           ;mrf49xa.c: 76: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  2071  0094  3028               	movlw	40
  2072  0095  23CF  3180         	fcall	PL138	;call to abstracted procedure
  2073  0097  2125  3180         	fcall	_MRF49XACommand
  2074                           
  2075                           ;mrf49xa.c: 77: MRF49XACommand(0x8200 | 0x0080);
  2076  0099  3080               	movlw	128
  2077  009A  23D4  3180         	fcall	PL140	;call to abstracted procedure
  2078  009C  2125  3180         	fcall	_MRF49XACommand
  2079                           
  2080                           ;mrf49xa.c: 78: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  2081  009E  3068               	movlw	104
  2082  009F  23CF  3180         	fcall	PL138	;call to abstracted procedure
  2083  00A1  2125  3180         	fcall	_MRF49XACommand
  2084                           
  2085                           ;mrf49xa.c: 79: MRF49XACommand(0xCA81 | 0x0002);
  2086  00A3  23BF  3180         	fcall	PL132	;call to abstracted procedure
  2087  00A5  2925               	ljmp	l2289
  2088  00A6                     __end_of_RfTrcvSetup:	
  2089  00A6                     __ptext32:	
  2090 ;; *************** function _MRF49XAInit *****************
  2091 ;; Defined at:
  2092 ;;		line 83 in file "../../../src/devices/mrf49xa.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  j               1    6[BANK0 ] unsigned char 
  2097 ;;  i               1    5[BANK0 ] unsigned char 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;		None               void
  2100 ;; Registers used:
  2101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 17F/1
  2104 ;;		On exit  : 1F/4
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2107 ;;      Params:         0       0       0       0
  2108 ;;      Locals:         0       2       0       0
  2109 ;;      Temps:          0       0       0       0
  2110 ;;      Totals:         0       2       0       0
  2111 ;;Total ram usage:        2 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:   12
  2114 ;; This function calls:
  2115 ;;		_MRF49XACommand
  2116 ;;		_RfTrcvSetup
  2117 ;; This function is called by:
  2118 ;;		_main
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           
  2123                           ;psect for function _MRF49XAInit
  2124  00A6                     _MRF49XAInit:	
  2125                           
  2126                           ;mrf49xa.c: 86: UI08_t i, j;
  2127                           ;mrf49xa.c: 89: LATCbits.LATC1 = 1;
  2128                           
  2129                           ;incstack = 0
  2130                           ; Regs used in _MRF49XAInit: [allreg]
  2131  00A6  0022               	movlb	2	; select bank2
  2132  00A7  148E               	bsf	14,1	;volatile
  2133                           
  2134                           ;mrf49xa.c: 90: LATAbits.LATA4 = 0;
  2135  00A8  120C               	bcf	12,4	;volatile
  2136                           
  2137                           ;mrf49xa.c: 91: LATAbits.LATA5 = 0;
  2138  00A9  128C               	bcf	12,5	;volatile
  2139  00AA  0000               	nop	;# 
  2140                           
  2141                           ;mrf49xa.c: 93: LATAbits.LATA4 = 1;
  2142  00AB  0022               	movlb	2	; select bank2
  2143  00AC  160C               	bsf	12,4	;volatile
  2144                           
  2145                           ;mrf49xa.c: 94: LATAbits.LATA5 = 1;
  2146  00AD  168C               	bsf	12,5	;volatile
  2147                           
  2148                           ;mrf49xa.c: 96: LATCbits.LATC4 = 1;
  2149  00AE  160E               	bsf	14,4	;volatile
  2150                           
  2151                           ;mrf49xa.c: 101: for (i = 0; i < 250; i++) for (j = 0; j < 250; j++) asm ("nop");
  2152  00AF  0020               	movlb	0	; select bank0
  2153  00B0  01D7               	clrf	MRF49XAInit@i
  2154  00B1                     l2401:	
  2155  00B1  01D8               	clrf	MRF49XAInit@j
  2156  00B2                     l191:	
  2157  00B2  0000               	nop	;# 
  2158  00B3  23E3  3180         	fcall	PL146	;call to abstracted procedure
  2159  00B5  1C03               	skipc
  2160  00B6  28B2               	goto	l191
  2161  00B7  30FA               	movlw	250
  2162  00B8  0AD7               	incf	MRF49XAInit@i,f
  2163  00B9  0257               	subwf	MRF49XAInit@i,w
  2164  00BA  1C03               	skipc
  2165  00BB  28B1               	goto	l2401
  2166                           
  2167                           ;mrf49xa.c: 104: MRF49XACommand(0xCA81);
  2168  00BC  3081               	movlw	129
  2169  00BD  00D3               	movwf	MRF49XACommand@cmd
  2170  00BE  30CA               	movlw	202
  2171  00BF  00D4               	movwf	MRF49XACommand@cmd+1
  2172  00C0  2125  3180         	fcall	_MRF49XACommand
  2173                           
  2174                           ;mrf49xa.c: 105: MRF49XACommand(0xCA81 | 0x0002);
  2175  00C2  23BF  3180         	fcall	PL132	;call to abstracted procedure
  2176  00C4  2125  3180         	fcall	_MRF49XACommand
  2177                           
  2178                           ;mrf49xa.c: 106: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  2179  00C6  3028               	movlw	40
  2180  00C7  23CF  3180         	fcall	PL138	;call to abstracted procedure
  2181  00C9  2125  3180         	fcall	_MRF49XACommand
  2182                           
  2183                           ;mrf49xa.c: 107: MRF49XACommand(0xC4D7);
  2184  00CB  30D7               	movlw	215
  2185  00CC  0020               	movlb	0	; select bank0
  2186  00CD  00D3               	movwf	MRF49XACommand@cmd
  2187  00CE  30C4               	movlw	196
  2188  00CF  00D4               	movwf	MRF49XACommand@cmd+1
  2189  00D0  2125  3180         	fcall	_MRF49XACommand
  2190                           
  2191                           ;mrf49xa.c: 108: MRF49XACommand(0xA860);
  2192  00D2  3060               	movlw	96
  2193  00D3  0020               	movlb	0	; select bank0
  2194  00D4  00D3               	movwf	MRF49XACommand@cmd
  2195  00D5  30A8               	movlw	168
  2196  00D6  00D4               	movwf	MRF49XACommand@cmd+1
  2197  00D7  2125  3180         	fcall	_MRF49XACommand
  2198                           
  2199                           ;mrf49xa.c: 109: MRF49XACommand(0xC611);
  2200  00D9  3011               	movlw	17
  2201  00DA  0020               	movlb	0	; select bank0
  2202  00DB  00D3               	movwf	MRF49XACommand@cmd
  2203  00DC  30C6               	movlw	198
  2204  00DD  00D4               	movwf	MRF49XACommand@cmd+1
  2205  00DE  2125  3180         	fcall	_MRF49XACommand
  2206                           
  2207                           ;mrf49xa.c: 110: MRF49XACommand(0x8200);
  2208  00E0  3000               	movlw	0
  2209  00E1  23D4  3180         	fcall	PL140	;call to abstracted procedure
  2210  00E3  2125  3180         	fcall	_MRF49XACommand
  2211                           
  2212                           ;mrf49xa.c: 111: MRF49XACommand((0x9460 | 0x0000 | 0x0003));
  2213  00E5  3063               	movlw	99
  2214  00E6  0020               	movlb	0	; select bank0
  2215  00E7  00D3               	movwf	MRF49XACommand@cmd
  2216  00E8  3094               	movlw	148
  2217  00E9  00D4               	movwf	MRF49XACommand@cmd+1
  2218  00EA  2125  3180         	fcall	_MRF49XACommand
  2219                           
  2220                           ;mrf49xa.c: 112: MRF49XACommand(0x9890);
  2221  00EC  3090               	movlw	144
  2222  00ED  0020               	movlb	0	; select bank0
  2223  00EE  00D3               	movwf	MRF49XACommand@cmd
  2224  00EF  3098               	movlw	152
  2225  00F0  00D4               	movwf	MRF49XACommand@cmd+1
  2226  00F1  2125  3180         	fcall	_MRF49XACommand
  2227                           
  2228                           ;mrf49xa.c: 113: MRF49XACommand(0xC2AC);
  2229  00F3  30AC               	movlw	172
  2230  00F4  0020               	movlb	0	; select bank0
  2231  00F5  00D3               	movwf	MRF49XACommand@cmd
  2232  00F6  30C2               	movlw	194
  2233  00F7  00D4               	movwf	MRF49XACommand@cmd+1
  2234  00F8  2125  3180         	fcall	_MRF49XACommand
  2235                           
  2236                           ;mrf49xa.c: 114: MRF49XACommand(0x8200 | 0x0020);
  2237  00FA  3020               	movlw	32
  2238  00FB  23D4  3180         	fcall	PL140	;call to abstracted procedure
  2239  00FD  2125  3180         	fcall	_MRF49XACommand
  2240                           
  2241                           ;mrf49xa.c: 119: for (i = 0; i < 250; i++) for (j = 0; j < 250; j++) asm ("nop");
  2242  00FF  0020               	movlb	0	; select bank0
  2243  0100  01D7               	clrf	MRF49XAInit@i
  2244  0101                     l2423:	
  2245  0101  01D8               	clrf	MRF49XAInit@j
  2246  0102                     l195:	
  2247  0102  0000               	nop	;# 
  2248  0103  23E3  3180         	fcall	PL146	;call to abstracted procedure
  2249  0105  1C03               	skipc
  2250  0106  2902               	goto	l195
  2251  0107  30FA               	movlw	250
  2252  0108  0AD7               	incf	MRF49XAInit@i,f
  2253  0109  0257               	subwf	MRF49XAInit@i,w
  2254  010A  1C03               	skipc
  2255  010B  2901               	goto	l2423
  2256                           
  2257                           ;mrf49xa.c: 122: MRF49XACommand(0x8200 | 0x0080);
  2258  010C  3080               	movlw	128
  2259  010D  00D3               	movwf	MRF49XACommand@cmd
  2260  010E  3082               	movlw	130
  2261  010F  00D4               	movwf	MRF49XACommand@cmd+1
  2262  0110  2125  3180         	fcall	_MRF49XACommand
  2263                           
  2264                           ;mrf49xa.c: 123: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  2265  0112  3068               	movlw	104
  2266  0113  23CF  3180         	fcall	PL138	;call to abstracted procedure
  2267  0115  2125  3180         	fcall	_MRF49XACommand
  2268                           
  2269                           ;mrf49xa.c: 124: MRF49XACommand(0xCA81);
  2270  0117  3081               	movlw	129
  2271  0118  23CA  3180         	fcall	PL136	;call to abstracted procedure
  2272  011A  2125  3180         	fcall	_MRF49XACommand
  2273                           
  2274                           ;mrf49xa.c: 125: MRF49XACommand(0xCA81 | 0x0002);
  2275  011C  23BF  3180         	fcall	PL132	;call to abstracted procedure
  2276  011E  2125  3180         	fcall	_MRF49XACommand
  2277                           
  2278                           ;mrf49xa.c: 127: RfTrcvSetup(0);
  2279  0120  3000               	movlw	0
  2280  0121  2073               	fcall	_RfTrcvSetup
  2281                           
  2282                           ;mrf49xa.c: 135: WPUAbits.WPUA2 = 1;
  2283  0122  0024               	movlb	4	; select bank4
  2284  0123  150C               	bsf	12,2	;volatile
  2285  0124  0008               	return
  2286  0125                     __end_of_MRF49XAInit:	
  2287  0125                     __ptext35:	
  2288 ;; *************** function _MRF49XACommand *****************
  2289 ;; Defined at:
  2290 ;;		line 30 in file "../../../src/devices/mrf49xa.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  cmd             2    1[BANK0 ] unsigned int 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;		None               void
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, pclath, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 1F/0
  2301 ;;		On exit  : 1F/2
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2304 ;;      Params:         0       2       0       0
  2305 ;;      Locals:         0       0       0       0
  2306 ;;      Temps:          0       0       0       0
  2307 ;;      Totals:         0       2       0       0
  2308 ;;Total ram usage:        2 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    9
  2311 ;; This function calls:
  2312 ;;		_SPI_Write
  2313 ;; This function is called by:
  2314 ;;		_RfTrcvPut
  2315 ;;		_RfTrcvSetup
  2316 ;;		_MRF49XAInit
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           
  2321                           ;psect for function _MRF49XACommand
  2322  0125                     _MRF49XACommand:	
  2323  0125                     l2289:	
  2324                           ;incstack = 0
  2325                           ; Regs used in _MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  2326                           
  2327                           
  2328                           ;mrf49xa.c: 32: LATCbits.LATC6 = 0;;
  2329  0125  0022               	movlb	2	; select bank2
  2330  0126  130E               	bcf	14,6	;volatile
  2331                           
  2332                           ;mrf49xa.c: 34: SPI_Write((cmd & 0xFF00) >> 8);
  2333  0127  0020               	movlb	0	; select bank0
  2334  0128  0854               	movf	MRF49XACommand@cmd+1,w
  2335  0129  2130  3180         	fcall	_SPI_Write
  2336                           
  2337                           ;mrf49xa.c: 35: SPI_Write((cmd & 0x00FF));
  2338  012B  0020               	movlb	0	; select bank0
  2339  012C  0853               	movf	MRF49XACommand@cmd,w
  2340  012D  2130               	fcall	_SPI_Write
  2341                           
  2342                           ;mrf49xa.c: 37: LATCbits.LATC6 = 1;;
  2343  012E  170E               	bsf	14,6	;volatile
  2344  012F  0008               	return
  2345  0130                     __end_of_MRF49XACommand:	
  2346  0130                     __ptext36:	
  2347 ;; *************** function _SPI_Write *****************
  2348 ;; Defined at:
  2349 ;;		line 191 in file "../../../src/devices/mrf49xa.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  data            1    wreg     unsigned char 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  data            1    0[BANK0 ] unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		wreg
  2358 ;; Tracked objects:
  2359 ;;		On entry : 1D/2
  2360 ;;		On exit  : 1F/2
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2363 ;;      Params:         0       0       0       0
  2364 ;;      Locals:         0       1       0       0
  2365 ;;      Temps:          0       0       0       0
  2366 ;;      Totals:         0       1       0       0
  2367 ;;Total ram usage:        1 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    8
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_RfTrcvGet
  2374 ;;		_MRF49XACommand
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           
  2379                           ;psect for function _SPI_Write
  2380  0130                     _SPI_Write:	
  2381                           
  2382                           ;incstack = 0
  2383                           ; Regs used in _SPI_Write: [wreg]
  2384                           ;SPI_Write@data stored from wreg
  2385  0130  0020               	movlb	0	; select bank0
  2386  0131  00D2               	movwf	SPI_Write@data
  2387                           
  2388                           ;mrf49xa.c: 198: LATCbits.LATC7 = 0;
  2389  0132  0022               	movlb	2	; select bank2
  2390  0133  138E               	bcf	14,7	;volatile
  2391  0134  0020               	movlb	0	; select bank0
  2392  0135  1FD2               	btfss	SPI_Write@data,7
  2393  0136  293A               	goto	l228
  2394  0137  0022               	movlb	2	; select bank2
  2395  0138  178D               	bsf	13,7	;volatile
  2396  0139  293C               	goto	l229
  2397  013A                     l228:	
  2398  013A  0022               	movlb	2	; select bank2
  2399  013B  138D               	bcf	13,7	;volatile
  2400  013C                     l229:	
  2401  013C  178E               	bsf	14,7	;volatile
  2402  013D  138E               	bcf	14,7	;volatile
  2403  013E  0020               	movlb	0	; select bank0
  2404  013F  1F52               	btfss	SPI_Write@data,6
  2405  0140  2944               	goto	l232
  2406  0141  0022               	movlb	2	; select bank2
  2407  0142  178D               	bsf	13,7	;volatile
  2408  0143  2946               	goto	l233
  2409  0144                     l232:	
  2410  0144  0022               	movlb	2	; select bank2
  2411  0145  138D               	bcf	13,7	;volatile
  2412  0146                     l233:	
  2413  0146  178E               	bsf	14,7	;volatile
  2414  0147  138E               	bcf	14,7	;volatile
  2415  0148  0020               	movlb	0	; select bank0
  2416  0149  1ED2               	btfss	SPI_Write@data,5
  2417  014A  294E               	goto	l236
  2418  014B  0022               	movlb	2	; select bank2
  2419  014C  178D               	bsf	13,7	;volatile
  2420  014D  2950               	goto	l237
  2421  014E                     l236:	
  2422  014E  0022               	movlb	2	; select bank2
  2423  014F  138D               	bcf	13,7	;volatile
  2424  0150                     l237:	
  2425  0150  178E               	bsf	14,7	;volatile
  2426  0151  138E               	bcf	14,7	;volatile
  2427  0152  0020               	movlb	0	; select bank0
  2428  0153  1E52               	btfss	SPI_Write@data,4
  2429  0154  2958               	goto	l240
  2430  0155  0022               	movlb	2	; select bank2
  2431  0156  178D               	bsf	13,7	;volatile
  2432  0157  295A               	goto	l241
  2433  0158                     l240:	
  2434  0158  0022               	movlb	2	; select bank2
  2435  0159  138D               	bcf	13,7	;volatile
  2436  015A                     l241:	
  2437  015A  178E               	bsf	14,7	;volatile
  2438  015B  138E               	bcf	14,7	;volatile
  2439  015C  0020               	movlb	0	; select bank0
  2440  015D  1DD2               	btfss	SPI_Write@data,3
  2441  015E  2962               	goto	l244
  2442  015F  0022               	movlb	2	; select bank2
  2443  0160  178D               	bsf	13,7	;volatile
  2444  0161  2964               	goto	l245
  2445  0162                     l244:	
  2446  0162  0022               	movlb	2	; select bank2
  2447  0163  138D               	bcf	13,7	;volatile
  2448  0164                     l245:	
  2449  0164  178E               	bsf	14,7	;volatile
  2450  0165  138E               	bcf	14,7	;volatile
  2451  0166  0020               	movlb	0	; select bank0
  2452  0167  1D52               	btfss	SPI_Write@data,2
  2453  0168  296C               	goto	l248
  2454  0169  0022               	movlb	2	; select bank2
  2455  016A  178D               	bsf	13,7	;volatile
  2456  016B  296E               	goto	l249
  2457  016C                     l248:	
  2458  016C  0022               	movlb	2	; select bank2
  2459  016D  138D               	bcf	13,7	;volatile
  2460  016E                     l249:	
  2461  016E  178E               	bsf	14,7	;volatile
  2462  016F  138E               	bcf	14,7	;volatile
  2463  0170  0020               	movlb	0	; select bank0
  2464  0171  1CD2               	btfss	SPI_Write@data,1
  2465  0172  2976               	goto	l252
  2466  0173  0022               	movlb	2	; select bank2
  2467  0174  178D               	bsf	13,7	;volatile
  2468  0175  2978               	goto	l253
  2469  0176                     l252:	
  2470  0176  0022               	movlb	2	; select bank2
  2471  0177  138D               	bcf	13,7	;volatile
  2472  0178                     l253:	
  2473  0178  178E               	bsf	14,7	;volatile
  2474  0179  138E               	bcf	14,7	;volatile
  2475  017A  0020               	movlb	0	; select bank0
  2476  017B  1C52               	btfss	SPI_Write@data,0
  2477  017C  2980               	goto	l256
  2478  017D  0022               	movlb	2	; select bank2
  2479  017E  178D               	bsf	13,7	;volatile
  2480  017F  2982               	goto	l257
  2481  0180                     l256:	
  2482  0180  0022               	movlb	2	; select bank2
  2483  0181  138D               	bcf	13,7	;volatile
  2484  0182                     l257:	
  2485  0182  178E               	bsf	14,7	;volatile
  2486  0183  138E               	bcf	14,7	;volatile
  2487  0184  0008               	return
  2488  0185                     __end_of_SPI_Write:	
  2489  0185                     __ptext28:	
  2490 ;; *************** function _RfHalInit *****************
  2491 ;; Defined at:
  2492 ;;		line 36 in file "../../../src/rfstack/hal.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;		None
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;  i               1    6[BANK0 ] unsigned char 
  2497 ;; Return value:  Size  Location     Type
  2498 ;;		None               void
  2499 ;; Registers used:
  2500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2501 ;; Tracked objects:
  2502 ;;		On entry : 1F/4
  2503 ;;		On exit  : 1F/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2506 ;;      Params:         0       0       0       0
  2507 ;;      Locals:         0       1       0       0
  2508 ;;      Temps:          0       0       0       0
  2509 ;;      Totals:         0       1       0       0
  2510 ;;Total ram usage:        1 bytes
  2511 ;; Hardware stack levels used:    1
  2512 ;; Hardware stack levels required when called:   13
  2513 ;; This function calls:
  2514 ;;		_RfTrcvMode
  2515 ;;		__CCBufInit
  2516 ;; This function is called by:
  2517 ;;		_main
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           
  2522                           ;psect for function _RfHalInit
  2523  0185                     _RfHalInit:	
  2524                           
  2525                           ;hal.c: 39: rfStatus.isr.byteCounter = 0;
  2526                           
  2527                           ;incstack = 0
  2528                           ; Regs used in _RfHalInit: [allreg]
  2529  0185  0020               	movlb	0	; select bank0
  2530  0186  30A0               	movlw	_rfPackets& (0+255)
  2531  0187  01A0               	clrf	_rfStatus
  2532                           
  2533                           ;hal.c: 40: rfStatus.isr.txPacket = rfPackets;
  2534  0188  00A1               	movwf	_rfStatus+1
  2535                           
  2536                           ;hal.c: 41: rfStatus.isr.state = RX_RECV;
  2537  0189  01A2               	clrf	_rfStatus+2
  2538                           
  2539                           ;hal.c: 44: for (i = 0; i < 2 * sizeof(RfTransceiverPacket_t); i++)
  2540  018A  01D8               	clrf	RfHalInit@i
  2541  018B                     l2455:	
  2542                           
  2543                           ;hal.c: 45: ((UI08_t*) rfPackets)[i] = 0;
  2544  018B  0858               	movf	RfHalInit@i,w
  2545  018C  3EA0               	addlw	_rfPackets& (0+255)
  2546  018D  0086               	movwf	6
  2547  018E  3038               	movlw	56
  2548  018F  0187               	clrf	7
  2549  0190  0181               	clrf	1
  2550  0191  0AD8               	incf	RfHalInit@i,f
  2551  0192  0258               	subwf	RfHalInit@i,w
  2552  0193  1C03               	skipc
  2553  0194  298B               	goto	l2455
  2554                           
  2555                           ;psect for function __CCBufInit
  2556                           
  2557                           ;hal.c: 47: _CCBufInit();
  2558  0195                     i10L__CCBufInit:	
  2559  0195                     i10Ll2467:	
  2560  0195                     i11L__ptext30:	
  2561                           ;ccbuf_static.c: 7: _CCBufReset();
  2562                           
  2563                           
  2564                           ;psect for function __CCBufReset
  2565  0195                     i11L__CCBufReset:	
  2566  0195                     i11Ll2853:	
  2567  0195  0860               	movf	_rfRxCC+1,w
  2568  0196  00D3               	movwf	__CCBufReset@i
  2569  0197  299F               	ljmp	i11Ll2859
  2570  0198                     i11Ll2855:	
  2571                           
  2572                           ;ccbuf_static.c: 15: {
  2573                           ;ccbuf_static.c: 16: i--;
  2574  0198  03D3               	decf	__CCBufReset@i,f
  2575  0199                     i11Ll2857:	
  2576  0199  0853               	movf	__CCBufReset@i,w
  2577  019A  075F               	addwf	_rfRxCC,w
  2578  019B  00D2               	movwf	??__CCBufReset
  2579  019C  0086               	movwf	6
  2580  019D  0187               	clrf	7
  2581  019E  0181               	clrf	1
  2582  019F                     i11Ll2859:	
  2583  019F  08D3               	movf	__CCBufReset@i,f
  2584  01A0  1D03               	btfss	3,2
  2585  01A1  2998               	ljmp	i11Ll2855
  2586  01A2  29A4               	ljmp	i11Ll2861
  2587  01A3                     i11Lu2091:	
  2588  01A3  2998               	ljmp	i11Ll2855
  2589  01A4                     i11Lu2090:	
  2590  01A4                     i11Ll2861:	
  2591  01A4  0860               	movf	_rfRxCC+1,w
  2592  01A5  3EFF               	addlw	255
  2593  01A6  00E2               	movwf	_rfRxCC+3
  2594  01A7                     i11Ll2863:	
  2595  01A7  01E1               	clrf	_rfRxCC+2
  2596  01A8                     i11Ll515:	
  2597  01A8  29A9               	ljmp	iL80
  2598  01A9                     i10Ll509:	
  2599  01A9                     iL80:	
  2600  01A9  3000               	movlw	0
  2601                           
  2602                           ;hal.c: 49: (&halRxBfTh)->lc = 0;;
  2603  01AA  01CC               	clrf	_halRxBfTh
  2604  01AB  01CD               	clrf	_halRxBfTh+1
  2605  01AC  01CA               	clrf	_halPkTh
  2606  01AD  01CB               	clrf	_halPkTh+1
  2607                           
  2608                           ;hal.c: 52: RfTrcvMode(0);
  2609  01AE  2B7A               	ljmp	_RfTrcvMode
  2610  01AF                     __end_of_RfHalInit:	
  2611  01AF                     __ptext18:	
  2612 ;; *************** function _RfHalTickRxTh *****************
  2613 ;; Defined at:
  2614 ;;		line 94 in file "../../../src/rfstack/hal.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  pt              1    wreg     PTR struct pt
  2617 ;;		 -> halRxBfTh(2), 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;  pt              1    8[BANK0 ] PTR struct pt
  2620 ;;		 -> halRxBfTh(2), 
  2621 ;;  pktLength       1    7[BANK0 ] unsigned char 
  2622 ;;  PT_YIELD_FLA    1    0        unsigned char 
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      unsigned char 
  2625 ;; Registers used:
  2626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2627 ;; Tracked objects:
  2628 ;;		On entry : 1F/0
  2629 ;;		On exit  : 1F/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2632 ;;      Params:         0       0       0       0
  2633 ;;      Locals:         0       2       0       0
  2634 ;;      Temps:          0       2       0       0
  2635 ;;      Totals:         0       4       0       0
  2636 ;;Total ram usage:        4 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:   11
  2639 ;; This function calls:
  2640 ;;		_RfHalGetFree
  2641 ;;		_RfHalGetReturn
  2642 ;;		_RfHalRxPut
  2643 ;;		_RfTrcvCrcTick
  2644 ;;		__CCBufCanRd
  2645 ;;		__CCBufPeekByte
  2646 ;;		__CCBufRdByte
  2647 ;;		__CCBufRdReverse
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           
  2654                           ;psect for function _RfHalTickRxTh
  2655  01AF                     _RfHalTickRxTh:	
  2656                           
  2657                           ;incstack = 0
  2658                           ; Regs used in _RfHalTickRxTh: [allreg]
  2659                           ;RfHalTickRxTh@pt stored from wreg
  2660  01AF  00DA               	movwf	RfHalTickRxTh@pt
  2661                           
  2662                           ;hal.c: 102: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  2663  01B0  0AA6               	incf	RfHalTickRxTh@rxByteTimeout,f
  2664  01B1  2A72               	goto	l2625
  2665  01B2                     l2541:	
  2666  01B2  085A               	movf	RfHalTickRxTh@pt,w
  2667  01B3  0086               	movwf	6
  2668  01B4  306B               	movlw	107
  2669  01B5  23C5  3180         	fcall	PL134	;call to abstracted procedure
  2670  01B7                     l2543:	
  2671  01B7                     i3L__ptext22:	
  2672                           
  2673                           ;psect for function __CCBufCanRd
  2674  01B7                     i3L__CCBufCanRd:	
  2675  01B7                     i3Ll2635:	
  2676  01B7  01D2               	clrf	__CCBufCalcPt@move
  2677  01B8  0AD2               	incf	__CCBufCalcPt@move,f
  2678  01B9  0862               	movf	_rfRxCC+3,w
  2679  01BA  2293  3180         	fcall	__CCBufCalcPt
  2680  01BC  0661               	xorwf	_rfRxCC+2,w
  2681  01BD  1D03               	btfss	3,2
  2682  01BE  29C3               	ljmp	i3Ll2643
  2683  01BF  29C1               	ljmp	i3Ll2637
  2684  01C0                     i3Lu1901:	
  2685  01C0  29C3               	ljmp	i3Ll2643
  2686  01C1                     i3Lu1900:	
  2687  01C1                     i3Ll2637:	
  2688  01C1  3000               	movlw	0
  2689  01C2  29C4               	ljmp	iL18
  2690  01C3                     i3Ll2643:	
  2691                           
  2692                           ;ccbuf_static.c: 51: else return 1;
  2693  01C3  3001               	movlw	1
  2694  01C4                     i3Ll536:	
  2695  01C4                     iL18:	
  2696  01C4  3800               	iorlw	0
  2697  01C5  1903               	btfsc	3,2
  2698  01C6  0008               	return
  2699                           
  2700                           ;hal.c: 109: UI08_t pktLength = _CCBufPeekByte();
  2701  01C7  22DC  3180         	fcall	__CCBufPeekByte
  2702  01C9  00D9               	movwf	RfHalTickRxTh@pktLength
  2703                           
  2704                           ;hal.c: 111: if (pktLength > 5 && pktLength <= sizeof(packet->data) + 1)
  2705  01CA  3006               	movlw	6
  2706  01CB  0259               	subwf	RfHalTickRxTh@pktLength,w
  2707  01CC  1C03               	skipc
  2708  01CD  2A6F               	goto	l2623
  2709  01CE  301A               	movlw	26
  2710  01CF  0259               	subwf	RfHalTickRxTh@pktLength,w
  2711  01D0  1803               	skipnc
  2712  01D1  2A6F               	goto	l2623
  2713  01D2                     l2553:	
  2714                           
  2715                           ;hal.c: 114: {
  2716                           ;hal.c: 115: packet = RfHalGetFree();
  2717  01D2  22BB  3180         	fcall	_RfHalGetFree
  2718  01D4  0020               	movlb	0	; select bank0
  2719  01D5  00A4               	movwf	RfHalTickRxTh@packet
  2720  01D6  085A               	movf	RfHalTickRxTh@pt,w
  2721  01D7  0086               	movwf	6
  2722  01D8  3074               	movlw	116
  2723  01D9  23C5  3180         	fcall	PL134	;call to abstracted procedure
  2724  01DB                     l2557:	
  2725  01DB  08A4               	movf	RfHalTickRxTh@packet,f
  2726  01DC  1903               	btfsc	3,2
  2727  01DD  0008               	return
  2728                           
  2729                           ;hal.c: 117: }
  2730                           ;hal.c: 118: while (packet == (0));
  2731  01DE  0824               	movf	RfHalTickRxTh@packet,w
  2732  01DF  1903               	btfsc	3,2
  2733  01E0  29D2               	goto	l2553
  2734                           
  2735                           ;hal.c: 121: packet->size = _CCBufRdByte() - 1;
  2736  01E1  229F  3180         	fcall	__CCBufRdByte
  2737  01E3  3EFF               	addlw	255
  2738  01E4  00D7               	movwf	??_RfHalTickRxTh
  2739  01E5  0824               	movf	RfHalTickRxTh@packet,w
  2740  01E6  3E1B               	addlw	27
  2741                           
  2742                           ;hal.c: 122: packet->crcTx = 0;
  2743  01E7  23B7  3180         	fcall	PL130	;call to abstracted procedure
  2744  01E9  0181               	clrf	1
  2745                           
  2746                           ;hal.c: 123: rxByteTimeout = 0;
  2747  01EA  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  2748                           
  2749                           ;hal.c: 126: for (pktRxByteIndex = 0; pktRxByteIndex < packet->size; pktRxByteIndex++)
  2750  01EB  01A5               	clrf	RfHalTickRxTh@pktRxByteIndex
  2751  01EC                     l2591:	
  2752  01EC  23D9  3180         	fcall	PL142	;call to abstracted procedure
  2753  01EE  0225               	subwf	RfHalTickRxTh@pktRxByteIndex,w
  2754  01EF  1803               	btfsc	3,0
  2755  01F0  2A2A               	goto	l2593
  2756  01F1  085A               	movf	RfHalTickRxTh@pt,w
  2757  01F2  0086               	movwf	6
  2758  01F3  3080               	movlw	128
  2759  01F4  3FC0               	movwi [0]fsr1
  2760  01F5  3000               	movlw	0
  2761  01F6  3FC1               	movwi [1]fsr1
  2762  01F7                     l2573:	
  2763  01F7                     i4L__ptext22:	
  2764                           
  2765                           ;psect for function __CCBufCanRd
  2766  01F7                     i4L__CCBufCanRd:	
  2767  01F7                     i4Ll2635:	
  2768  01F7  01D2               	clrf	__CCBufCalcPt@move
  2769  01F8  0AD2               	incf	__CCBufCalcPt@move,f
  2770  01F9  0862               	movf	_rfRxCC+3,w
  2771  01FA  2293  3180         	fcall	__CCBufCalcPt
  2772  01FC  0661               	xorwf	_rfRxCC+2,w
  2773  01FD  1D03               	btfss	3,2
  2774  01FE  2A03               	ljmp	i4Ll2643
  2775  01FF  2A01               	ljmp	i4Ll2637
  2776  0200                     i4Lu1901:	
  2777  0200  2A03               	ljmp	i4Ll2643
  2778  0201                     i4Lu1900:	
  2779  0201                     i4Ll2637:	
  2780  0201  3000               	movlw	0
  2781  0202  2A04               	ljmp	iL28
  2782  0203                     i4Ll2643:	
  2783                           
  2784                           ;ccbuf_static.c: 51: else return 1;
  2785  0203  3001               	movlw	1
  2786  0204                     i4Ll536:	
  2787  0204                     iL28:	
  2788  0204  3800               	iorlw	0
  2789  0205  301A               	movlw	26
  2790  0206  1D03               	skipz
  2791  0207  2A0C               	goto	L3
  2792  0208  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2793  0209  1C03               	btfss	3,0
  2794  020A  0008               	return
  2795                           
  2796                           ;hal.c: 129: if(rxByteTimeout > 25) break;
  2797  020B  301A               	movlw	26
  2798  020C                     L3:	
  2799  020C  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2800  020D  1803               	btfsc	3,0
  2801  020E  2A2A               	goto	l2593
  2802                           
  2803                           ;hal.c: 130: rxByteTimeout = 0;
  2804  020F  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  2805                           
  2806                           ;hal.c: 131: packet->data[pktRxByteIndex] = _CCBufRdByte();
  2807  0210  229F  3180         	fcall	__CCBufRdByte
  2808  0212  00D7               	movwf	??_RfHalTickRxTh
  2809  0213  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2810  0214  0724               	addwf	RfHalTickRxTh@packet,w
  2811  0215  00D8               	movwf	??_RfHalTickRxTh+1
  2812  0216  0A58               	incf	??_RfHalTickRxTh+1,w
  2813                           
  2814                           ;hal.c: 132: packet->crcTx = RfTrcvCrcTick(packet->crcTx, packet->data[pktRxByteIndex]);
  2815  0217  23B7  3180         	fcall	PL130	;call to abstracted procedure
  2816  0219  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2817  021A  0724               	addwf	RfHalTickRxTh@packet,w
  2818  021B  00D7               	movwf	??_RfHalTickRxTh
  2819  021C  0084               	movwf	4
  2820  021D  0185               	clrf	5
  2821  021E  3F01               	moviw [1]fsr0
  2822  021F  00D2               	movwf	RfTrcvCrcTick@data
  2823  0220  0824               	movf	RfHalTickRxTh@packet,w
  2824  0221  3E19               	addlw	25
  2825  0222  0084               	movwf	4
  2826  0223  0800               	movf	0,w
  2827  0224                     i5L__ptext24:	
  2828                           
  2829                           ;psect for function _RfTrcvCrcTick
  2830  0224                     i5L_RfTrcvCrcTick:	
  2831                           
  2832                           ;incstack = 0
  2833                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  2834                           ;RfTrcvCrcTick@initial stored from wreg
  2835  0224  00D3               	movwf	RfTrcvCrcTick@initial
  2836  0225                     i5Ll2381:	
  2837                           
  2838                           ;mrf49xa.c: 59: return (initial ^ data);
  2839  0225  0853               	movf	RfTrcvCrcTick@initial,w
  2840  0226  0652               	xorwf	RfTrcvCrcTick@data,w
  2841  0227                     i5Ll181:	
  2842  0227  0081               	movwf	1
  2843  0228  0AA5               	incf	RfHalTickRxTh@pktRxByteIndex,f
  2844  0229  29EC               	goto	l2591
  2845  022A                     l2593:	
  2846                           
  2847                           ;hal.c: 133: }
  2848                           ;hal.c: 135: if (pktRxByteIndex == packet->size)
  2849  022A  23D9  3180         	fcall	PL142	;call to abstracted procedure
  2850  022C  0625               	xorwf	RfHalTickRxTh@pktRxByteIndex,w
  2851  022D  1D03               	skipz
  2852  022E  2A52               	goto	l2605
  2853  022F  085A               	movf	RfHalTickRxTh@pt,w
  2854  0230  0086               	movwf	6
  2855  0231  308A               	movlw	138
  2856  0232  3FC0               	movwi [0]fsr1
  2857  0233  3000               	movlw	0
  2858  0234  3FC1               	movwi [1]fsr1
  2859  0235                     l2597:	
  2860  0235                     i6L__ptext22:	
  2861                           
  2862                           ;psect for function __CCBufCanRd
  2863  0235                     i6L__CCBufCanRd:	
  2864  0235                     i6Ll2635:	
  2865  0235  01D2               	clrf	__CCBufCalcPt@move
  2866  0236  0AD2               	incf	__CCBufCalcPt@move,f
  2867  0237  0862               	movf	_rfRxCC+3,w
  2868  0238  2293  3180         	fcall	__CCBufCalcPt
  2869  023A  0661               	xorwf	_rfRxCC+2,w
  2870  023B  1D03               	btfss	3,2
  2871  023C  2A41               	ljmp	i6Ll2643
  2872  023D  2A3F               	ljmp	i6Ll2637
  2873  023E                     i6Lu1901:	
  2874  023E  2A41               	ljmp	i6Ll2643
  2875  023F                     i6Lu1900:	
  2876  023F                     i6Ll2637:	
  2877  023F  3000               	movlw	0
  2878  0240  2A42               	ljmp	iL44
  2879  0241                     i6Ll2643:	
  2880                           
  2881                           ;ccbuf_static.c: 51: else return 1;
  2882  0241  3001               	movlw	1
  2883  0242                     i6Ll536:	
  2884  0242                     iL44:	
  2885  0242  3800               	iorlw	0
  2886  0243  1D03               	skipz
  2887  0244  2A49               	goto	l2603
  2888  0245  301A               	movlw	26
  2889  0246  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2890  0247  1C03               	btfss	3,0
  2891  0248  0008               	return
  2892  0249                     l2603:	
  2893                           
  2894                           ;hal.c: 139: packet->crcRx = _CCBufRdByte();
  2895  0249  229F  3180         	fcall	__CCBufRdByte
  2896  024B  00D7               	movwf	??_RfHalTickRxTh
  2897  024C  0824               	movf	RfHalTickRxTh@packet,w
  2898  024D  3E1A               	addlw	26
  2899  024E  0086               	movwf	6
  2900  024F  0187               	clrf	7
  2901  0250  0857               	movf	??_RfHalTickRxTh,w
  2902  0251  0081               	movwf	1
  2903  0252                     l2605:	
  2904                           
  2905                           ;hal.c: 140: }
  2906                           ;hal.c: 143: if(rxByteTimeout > 25)
  2907  0252  301A               	movlw	26
  2908  0253  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2909  0254  1C03               	skipc
  2910  0255  2A63               	goto	l2617
  2911                           
  2912                           ;hal.c: 144: {
  2913                           ;hal.c: 148: _CCBufRdReverse(pktRxByteIndex);
  2914  0256  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2915  0257                     i7L__ptext19:	
  2916                           
  2917                           ;psect for function __CCBufRdReverse
  2918  0257                     i7L__CCBufRdReverse:	
  2919                           
  2920                           ;incstack = 0
  2921                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  2922                           ;__CCBufRdReverse@qty stored from wreg
  2923  0257  00D5               	movwf	__CCBufRdReverse@qty
  2924  0258                     i7Ll2695:	
  2925  0258  0855               	movf	__CCBufRdReverse@qty,w
  2926  0259  3C00               	sublw	0
  2927  025A  00D2               	movwf	__CCBufCalcPt@move
  2928  025B  0862               	movf	_rfRxCC+3,w
  2929  025C  2293  3180         	fcall	__CCBufCalcPt
  2930  025E  00E2               	movwf	_rfRxCC+3
  2931  025F                     i7Ll532:	
  2932                           
  2933                           ;hal.c: 149: RfHalGetReturn(packet);
  2934  025F  0824               	movf	RfHalTickRxTh@packet,w
  2935  0260  22C8  3180         	fcall	_RfHalGetReturn
  2936                           
  2937                           ;hal.c: 150: }
  2938  0262  29B2               	goto	l2541
  2939  0263                     l2617:	
  2940  0263  085A               	movf	RfHalTickRxTh@pt,w
  2941  0264  0086               	movwf	6
  2942  0265  30A5               	movlw	165
  2943  0266  23C5  3180         	fcall	PL134	;call to abstracted procedure
  2944  0268                     l2619:	
  2945  0268  0824               	movf	RfHalTickRxTh@packet,w
  2946  0269  22D0  3180         	fcall	_RfHalRxPut
  2947  026B  3800               	iorlw	0
  2948  026C  1903               	btfsc	3,2
  2949  026D  0008               	return
  2950  026E  29B2               	goto	l2541
  2951  026F                     l2623:	
  2952                           ;hal.c: 171: }
  2953                           ;hal.c: 172: }
  2954                           
  2955                           
  2956                           ;hal.c: 173: else
  2957                           ;hal.c: 174: {
  2958                           ;hal.c: 175: _CCBufRdByte();
  2959  026F  229F  3180         	fcall	__CCBufRdByte
  2960  0271  29B2               	goto	l2541
  2961  0272                     l2625:	
  2962  0272  085A               	movf	RfHalTickRxTh@pt,w
  2963  0273  0086               	movwf	6
  2964  0274  0187               	clrf	7
  2965  0275  3F40               	moviw [0]fsr1
  2966  0276  00D7               	movwf	??_RfHalTickRxTh
  2967  0277  3F41               	moviw [1]fsr1
  2968  0278  00D8               	movwf	??_RfHalTickRxTh+1
  2969                           
  2970                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2971                           ; Switch size 1, requested type "space"
  2972                           ; Number of cases is 1, Range of values is 0 to 0
  2973                           ; switch strategies available:
  2974                           ; Name         Instructions Cycles
  2975                           ; simple_byte            4     3 (average)
  2976                           ; direct_byte            8     6 (fixed)
  2977                           ; jumptable            260     6 (fixed)
  2978                           ;	Chosen strategy is simple_byte
  2979  0279  1903               	skipnz
  2980  027A  2A7C               	goto	l3243
  2981  027B  2A90               	goto	l2627
  2982  027C                     l3243:	
  2983                           
  2984                           ; Switch size 1, requested type "space"
  2985                           ; Number of cases is 6, Range of values is 0 to 165
  2986                           ; switch strategies available:
  2987                           ; Name         Instructions Cycles
  2988                           ; simple_byte           19    10 (average)
  2989                           ; jumptable            260     6 (fixed)
  2990                           ;	Chosen strategy is simple_byte
  2991  027C  0857               	movf	??_RfHalTickRxTh,w
  2992  027D  3A00               	xorlw	0	; case 0
  2993  027E  1903               	skipnz
  2994  027F  29B2               	goto	l2541
  2995  0280  3A6B               	xorlw	107	; case 107
  2996  0281  1903               	skipnz
  2997  0282  29B7               	goto	l2543
  2998  0283  3A1F               	xorlw	31	; case 116
  2999  0284  1903               	skipnz
  3000  0285  29DB               	goto	l2557
  3001  0286  3AF4               	xorlw	244	; case 128
  3002  0287  1903               	skipnz
  3003  0288  29F7               	goto	l2573
  3004  0289  3A0A               	xorlw	10	; case 138
  3005  028A  1903               	skipnz
  3006  028B  2A35               	goto	l2597
  3007  028C  3A2F               	xorlw	47	; case 165
  3008  028D  1903               	skipnz
  3009  028E  2A68               	goto	l2619
  3010  028F  2A90               	goto	l2627
  3011  0290                     l2627:	
  3012  0290  085A               	movf	RfHalTickRxTh@pt,w
  3013  0291  3186  2E4B         	ljmp	PL128	;call to abstracted procedure
  3014  0293                     __end_of_RfHalTickRxTh:	
  3015  0293                     __ptext23:	
  3016 ;; *************** function __CCBufCalcPt *****************
  3017 ;; Defined at:
  3018 ;;		line 24 in file "../../../src/utilities/ccbuf_static.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  entry           1    wreg     unsigned char 
  3021 ;;  move            1    0[BANK0 ] unsigned char 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  entry           1    1[BANK0 ] unsigned char 
  3024 ;;  result          1    2[BANK0 ] unsigned char 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      unsigned char 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0
  3029 ;; Tracked objects:
  3030 ;;		On entry : 1F/0
  3031 ;;		On exit  : 1F/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3034 ;;      Params:         0       1       0       0
  3035 ;;      Locals:         0       2       0       0
  3036 ;;      Temps:          0       0       0       0
  3037 ;;      Totals:         0       3       0       0
  3038 ;;Total ram usage:        3 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    8
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		__CCBufRdReverse
  3045 ;;		__CCBufCanRd
  3046 ;;		__CCBufRdByte
  3047 ;;		__CCBufPeekByte
  3048 ;;		__CCBufWrByte
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function __CCBufCalcPt
  3054  0293                     __CCBufCalcPt:	
  3055                           
  3056                           ;incstack = 0
  3057                           ; Regs used in __CCBufCalcPt: [wreg+status,2+status,0]
  3058                           ;__CCBufCalcPt@entry stored from wreg
  3059  0293  00D3               	movwf	__CCBufCalcPt@entry
  3060                           
  3061                           ;ccbuf_static.c: 26: I08_t result = ((I08_t)entry) + move;
  3062  0294  0752               	addwf	__CCBufCalcPt@move,w
  3063  0295  00D4               	movwf	__CCBufCalcPt@result
  3064  0296                     l2871:	
  3065                           ;ccbuf_static.c: 28: while (result < 0) result += CCDef->size;
  3066                           
  3067  0296  0860               	movf	_rfRxCC+1,w
  3068  0297  0254               	subwf	__CCBufCalcPt@result,w
  3069  0298  1C03               	btfss	3,0
  3070  0299  2A9D               	goto	l2873
  3071  029A  0860               	movf	_rfRxCC+1,w
  3072  029B  02D4               	subwf	__CCBufCalcPt@result,f
  3073  029C  2A96               	goto	l2871
  3074  029D                     l2873:	
  3075                           
  3076                           ;ccbuf_static.c: 31: return (UI08_t) result;
  3077  029D  0854               	movf	__CCBufCalcPt@result,w
  3078  029E  0008               	return
  3079  029F                     __end_of__CCBufCalcPt:	
  3080  029F                     __ptext20:	
  3081 ;; *************** function __CCBufRdByte *****************
  3082 ;; Defined at:
  3083 ;;		line 54 in file "../../../src/utilities/ccbuf_static.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;		None
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  res             1    4[BANK0 ] unsigned char 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      unsigned char 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 1F/0
  3094 ;;		On exit  : 1F/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3097 ;;      Params:         0       0       0       0
  3098 ;;      Locals:         0       1       0       0
  3099 ;;      Temps:          0       1       0       0
  3100 ;;      Totals:         0       2       0       0
  3101 ;;Total ram usage:        2 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:   10
  3104 ;; This function calls:
  3105 ;;		__CCBufCalcPt
  3106 ;;		__CCBufCanRd
  3107 ;; This function is called by:
  3108 ;;		_RfHalTickRxTh
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           
  3113                           ;psect for function __CCBufRdByte
  3114  029F                     __CCBufRdByte:	
  3115  029F                     i8L__ptext22:	
  3116                           ;ccbuf_static.c: 56: if (_CCBufCanRd())
  3117                           
  3118                           ;incstack = 0
  3119                           ; Regs used in __CCBufRdByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3120                           
  3121                           
  3122                           ;psect for function __CCBufCanRd
  3123  029F                     i8L__CCBufCanRd:	
  3124  029F                     i8Ll2635:	
  3125  029F  01D2               	clrf	__CCBufCalcPt@move
  3126  02A0  0AD2               	incf	__CCBufCalcPt@move,f
  3127  02A1  0862               	movf	_rfRxCC+3,w
  3128  02A2  2293  3180         	fcall	__CCBufCalcPt
  3129  02A4  0661               	xorwf	_rfRxCC+2,w
  3130  02A5  1D03               	btfss	3,2
  3131  02A6  2AAB               	ljmp	i8Ll2643
  3132  02A7  2AA9               	ljmp	i8Ll2637
  3133  02A8                     i8Lu1901:	
  3134  02A8  2AAB               	ljmp	i8Ll2643
  3135  02A9                     i8Lu1900:	
  3136  02A9                     i8Ll2637:	
  3137  02A9  3000               	movlw	0
  3138  02AA  2AAC               	ljmp	iL60
  3139  02AB                     i8Ll2643:	
  3140                           
  3141                           ;ccbuf_static.c: 51: else return 1;
  3142  02AB  3001               	movlw	1
  3143  02AC                     i8Ll536:	
  3144  02AC                     iL60:	
  3145  02AC  3A00               	xorlw	0
  3146  02AD  1903               	skipnz
  3147  02AE  3400               	retlw	0
  3148  02AF  01D2               	clrf	__CCBufCalcPt@move
  3149  02B0  0AD2               	incf	__CCBufCalcPt@move,f
  3150  02B1  0862               	movf	_rfRxCC+3,w
  3151  02B2  2293               	fcall	__CCBufCalcPt
  3152  02B3  00E2               	movwf	_rfRxCC+3
  3153  02B4  075F               	addwf	_rfRxCC,w
  3154  02B5  00D5               	movwf	??__CCBufRdByte
  3155  02B6  0086               	movwf	6
  3156  02B7  0187               	clrf	7
  3157  02B8  0801               	movf	1,w
  3158  02B9  00D6               	movwf	__CCBufRdByte@res
  3159                           
  3160                           ;ccbuf_static.c: 61: return res;
  3161  02BA  0008               	return
  3162  02BB                     __end_of__CCBufRdByte:	
  3163                           ;ccbuf_static.c: 62: }
  3164                           ;ccbuf_static.c: 63: return 0;
  3165                           
  3166  02BB                     __ptext27:	
  3167 ;; *************** function _RfHalGetFree *****************
  3168 ;; Defined at:
  3169 ;;		line 191 in file "../../../src/rfstack/hal.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      PTR struct RfTransceiver
  3176 ;; Registers used:
  3177 ;;		wreg
  3178 ;; Tracked objects:
  3179 ;;		On entry : 1F/0
  3180 ;;		On exit  : 1F/1
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3183 ;;      Params:         0       0       0       0
  3184 ;;      Locals:         0       0       0       0
  3185 ;;      Temps:          0       0       0       0
  3186 ;;      Totals:         0       0       0       0
  3187 ;;Total ram usage:        0 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    8
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_RfHalTickRxTh
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           
  3198                           ;psect for function _RfHalGetFree
  3199  02BB                     _RfHalGetFree:	
  3200                           
  3201                           ;hal.c: 206: if (rfPackets[0].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  3202                           
  3203                           ;incstack = 0
  3204                           ; Regs used in _RfHalGetFree: [wreg]
  3205  02BB  0021               	movlb	1	; select bank1
  3206  02BC  1AA0               	btfsc	_rfPackets^(0+128),5
  3207  02BD  19A0               	btfsc	_rfPackets^(0+128),3
  3208  02BE  2AC2               	goto	l393
  3209  02BF  30A0               	movlw	_rfPackets& (0+255)
  3210                           
  3211                           ;hal.c: 207: {
  3212                           ;hal.c: 208: rfPackets[0].flags.acq = 1;
  3213  02C0  15A0               	bsf	_rfPackets^(0+128),3
  3214                           
  3215                           ;hal.c: 209: return &(rfPackets[0]);
  3216  02C1  0008               	return
  3217  02C2                     l393:	
  3218                           
  3219                           ;hal.c: 210: }
  3220                           ;hal.c: 211: if (rfPackets[1].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  3221  02C2  1ABC               	btfsc	(_rfPackets^(0+128)+28),5
  3222  02C3  19A0               	btfsc	_rfPackets^(0+128),3
  3223  02C4  3400               	retlw	0
  3224  02C5  30BC               	movlw	(_rfPackets+28)& (0+255)
  3225                           
  3226                           ;hal.c: 212: {
  3227                           ;hal.c: 213: rfPackets[0].flags.acq = 1;
  3228  02C6  15A0               	bsf	_rfPackets^(0+128),3
  3229                           
  3230                           ;hal.c: 214: return &(rfPackets[1]);
  3231  02C7  0008               	return
  3232  02C8                     __end_of_RfHalGetFree:	
  3233                           ;hal.c: 215: }
  3234                           ;hal.c: 216: return 0;
  3235                           
  3236  02C8                     __ptext26:	
  3237 ;; *************** function _RfHalGetReturn *****************
  3238 ;; Defined at:
  3239 ;;		line 185 in file "../../../src/rfstack/hal.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  packet          1    wreg     PTR struct RfTransceiver
  3242 ;;		 -> NULL(0), rfPackets(56), 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  packet          1    0[BANK0 ] PTR struct RfTransceiver
  3245 ;;		 -> NULL(0), rfPackets(56), 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;		None               void
  3248 ;; Registers used:
  3249 ;;		wreg, fsr1l, fsr1h
  3250 ;; Tracked objects:
  3251 ;;		On entry : 1F/0
  3252 ;;		On exit  : 1F/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3255 ;;      Params:         0       0       0       0
  3256 ;;      Locals:         0       1       0       0
  3257 ;;      Temps:          0       0       0       0
  3258 ;;      Totals:         0       1       0       0
  3259 ;;Total ram usage:        1 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    8
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_RfHalTickRxTh
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function _RfHalGetReturn
  3271  02C8                     _RfHalGetReturn:	
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _RfHalGetReturn: [wregfsr1]
  3275                           ;RfHalGetReturn@packet stored from wreg
  3276  02C8  00D2               	movwf	RfHalGetReturn@packet
  3277                           
  3278                           ;hal.c: 187: packet->flags.acq = 0;
  3279  02C9  0086               	movwf	6
  3280  02CA  0187               	clrf	7
  3281  02CB  1181               	bcf	1,3
  3282                           
  3283                           ;hal.c: 188: packet->flags.proc = PCKT_NO_PROC;
  3284  02CC  0852               	movf	RfHalGetReturn@packet,w
  3285  02CD  0086               	movwf	6
  3286  02CE  1681               	bsf	1,5
  3287  02CF  0008               	return
  3288  02D0                     __end_of_RfHalGetReturn:	
  3289  02D0                     __ptext25:	
  3290 ;; *************** function _RfHalRxPut *****************
  3291 ;; Defined at:
  3292 ;;		line 220 in file "../../../src/rfstack/hal.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  packet          1    wreg     PTR struct RfTransceiver
  3295 ;;		 -> NULL(0), rfPackets(56), 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  packet          1    0[BANK0 ] PTR struct RfTransceiver
  3298 ;;		 -> NULL(0), rfPackets(56), 
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      unsigned char 
  3301 ;; Registers used:
  3302 ;;		wreg, fsr1l, fsr1h
  3303 ;; Tracked objects:
  3304 ;;		On entry : 1F/0
  3305 ;;		On exit  : 1F/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3308 ;;      Params:         0       0       0       0
  3309 ;;      Locals:         0       1       0       0
  3310 ;;      Temps:          0       0       0       0
  3311 ;;      Totals:         0       1       0       0
  3312 ;;Total ram usage:        1 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:    8
  3315 ;; This function calls:
  3316 ;;		Nothing
  3317 ;; This function is called by:
  3318 ;;		_RfHalTickRxTh
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           
  3323                           ;psect for function _RfHalRxPut
  3324  02D0                     _RfHalRxPut:	
  3325                           
  3326                           ;incstack = 0
  3327                           ; Regs used in _RfHalRxPut: [wregfsr1]
  3328                           ;RfHalRxPut@packet stored from wreg
  3329  02D0  00D2               	movwf	RfHalRxPut@packet
  3330                           
  3331                           ;hal.c: 237: packet->flags.proc = PCKT_NEED_PROC;
  3332  02D1  0086               	movwf	6
  3333  02D2  0187               	clrf	7
  3334  02D3  1281               	bcf	1,5
  3335                           
  3336                           ;hal.c: 238: packet->flags.acq = 0;
  3337  02D4  0852               	movf	RfHalRxPut@packet,w
  3338  02D5  0086               	movwf	6
  3339  02D6  1181               	bcf	1,3
  3340                           
  3341                           ;hal.c: 239: packet->flags.tx = 0;
  3342  02D7  0852               	movf	RfHalRxPut@packet,w
  3343  02D8  0086               	movwf	6
  3344  02D9  3000               	movlw	0
  3345  02DA  1201               	bcf	1,4
  3346                           
  3347                           ;hal.c: 242: return 0;
  3348  02DB  0008               	return
  3349  02DC                     __end_of_RfHalRxPut:	
  3350  02DC                     __ptext21:	
  3351 ;; *************** function __CCBufPeekByte *****************
  3352 ;; Defined at:
  3353 ;;		line 66 in file "../../../src/utilities/ccbuf_static.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  res             1    4[BANK0 ] unsigned char 
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      unsigned char 
  3360 ;; Registers used:
  3361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 1F/0
  3364 ;;		On exit  : 1F/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3367 ;;      Params:         0       0       0       0
  3368 ;;      Locals:         0       1       0       0
  3369 ;;      Temps:          0       1       0       0
  3370 ;;      Totals:         0       2       0       0
  3371 ;;Total ram usage:        2 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:   10
  3374 ;; This function calls:
  3375 ;;		__CCBufCalcPt
  3376 ;;		__CCBufCanRd
  3377 ;; This function is called by:
  3378 ;;		_RfHalTickRxTh
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           
  3383                           ;psect for function __CCBufPeekByte
  3384  02DC                     __CCBufPeekByte:	
  3385  02DC                     i9L__ptext22:	
  3386                           ;ccbuf_static.c: 68: if (_CCBufCanRd())
  3387                           
  3388                           ;incstack = 0
  3389                           ; Regs used in __CCBufPeekByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3390                           
  3391                           
  3392                           ;psect for function __CCBufCanRd
  3393  02DC                     i9L__CCBufCanRd:	
  3394  02DC                     i9Ll2635:	
  3395  02DC  01D2               	clrf	__CCBufCalcPt@move
  3396  02DD  0AD2               	incf	__CCBufCalcPt@move,f
  3397  02DE  0862               	movf	_rfRxCC+3,w
  3398  02DF  2293  3180         	fcall	__CCBufCalcPt
  3399  02E1  0661               	xorwf	_rfRxCC+2,w
  3400  02E2  1D03               	btfss	3,2
  3401  02E3  2AE8               	ljmp	i9Ll2643
  3402  02E4  2AE6               	ljmp	i9Ll2637
  3403  02E5                     i9Lu1901:	
  3404  02E5  2AE8               	ljmp	i9Ll2643
  3405  02E6                     i9Lu1900:	
  3406  02E6                     i9Ll2637:	
  3407  02E6  3000               	movlw	0
  3408  02E7  2AE9               	ljmp	iL70
  3409  02E8                     i9Ll2643:	
  3410                           
  3411                           ;ccbuf_static.c: 51: else return 1;
  3412  02E8  3001               	movlw	1
  3413  02E9                     i9Ll536:	
  3414  02E9                     iL70:	
  3415  02E9  3A00               	xorlw	0
  3416  02EA  1903               	skipnz
  3417  02EB  3400               	retlw	0
  3418  02EC  01D2               	clrf	__CCBufCalcPt@move
  3419  02ED  0AD2               	incf	__CCBufCalcPt@move,f
  3420  02EE  0862               	movf	_rfRxCC+3,w
  3421  02EF  2293               	fcall	__CCBufCalcPt
  3422  02F0  075F               	addwf	_rfRxCC,w
  3423  02F1  00D5               	movwf	??__CCBufPeekByte
  3424  02F2  0086               	movwf	6
  3425  02F3  0187               	clrf	7
  3426  02F4  0801               	movf	1,w
  3427  02F5  00D6               	movwf	__CCBufPeekByte@res
  3428                           
  3429                           ;ccbuf_static.c: 71: return res;
  3430  02F6  0008               	return
  3431  02F7                     __end_of__CCBufPeekByte:	
  3432                           ;ccbuf_static.c: 72: }
  3433                           ;ccbuf_static.c: 73: return 0;
  3434                           
  3435  02F7                     __ptext15:	
  3436 ;; *************** function _RfTrcvStatus *****************
  3437 ;; Defined at:
  3438 ;;		line 41 in file "../../../src/devices/mrf49xa.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;		None
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;		None
  3443 ;; Return value:  Size  Location     Type
  3444 ;;		None               void
  3445 ;; Registers used:
  3446 ;;		wreg, status,2, pclath, cstack
  3447 ;; Tracked objects:
  3448 ;;		On entry : 1F/0
  3449 ;;		On exit  : 1F/2
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3452 ;;      Params:         0       0       0       0
  3453 ;;      Locals:         0       0       0       0
  3454 ;;      Temps:          0       0       0       0
  3455 ;;      Totals:         0       0       0       0
  3456 ;;Total ram usage:        0 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:    9
  3459 ;; This function calls:
  3460 ;;		_SPI_Read
  3461 ;; This function is called by:
  3462 ;;		_RfTrcvCarrierPresent
  3463 ;;		_mrf49XaIsr
  3464 ;;		_main
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _RfTrcvStatus
  3470  02F7                     _RfTrcvStatus:	
  3471                           
  3472                           ;mrf49xa.c: 43: LATCbits.LATC6 = 0;;
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in _RfTrcvStatus: [wreg+status,2+pclath+cstack]
  3476  02F7  0022               	movlb	2	; select bank2
  3477  02F8  130E               	bcf	14,6	;volatile
  3478                           
  3479                           ;mrf49xa.c: 45: rfTrcvStatus.byte[0] = SPI_Read();
  3480  02F9  2301  3180         	fcall	_SPI_Read
  3481  02FB  00D0               	movwf	_rfTrcvStatus
  3482                           
  3483                           ;mrf49xa.c: 46: rfTrcvStatus.byte[1] = SPI_Read();
  3484  02FC  2301               	fcall	_SPI_Read
  3485  02FD  00D1               	movwf	_rfTrcvStatus+1
  3486                           
  3487                           ;mrf49xa.c: 48: LATCbits.LATC6 = 1;;
  3488  02FE  0022               	movlb	2	; select bank2
  3489  02FF  170E               	bsf	14,6	;volatile
  3490  0300  0008               	return
  3491  0301                     __end_of_RfTrcvStatus:	
  3492  0301                     __ptext16:	
  3493 ;; *************** function _SPI_Read *****************
  3494 ;; Defined at:
  3495 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  data            1    0[BANK0 ] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      unsigned char 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2
  3504 ;; Tracked objects:
  3505 ;;		On entry : 1D/2
  3506 ;;		On exit  : 1F/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3509 ;;      Params:         0       0       0       0
  3510 ;;      Locals:         0       1       0       0
  3511 ;;      Temps:          0       0       0       0
  3512 ;;      Totals:         0       1       0       0
  3513 ;;Total ram usage:        1 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    8
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_RfTrcvGet
  3520 ;;		_RfTrcvStatus
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           
  3525                           ;psect for function _SPI_Read
  3526  0301                     _SPI_Read:	
  3527                           
  3528                           ;mrf49xa.c: 150: UI08_t data = 0;
  3529                           
  3530                           ;incstack = 0
  3531                           ; Regs used in _SPI_Read: [wreg+status,2]
  3532  0301  0020               	movlb	0	; select bank0
  3533  0302  01D2               	clrf	SPI_Read@data
  3534                           
  3535                           ;mrf49xa.c: 151: LATCbits.LATC7 = 0;
  3536  0303  0022               	movlb	2	; select bank2
  3537  0304  138E               	bcf	14,7	;volatile
  3538                           
  3539                           ;mrf49xa.c: 152: LATBbits.LATB7 = 0;
  3540  0305  138D               	bcf	13,7	;volatile
  3541  0306  0020               	movlb	0	; select bank0
  3542  0307  1A8E               	btfsc	14,5	;volatile
  3543  0308  17D2               	bsf	SPI_Read@data,7
  3544  0309  0022               	movlb	2	; select bank2
  3545  030A  178E               	bsf	14,7	;volatile
  3546  030B  138E               	bcf	14,7	;volatile
  3547                           
  3548                           ;mrf49xa.c: 159: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3549  030C  0020               	movlb	0	; select bank0
  3550  030D  1A8E               	btfsc	14,5	;volatile
  3551  030E  1752               	bsf	SPI_Read@data,6
  3552  030F  0022               	movlb	2	; select bank2
  3553  0310  178E               	bsf	14,7	;volatile
  3554  0311  138E               	bcf	14,7	;volatile
  3555                           
  3556                           ;mrf49xa.c: 160: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3557  0312  0020               	movlb	0	; select bank0
  3558  0313  1A8E               	btfsc	14,5	;volatile
  3559  0314  16D2               	bsf	SPI_Read@data,5
  3560  0315  0022               	movlb	2	; select bank2
  3561  0316  178E               	bsf	14,7	;volatile
  3562  0317  138E               	bcf	14,7	;volatile
  3563                           
  3564                           ;mrf49xa.c: 161: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3565  0318  0020               	movlb	0	; select bank0
  3566  0319  1A8E               	btfsc	14,5	;volatile
  3567  031A  1652               	bsf	SPI_Read@data,4
  3568  031B  0022               	movlb	2	; select bank2
  3569  031C  178E               	bsf	14,7	;volatile
  3570  031D  138E               	bcf	14,7	;volatile
  3571                           
  3572                           ;mrf49xa.c: 162: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3573  031E  0020               	movlb	0	; select bank0
  3574  031F  1A8E               	btfsc	14,5	;volatile
  3575  0320  15D2               	bsf	SPI_Read@data,3
  3576  0321  0022               	movlb	2	; select bank2
  3577  0322  178E               	bsf	14,7	;volatile
  3578  0323  138E               	bcf	14,7	;volatile
  3579                           
  3580                           ;mrf49xa.c: 163: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3581  0324  0020               	movlb	0	; select bank0
  3582  0325  1A8E               	btfsc	14,5	;volatile
  3583  0326  1552               	bsf	SPI_Read@data,2
  3584  0327  0022               	movlb	2	; select bank2
  3585  0328  178E               	bsf	14,7	;volatile
  3586  0329  138E               	bcf	14,7	;volatile
  3587                           
  3588                           ;mrf49xa.c: 164: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3589  032A  0020               	movlb	0	; select bank0
  3590  032B  1A8E               	btfsc	14,5	;volatile
  3591  032C  14D2               	bsf	SPI_Read@data,1
  3592  032D  0022               	movlb	2	; select bank2
  3593  032E  178E               	bsf	14,7	;volatile
  3594  032F  138E               	bcf	14,7	;volatile
  3595                           
  3596                           ;mrf49xa.c: 165: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3597  0330  0020               	movlb	0	; select bank0
  3598  0331  1A8E               	btfsc	14,5	;volatile
  3599  0332  1452               	bsf	SPI_Read@data,0
  3600  0333  0022               	movlb	2	; select bank2
  3601  0334  178E               	bsf	14,7	;volatile
  3602  0335  138E               	bcf	14,7	;volatile
  3603                           
  3604                           ;mrf49xa.c: 188: return data;
  3605  0336  0020               	movlb	0	; select bank0
  3606  0337  0852               	movf	SPI_Read@data,w
  3607  0338  0008               	return
  3608  0339                     __end_of_SPI_Read:	
  3609  0339                     __ptext13:	
  3610 ;; *************** function _RfHalTickTxTh *****************
  3611 ;; Defined at:
  3612 ;;		line 67 in file "../../../src/rfstack/hal.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  pt              1    wreg     PTR struct pt
  3615 ;;		 -> halTxBfTh(2), 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  pt              1    8[BANK0 ] PTR struct pt
  3618 ;;		 -> halTxBfTh(2), 
  3619 ;;  PT_YIELD_FLA    1    0        unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      unsigned char 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 1F/0
  3626 ;;		On exit  : 1E/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3629 ;;      Params:         0       0       0       0
  3630 ;;      Locals:         0       1       0       0
  3631 ;;      Temps:          0       2       0       0
  3632 ;;      Totals:         0       3       0       0
  3633 ;;Total ram usage:        3 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:   13
  3636 ;; This function calls:
  3637 ;;		_RfHalTxGet
  3638 ;;		_RfTrcvCarrierPresent
  3639 ;;		_RfTrcvMode
  3640 ;; This function is called by:
  3641 ;;		_main
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           
  3646                           ;psect for function _RfHalTickTxTh
  3647  0339                     _RfHalTickTxTh:	
  3648                           
  3649                           ;incstack = 0
  3650                           ; Regs used in _RfHalTickTxTh: [allreg]
  3651                           ;RfHalTickTxTh@pt stored from wreg
  3652  0339  00DA               	movwf	RfHalTickTxTh@pt
  3653  033A  2B5F               	goto	l2503
  3654  033B                     l2481:	
  3655  033B  085A               	movf	RfHalTickTxTh@pt,w
  3656  033C  0086               	movwf	6
  3657  033D  304B               	movlw	75
  3658  033E  23C5  3180         	fcall	PL134	;call to abstracted procedure
  3659  0340                     l2483:	
  3660  0340  2387  3180         	fcall	_RfHalTxGet
  3661  0342  3800               	iorlw	0
  3662  0343  1903               	btfsc	3,2
  3663  0344  0008               	return
  3664  0345                     l2487:	
  3665                           ;hal.c: 77: do
  3666                           
  3667  0345  0020               	movlb	0	; select bank0
  3668  0346  085A               	movf	RfHalTickTxTh@pt,w
  3669  0347  0086               	movwf	6
  3670  0348  304F               	movlw	79
  3671  0349  23C5  3180         	fcall	PL134	;call to abstracted procedure
  3672  034B                     l2489:	
  3673  034B  2396  3180         	fcall	_RfTrcvCarrierPresent
  3674  034D  3A00               	xorlw	0
  3675  034E  1D03               	btfss	3,2
  3676  034F  0008               	return
  3677                           
  3678                           ;hal.c: 80: } while (rfStatus.isr.state != RX_RECV);
  3679  0350  08A2               	movf	_rfStatus+2,f
  3680  0351  1D03               	skipz
  3681  0352  2B45               	goto	l2487
  3682                           
  3683                           ;hal.c: 83: RfTrcvMode(1);
  3684  0353  3001               	movlw	1
  3685  0354  237A  3180         	fcall	_RfTrcvMode
  3686  0356  085A               	movf	RfHalTickTxTh@pt,w
  3687  0357  0086               	movwf	6
  3688  0358  3056               	movlw	86
  3689  0359  23C5  3180         	fcall	PL134	;call to abstracted procedure
  3690  035B                     l2499:	
  3691  035B  0822               	movf	_rfStatus+2,w
  3692  035C  1D03               	skipz
  3693  035D  0008               	return
  3694  035E  2B3B               	goto	l2481
  3695  035F                     l2503:	
  3696  035F  085A               	movf	RfHalTickTxTh@pt,w
  3697  0360  0086               	movwf	6
  3698  0361  0187               	clrf	7
  3699  0362  3F40               	moviw [0]fsr1
  3700  0363  00D8               	movwf	??_RfHalTickTxTh
  3701  0364  3F41               	moviw [1]fsr1
  3702  0365  00D9               	movwf	??_RfHalTickTxTh+1
  3703                           
  3704                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3705                           ; Switch size 1, requested type "space"
  3706                           ; Number of cases is 1, Range of values is 0 to 0
  3707                           ; switch strategies available:
  3708                           ; Name         Instructions Cycles
  3709                           ; simple_byte            4     3 (average)
  3710                           ; direct_byte            8     6 (fixed)
  3711                           ; jumptable            260     6 (fixed)
  3712                           ;	Chosen strategy is simple_byte
  3713  0366  1903               	skipnz
  3714  0367  2B69               	goto	l3241
  3715  0368  2B77               	goto	l2505
  3716  0369                     l3241:	
  3717                           
  3718                           ; Switch size 1, requested type "space"
  3719                           ; Number of cases is 4, Range of values is 0 to 86
  3720                           ; switch strategies available:
  3721                           ; Name         Instructions Cycles
  3722                           ; simple_byte           13     7 (average)
  3723                           ; direct_byte          180     6 (fixed)
  3724                           ; jumptable            260     6 (fixed)
  3725                           ;	Chosen strategy is simple_byte
  3726  0369  0858               	movf	??_RfHalTickTxTh,w
  3727  036A  3A00               	xorlw	0	; case 0
  3728  036B  1903               	skipnz
  3729  036C  2B3B               	goto	l2481
  3730  036D  3A4B               	xorlw	75	; case 75
  3731  036E  1903               	skipnz
  3732  036F  2B40               	goto	l2483
  3733  0370  3A04               	xorlw	4	; case 79
  3734  0371  1903               	skipnz
  3735  0372  2B4B               	goto	l2489
  3736  0373  3A19               	xorlw	25	; case 86
  3737  0374  1903               	skipnz
  3738  0375  2B5B               	goto	l2499
  3739  0376  2B77               	goto	l2505
  3740  0377                     l2505:	
  3741  0377  085A               	movf	RfHalTickTxTh@pt,w
  3742  0378  3186  2E4B         	ljmp	PL128	;call to abstracted procedure
  3743  037A                     __end_of_RfHalTickTxTh:	
  3744  037A                     __ptext31:	
  3745 ;; *************** function _RfTrcvMode *****************
  3746 ;; Defined at:
  3747 ;;		line 55 in file "../../../src/rfstack/hal.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  tx              1    wreg     unsigned char 
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  tx              1    5[BANK0 ] unsigned char 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;		None               void
  3754 ;; Registers used:
  3755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 1F/0
  3758 ;;		On exit  : 1F/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3761 ;;      Params:         0       0       0       0
  3762 ;;      Locals:         0       1       0       0
  3763 ;;      Temps:          0       0       0       0
  3764 ;;      Totals:         0       1       0       0
  3765 ;;Total ram usage:        1 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:   12
  3768 ;; This function calls:
  3769 ;;		_RfTrcvSetup
  3770 ;; This function is called by:
  3771 ;;		_RfHalInit
  3772 ;;		_RfHalTickTxTh
  3773 ;;		_RfHalStatemachine
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function _RfTrcvMode
  3779  037A                     _RfTrcvMode:	
  3780                           
  3781                           ;incstack = 0
  3782                           ; Regs used in _RfTrcvMode: [allreg]
  3783                           ;RfTrcvMode@tx stored from wreg
  3784  037A  00D7               	movwf	RfTrcvMode@tx
  3785                           
  3786                           ;hal.c: 57: rfStatus.inRx = 1 - tx;
  3787  037B  3C01               	sublw	1
  3788  037C  00A3               	movwf	_rfStatus+3
  3789                           
  3790                           ;hal.c: 58: RfTrcvSetup(tx);
  3791  037D  0857               	movf	RfTrcvMode@tx,w
  3792  037E  2073  3180         	fcall	_RfTrcvSetup
  3793                           
  3794                           ;hal.c: 60: if (tx == 1)
  3795  0380  0020               	movlb	0	; select bank0
  3796  0381  0B57               	decfsz	RfTrcvMode@tx,w
  3797  0382  0008               	return
  3798                           
  3799                           ;hal.c: 61: {
  3800                           ;hal.c: 62: rfStatus.isr.state = TX_PREAMBLE1;
  3801  0383  01A2               	clrf	_rfStatus+2
  3802  0384  0AA2               	incf	_rfStatus+2,f
  3803                           
  3804                           ;hal.c: 63: rfStatus.isr.byteCounter = 0;
  3805  0385  01A0               	clrf	_rfStatus
  3806  0386  0008               	return
  3807  0387                     __end_of_RfTrcvMode:	
  3808  0387                     __ptext17:	
  3809 ;; *************** function _RfHalTxGet *****************
  3810 ;; Defined at:
  3811 ;;		line 275 in file "../../../src/rfstack/hal.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;		None
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;		None
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      unsigned char 
  3818 ;; Registers used:
  3819 ;;		wreg
  3820 ;; Tracked objects:
  3821 ;;		On entry : 1F/0
  3822 ;;		On exit  : 1E/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3825 ;;      Params:         0       0       0       0
  3826 ;;      Locals:         0       0       0       0
  3827 ;;      Temps:          0       0       0       0
  3828 ;;      Totals:         0       0       0       0
  3829 ;;Total ram usage:        0 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    8
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_RfHalTickTxTh
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           
  3840                           ;psect for function _RfHalTxGet
  3841  0387                     _RfHalTxGet:	
  3842                           
  3843                           ;hal.c: 292: if (rfPackets[0].flags.proc == PCKT_NEED_PROC && rfPackets[0].flags.tx == 1)
  3844                           
  3845                           ;incstack = 0
  3846                           ; Regs used in _RfHalTxGet: [wreg]
  3847  0387  0021               	movlb	1	; select bank1
  3848  0388  1EA0               	btfss	_rfPackets^(0+128),5
  3849  0389  1E20               	btfss	_rfPackets^(0+128),4
  3850  038A  2B8F               	goto	l406
  3851                           
  3852                           ;hal.c: 293: {
  3853                           ;hal.c: 294: if (rfPackets[0].flags.wait_for_ack == 0)
  3854  038B  1D20               	btfss	_rfPackets^(0+128),2
  3855                           
  3856                           ;hal.c: 295: rfPackets[0].flags.proc = PCKT_NO_PROC;
  3857  038C  16A0               	bsf	_rfPackets^(0+128),5
  3858  038D  30A0               	movlw	_rfPackets& (0+255)
  3859                           
  3860                           ;hal.c: 296: rfPackets[0].flags.tx = 0;
  3861                           
  3862                           ;hal.c: 297: rfStatus.isr.txPacket = &(rfPackets[0]);
  3863                           
  3864                           ;hal.c: 298: return 1;
  3865  038E  2BDF               	ljmp	PL144	;call to abstracted procedure
  3866  038F                     l406:	
  3867                           
  3868                           ;hal.c: 299: }
  3869                           ;hal.c: 300: if (rfPackets[1].flags.proc == PCKT_NEED_PROC && rfPackets[1].flags.tx == 1)
  3870  038F  1EBC               	btfss	(_rfPackets^(0+128)+28),5
  3871  0390  1E3C               	btfss	(_rfPackets^(0+128)+28),4
  3872  0391  3400               	retlw	0
  3873                           
  3874                           ;hal.c: 301: {
  3875                           ;hal.c: 302: if (rfPackets[1].flags.wait_for_ack == 0)
  3876  0392  1D3C               	btfss	(_rfPackets^(0+128)+28),2
  3877                           
  3878                           ;hal.c: 303: rfPackets[1].flags.proc = PCKT_NO_PROC;
  3879  0393  16BC               	bsf	(_rfPackets^(0+128)+28),5
  3880  0394  30BC               	movlw	(_rfPackets+28)& (0+255)
  3881                           
  3882                           ;hal.c: 304: rfPackets[0].flags.tx = 0;
  3883                           
  3884                           ;hal.c: 305: rfStatus.isr.txPacket = &(rfPackets[1]);
  3885                           
  3886                           ;hal.c: 306: return 1;
  3887  0395  2BDF               	ljmp	PL144	;call to abstracted procedure
  3888  0396                     __end_of_RfHalTxGet:	
  3889                           ;hal.c: 307: }
  3890                           ;hal.c: 308: return 0;
  3891                           
  3892  0396                     __ptext14:	
  3893 ;; *************** function _RfTrcvCarrierPresent *****************
  3894 ;; Defined at:
  3895 ;;		line 51 in file "../../../src/devices/mrf49xa.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;		None
  3900 ;; Return value:  Size  Location     Type
  3901 ;;                  1    wreg      unsigned char 
  3902 ;; Registers used:
  3903 ;;		wreg, status,2, status,0, pclath, cstack
  3904 ;; Tracked objects:
  3905 ;;		On entry : 1F/0
  3906 ;;		On exit  : 1F/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3909 ;;      Params:         0       0       0       0
  3910 ;;      Locals:         0       0       0       0
  3911 ;;      Temps:          0       0       0       0
  3912 ;;      Totals:         0       0       0       0
  3913 ;;Total ram usage:        0 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:   10
  3916 ;; This function calls:
  3917 ;;		_RfTrcvStatus
  3918 ;; This function is called by:
  3919 ;;		_RfHalTickTxTh
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           
  3924                           ;psect for function _RfTrcvCarrierPresent
  3925  0396                     _RfTrcvCarrierPresent:	
  3926                           
  3927                           ;mrf49xa.c: 53: RfTrcvStatus();
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _RfTrcvCarrierPresent: [wreg+status,2+status,0+pclath+cstack]
  3931  0396  22F7               	fcall	_RfTrcvStatus
  3932                           
  3933                           ;mrf49xa.c: 54: return rfTrcvStatus.flags.msb.signalPresent;
  3934  0397  0020               	movlb	0	; select bank0
  3935  0398  0850               	movf	_rfTrcvStatus,w
  3936  0399  3901               	andlw	1
  3937  039A  0008               	return
  3938  039B                     __end_of_RfTrcvCarrierPresent:	
  3939  039B                     __ptext6:	
  3940 ;; *************** function _SysInitGpio *****************
  3941 ;; Defined at:
  3942 ;;		line 15 in file "../../../src/node/main.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;		None               void
  3949 ;; Registers used:
  3950 ;;		None
  3951 ;; Tracked objects:
  3952 ;;		On entry : 17F/1
  3953 ;;		On exit  : 17F/2
  3954 ;;		Unchanged: 160/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3956 ;;      Params:         0       0       0       0
  3957 ;;      Locals:         0       0       0       0
  3958 ;;      Temps:          0       0       0       0
  3959 ;;      Totals:         0       0       0       0
  3960 ;;Total ram usage:        0 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    8
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_main
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           
  3971                           ;psect for function _SysInitGpio
  3972  039B                     _SysInitGpio:	
  3973                           
  3974                           ;incstack = 0
  3975                           ; Regs used in _SysInitGpio: []
  3976                           ;main.c: 17: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  3977  039B  150C               	bsf	12,2	;volatile
  3978  039C  120C               	bcf	12,4	;volatile
  3979  039D  128C               	bcf	12,5	;volatile
  3980  039E  0022               	movlb	2	; select bank2
  3981  039F  120C               	bcf	12,4	;volatile
  3982  03A0  128C               	bcf	12,5	;volatile
  3983                           
  3984                           ;main.c: 18: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  3985  03A1  0021               	movlb	1	; select bank1
  3986  03A2  120D               	bcf	13,4	;volatile
  3987  03A3  130D               	bcf	13,6	;volatile
  3988  03A4  138D               	bcf	13,7	;volatile
  3989  03A5  168D               	bsf	13,5	;volatile
  3990                           
  3991                           ;main.c: 19: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  3992  03A6  108E               	bcf	14,1	;volatile
  3993  03A7  110E               	bcf	14,2	;volatile
  3994  03A8  120E               	bcf	14,4	;volatile
  3995  03A9  130E               	bcf	14,6	;volatile
  3996  03AA  138E               	bcf	14,7	;volatile
  3997  03AB  140E               	bsf	14,0	;volatile
  3998  03AC  158E               	bsf	14,3	;volatile
  3999  03AD  168E               	bsf	14,5	;volatile
  4000  03AE  0022               	movlb	2	; select bank2
  4001  03AF  108E               	bcf	14,1	;volatile
  4002  03B0  110E               	bcf	14,2	;volatile
  4003  03B1  120E               	bcf	14,4	;volatile
  4004  03B2  170E               	bsf	14,6	;volatile
  4005  03B3  138E               	bcf	14,7	;volatile
  4006                           
  4007                           ;main.c: 21: LATCbits.LATC1 = 0;
  4008  03B4  108E               	bcf	14,1	;volatile
  4009                           
  4010                           ;main.c: 22: LATCbits.LATC2 = 0;
  4011  03B5  110E               	bcf	14,2	;volatile
  4012  03B6  0008               	return
  4013  03B7                     __end_of_SysInitGpio:	
  4014  03B7                     PL130:	
  4015  03B7  0086               	movwf	6
  4016  03B8  0187               	clrf	7
  4017  03B9  0857               	movf	??_RfHalTickRxTh,w
  4018  03BA  0081               	movwf	1
  4019  03BB  0824               	movf	RfHalTickRxTh@packet,w
  4020  03BC  3E19               	addlw	25
  4021  03BD  0086               	movwf	6
  4022  03BE  0008               	return
  4023  03BF                     __end_ofPL130:	
  4024  03BF                     PL132:	
  4025  03BF  3083               	movlw	131
  4026  03C0  0020               	movlb	0	; select bank0
  4027  03C1  00D3               	movwf	MRF49XACommand@cmd
  4028  03C2  30CA               	movlw	202
  4029  03C3  00D4               	movwf	MRF49XACommand@cmd+1
  4030  03C4  0008               	return
  4031  03C5                     __end_ofPL132:	
  4032  03C5                     PL134:	
  4033  03C5  0187               	clrf	7
  4034  03C6  3FC0               	movwi [0]fsr1
  4035  03C7  3000               	movlw	0
  4036  03C8  3FC1               	movwi [1]fsr1
  4037  03C9  0008               	return
  4038  03CA                     __end_ofPL134:	
  4039  03CA                     PL136:	
  4040  03CA  0020               	movlb	0	; select bank0
  4041  03CB  00D3               	movwf	MRF49XACommand@cmd
  4042  03CC  30CA               	movlw	202
  4043  03CD  00D4               	movwf	MRF49XACommand@cmd+1
  4044  03CE  0008               	return
  4045  03CF                     __end_ofPL136:	
  4046  03CF                     PL138:	
  4047  03CF  0020               	movlb	0	; select bank0
  4048  03D0  00D3               	movwf	MRF49XACommand@cmd
  4049  03D1  3080               	movlw	128
  4050  03D2  00D4               	movwf	MRF49XACommand@cmd+1
  4051  03D3  0008               	return
  4052  03D4                     __end_ofPL138:	
  4053  03D4                     PL140:	
  4054  03D4  0020               	movlb	0	; select bank0
  4055  03D5  00D3               	movwf	MRF49XACommand@cmd
  4056  03D6  3082               	movlw	130
  4057  03D7  00D4               	movwf	MRF49XACommand@cmd+1
  4058  03D8  0008               	return
  4059  03D9                     __end_ofPL140:	
  4060  03D9                     PL142:	
  4061  03D9  0824               	movf	RfHalTickRxTh@packet,w
  4062  03DA  3E1B               	addlw	27
  4063  03DB  0086               	movwf	6
  4064  03DC  0187               	clrf	7
  4065  03DD  0801               	movf	1,w
  4066  03DE  0008               	return
  4067  03DF                     __end_ofPL142:	
  4068  03DF                     PL144:	
  4069  03DF  1220               	bcf	_rfPackets^(0+128),4
  4070  03E0  0020               	movlb	0	; select bank0
  4071  03E1  00A1               	movwf	_rfStatus+1
  4072  03E2  3401               	retlw	1
  4073  03E3                     __end_ofPL144:	
  4074  03E3                     PL146:	
  4075  03E3  0020               	movlb	0	; select bank0
  4076  03E4  30FA               	movlw	250
  4077  03E5  0AD8               	incf	MRF49XAInit@j,f
  4078  03E6  0258               	subwf	MRF49XAInit@j,w
  4079  03E7  0008               	return
  4080  03E8                     __end_ofPL146:	
  4081                           
  4082                           	psect	bssBANK0
  4083  0020                     __pbssBANK0:	
  4084  0020                     _rfStatus:	
  4085  0020                     	ds	4
  4086  0024                     RfHalTickRxTh@packet:	
  4087  0024                     	ds	1
  4088  0025                     RfHalTickRxTh@pktRxByteIndex:	
  4089  0025                     	ds	1
  4090  0026                     RfHalTickRxTh@rxByteTimeout:	
  4091  0026                     	ds	1
  4092  0027                     RfPacketsTickTh@packet:	
  4093  0027                     	ds	1
  4094  0028                     RfPacketsTickTh@timeout:	
  4095  0028                     	ds	1
  4096  0029                     _isr:	
  4097  0029                     	ds	1
  4098  002A                     _rfRxBf:	
  4099  002A                     	ds	32
  4100  004A                     _halPkTh:	
  4101  004A                     	ds	2
  4102  004C                     _halRxBfTh:	
  4103  004C                     	ds	2
  4104  004E                     _halTxBfTh:	
  4105  004E                     	ds	2
  4106  0050                     _rfTrcvStatus:	
  4107  0050                     	ds	2
  4108                           
  4109                           	psect	dataBANK0
  4110  005D                     __pdataBANK0:	
  4111  005D                     _delay:	
  4112  005D                     	ds	2
  4113  005F                     _rfRxCC:	
  4114  005F                     	ds	4
  4115                           
  4116                           	psect	bssBANK1
  4117  00A0                     __pbssBANK1:	
  4118  00A0                     _rfPackets:	
  4119  00A0                     	ds	56
  4120                           
  4121                           	psect	clrtext
  4122  0716                     clear_ram0:	
  4123                           ;	Called with FSR0 containing the base address, and
  4124                           ;	WREG with the size to clear
  4125                           
  4126  0716  0064               	clrwdt	;clear the watchdog before getting into this loop
  4127  0717                     clrloop0:	
  4128  0717  0180               	clrf	0	;clear RAM location pointed to by FSR
  4129  0718  3101               	addfsr 0,1
  4130  0719  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4131  071A  2F17               	goto	clrloop0	;have we reached the end yet?
  4132  071B  3400               	retlw	0	;all done for this memory range, return
  4133                           
  4134                           	psect	cstackCOMMON
  4135  0070                     __pcstackCOMMON:	
  4136  0070                     ?_SPI_Write:	
  4137  0070                     ?__CCBufInit:	
  4138                           ; 0 bytes @ 0x0
  4139                           
  4140  0070                     ?_RfTrcvMode:	
  4141                           ; 0 bytes @ 0x0
  4142                           
  4143  0070                     ?__CCBufRdReverse:	
  4144                           ; 0 bytes @ 0x0
  4145                           
  4146  0070                     ?_RfHalGetReturn:	
  4147                           ; 0 bytes @ 0x0
  4148                           
  4149  0070                     ?__CCBufWrByte:	
  4150                           ; 0 bytes @ 0x0
  4151                           
  4152  0070                     ?__CCBufReset:	
  4153                           ; 0 bytes @ 0x0
  4154                           
  4155  0070                     ?_AdcInit:	
  4156                           ; 0 bytes @ 0x0
  4157                           
  4158  0070                     ?_ExtIntInit:	
  4159                           ; 0 bytes @ 0x0
  4160                           
  4161  0070                     ?_extInt:	
  4162                           ; 0 bytes @ 0x0
  4163                           
  4164  0070                     ?_RfTrcvPut:	
  4165                           ; 0 bytes @ 0x0
  4166                           
  4167  0070                     ?_RfTrcvStatus:	
  4168                           ; 0 bytes @ 0x0
  4169                           
  4170  0070                     ?_RfTrcvSetup:	
  4171                           ; 0 bytes @ 0x0
  4172                           
  4173  0070                     ?_MRF49XAInit:	
  4174                           ; 0 bytes @ 0x0
  4175                           
  4176  0070                     ?_RfHalInit:	
  4177                           ; 0 bytes @ 0x0
  4178                           
  4179  0070                     ?_RfHalTxPutAgain:	
  4180                           ; 0 bytes @ 0x0
  4181                           
  4182  0070                     ?_RfHalStatemachine:	
  4183                           ; 0 bytes @ 0x0
  4184                           
  4185  0070                     ?_RfPacketsHandleClient:	
  4186                           ; 0 bytes @ 0x0
  4187                           
  4188  0070                     ?_SysInitGpio:	
  4189                           ; 0 bytes @ 0x0
  4190                           
  4191  0070                     ?_main:	
  4192                           ; 0 bytes @ 0x0
  4193                           
  4194  0070                     ?i1_RfTrcvPut:	
  4195                           ; 0 bytes @ 0x0
  4196                           
  4197  0070                     ?i1_RfTrcvStatus:	
  4198                           ; 0 bytes @ 0x0
  4199                           
  4200  0070                     ?i1_RfTrcvSetup:	
  4201                           ; 0 bytes @ 0x0
  4202                           
  4203  0070                     ??i1_SPI_Read:	
  4204                           ; 0 bytes @ 0x0
  4205                           
  4206  0070                     ?i1_SPI_Write:	
  4207                           ; 0 bytes @ 0x0
  4208                           
  4209  0070                     ??i1_SPI_Write:	
  4210                           ; 0 bytes @ 0x0
  4211                           
  4212  0070                     ?i1_RfTrcvMode:	
  4213                           ; 0 bytes @ 0x0
  4214                           
  4215  0070                     ?i1_RfHalStatemachine:	
  4216                           ; 0 bytes @ 0x0
  4217                           
  4218  0070                     ??i1__CCBufCanWr:	
  4219                           ; 0 bytes @ 0x0
  4220                           
  4221  0070                     ?i1__CCBufWrByte:	
  4222                           ; 0 bytes @ 0x0
  4223                           
  4224  0070                     ?_mrf49XaIsr:	
  4225                           ; 0 bytes @ 0x0
  4226                           
  4227  0070                     ?_SPI_Read:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_RfHalTxGet:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?__CCBufCanRd:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ?__CCBufPeekByte:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?_RfHalGetFree:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ?__CCBufRdByte:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_RfHalRxPut:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     ?_RfTrcvGet:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     ?_RfTrcvCarrierPresent:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0070                     ?_RfHalTickTxTh:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     ?_RfHalTickRxTh:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0070                     ?_RfHalRxGet:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0070                     ?_RfPacketsTickTh:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0070                     ?__CCBufCanWr:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0070                     ?i1_RfTrcvGet:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0070                     ?i1_RfTrcvCrcTick:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0070                     ?i1_SPI_Read:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0070                     ?i1__CCBufCalcPt:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0070                     ?i1__CCBufCanWr:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0070                     ?i1_mrf49XaIsr:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0070                     i1RfTrcvCrcTick@data:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0070                     i1SPI_Read@data:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0070                     i1SPI_Write@data:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0070                     i1__CCBufCalcPt@move:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299                           
  4300                           ; 1 bytes @ 0x0
  4301  0070                     	ds	1
  4302  0071                     ??i1_RfTrcvGet:	
  4303  0071                     ?i1_MRF49XACommand:	
  4304                           ; 0 bytes @ 0x1
  4305                           
  4306  0071                     ??i1_RfTrcvStatus:	
  4307                           ; 0 bytes @ 0x1
  4308                           
  4309  0071                     ??i1_RfTrcvCrcTick:	
  4310                           ; 0 bytes @ 0x1
  4311                           
  4312  0071                     ??i1__CCBufCalcPt:	
  4313                           ; 0 bytes @ 0x1
  4314                           
  4315  0071                     i1RfTrcvGet@b:	
  4316                           ; 0 bytes @ 0x1
  4317                           
  4318  0071                     i1RfTrcvCrcTick@initial:	
  4319                           ; 1 bytes @ 0x1
  4320                           
  4321  0071                     i1__CCBufCalcPt@entry:	
  4322                           ; 1 bytes @ 0x1
  4323                           
  4324  0071                     i1MRF49XACommand@cmd:	
  4325                           ; 1 bytes @ 0x1
  4326                           
  4327                           
  4328                           ; 2 bytes @ 0x1
  4329  0071                     	ds	1
  4330  0072                     i1__CCBufCalcPt@result:	
  4331                           
  4332                           ; 1 bytes @ 0x2
  4333  0072                     	ds	1
  4334  0073                     ??i1_RfTrcvPut:	
  4335  0073                     ??i1_MRF49XACommand:	
  4336                           ; 0 bytes @ 0x3
  4337                           
  4338  0073                     ??i1__CCBufWrByte:	
  4339                           ; 0 bytes @ 0x3
  4340                           
  4341  0073                     i1RfTrcvPut@byte:	
  4342                           ; 0 bytes @ 0x3
  4343                           
  4344                           
  4345                           ; 1 bytes @ 0x3
  4346  0073                     	ds	1
  4347  0074                     ??i1_RfTrcvSetup:	
  4348  0074                     i1RfTrcvSetup@tx:	
  4349                           ; 0 bytes @ 0x4
  4350                           
  4351  0074                     i1__CCBufWrByte@data:	
  4352                           ; 1 bytes @ 0x4
  4353                           
  4354                           
  4355                           ; 1 bytes @ 0x4
  4356  0074                     	ds	1
  4357  0075                     ??i1_RfTrcvMode:	
  4358  0075                     i1RfTrcvMode@tx:	
  4359                           ; 0 bytes @ 0x5
  4360                           
  4361                           
  4362                           ; 1 bytes @ 0x5
  4363  0075                     	ds	1
  4364  0076                     ??i1_RfHalStatemachine:	
  4365                           
  4366                           ; 0 bytes @ 0x6
  4367  0076                     	ds	1
  4368  0077                     ??_mrf49XaIsr:	
  4369  0077                     ??_MRF49XACommand:	
  4370                           ; 0 bytes @ 0x7
  4371                           
  4372  0077                     ??_SPI_Write:	
  4373                           ; 0 bytes @ 0x7
  4374                           
  4375  0077                     ??_SPI_Read:	
  4376                           ; 0 bytes @ 0x7
  4377                           
  4378  0077                     ??__CCBufInit:	
  4379                           ; 0 bytes @ 0x7
  4380                           
  4381  0077                     ??_RfTrcvMode:	
  4382                           ; 0 bytes @ 0x7
  4383                           
  4384  0077                     ??_RfHalTxGet:	
  4385                           ; 0 bytes @ 0x7
  4386                           
  4387  0077                     ??__CCBufCanRd:	
  4388                           ; 0 bytes @ 0x7
  4389                           
  4390  0077                     ??_RfHalGetFree:	
  4391                           ; 0 bytes @ 0x7
  4392                           
  4393  0077                     ??__CCBufRdReverse:	
  4394                           ; 0 bytes @ 0x7
  4395                           
  4396  0077                     ??_RfHalGetReturn:	
  4397                           ; 0 bytes @ 0x7
  4398                           
  4399  0077                     ??_RfHalRxPut:	
  4400                           ; 0 bytes @ 0x7
  4401                           
  4402  0077                     ??_AdcInit:	
  4403                           ; 0 bytes @ 0x7
  4404                           
  4405  0077                     ??_ExtIntInit:	
  4406                           ; 0 bytes @ 0x7
  4407                           
  4408  0077                     ??_extInt:	
  4409                           ; 0 bytes @ 0x7
  4410                           
  4411  0077                     ??_RfTrcvPut:	
  4412                           ; 0 bytes @ 0x7
  4413                           
  4414  0077                     ??_RfTrcvGet:	
  4415                           ; 0 bytes @ 0x7
  4416                           
  4417  0077                     ??_RfTrcvStatus:	
  4418                           ; 0 bytes @ 0x7
  4419                           
  4420  0077                     ??_RfTrcvCarrierPresent:	
  4421                           ; 0 bytes @ 0x7
  4422                           
  4423  0077                     ??_RfTrcvCrcTick:	
  4424                           ; 0 bytes @ 0x7
  4425                           
  4426  0077                     ??_RfTrcvSetup:	
  4427                           ; 0 bytes @ 0x7
  4428                           
  4429  0077                     ??_MRF49XAInit:	
  4430                           ; 0 bytes @ 0x7
  4431                           
  4432  0077                     ??_RfHalInit:	
  4433                           ; 0 bytes @ 0x7
  4434                           
  4435  0077                     ??_RfHalRxGet:	
  4436                           ; 0 bytes @ 0x7
  4437                           
  4438  0077                     ??_RfPacketSimpleReply:	
  4439                           ; 0 bytes @ 0x7
  4440                           
  4441  0077                     ??_RfPacketsHandleClient:	
  4442                           ; 0 bytes @ 0x7
  4443                           
  4444  0077                     ??__CCBufCalcPt:	
  4445                           ; 0 bytes @ 0x7
  4446                           
  4447  0077                     ??__CCBufCanWr:	
  4448                           ; 0 bytes @ 0x7
  4449                           
  4450  0077                     ??_SysInitGpio:	
  4451                           ; 0 bytes @ 0x7
  4452                           
  4453  0077                     ??_main:	
  4454                           ; 0 bytes @ 0x7
  4455                           
  4456  0077                     ??i1_mrf49XaIsr:	
  4457                           ; 0 bytes @ 0x7
  4458                           
  4459                           
  4460                           	psect	cstackBANK0
  4461  0052                     __pcstackBANK0:	
  4462                           ; 0 bytes @ 0x7
  4463                           
  4464  0052                     ??__CCBufReset:	
  4465  0052                     ??_RfHalTxPutAgain:	
  4466                           ; 0 bytes @ 0x0
  4467                           
  4468  0052                     ?_RfTrcvCrcTick:	
  4469                           ; 0 bytes @ 0x0
  4470                           
  4471  0052                     ?_RfHalTxPut:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0052                     ?__CCBufCalcPt:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0052                     RfTrcvCrcTick@data:	
  4478                           ; 1 bytes @ 0x0
  4479                           
  4480  0052                     SPI_Read@data:	
  4481                           ; 1 bytes @ 0x0
  4482                           
  4483  0052                     SPI_Write@data:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0052                     RfHalGetReturn@packet:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0052                     RfHalRxPut@packet:	
  4490                           ; 1 bytes @ 0x0
  4491                           
  4492  0052                     RfHalTxPut@needAck:	
  4493                           ; 1 bytes @ 0x0
  4494                           
  4495  0052                     __CCBufCalcPt@move:	
  4496                           ; 1 bytes @ 0x0
  4497                           
  4498                           
  4499                           ; 1 bytes @ 0x0
  4500  0052                     	ds	1
  4501  0053                     ?_MRF49XACommand:	
  4502  0053                     ??_RfHalTxPut:	
  4503                           ; 0 bytes @ 0x1
  4504                           
  4505  0053                     RfTrcvGet@b:	
  4506                           ; 0 bytes @ 0x1
  4507                           
  4508  0053                     RfTrcvCrcTick@initial:	
  4509                           ; 1 bytes @ 0x1
  4510                           
  4511  0053                     __CCBufReset@i:	
  4512                           ; 1 bytes @ 0x1
  4513                           
  4514  0053                     __CCBufCalcPt@entry:	
  4515                           ; 1 bytes @ 0x1
  4516                           
  4517  0053                     MRF49XACommand@cmd:	
  4518                           ; 1 bytes @ 0x1
  4519                           
  4520                           
  4521                           ; 2 bytes @ 0x1
  4522  0053                     	ds	1
  4523  0054                     RfHalTxPut@packet:	
  4524  0054                     __CCBufCalcPt@result:	
  4525                           ; 1 bytes @ 0x2
  4526                           
  4527                           
  4528                           ; 1 bytes @ 0x2
  4529  0054                     	ds	1
  4530  0055                     ??__CCBufPeekByte:	
  4531  0055                     ??__CCBufRdByte:	
  4532                           ; 0 bytes @ 0x3
  4533                           
  4534  0055                     ??__CCBufWrByte:	
  4535                           ; 0 bytes @ 0x3
  4536                           
  4537  0055                     ?_RfPacketSimpleReply:	
  4538                           ; 0 bytes @ 0x3
  4539                           
  4540  0055                     RfTrcvPut@byte:	
  4541                           ; 0 bytes @ 0x3
  4542                           
  4543  0055                     RfPacketSimpleReply@msg:	
  4544                           ; 1 bytes @ 0x3
  4545                           
  4546  0055                     __CCBufRdReverse@qty:	
  4547                           ; 1 bytes @ 0x3
  4548                           
  4549                           
  4550                           ; 1 bytes @ 0x3
  4551  0055                     	ds	1
  4552  0056                     RfTrcvSetup@tx:	
  4553  0056                     RfPacketSimpleReply@needAck:	
  4554                           ; 1 bytes @ 0x4
  4555                           
  4556  0056                     __CCBufRdByte@res:	
  4557                           ; 1 bytes @ 0x4
  4558                           
  4559  0056                     __CCBufPeekByte@res:	
  4560                           ; 1 bytes @ 0x4
  4561                           
  4562  0056                     __CCBufWrByte@data:	
  4563                           ; 1 bytes @ 0x4
  4564                           
  4565                           
  4566                           ; 1 bytes @ 0x4
  4567  0056                     	ds	1
  4568  0057                     ??_RfHalTickRxTh:	
  4569  0057                     MRF49XAInit@i:	
  4570                           ; 0 bytes @ 0x5
  4571                           
  4572  0057                     RfTrcvMode@tx:	
  4573                           ; 1 bytes @ 0x5
  4574                           
  4575  0057                     RfPacketSimpleReply@nodeTmp:	
  4576                           ; 1 bytes @ 0x5
  4577                           
  4578                           
  4579                           ; 1 bytes @ 0x5
  4580  0057                     	ds	1
  4581  0058                     ??_RfHalTickTxTh:	
  4582  0058                     ??_RfHalStatemachine:	
  4583                           ; 0 bytes @ 0x6
  4584                           
  4585  0058                     MRF49XAInit@j:	
  4586                           ; 0 bytes @ 0x6
  4587                           
  4588  0058                     RfHalInit@i:	
  4589                           ; 1 bytes @ 0x6
  4590                           
  4591  0058                     RfPacketSimpleReply@packet:	
  4592                           ; 1 bytes @ 0x6
  4593                           
  4594                           
  4595                           ; 1 bytes @ 0x6
  4596  0058                     	ds	1
  4597  0059                     RfHalTickRxTh@pktLength:	
  4598  0059                     RfPacketsHandleClient@packet:	
  4599                           ; 1 bytes @ 0x7
  4600                           
  4601                           
  4602                           ; 1 bytes @ 0x7
  4603  0059                     	ds	1
  4604  005A                     ??_RfPacketsTickTh:	
  4605  005A                     RfHalTickTxTh@pt:	
  4606                           ; 0 bytes @ 0x8
  4607                           
  4608  005A                     RfHalTickRxTh@pt:	
  4609                           ; 1 bytes @ 0x8
  4610                           
  4611                           
  4612                           ; 1 bytes @ 0x8
  4613  005A                     	ds	2
  4614  005C                     RfPacketsTickTh@pt:	
  4615                           
  4616                           ; 1 bytes @ 0xA
  4617  005C                     	ds	1
  4618                           
  4619                           	psect	text1
  4620  0651                     __ptext1:	
  4621 ;; *************** function _mrf49XaIsr *****************
  4622 ;; Defined at:
  4623 ;;		line 28 in file "../../../src/node/main.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;		None
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  1    wreg      unsigned char 
  4630 ;; Registers used:
  4631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 1F/0
  4634 ;;		On exit  : 1F/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4637 ;;      Params:         0       0       0       0
  4638 ;;      Locals:         0       0       0       0
  4639 ;;      Temps:          0       0       0       0
  4640 ;;      Totals:         0       0       0       0
  4641 ;;Total ram usage:        0 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:   14
  4644 ;; This function calls:
  4645 ;;		_RfHalStatemachine
  4646 ;;		_RfTrcvSetup
  4647 ;;		_RfTrcvStatus
  4648 ;; This function is called by:
  4649 ;;		_main
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           
  4654                           ;psect for function _mrf49XaIsr
  4655  0651                     _mrf49XaIsr:	
  4656  0651                     l627:	
  4657                           ;incstack = 0
  4658                           ; Regs used in _mrf49XaIsr: [allreg]
  4659                           ;main.c: 30: do
  4660                           
  4661                           
  4662                           ;main.c: 31: {
  4663                           ;main.c: 32: RfTrcvStatus();
  4664  0651  3182  22F7  3186   	fcall	_RfTrcvStatus
  4665                           
  4666                           ;main.c: 33: isr++;
  4667  0654  0020               	movlb	0	; select bank0
  4668  0655  0AA9               	incf	_isr,f	;volatile
  4669                           
  4670                           ;main.c: 35: if (rfTrcvStatus.flags.msb.fifoTxRx)
  4671  0656  1FD0               	btfss	_rfTrcvStatus,7
  4672  0657  2E5F               	goto	l2275
  4673                           
  4674                           ;main.c: 36: {
  4675                           ;main.c: 37: if (rfStatus.inRx ==1 && rfTrcvStatus.flags.lsb.dataQualityOK == 0)
  4676  0658  0323               	decf	_rfStatus+3,w
  4677  0659  1D03               	skipz
  4678  065A  2E5D               	goto	l2273
  4679  065B  1FD1               	btfss	_rfTrcvStatus+1,7
  4680  065C  2E5F               	goto	l2275
  4681  065D                     l2273:	
  4682                           
  4683                           ;main.c: 41: else
  4684                           ;main.c: 42: {
  4685                           ;main.c: 43: RfHalStatemachine();
  4686  065D  266D  3186         	fcall	_RfHalStatemachine
  4687  065F                     l2275:	
  4688                           
  4689                           ;main.c: 44: }
  4690                           ;main.c: 45: }
  4691                           ;main.c: 46: if (rfTrcvStatus.flags.msb.por)
  4692  065F  1F50               	btfss	_rfTrcvStatus,6
  4693  0660  2E65               	goto	l2279
  4694                           
  4695                           ;main.c: 47: {
  4696                           ;main.c: 48: RfTrcvSetup(0);
  4697  0661  3000               	movlw	0
  4698  0662  3180  2073  3186   	fcall	_RfTrcvSetup
  4699  0665                     l2279:	
  4700                           
  4701                           ;main.c: 49: }
  4702                           ;main.c: 51: } while (rfTrcvStatus.flags.msb.por || rfTrcvStatus.flags.msb.fifoTxRx);
  4703  0665  0020               	movlb	0	; select bank0
  4704  0666  1F50               	btfss	_rfTrcvStatus,6
  4705  0667  1BD0               	btfsc	_rfTrcvStatus,7
  4706  0668  2E51               	goto	l627
  4707                           
  4708                           ;main.c: 53: return (PORTAbits.RA2 == 1) ? 1 : 0;
  4709  0669  0C0C               	rrf	12,w	;volatile
  4710  066A  0C89               	rrf	9,f
  4711  066B  3901               	andlw	1
  4712  066C  0008               	return
  4713  066D                     __end_of_mrf49XaIsr:	
  4714  066D                     __ptext2:	
  4715 ;; *************** function _RfHalStatemachine *****************
  4716 ;; Defined at:
  4717 ;;		line 351 in file "../../../src/rfstack/hal.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;		None
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;		None
  4722 ;; Return value:  Size  Location     Type
  4723 ;;		None               void
  4724 ;; Registers used:
  4725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4726 ;; Tracked objects:
  4727 ;;		On entry : 1F/0
  4728 ;;		On exit  : 1F/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4731 ;;      Params:         0       0       0       0
  4732 ;;      Locals:         0       0       0       0
  4733 ;;      Temps:          0       1       0       0
  4734 ;;      Totals:         0       1       0       0
  4735 ;;Total ram usage:        1 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:   13
  4738 ;; This function calls:
  4739 ;;		_RfTrcvCrcTick
  4740 ;;		_RfTrcvGet
  4741 ;;		_RfTrcvMode
  4742 ;;		_RfTrcvPut
  4743 ;;		__CCBufWrByte
  4744 ;; This function is called by:
  4745 ;;		_mrf49XaIsr
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           
  4750                           ;psect for function _RfHalStatemachine
  4751  066D                     _RfHalStatemachine:	
  4752                           
  4753                           ;hal.c: 405: break;
  4754                           
  4755                           ;hal.c: 353: switch (rfStatus.isr.state)
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _RfHalStatemachine: [allreg]
  4759  066D  0822               	movf	_rfStatus+2,w
  4760                           
  4761                           ; Switch size 1, requested type "space"
  4762                           ; Number of cases is 11, Range of values is 0 to 10
  4763                           ; switch strategies available:
  4764                           ; Name         Instructions Cycles
  4765                           ; direct_byte           28     6 (fixed)
  4766                           ; simple_byte           34    18 (average)
  4767                           ; jumptable            260     6 (fixed)
  4768                           ;	Chosen strategy is direct_byte
  4769  066E  0084               	movwf	4
  4770  066F  300B               	movlw	11
  4771  0670  0204               	subwf	4,w
  4772  0671  1803               	skipnc
  4773  0672  0008               	return
  4774  0673  3183               	movlp	high S3237
  4775  0674  3504               	lslf	4,w
  4776  0675  3EE8               	addlw	low S3237
  4777  0676  0082               	movwf	2
  4778  0677  0008               	return
  4779  0678                     l2741:	
  4780                           
  4781                           ;hal.c: 357: _CCBufWrByte(RfTrcvGet());
  4782  0678  26C9  3186         	fcall	_RfTrcvGet
  4783  067A  2ED7               	ljmp	__CCBufWrByte
  4784  067B                     l2743:	
  4785                           ;hal.c: 358: break;
  4786                           
  4787                           
  4788                           ;hal.c: 362: case TX_PREAMBLE2:
  4789                           ;hal.c: 363: RfTrcvPut(0xAA);
  4790  067B  30AA               	movlw	170
  4791  067C                     L1:	
  4792  067C  26BF               	fcall	_RfTrcvPut
  4793                           
  4794                           ;hal.c: 364: rfStatus.isr.state++;
  4795  067D  0020               	movlb	0	; select bank0
  4796  067E  0AA2               	incf	_rfStatus+2,f
  4797                           
  4798                           ;hal.c: 365: break;
  4799  067F  0008               	return
  4800  0680                     l2747:	
  4801                           
  4802                           ;hal.c: 368: RfTrcvPut(0x2D);
  4803  0680  302D               	movlw	45
  4804  0681  2E7C               	goto	L1
  4805  0682                     l2751:	
  4806                           
  4807                           ;hal.c: 372: RfTrcvPut(0xD4);
  4808  0682  30D4               	movlw	212
  4809  0683  2E7C               	goto	L1
  4810  0684                     l2755:	
  4811                           
  4812                           ;hal.c: 376: RfTrcvPut(rfStatus.isr.txPacket->size);
  4813  0684  0821               	movf	_rfStatus+1,w
  4814  0685  3E1B               	addlw	27
  4815  0686  2EB2               	goto	L2
  4816  0687                     l2759:	
  4817                           
  4818                           ;hal.c: 380: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  4819  0687  0820               	movf	_rfStatus,w
  4820  0688  0721               	addwf	_rfStatus+1,w
  4821  0689  00D8               	movwf	??_RfHalStatemachine
  4822  068A  0A58               	incf	??_RfHalStatemachine,w
  4823  068B  0086               	movwf	6
  4824  068C  0187               	clrf	7
  4825  068D  0801               	movf	1,w
  4826  068E  26BF  3186         	fcall	_RfTrcvPut
  4827                           
  4828                           ;hal.c: 381: rfStatus.isr.txPacket->crcTx = RfTrcvCrcTick(rfStatus.isr.txPacket->crcTx, 
      +                          rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  4829  0690  0020               	movlb	0	; select bank0
  4830  0691  0821               	movf	_rfStatus+1,w
  4831  0692  3E19               	addlw	25
  4832  0693  0086               	movwf	6
  4833  0694  0187               	clrf	7
  4834  0695  0820               	movf	_rfStatus,w
  4835  0696  0721               	addwf	_rfStatus+1,w
  4836  0697  00D8               	movwf	??_RfHalStatemachine
  4837  0698  0084               	movwf	4
  4838  0699  0185               	clrf	5
  4839  069A  3F01               	moviw [1]fsr0
  4840  069B  00D2               	movwf	RfTrcvCrcTick@data
  4841  069C  0821               	movf	_rfStatus+1,w
  4842  069D  3E19               	addlw	25
  4843  069E  0084               	movwf	4
  4844  069F  0800               	movf	0,w
  4845  06A0                     i1L__ptext24:	
  4846                           
  4847                           ;psect for function _RfTrcvCrcTick
  4848  06A0                     i1L_RfTrcvCrcTick:	
  4849                           
  4850                           ;incstack = 0
  4851                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  4852                           ;RfTrcvCrcTick@initial stored from wreg
  4853  06A0  00D3               	movwf	RfTrcvCrcTick@initial
  4854  06A1                     i1Ll2381:	
  4855                           
  4856                           ;mrf49xa.c: 59: return (initial ^ data);
  4857  06A1  0853               	movf	RfTrcvCrcTick@initial,w
  4858  06A2  0652               	xorwf	RfTrcvCrcTick@data,w
  4859  06A3                     i1Ll181:	
  4860  06A3  0081               	movwf	1
  4861                           
  4862                           ;hal.c: 382: rfStatus.isr.byteCounter++;
  4863  06A4  0AA0               	incf	_rfStatus,f
  4864                           
  4865                           ;hal.c: 383: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  4866  06A5  0821               	movf	_rfStatus+1,w
  4867  06A6  3E1B               	addlw	27
  4868  06A7  0086               	movwf	6
  4869  06A8  0187               	clrf	7
  4870  06A9  0801               	movf	1,w
  4871  06AA  0220               	subwf	_rfStatus,w
  4872  06AB  1C03               	skipc
  4873  06AC  0008               	return
  4874                           
  4875                           ;hal.c: 384: rfStatus.isr.state = TX_CRC;
  4876  06AD  3007               	movlw	7
  4877  06AE  00A2               	movwf	_rfStatus+2
  4878  06AF  0008               	return
  4879  06B0                     l2769:	
  4880                           
  4881                           ;hal.c: 387: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  4882  06B0  0821               	movf	_rfStatus+1,w
  4883  06B1  3E19               	addlw	25
  4884  06B2                     L2:	
  4885  06B2  0086               	movwf	6
  4886  06B3  0187               	clrf	7
  4887  06B4  0801               	movf	1,w
  4888  06B5  2E7C               	goto	L1
  4889  06B6                     l2773:	
  4890                           
  4891                           ;hal.c: 392: case TX_NULL2:
  4892                           ;hal.c: 393: RfTrcvPut(0);
  4893  06B6  3000               	movlw	0
  4894  06B7  2E7C               	goto	L1
  4895  06B8                     l2777:	
  4896                           
  4897                           ;hal.c: 397: RfTrcvPut(0);
  4898  06B8  3000               	movlw	0
  4899  06B9  26BF               	fcall	_RfTrcvPut
  4900                           
  4901                           ;hal.c: 398: rfStatus.isr.state = RX_RECV;
  4902  06BA  0020               	movlb	0	; select bank0
  4903  06BB  3000               	movlw	0
  4904  06BC  01A2               	clrf	_rfStatus+2
  4905                           
  4906                           ;hal.c: 404: RfTrcvMode(0);
  4907  06BD  3183  2B7A         	ljmp	_RfTrcvMode
  4908  06BF                     __end_of_RfHalStatemachine:	
  4909  06BF                     __ptext34:	
  4910 ;; *************** function _RfTrcvPut *****************
  4911 ;; Defined at:
  4912 ;;		line 11 in file "../../../src/devices/mrf49xa.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  byte            1    wreg     unsigned char 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  byte            1    3[BANK0 ] unsigned char 
  4917 ;; Return value:  Size  Location     Type
  4918 ;;		None               void
  4919 ;; Registers used:
  4920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 1D/0
  4923 ;;		On exit  : 1F/2
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4926 ;;      Params:         0       0       0       0
  4927 ;;      Locals:         0       1       0       0
  4928 ;;      Temps:          0       0       0       0
  4929 ;;      Totals:         0       1       0       0
  4930 ;;Total ram usage:        1 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:   10
  4933 ;; This function calls:
  4934 ;;		_MRF49XACommand
  4935 ;; This function is called by:
  4936 ;;		_RfTrcvSetup
  4937 ;;		_RfHalStatemachine
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           
  4942                           ;psect for function _RfTrcvPut
  4943  06BF                     _RfTrcvPut:	
  4944                           
  4945                           ;incstack = 0
  4946                           ; Regs used in _RfTrcvPut: [allreg]
  4947                           ;RfTrcvPut@byte stored from wreg
  4948  06BF  0020               	movlb	0	; select bank0
  4949  06C0  00D5               	movwf	RfTrcvPut@byte
  4950                           
  4951                           ;mrf49xa.c: 13: MRF49XACommand(0xB800 | byte);
  4952  06C1  00D3               	movwf	MRF49XACommand@cmd
  4953  06C2  3000               	movlw	0
  4954  06C3  01D4               	clrf	MRF49XACommand@cmd+1
  4955  06C4  04D3               	iorwf	MRF49XACommand@cmd,f
  4956  06C5  30B8               	movlw	184
  4957  06C6  04D4               	iorwf	MRF49XACommand@cmd+1,f
  4958  06C7  3181  2925         	ljmp	l2289
  4959  06C9                     __end_of_RfTrcvPut:	
  4960  06C9                     __ptext5:	
  4961 ;; *************** function _RfTrcvGet *****************
  4962 ;; Defined at:
  4963 ;;		line 17 in file "../../../src/devices/mrf49xa.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  b               1    1[BANK0 ] unsigned char 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      unsigned char 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 1F/0
  4974 ;;		On exit  : 1F/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4977 ;;      Params:         0       0       0       0
  4978 ;;      Locals:         0       1       0       0
  4979 ;;      Temps:          0       0       0       0
  4980 ;;      Totals:         0       1       0       0
  4981 ;;Total ram usage:        1 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    9
  4984 ;; This function calls:
  4985 ;;		_SPI_Read
  4986 ;;		_SPI_Write
  4987 ;; This function is called by:
  4988 ;;		_RfHalStatemachine
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _RfTrcvGet
  4994  06C9                     _RfTrcvGet:	
  4995                           
  4996                           ;mrf49xa.c: 19: LATCbits.LATC6 = 0;;
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  5000  06C9  0022               	movlb	2	; select bank2
  5001  06CA  130E               	bcf	14,6	;volatile
  5002                           
  5003                           ;mrf49xa.c: 21: SPI_Write(0xB0);
  5004  06CB  30B0               	movlw	176
  5005  06CC  3181  2130  3186   	fcall	_SPI_Write
  5006                           
  5007                           ;mrf49xa.c: 22: UI08_t b = SPI_Read();
  5008  06CF  3183  2301         	fcall	_SPI_Read
  5009  06D1  00D3               	movwf	RfTrcvGet@b
  5010                           
  5011                           ;mrf49xa.c: 24: LATCbits.LATC6 = 1;;
  5012  06D2  0022               	movlb	2	; select bank2
  5013  06D3  170E               	bsf	14,6	;volatile
  5014                           
  5015                           ;mrf49xa.c: 26: return b;
  5016  06D4  0020               	movlb	0	; select bank0
  5017  06D5  0853               	movf	RfTrcvGet@b,w
  5018  06D6  0008               	return
  5019  06D7                     __end_of_RfTrcvGet:	
  5020  06D7                     __ptext3:	
  5021 ;; *************** function __CCBufWrByte *****************
  5022 ;; Defined at:
  5023 ;;		line 89 in file "../../../src/utilities/ccbuf_static.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  data            1    wreg     unsigned char 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  data            1    4[BANK0 ] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 1F/0
  5034 ;;		On exit  : 1F/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5037 ;;      Params:         0       0       0       0
  5038 ;;      Locals:         0       1       0       0
  5039 ;;      Temps:          0       1       0       0
  5040 ;;      Totals:         0       2       0       0
  5041 ;;Total ram usage:        2 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    9
  5044 ;; This function calls:
  5045 ;;		__CCBufCalcPt
  5046 ;;		__CCBufCanWr
  5047 ;; This function is called by:
  5048 ;;		_RfHalStatemachine
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           
  5053                           ;psect for function __CCBufWrByte
  5054  06D7                     __CCBufWrByte:	
  5055                           
  5056                           ;incstack = 0
  5057                           ; Regs used in __CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5058                           ;__CCBufWrByte@data stored from wreg
  5059  06D7  00D6               	movwf	__CCBufWrByte@data
  5060  06D8                     i2L__ptext4:	
  5061                           ;ccbuf_static.c: 91: if (_CCBufCanWr())
  5062                           
  5063                           
  5064                           ;psect for function __CCBufCanWr
  5065  06D8                     i2L__CCBufCanWr:	
  5066  06D8                     i2Ll2877:	
  5067  06D8  0861               	movf	_rfRxCC+2,w
  5068  06D9  0662               	xorwf	_rfRxCC+3,w
  5069  06DA  1D03               	btfss	3,2
  5070  06DB  2EE0               	ljmp	i2Ll2885
  5071  06DC  2EDE               	ljmp	i2Ll2879
  5072  06DD                     i2Lu2111:	
  5073  06DD  2EE0               	ljmp	i2Ll2885
  5074  06DE                     i2Lu2110:	
  5075  06DE                     i2Ll2879:	
  5076  06DE  3000               	movlw	0
  5077  06DF  2EE1               	ljmp	iL8
  5078  06E0                     i2Ll2885:	
  5079                           
  5080                           ;ccbuf_static.c: 37: else return 1;
  5081  06E0  3001               	movlw	1
  5082  06E1                     i2Ll528:	
  5083  06E1                     iL8:	
  5084  06E1  3A00               	xorlw	0
  5085  06E2  1903               	skipnz
  5086  06E3  0008               	return
  5087  06E4  0861               	movf	_rfRxCC+2,w
  5088  06E5  075F               	addwf	_rfRxCC,w
  5089  06E6  00D5               	movwf	??__CCBufWrByte
  5090  06E7  0086               	movwf	6
  5091  06E8  0187               	clrf	7
  5092  06E9  0856               	movf	__CCBufWrByte@data,w
  5093  06EA  0081               	movwf	1
  5094  06EB  01D2               	clrf	__CCBufCalcPt@move
  5095  06EC  0AD2               	incf	__CCBufCalcPt@move,f
  5096  06ED  0861               	movf	_rfRxCC+2,w
  5097  06EE  3182  2293         	fcall	__CCBufCalcPt
  5098  06F0  00E1               	movwf	_rfRxCC+2
  5099  06F1  0008               	return
  5100  06F2                     __end_of__CCBufWrByte:	
  5101                           
  5102                           	psect	swtext1
  5103  03E8                     __pswtext1:	
  5104  03E8                     S3237:	
  5105  03E8  3186  2E78         	ljmp	l2741
  5106  03EA  3186  2E7B         	ljmp	l2743
  5107  03EC  3186  2E7B         	ljmp	l2743
  5108  03EE  3186  2E80         	ljmp	l2747
  5109  03F0  3186  2E82         	ljmp	l2751
  5110  03F2  3186  2E84         	ljmp	l2755
  5111  03F4  3186  2E87         	ljmp	l2759
  5112  03F6  3186  2EB0         	ljmp	l2769
  5113  03F8  3186  2EB6         	ljmp	l2773
  5114  03FA  3186  2EB6         	ljmp	l2773
  5115  03FC  3186  2EB8         	ljmp	l2777
  5116                           
  5117                           	psect	text4
  5118  0000                     __ptext4:	
  5119 ;; *************** function __CCBufCanWr *****************
  5120 ;; Defined at:
  5121 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;		None
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;		None
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  1    wreg      unsigned char 
  5128 ;; Registers used:
  5129 ;;		wreg
  5130 ;; Tracked objects:
  5131 ;;		On entry : 1F/0
  5132 ;;		On exit  : 1F/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5135 ;;      Params:         0       0       0       0
  5136 ;;      Locals:         0       0       0       0
  5137 ;;      Temps:          0       0       0       0
  5138 ;;      Totals:         0       0       0       0
  5139 ;;Total ram usage:        0 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    8
  5142 ;; This function calls:
  5143 ;;		Nothing
  5144 ;; This function is called by:
  5145 ;;		__CCBufWrByte
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149  0000                     __CCBufCanWr:	
  5150                           ;psect for function __CCBufCanWr
  5151                           
  5152  0000                     __end_of__CCBufCanWr:	
  5153                           ;ccbuf_static.c: 37: else return 1;
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in __CCBufCanWr: [wreg]
  5157                           
  5158                           
  5159                           	psect	text7
  5160  0591                     __ptext7:	
  5161 ;; *************** function _RfPacketsTickTh *****************
  5162 ;; Defined at:
  5163 ;;		line 158 in file "../../../src/rfstack/packets.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  pt              1    wreg     PTR struct pt
  5166 ;;		 -> halPkTh(2), 
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  pt              1   10[BANK0 ] PTR struct pt
  5169 ;;		 -> halPkTh(2), 
  5170 ;;  PT_YIELD_FLA    1    0        unsigned char 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      unsigned char 
  5173 ;; Registers used:
  5174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 1E/0
  5177 ;;		On exit  : 1F/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5180 ;;      Params:         0       0       0       0
  5181 ;;      Locals:         0       1       0       0
  5182 ;;      Temps:          0       2       0       0
  5183 ;;      Totals:         0       3       0       0
  5184 ;;Total ram usage:        3 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:   11
  5187 ;; This function calls:
  5188 ;;		_RfHalRxGet
  5189 ;;		_RfHalTxPutAgain
  5190 ;;		_RfPacketsHandleClient
  5191 ;; This function is called by:
  5192 ;;		_main
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _RfPacketsTickTh
  5198  0591                     _RfPacketsTickTh:	
  5199                           
  5200                           ;incstack = 0
  5201                           ; Regs used in _RfPacketsTickTh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5202                           ;RfPacketsTickTh@pt stored from wreg
  5203  0591  0020               	movlb	0	; select bank0
  5204  0592  00DC               	movwf	RfPacketsTickTh@pt
  5205                           
  5206                           ;packets.c: 165: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  5207  0593  0AA8               	incf	RfPacketsTickTh@timeout,f
  5208  0594  2DB9               	goto	l2843
  5209  0595                     l2823:	
  5210  0595  085C               	movf	RfPacketsTickTh@pt,w
  5211  0596  0086               	movwf	6
  5212  0597  30AA               	movlw	170
  5213  0598  3183  23C5  3185   	fcall	PL134	;call to abstracted procedure
  5214  059B                     l2825:	
  5215  059B  25CD  3185         	fcall	_RfHalRxGet
  5216  059D  0020               	movlb	0	; select bank0
  5217  059E  00A7               	movwf	RfPacketsTickTh@packet
  5218  059F  08A7               	movf	RfPacketsTickTh@packet,f
  5219  05A0  1D03               	skipz
  5220  05A1  2DA6               	goto	l2831
  5221  05A2  301A               	movlw	26
  5222  05A3  0228               	subwf	RfPacketsTickTh@timeout,w
  5223  05A4  1C03               	btfss	3,0
  5224  05A5  0008               	return
  5225  05A6                     l2831:	
  5226                           
  5227                           ;packets.c: 172: if (packet)
  5228  05A6  0827               	movf	RfPacketsTickTh@packet,w
  5229  05A7  1903               	btfsc	3,2
  5230  05A8  2DAC               	goto	l2835
  5231                           
  5232                           ;packets.c: 173: {
  5233                           ;packets.c: 184: RfPacketsHandleClient(packet);
  5234  05A9  0827               	movf	RfPacketsTickTh@packet,w
  5235  05AA  25EA  3185         	fcall	_RfPacketsHandleClient
  5236  05AC                     l2835:	
  5237                           
  5238                           ;packets.c: 186: }
  5239                           ;packets.c: 188: if (timeout > 25)
  5240  05AC  301A               	movlw	26
  5241  05AD  0228               	subwf	RfPacketsTickTh@timeout,w
  5242  05AE  1C03               	skipc
  5243  05AF  2DB7               	goto	l2841
  5244                           
  5245                           ;packets.c: 189: {
  5246                           ;packets.c: 191: if (packet->flags.proc == PCKT_NEED_PROC)
  5247  05B0  0827               	movf	RfPacketsTickTh@packet,w
  5248  05B1  0086               	movwf	6
  5249  05B2  0187               	clrf	7
  5250  05B3  1A81               	btfsc	1,5
  5251  05B4  2DB7               	goto	l2841
  5252                           
  5253                           ;packets.c: 192: {
  5254                           ;packets.c: 193: RfHalTxPutAgain();
  5255  05B5  25DA  3185         	fcall	_RfHalTxPutAgain
  5256  05B7                     l2841:	
  5257                           
  5258                           ;packets.c: 194: }
  5259                           ;packets.c: 195: }
  5260                           ;packets.c: 197: timeout = 0;
  5261  05B7  01A8               	clrf	RfPacketsTickTh@timeout
  5262  05B8  2D95               	goto	l2823
  5263  05B9                     l2843:	
  5264  05B9  085C               	movf	RfPacketsTickTh@pt,w
  5265  05BA  0086               	movwf	6
  5266  05BB  0187               	clrf	7
  5267  05BC  3F40               	moviw [0]fsr1
  5268  05BD  00DA               	movwf	??_RfPacketsTickTh
  5269  05BE  3F41               	moviw [1]fsr1
  5270  05BF  00DB               	movwf	??_RfPacketsTickTh+1
  5271                           
  5272                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5273                           ; Switch size 1, requested type "space"
  5274                           ; Number of cases is 1, Range of values is 0 to 0
  5275                           ; switch strategies available:
  5276                           ; Name         Instructions Cycles
  5277                           ; simple_byte            4     3 (average)
  5278                           ; direct_byte            8     6 (fixed)
  5279                           ; jumptable            260     6 (fixed)
  5280                           ;	Chosen strategy is simple_byte
  5281  05C0  1903               	skipnz
  5282  05C1  2DC3               	goto	l3239
  5283  05C2  2DCB               	goto	l2845
  5284  05C3                     l3239:	
  5285                           
  5286                           ; Switch size 1, requested type "space"
  5287                           ; Number of cases is 2, Range of values is 0 to 170
  5288                           ; switch strategies available:
  5289                           ; Name         Instructions Cycles
  5290                           ; simple_byte            7     4 (average)
  5291                           ; jumptable            260     6 (fixed)
  5292                           ;	Chosen strategy is simple_byte
  5293  05C3  085A               	movf	??_RfPacketsTickTh,w
  5294  05C4  3A00               	xorlw	0	; case 0
  5295  05C5  1903               	skipnz
  5296  05C6  2D95               	goto	l2823
  5297  05C7  3AAA               	xorlw	170	; case 170
  5298  05C8  1903               	skipnz
  5299  05C9  2D9B               	goto	l2825
  5300  05CA  2DCB               	goto	l2845
  5301  05CB                     l2845:	
  5302  05CB  085C               	movf	RfPacketsTickTh@pt,w
  5303  05CC  2E4B               	ljmp	PL128	;call to abstracted procedure
  5304  05CD                     __end_of_RfPacketsTickTh:	
  5305  05CD                     __ptext12:	
  5306 ;; *************** function _RfHalRxGet *****************
  5307 ;; Defined at:
  5308 ;;		line 245 in file "../../../src/rfstack/hal.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      PTR struct RfTransceiver
  5315 ;; Registers used:
  5316 ;;		wreg
  5317 ;; Tracked objects:
  5318 ;;		On entry : 1F/0
  5319 ;;		On exit  : 1F/1
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5322 ;;      Params:         0       0       0       0
  5323 ;;      Locals:         0       0       0       0
  5324 ;;      Temps:          0       0       0       0
  5325 ;;      Totals:         0       0       0       0
  5326 ;;Total ram usage:        0 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    8
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		_RfPacketsTickTh
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           
  5337                           ;psect for function _RfHalRxGet
  5338  05CD                     _RfHalRxGet:	
  5339                           
  5340                           ;hal.c: 261: if (rfPackets[0].flags.proc == PCKT_NEED_PROC && rfPackets[0].flags.tx == 0)
  5341                           
  5342                           ;incstack = 0
  5343                           ; Regs used in _RfHalRxGet: [wreg]
  5344  05CD  0021               	movlb	1	; select bank1
  5345  05CE  1EA0               	btfss	_rfPackets^(0+128),5
  5346  05CF  1A20               	btfsc	_rfPackets^(0+128),4
  5347  05D0  2DD4               	goto	l401
  5348  05D1  30A0               	movlw	_rfPackets& (0+255)
  5349                           
  5350                           ;hal.c: 262: {
  5351                           ;hal.c: 263: rfPackets[0].flags.proc = PCKT_NO_PROC;
  5352  05D2  16A0               	bsf	_rfPackets^(0+128),5
  5353                           
  5354                           ;hal.c: 264: return &(rfPackets[0]);
  5355  05D3  0008               	return
  5356  05D4                     l401:	
  5357                           
  5358                           ;hal.c: 265: }
  5359                           ;hal.c: 266: if (rfPackets[1].flags.proc == PCKT_NEED_PROC && rfPackets[1].flags.tx == 0)
  5360  05D4  1EBC               	btfss	(_rfPackets^(0+128)+28),5
  5361  05D5  1A3C               	btfsc	(_rfPackets^(0+128)+28),4
  5362  05D6  3400               	retlw	0
  5363  05D7  30BC               	movlw	(_rfPackets+28)& (0+255)
  5364                           
  5365                           ;hal.c: 267: {
  5366                           ;hal.c: 268: rfPackets[1].flags.proc = PCKT_NO_PROC;
  5367  05D8  16BC               	bsf	(_rfPackets^(0+128)+28),5
  5368                           
  5369                           ;hal.c: 269: return &(rfPackets[1]);
  5370  05D9  0008               	return
  5371  05DA                     __end_of_RfHalRxGet:	
  5372                           ;hal.c: 270: }
  5373                           ;hal.c: 271: return 0;
  5374                           
  5375  05DA                     __ptext11:	
  5376 ;; *************** function _RfHalTxPutAgain *****************
  5377 ;; Defined at:
  5378 ;;		line 344 in file "../../../src/rfstack/hal.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;		None               void
  5385 ;; Registers used:
  5386 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5387 ;; Tracked objects:
  5388 ;;		On entry : 1F/0
  5389 ;;		On exit  : 1F/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5392 ;;      Params:         0       0       0       0
  5393 ;;      Locals:         0       0       0       0
  5394 ;;      Temps:          0       1       0       0
  5395 ;;      Totals:         0       1       0       0
  5396 ;;Total ram usage:        1 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    8
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_RfPacketsTickTh
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _RfHalTxPutAgain
  5408  05DA                     _RfHalTxPutAgain:	
  5409                           
  5410                           ;hal.c: 346: rfStatus.isr.txPacket->flags.resends++;
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _RfHalTxPutAgain: [wreg+fsr1l+fsr1h+status,2+status,0]
  5414  05DA  0821               	movf	_rfStatus+1,w
  5415  05DB  0086               	movwf	6
  5416  05DC  0187               	clrf	7
  5417  05DD  0801               	movf	1,w
  5418  05DE  3903               	andlw	3
  5419  05DF  00D2               	movwf	??_RfHalTxPutAgain
  5420  05E0  0AD2               	incf	??_RfHalTxPutAgain,f
  5421  05E1  0801               	movf	1,w
  5422  05E2  0652               	xorwf	??_RfHalTxPutAgain,w
  5423  05E3  39FC               	andlw	-4
  5424  05E4  0652               	xorwf	??_RfHalTxPutAgain,w
  5425  05E5  0081               	movwf	1
  5426                           
  5427                           ;hal.c: 347: rfStatus.isr.txPacket->flags.tx = 1;
  5428  05E6  0821               	movf	_rfStatus+1,w
  5429  05E7  0086               	movwf	6
  5430  05E8  1601               	bsf	1,4
  5431  05E9  0008               	return
  5432  05EA                     __end_of_RfHalTxPutAgain:	
  5433  05EA                     __ptext8:	
  5434 ;; *************** function _RfPacketsHandleClient *****************
  5435 ;; Defined at:
  5436 ;;		line 133 in file "../../../src/rfstack/packets.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  packet          1    wreg     PTR struct RfTransceiver
  5439 ;;		 -> NULL(0), rfPackets(56), 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  packet          1    7[BANK0 ] PTR struct RfTransceiver
  5442 ;;		 -> NULL(0), rfPackets(56), 
  5443 ;; Return value:  Size  Location     Type
  5444 ;;		None               void
  5445 ;; Registers used:
  5446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5447 ;; Tracked objects:
  5448 ;;		On entry : 1F/0
  5449 ;;		On exit  : 1F/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5452 ;;      Params:         0       0       0       0
  5453 ;;      Locals:         0       1       0       0
  5454 ;;      Temps:          0       0       0       0
  5455 ;;      Totals:         0       1       0       0
  5456 ;;Total ram usage:        1 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; Hardware stack levels required when called:   10
  5459 ;; This function calls:
  5460 ;;		_RfPacketSimpleReply
  5461 ;; This function is called by:
  5462 ;;		_RfPacketsTickTh
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           
  5467                           ;psect for function _RfPacketsHandleClient
  5468  05EA                     _RfPacketsHandleClient:	
  5469                           
  5470                           ;incstack = 0
  5471                           ; Regs used in _RfPacketsHandleClient: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5472                           ;RfPacketsHandleClient@packet stored from wreg
  5473  05EA  00D9               	movwf	RfPacketsHandleClient@packet
  5474                           
  5475                           ;packets.c: 135: switch(packet->frame.id)
  5476  05EB  2E06               	goto	l2819
  5477  05EC                     l2811:	
  5478                           
  5479                           ;packets.c: 139: RfPacketSimpleReply(packet, RF_PING, 0);
  5480  05EC  30A0               	movlw	160
  5481  05ED  00D5               	movwf	RfPacketSimpleReply@msg
  5482  05EE  01D6               	clrf	RfPacketSimpleReply@needAck
  5483  05EF  0859               	movf	RfPacketsHandleClient@packet,w
  5484  05F0  2E13               	ljmp	_RfPacketSimpleReply
  5485  05F1                     l2813:	
  5486                           ;packets.c: 140: break;
  5487                           
  5488                           
  5489                           ;packets.c: 144: if (packet->frame.data[0] == rfStatus.isr.txPacket->crcTx)
  5490  05F1  0821               	movf	_rfStatus+1,w
  5491  05F2  3E19               	addlw	25
  5492  05F3  0086               	movwf	6
  5493  05F4  0187               	clrf	7
  5494  05F5  0859               	movf	RfPacketsHandleClient@packet,w
  5495  05F6  3E05               	addlw	5
  5496  05F7  0084               	movwf	4
  5497  05F8  0185               	clrf	5
  5498  05F9  0800               	movf	0,w
  5499  05FA  0084               	movwf	4
  5500  05FB  0800               	movf	0,w
  5501  05FC  0601               	xorwf	1,w
  5502  05FD  1D03               	skipz
  5503  05FE  0008               	return
  5504                           
  5505                           ;packets.c: 145: {
  5506                           ;packets.c: 147: packet->flags.wait_for_ack = 0;
  5507  05FF  0859               	movf	RfPacketsHandleClient@packet,w
  5508  0600  0086               	movwf	6
  5509  0601  1101               	bcf	1,2
  5510                           
  5511                           ;packets.c: 148: packet->flags.proc = PCKT_NO_PROC;
  5512  0602  0859               	movf	RfPacketsHandleClient@packet,w
  5513  0603  0086               	movwf	6
  5514  0604  1681               	bsf	1,5
  5515                           
  5516                           ;packets.c: 149: }
  5517  0605  0008               	return
  5518  0606                     l2819:	
  5519  0606  0859               	movf	RfPacketsHandleClient@packet,w
  5520  0607  3E03               	addlw	3
  5521  0608  0086               	movwf	6
  5522  0609  0187               	clrf	7
  5523  060A  0801               	movf	1,w
  5524                           
  5525                           ; Switch size 1, requested type "space"
  5526                           ; Number of cases is 2, Range of values is 160 to 161
  5527                           ; switch strategies available:
  5528                           ; Name         Instructions Cycles
  5529                           ; simple_byte            7     4 (average)
  5530                           ; direct_byte           13     9 (fixed)
  5531                           ; jumptable            263     9 (fixed)
  5532                           ;	Chosen strategy is simple_byte
  5533  060B  3AA0               	xorlw	160	; case 160
  5534  060C  1903               	skipnz
  5535  060D  2DEC               	goto	l2811
  5536  060E  3A01               	xorlw	1	; case 161
  5537  060F  1903               	skipnz
  5538  0610  2DF1               	goto	l2813
  5539  0611  2E12               	goto	l479
  5540  0612                     l479:	
  5541  0612  0008               	return
  5542  0613                     __end_of_RfPacketsHandleClient:	
  5543  0613                     __ptext9:	
  5544 ;; *************** function _RfPacketSimpleReply *****************
  5545 ;; Defined at:
  5546 ;;		line 27 in file "../../../src/rfstack/packets.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  packet          1    wreg     PTR struct RfTransceiver
  5549 ;;		 -> NULL(0), rfPackets(56), 
  5550 ;;  msg             1    3[BANK0 ] enum E4234
  5551 ;;  needAck         1    4[BANK0 ] unsigned char 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  packet          1    6[BANK0 ] PTR struct RfTransceiver
  5554 ;;		 -> NULL(0), rfPackets(56), 
  5555 ;;  nodeTmp         1    5[BANK0 ] unsigned char 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;		None               void
  5558 ;; Registers used:
  5559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 1F/0
  5562 ;;		On exit  : 1F/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5565 ;;      Params:         0       2       0       0
  5566 ;;      Locals:         0       2       0       0
  5567 ;;      Temps:          0       0       0       0
  5568 ;;      Totals:         0       4       0       0
  5569 ;;Total ram usage:        4 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    9
  5572 ;; This function calls:
  5573 ;;		_RfHalTxPut
  5574 ;; This function is called by:
  5575 ;;		_RfPacketsHandleClient
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           
  5580                           ;psect for function _RfPacketSimpleReply
  5581  0613                     _RfPacketSimpleReply:	
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _RfPacketSimpleReply: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5585                           ;RfPacketSimpleReply@packet stored from wreg
  5586  0613  00D8               	movwf	RfPacketSimpleReply@packet
  5587                           
  5588                           ;packets.c: 30: UI08_t nodeTmp = packet->frame.src;
  5589  0614  0086               	movwf	6
  5590  0615  0187               	clrf	7
  5591  0616  3F41               	moviw [1]fsr1
  5592  0617  00D7               	movwf	RfPacketSimpleReply@nodeTmp
  5593                           
  5594                           ;packets.c: 31: packet->frame.src = packet->frame.dst;
  5595  0618  0A58               	incf	RfPacketSimpleReply@packet,w
  5596  0619  0086               	movwf	6
  5597  061A  0858               	movf	RfPacketSimpleReply@packet,w
  5598  061B  3E02               	addlw	2
  5599  061C  0084               	movwf	4
  5600  061D  0185               	clrf	5
  5601  061E  0800               	movf	0,w
  5602  061F  0081               	movwf	1
  5603                           
  5604                           ;packets.c: 32: packet->frame.dst = nodeTmp;
  5605  0620  0858               	movf	RfPacketSimpleReply@packet,w
  5606  0621  3E02               	addlw	2
  5607  0622  0086               	movwf	6
  5608  0623  0857               	movf	RfPacketSimpleReply@nodeTmp,w
  5609  0624  0081               	movwf	1
  5610                           
  5611                           ;packets.c: 34: packet->frame.id = msg;
  5612  0625  0858               	movf	RfPacketSimpleReply@packet,w
  5613  0626  3E03               	addlw	3
  5614  0627  0086               	movwf	6
  5615  0628  0855               	movf	RfPacketSimpleReply@msg,w
  5616  0629  0081               	movwf	1
  5617                           
  5618                           ;packets.c: 41: RfHalTxPut(packet, needAck);
  5619  062A  0856               	movf	RfPacketSimpleReply@needAck,w
  5620  062B  00D2               	movwf	RfHalTxPut@needAck
  5621  062C  0858               	movf	RfPacketSimpleReply@packet,w
  5622  062D  2E2E               	ljmp	_RfHalTxPut
  5623  062E                     __end_of_RfPacketSimpleReply:	
  5624  062E                     __ptext10:	
  5625 ;; *************** function _RfHalTxPut *****************
  5626 ;; Defined at:
  5627 ;;		line 312 in file "../../../src/rfstack/hal.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  packet          1    wreg     PTR struct RfTransceiver
  5630 ;;		 -> NULL(0), rfPackets(56), 
  5631 ;;  needAck         1    0[BANK0 ] unsigned char 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  packet          1    2[BANK0 ] PTR struct RfTransceiver
  5634 ;;		 -> NULL(0), rfPackets(56), 
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      unsigned char 
  5637 ;; Registers used:
  5638 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5639 ;; Tracked objects:
  5640 ;;		On entry : 1F/0
  5641 ;;		On exit  : 1F/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5644 ;;      Params:         0       1       0       0
  5645 ;;      Locals:         0       1       0       0
  5646 ;;      Temps:          0       1       0       0
  5647 ;;      Totals:         0       3       0       0
  5648 ;;Total ram usage:        3 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    8
  5651 ;; This function calls:
  5652 ;;		Nothing
  5653 ;; This function is called by:
  5654 ;;		_RfPacketSimpleReply
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           
  5659                           ;psect for function _RfHalTxPut
  5660  062E                     _RfHalTxPut:	
  5661                           
  5662                           ;incstack = 0
  5663                           ; Regs used in _RfHalTxPut: [wreg+fsr1l+fsr1h+status,2+status,0]
  5664                           ;RfHalTxPut@packet stored from wreg
  5665  062E  00D4               	movwf	RfHalTxPut@packet
  5666                           
  5667                           ;hal.c: 335: packet->flags.acq = 0;
  5668  062F  0086               	movwf	6
  5669  0630  0187               	clrf	7
  5670  0631  1181               	bcf	1,3
  5671                           
  5672                           ;hal.c: 336: packet->flags.proc = PCKT_NEED_PROC;
  5673  0632  0854               	movf	RfHalTxPut@packet,w
  5674  0633  0086               	movwf	6
  5675  0634  1281               	bcf	1,5
  5676                           
  5677                           ;hal.c: 337: packet->flags.tx = 1;
  5678  0635  0854               	movf	RfHalTxPut@packet,w
  5679  0636  0086               	movwf	6
  5680  0637  1601               	bsf	1,4
  5681                           
  5682                           ;hal.c: 338: packet->flags.resends = 0;
  5683  0638  0854               	movf	RfHalTxPut@packet,w
  5684  0639  0086               	movwf	6
  5685  063A  30FC               	movlw	-4
  5686  063B  0581               	andwf	1,f
  5687                           
  5688                           ;hal.c: 339: packet->flags.wait_for_ack = (needAck != 0 ? 1 : 0);
  5689  063C  3000               	movlw	0
  5690  063D  08D2               	movf	RfHalTxPut@needAck,f
  5691  063E  1D03               	skipz
  5692  063F  3001               	movlw	1
  5693  0640  00D3               	movwf	??_RfHalTxPut
  5694  0641  0854               	movf	RfHalTxPut@packet,w
  5695  0642  0086               	movwf	6
  5696  0643  0DD3               	rlf	??_RfHalTxPut,f
  5697  0644  0DD3               	rlf	??_RfHalTxPut,f
  5698  0645  0801               	movf	1,w
  5699  0646  0653               	xorwf	??_RfHalTxPut,w
  5700  0647  39FB               	andlw	-5
  5701  0648  0653               	xorwf	??_RfHalTxPut,w
  5702  0649  0081               	movwf	1
  5703  064A  0008               	return
  5704  064B                     __end_of_RfHalTxPut:	
  5705  064B                     PL128:	
  5706  064B  0086               	movwf	6
  5707  064C  3000               	movlw	0
  5708  064D  0187               	clrf	7
  5709  064E  3FC0               	movwi [0]fsr1
  5710  064F  3FC1               	movwi [1]fsr1
  5711  0650  0008               	return
  5712  0651                     __end_ofPL128:	
  5713                           
  5714                           	psect	text19
  5715  0000                     __ptext19:	
  5716 ;; *************** function __CCBufRdReverse *****************
  5717 ;; Defined at:
  5718 ;;		line 41 in file "../../../src/utilities/ccbuf_static.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;  qty             1    wreg     unsigned char 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  qty             1    3[BANK0 ] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;		None               void
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0, pclath, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 1F/0
  5729 ;;		On exit  : 1F/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5732 ;;      Params:         0       0       0       0
  5733 ;;      Locals:         0       1       0       0
  5734 ;;      Temps:          0       0       0       0
  5735 ;;      Totals:         0       1       0       0
  5736 ;;Total ram usage:        1 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    9
  5739 ;; This function calls:
  5740 ;;		__CCBufCalcPt
  5741 ;; This function is called by:
  5742 ;;		_RfHalTickRxTh
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746  0000                     __CCBufRdReverse:	
  5747                           ;psect for function __CCBufRdReverse
  5748                           
  5749  0000                     __end_of__CCBufRdReverse:	
  5750                           ;incstack = 0
  5751                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  5752                           ;__CCBufRdReverse@qty stored from wreg
  5753                           
  5754                           
  5755                           	psect	text22
  5756  0000                     __ptext22:	
  5757 ;; *************** function __CCBufCanRd *****************
  5758 ;; Defined at:
  5759 ;;		line 46 in file "../../../src/utilities/ccbuf_static.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;		None
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      unsigned char 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0, pclath, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 1F/0
  5770 ;;		On exit  : 1F/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5773 ;;      Params:         0       0       0       0
  5774 ;;      Locals:         0       0       0       0
  5775 ;;      Temps:          0       0       0       0
  5776 ;;      Totals:         0       0       0       0
  5777 ;;Total ram usage:        0 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    9
  5780 ;; This function calls:
  5781 ;;		__CCBufCalcPt
  5782 ;; This function is called by:
  5783 ;;		_RfHalTickRxTh
  5784 ;;		__CCBufRdByte
  5785 ;;		__CCBufPeekByte
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789  0000                     __CCBufCanRd:	
  5790                           ;psect for function __CCBufCanRd
  5791                           
  5792  0000                     __end_of__CCBufCanRd:	
  5793                           ;ccbuf_static.c: 51: else return 1;
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in __CCBufCanRd: [wreg+status,2+status,0+pclath+cstack]
  5797                           
  5798                           
  5799                           	psect	text24
  5800  0000                     __ptext24:	
  5801 ;; *************** function _RfTrcvCrcTick *****************
  5802 ;; Defined at:
  5803 ;;		line 57 in file "../../../src/devices/mrf49xa.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  initial         1    wreg     unsigned char 
  5806 ;;  data            1    0[BANK0 ] unsigned char 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  initial         1    1[BANK0 ] unsigned char 
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      unsigned char 
  5811 ;; Registers used:
  5812 ;;		wreg, status,2, status,0
  5813 ;; Tracked objects:
  5814 ;;		On entry : 1F/0
  5815 ;;		On exit  : 1F/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5818 ;;      Params:         0       1       0       0
  5819 ;;      Locals:         0       1       0       0
  5820 ;;      Temps:          0       0       0       0
  5821 ;;      Totals:         0       2       0       0
  5822 ;;Total ram usage:        2 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    8
  5825 ;; This function calls:
  5826 ;;		Nothing
  5827 ;; This function is called by:
  5828 ;;		_RfHalTickRxTh
  5829 ;;		_RfHalStatemachine
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833  0000                     _RfTrcvCrcTick:	
  5834                           ;psect for function _RfTrcvCrcTick
  5835                           
  5836  0000                     __end_of_RfTrcvCrcTick:	
  5837                           ;mrf49xa.c: 59: return (initial ^ data);
  5838                           
  5839                           ;incstack = 0
  5840                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  5841                           ;RfTrcvCrcTick@initial stored from wreg
  5842                           
  5843                           
  5844                           	psect	text29
  5845  0000                     __ptext29:	
  5846 ;; *************** function __CCBufInit *****************
  5847 ;; Defined at:
  5848 ;;		line 5 in file "../../../src/utilities/ccbuf_static.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;		None
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;		None
  5853 ;; Return value:  Size  Location     Type
  5854 ;;		None               void
  5855 ;; Registers used:
  5856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5857 ;; Tracked objects:
  5858 ;;		On entry : 1F/0
  5859 ;;		On exit  : 1F/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5862 ;;      Params:         0       0       0       0
  5863 ;;      Locals:         0       0       0       0
  5864 ;;      Temps:          0       0       0       0
  5865 ;;      Totals:         0       0       0       0
  5866 ;;Total ram usage:        0 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    9
  5869 ;; This function calls:
  5870 ;;		__CCBufReset
  5871 ;; This function is called by:
  5872 ;;		_RfHalInit
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876  0000                     __CCBufInit:	
  5877                           ;psect for function __CCBufInit
  5878                           
  5879  0000                     __end_of__CCBufInit:	
  5880                           ;ccbuf_static.c: 15: {
  5881                           ;ccbuf_static.c: 16: i--;
  5882                           
  5883                           ;psect for function __CCBufReset
  5884                           
  5885                           ;ccbuf_static.c: 7: _CCBufReset();
  5886                           
  5887                           ;incstack = 0
  5888                           ; Regs used in __CCBufInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5889                           
  5890                           
  5891                           	psect	text30
  5892  0000                     __ptext30:	
  5893 ;; *************** function __CCBufReset *****************
  5894 ;; Defined at:
  5895 ;;		line 10 in file "../../../src/utilities/ccbuf_static.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  i               1    1[BANK0 ] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;		None               void
  5902 ;; Registers used:
  5903 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 1F/0
  5906 ;;		On exit  : 1F/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5909 ;;      Params:         0       0       0       0
  5910 ;;      Locals:         0       1       0       0
  5911 ;;      Temps:          0       1       0       0
  5912 ;;      Totals:         0       2       0       0
  5913 ;;Total ram usage:        2 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    8
  5916 ;; This function calls:
  5917 ;;		Nothing
  5918 ;; This function is called by:
  5919 ;;		__CCBufInit
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923  0000                     __CCBufReset:	
  5924                           ;psect for function __CCBufReset
  5925                           
  5926  0000                     __end_of__CCBufReset:	
  5927                           ;ccbuf_static.c: 15: {
  5928                           ;ccbuf_static.c: 16: i--;
  5929                           
  5930                           ;ccbuf_static.c: 14: while (i > 0)
  5931                           
  5932                           ;incstack = 0
  5933                           ; Regs used in __CCBufReset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5934                           
  5935                           
  5936                           	psect	intentry
  5937  0004                     __pintentry:	
  5938 ;; *************** function _extInt *****************
  5939 ;; Defined at:
  5940 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;		None               void
  5947 ;; Registers used:
  5948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5954 ;;      Params:         0       0       0       0
  5955 ;;      Locals:         0       0       0       0
  5956 ;;      Temps:          0       0       0       0
  5957 ;;      Totals:         0       0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    7
  5961 ;; This function calls:
  5962 ;;		i1_mrf49XaIsr
  5963 ;; This function is called by:
  5964 ;;		Interrupt level 1
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968  0004                     _extInt:	
  5969                           
  5970                           ;incstack = 0
  5971                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5972  0004  3180               	pagesel	$
  5973                           
  5974                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  5975  0005  1C8B               	btfss	11,1	;volatile
  5976  0006  0009               	retfie
  5977                           
  5978                           ;interrupt.c: 34: {
  5979                           ;interrupt.c: 35: if (mrf49XaIsr())
  5980  0007  3184  2415         	fcall	i1_mrf49XaIsr
  5981  0009  3A00               	xorlw	0
  5982  000A  1D03               	btfss	3,2
  5983                           
  5984                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  5985  000B  108B               	bcf	11,1	;volatile
  5986  000C  0009               	retfie
  5987  000D                     __end_of_extInt:	
  5988                           
  5989                           	psect	swtext2
  5990  0700                     __pswtext2:	
  5991  0700                     i1S3245:	
  5992  0700  3184  2C31         	ljmp	i1l3055
  5993  0702  3184  2C35         	ljmp	i1l3057
  5994  0704  3184  2C35         	ljmp	i1l3057
  5995  0706  3184  2C3A         	ljmp	i1l3061
  5996  0708  3184  2C3C         	ljmp	i1l3065
  5997  070A  3184  2C3E         	ljmp	i1l3069
  5998  070C  3184  2C41         	ljmp	i1l3073
  5999  070E  3184  2C6A         	ljmp	i1l3083
  6000  0710  3184  2C70         	ljmp	i1l3087
  6001  0712  3184  2C70         	ljmp	i1l3087
  6002  0714  3184  2C72         	ljmp	i1l3091
  6003                           
  6004                           	psect	text44
  6005  0000                     __ptext44:	
  6006 ;; *************** function i1__CCBufCanWr *****************
  6007 ;; Defined at:
  6008 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;		None
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;		None
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      unsigned char 
  6015 ;; Registers used:
  6016 ;;		wreg
  6017 ;; Tracked objects:
  6018 ;;		On entry : 1F/2
  6019 ;;		On exit  : 1F/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6022 ;;      Params:         0       0       0       0
  6023 ;;      Locals:         0       0       0       0
  6024 ;;      Temps:          0       0       0       0
  6025 ;;      Totals:         0       0       0       0
  6026 ;;Total ram usage:        0 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		i1__CCBufWrByte
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035  0000                     __end_ofi1__CCBufCanWr:	
  6036                           ;ccbuf_static.c: 37: else return 1;
  6037                           
  6038                           ;incstack = 0
  6039                           ; Regs used in i1__CCBufCanWr: [wreg]
  6040                           
  6041                           ;psect for function i1__CCBufCanWr
  6042                           
  6043                           
  6044                           	psect	text46
  6045  0405                     __ptext46:	
  6046 ;; *************** function i1_RfTrcvMode *****************
  6047 ;; Defined at:
  6048 ;;		line 55 in file "../../../src/rfstack/hal.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;  tx              1    wreg     unsigned char 
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  tx              1    5[COMMON] unsigned char 
  6053 ;; Return value:  Size  Location     Type
  6054 ;;		None               void
  6055 ;; Registers used:
  6056 ;;		wreg, status,2, status,0, pclath, cstack
  6057 ;; Tracked objects:
  6058 ;;		On entry : 1F/0
  6059 ;;		On exit  : 1D/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6062 ;;      Params:         0       0       0       0
  6063 ;;      Locals:         1       0       0       0
  6064 ;;      Temps:          0       0       0       0
  6065 ;;      Totals:         1       0       0       0
  6066 ;;Total ram usage:        1 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:    4
  6069 ;; This function calls:
  6070 ;;		i1_RfTrcvSetup
  6071 ;; This function is called by:
  6072 ;;		i1_RfHalStatemachine
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           
  6077                           ;psect for function i1_RfTrcvMode
  6078  0405                     i1_RfTrcvMode:	
  6079                           
  6080                           ;incstack = 0
  6081                           ; Regs used in i1_RfTrcvMode: [wreg+status,2+status,0+pclath+cstack]
  6082                           ;i1RfTrcvMode@tx stored from wreg
  6083  0405  00F5               	movwf	i1RfTrcvMode@tx
  6084                           
  6085                           ;hal.c: 57: rfStatus.inRx = 1 - tx;
  6086  0406  3C01               	sublw	1
  6087  0407  00A3               	movwf	_rfStatus+3
  6088                           
  6089                           ;hal.c: 58: RfTrcvSetup(tx);
  6090  0408  0875               	movf	i1RfTrcvMode@tx,w
  6091  0409  2498  3184         	fcall	i1_RfTrcvSetup
  6092                           
  6093                           ;hal.c: 60: if (tx == 1)
  6094  040B  0B75               	decfsz	i1RfTrcvMode@tx,w
  6095  040C  2C0E               	goto	u235_21
  6096  040D  2C10               	goto	i1l3049
  6097  040E                     u235_21:	
  6098  040E  0020               	movlb	0	; select bank0
  6099  040F  0008               	return
  6100  0410                     i1l3049:	
  6101                           
  6102                           ;hal.c: 61: {
  6103                           ;hal.c: 62: rfStatus.isr.state = TX_PREAMBLE1;
  6104  0410  0020               	movlb	0	; select bank0
  6105  0411  01A2               	clrf	_rfStatus+2
  6106  0412  0AA2               	incf	_rfStatus+2,f
  6107                           
  6108                           ;hal.c: 63: rfStatus.isr.byteCounter = 0;
  6109  0413  01A0               	clrf	_rfStatus
  6110  0414  0008               	return
  6111  0415                     __end_ofi1_RfTrcvMode:	
  6112  0415                     __ptext40:	
  6113 ;; *************** function i1_mrf49XaIsr *****************
  6114 ;; Defined at:
  6115 ;;		line 28 in file "../../../src/node/main.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;		None
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  1    wreg      unsigned char 
  6122 ;; Registers used:
  6123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 1F/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6129 ;;      Params:         0       0       0       0
  6130 ;;      Locals:         0       0       0       0
  6131 ;;      Temps:          0       0       0       0
  6132 ;;      Totals:         0       0       0       0
  6133 ;;Total ram usage:        0 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    6
  6136 ;; This function calls:
  6137 ;;		i1_RfHalStatemachine
  6138 ;;		i1_RfTrcvSetup
  6139 ;;		i1_RfTrcvStatus
  6140 ;; This function is called by:
  6141 ;;		_extInt
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           
  6146                           ;psect for function i1_mrf49XaIsr
  6147  0415                     i1_mrf49XaIsr:	
  6148  0415                     i1l627:	
  6149                           ;incstack = 0
  6150                           ; Regs used in i1_mrf49XaIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6151                           ;main.c: 30: do
  6152                           
  6153                           
  6154                           ;main.c: 31: {
  6155                           ;main.c: 32: RfTrcvStatus();
  6156  0415  2528  3184         	fcall	i1_RfTrcvStatus
  6157                           
  6158                           ;main.c: 33: isr++;
  6159  0417  0020               	movlb	0	; select bank0
  6160  0418  0AA9               	incf	_isr,f	;volatile
  6161                           
  6162                           ;main.c: 35: if (rfTrcvStatus.flags.msb.fifoTxRx)
  6163  0419  1FD0               	btfss	_rfTrcvStatus,7
  6164  041A  2C22               	goto	i1l3119
  6165                           
  6166                           ;main.c: 36: {
  6167                           ;main.c: 37: if (rfStatus.inRx ==1 && rfTrcvStatus.flags.lsb.dataQualityOK == 0)
  6168  041B  0323               	decf	_rfStatus+3,w
  6169  041C  1D03               	skipz
  6170  041D  2C20               	goto	i1l3117
  6171  041E  1FD1               	btfss	_rfTrcvStatus+1,7
  6172  041F  2C22               	goto	i1l3119
  6173  0420                     i1l3117:	
  6174                           
  6175                           ;main.c: 41: else
  6176                           ;main.c: 42: {
  6177                           ;main.c: 43: RfHalStatemachine();
  6178  0420  2430  3184         	fcall	i1_RfHalStatemachine
  6179  0422                     i1l3119:	
  6180                           
  6181                           ;main.c: 44: }
  6182                           ;main.c: 45: }
  6183                           ;main.c: 46: if (rfTrcvStatus.flags.msb.por)
  6184  0422  0020               	movlb	0	; select bank0
  6185  0423  1F50               	btfss	_rfTrcvStatus,6
  6186  0424  2C28               	goto	i1l3123
  6187                           
  6188                           ;main.c: 47: {
  6189                           ;main.c: 48: RfTrcvSetup(0);
  6190  0425  3000               	movlw	0
  6191  0426  2498  3184         	fcall	i1_RfTrcvSetup
  6192  0428                     i1l3123:	
  6193                           
  6194                           ;main.c: 49: }
  6195                           ;main.c: 51: } while (rfTrcvStatus.flags.msb.por || rfTrcvStatus.flags.msb.fifoTxRx);
  6196  0428  0020               	movlb	0	; select bank0
  6197  0429  1F50               	btfss	_rfTrcvStatus,6
  6198  042A  1BD0               	btfsc	_rfTrcvStatus,7
  6199  042B  2C15               	goto	i1l627
  6200                           
  6201                           ;main.c: 53: return (PORTAbits.RA2 == 1) ? 1 : 0;
  6202  042C  0C0C               	rrf	12,w	;volatile
  6203  042D  0C89               	rrf	9,f
  6204  042E  3901               	andlw	1
  6205  042F  0008               	return
  6206  0430                     __end_ofi1_mrf49XaIsr:	
  6207  0430                     __ptext42:	
  6208 ;; *************** function i1_RfHalStatemachine *****************
  6209 ;; Defined at:
  6210 ;;		line 351 in file "../../../src/rfstack/hal.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;		None
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;		None
  6215 ;; Return value:  Size  Location     Type
  6216 ;;		None               void
  6217 ;; Registers used:
  6218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 1F/0
  6221 ;;		On exit  : 1D/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6224 ;;      Params:         0       0       0       0
  6225 ;;      Locals:         0       0       0       0
  6226 ;;      Temps:          1       0       0       0
  6227 ;;      Totals:         1       0       0       0
  6228 ;;Total ram usage:        1 bytes
  6229 ;; Hardware stack levels used:    1
  6230 ;; Hardware stack levels required when called:    5
  6231 ;; This function calls:
  6232 ;;		i1_RfTrcvCrcTick
  6233 ;;		i1_RfTrcvGet
  6234 ;;		i1_RfTrcvMode
  6235 ;;		i1_RfTrcvPut
  6236 ;;		i1__CCBufWrByte
  6237 ;; This function is called by:
  6238 ;;		i1_mrf49XaIsr
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           
  6243                           ;psect for function i1_RfHalStatemachine
  6244  0430                     i1_RfHalStatemachine:	
  6245                           
  6246                           ;hal.c: 353: switch (rfStatus.isr.state)
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in i1_RfHalStatemachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6250  0430  2C7B               	goto	i1l3099
  6251  0431                     i1l3055:	
  6252                           
  6253                           ;hal.c: 357: _CCBufWrByte(RfTrcvGet());
  6254  0431  248F  3184         	fcall	i1_RfTrcvGet
  6255  0433  256A               	fcall	i1__CCBufWrByte
  6256                           
  6257                           ;hal.c: 358: break;
  6258  0434  0008               	return
  6259  0435                     i1l3057:	
  6260                           
  6261                           ;hal.c: 362: case TX_PREAMBLE2:
  6262                           ;hal.c: 363: RfTrcvPut(0xAA);
  6263  0435  30AA               	movlw	170
  6264  0436                     L4:	
  6265  0436  2486               	fcall	i1_RfTrcvPut
  6266                           
  6267                           ;hal.c: 364: rfStatus.isr.state++;
  6268  0437  0020               	movlb	0	; select bank0
  6269  0438  0AA2               	incf	_rfStatus+2,f
  6270                           
  6271                           ;hal.c: 365: break;
  6272  0439  0008               	return
  6273  043A                     i1l3061:	
  6274                           
  6275                           ;hal.c: 368: RfTrcvPut(0x2D);
  6276  043A  302D               	movlw	45
  6277  043B  2C36               	goto	L4
  6278  043C                     i1l3065:	
  6279                           
  6280                           ;hal.c: 372: RfTrcvPut(0xD4);
  6281  043C  30D4               	movlw	212
  6282  043D  2C36               	goto	L4
  6283  043E                     i1l3069:	
  6284                           
  6285                           ;hal.c: 376: RfTrcvPut(rfStatus.isr.txPacket->size);
  6286  043E  0821               	movf	_rfStatus+1,w
  6287  043F  3E1B               	addlw	27
  6288  0440  2C6C               	goto	L5
  6289  0441                     i1l3073:	
  6290                           
  6291                           ;hal.c: 380: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  6292  0441  0820               	movf	_rfStatus,w
  6293  0442  0721               	addwf	_rfStatus+1,w
  6294  0443  00F6               	movwf	??i1_RfHalStatemachine
  6295  0444  0A76               	incf	??i1_RfHalStatemachine,w
  6296  0445  0086               	movwf	6
  6297  0446  0187               	clrf	7
  6298  0447  0801               	movf	1,w
  6299  0448  2486  3184         	fcall	i1_RfTrcvPut
  6300                           
  6301                           ;hal.c: 381: rfStatus.isr.txPacket->crcTx = RfTrcvCrcTick(rfStatus.isr.txPacket->crcTx, 
      +                          rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  6302  044A  0020               	movlb	0	; select bank0
  6303  044B  0821               	movf	_rfStatus+1,w
  6304  044C  3E19               	addlw	25
  6305  044D  0086               	movwf	6
  6306  044E  0187               	clrf	7
  6307  044F  0820               	movf	_rfStatus,w
  6308  0450  0721               	addwf	_rfStatus+1,w
  6309  0451  00F6               	movwf	??i1_RfHalStatemachine
  6310  0452  0084               	movwf	4
  6311  0453  0185               	clrf	5
  6312  0454  3F01               	moviw [1]fsr0
  6313  0455  00F0               	movwf	i1RfTrcvCrcTick@data
  6314  0456  0821               	movf	_rfStatus+1,w
  6315  0457  3E19               	addlw	25
  6316  0458  0084               	movwf	4
  6317  0459  0800               	movf	0,w
  6318  045A                     i13L__ptext53:	
  6319                           
  6320                           ;psect for function i1_RfTrcvCrcTick
  6321  045A                     i13Li1_RfTrcvCrcTick:	
  6322                           
  6323                           ;incstack = 0
  6324                           ; Regs used in i1_RfTrcvCrcTick: [wreg+status,2+status,0]
  6325                           ;i1RfTrcvCrcTick@initial stored from wreg
  6326  045A  00F1               	movwf	i1RfTrcvCrcTick@initial
  6327  045B                     i13Li1l2915:	
  6328                           
  6329                           ;mrf49xa.c: 59: return (initial ^ data);
  6330  045B  0871               	movf	i1RfTrcvCrcTick@initial,w
  6331  045C  0670               	xorwf	i1RfTrcvCrcTick@data,w
  6332  045D                     i13Li1l181:	
  6333  045D  0081               	movwf	1
  6334                           
  6335                           ;hal.c: 382: rfStatus.isr.byteCounter++;
  6336  045E  0AA0               	incf	_rfStatus,f
  6337                           
  6338                           ;hal.c: 383: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  6339  045F  0821               	movf	_rfStatus+1,w
  6340  0460  3E1B               	addlw	27
  6341  0461  0086               	movwf	6
  6342  0462  0187               	clrf	7
  6343  0463  0801               	movf	1,w
  6344  0464  0220               	subwf	_rfStatus,w
  6345  0465  1C03               	skipc
  6346  0466  0008               	return
  6347                           
  6348                           ;hal.c: 384: rfStatus.isr.state = TX_CRC;
  6349  0467  3007               	movlw	7
  6350  0468  00A2               	movwf	_rfStatus+2
  6351  0469  0008               	return
  6352  046A                     i1l3083:	
  6353                           
  6354                           ;hal.c: 387: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  6355  046A  0821               	movf	_rfStatus+1,w
  6356  046B  3E19               	addlw	25
  6357  046C                     L5:	
  6358  046C  0086               	movwf	6
  6359  046D  0187               	clrf	7
  6360  046E  0801               	movf	1,w
  6361  046F  2C36               	goto	L4
  6362  0470                     i1l3087:	
  6363                           
  6364                           ;hal.c: 392: case TX_NULL2:
  6365                           ;hal.c: 393: RfTrcvPut(0);
  6366  0470  3000               	movlw	0
  6367  0471  2C36               	goto	L4
  6368  0472                     i1l3091:	
  6369                           
  6370                           ;hal.c: 397: RfTrcvPut(0);
  6371  0472  3000               	movlw	0
  6372  0473  2486  3184         	fcall	i1_RfTrcvPut
  6373                           
  6374                           ;hal.c: 398: rfStatus.isr.state = RX_RECV;
  6375  0475  0020               	movlb	0	; select bank0
  6376  0476  3000               	movlw	0
  6377  0477  01A2               	clrf	_rfStatus+2
  6378                           
  6379                           ;hal.c: 404: RfTrcvMode(0);
  6380  0478  2405               	fcall	i1_RfTrcvMode
  6381                           
  6382                           ;hal.c: 405: break;
  6383  0479  0020               	movlb	0	; select bank0
  6384  047A  0008               	return
  6385  047B                     i1l3099:	
  6386  047B  0822               	movf	_rfStatus+2,w
  6387                           
  6388                           ; Switch size 1, requested type "space"
  6389                           ; Number of cases is 11, Range of values is 0 to 10
  6390                           ; switch strategies available:
  6391                           ; Name         Instructions Cycles
  6392                           ; direct_byte           28     6 (fixed)
  6393                           ; simple_byte           34    18 (average)
  6394                           ; jumptable            260     6 (fixed)
  6395                           ;	Chosen strategy is direct_byte
  6396  047C  0084               	movwf	4
  6397  047D  300B               	movlw	11
  6398  047E  0204               	subwf	4,w
  6399  047F  1803               	skipnc
  6400  0480  0008               	return
  6401  0481  3187               	movlp	high i1S3245
  6402  0482  3504               	lslf	4,w
  6403  0483  3E00               	addlw	low i1S3245
  6404  0484  0082               	movwf	2
  6405  0485  0008               	return
  6406  0486                     __end_ofi1_RfHalStatemachine:	
  6407  0486                     __ptext48:	
  6408 ;; *************** function i1_RfTrcvPut *****************
  6409 ;; Defined at:
  6410 ;;		line 11 in file "../../../src/devices/mrf49xa.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;  byte            1    wreg     unsigned char 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  byte            1    3[COMMON] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0, pclath, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 1D/0
  6421 ;;		On exit  : 1F/2
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6424 ;;      Params:         0       0       0       0
  6425 ;;      Locals:         1       0       0       0
  6426 ;;      Temps:          0       0       0       0
  6427 ;;      Totals:         1       0       0       0
  6428 ;;Total ram usage:        1 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    2
  6431 ;; This function calls:
  6432 ;;		i1_MRF49XACommand
  6433 ;; This function is called by:
  6434 ;;		i1_RfTrcvSetup
  6435 ;;		i1_RfHalStatemachine
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           
  6440                           ;psect for function i1_RfTrcvPut
  6441  0486                     i1_RfTrcvPut:	
  6442                           
  6443                           ;incstack = 0
  6444                           ; Regs used in i1_RfTrcvPut: [wreg+status,2+status,0+pclath+cstack]
  6445                           ;i1RfTrcvPut@byte stored from wreg
  6446  0486  00F3               	movwf	i1RfTrcvPut@byte
  6447                           
  6448                           ;mrf49xa.c: 13: MRF49XACommand(0xB800 | byte);
  6449  0487  00F1               	movwf	i1MRF49XACommand@cmd
  6450  0488  3000               	movlw	0
  6451  0489  01F2               	clrf	i1MRF49XACommand@cmd+1
  6452  048A  04F1               	iorwf	i1MRF49XACommand@cmd,f
  6453  048B  30B8               	movlw	184
  6454  048C  04F2               	iorwf	i1MRF49XACommand@cmd+1,f
  6455  048D  24D4               	fcall	i1_MRF49XACommand
  6456  048E  0008               	return
  6457  048F                     __end_ofi1_RfTrcvPut:	
  6458  048F                     __ptext50:	
  6459 ;; *************** function i1_RfTrcvGet *****************
  6460 ;; Defined at:
  6461 ;;		line 17 in file "../../../src/devices/mrf49xa.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;		None
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  RfTrcvGet       1    1[COMMON] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      unsigned char 
  6468 ;; Registers used:
  6469 ;;		wreg, status,2, status,0, pclath, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 1F/0
  6472 ;;		On exit  : 1F/2
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6475 ;;      Params:         0       0       0       0
  6476 ;;      Locals:         1       0       0       0
  6477 ;;      Temps:          0       0       0       0
  6478 ;;      Totals:         1       0       0       0
  6479 ;;Total ram usage:        1 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    1
  6482 ;; This function calls:
  6483 ;;		i1_SPI_Read
  6484 ;;		i1_SPI_Write
  6485 ;; This function is called by:
  6486 ;;		i1_RfHalStatemachine
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           
  6491                           ;psect for function i1_RfTrcvGet
  6492  048F                     i1_RfTrcvGet:	
  6493                           
  6494                           ;mrf49xa.c: 19: LATCbits.LATC6 = 0;;
  6495                           
  6496                           ;incstack = 0
  6497                           ; Regs used in i1_RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  6498  048F  0022               	movlb	2	; select bank2
  6499  0490  130E               	bcf	14,6	;volatile
  6500                           
  6501                           ;mrf49xa.c: 21: SPI_Write(0xB0);
  6502  0491  30B0               	movlw	176
  6503  0492  24DD  3184         	fcall	i1_SPI_Write
  6504                           
  6505                           ;mrf49xa.c: 22: UI08_t b = SPI_Read();
  6506  0494  2534               	fcall	i1_SPI_Read
  6507  0495  00F1               	movwf	i1RfTrcvGet@b
  6508                           
  6509                           ;mrf49xa.c: 24: LATCbits.LATC6 = 1;;
  6510  0496  170E               	bsf	14,6	;volatile
  6511                           
  6512                           ;mrf49xa.c: 26: return b;
  6513  0497  0008               	return
  6514  0498                     __end_ofi1_RfTrcvGet:	
  6515  0498                     __ptext47:	
  6516 ;; *************** function i1_RfTrcvSetup *****************
  6517 ;; Defined at:
  6518 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  tx              1    wreg     unsigned char 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  tx              1    4[COMMON] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;		None               void
  6525 ;; Registers used:
  6526 ;;		wreg, status,2, status,0, pclath, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : 1F/0
  6529 ;;		On exit  : 1F/2
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6532 ;;      Params:         0       0       0       0
  6533 ;;      Locals:         1       0       0       0
  6534 ;;      Temps:          0       0       0       0
  6535 ;;      Totals:         1       0       0       0
  6536 ;;Total ram usage:        1 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    3
  6539 ;; This function calls:
  6540 ;;		i1_MRF49XACommand
  6541 ;;		i1_RfTrcvPut
  6542 ;; This function is called by:
  6543 ;;		i1_RfTrcvMode
  6544 ;;		i1_mrf49XaIsr
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           
  6549                           ;psect for function i1_RfTrcvSetup
  6550  0498                     i1_RfTrcvSetup:	
  6551                           
  6552                           ;incstack = 0
  6553                           ; Regs used in i1_RfTrcvSetup: [wreg+status,2+status,0+pclath+cstack]
  6554                           ;i1RfTrcvSetup@tx stored from wreg
  6555  0498  00F4               	movwf	i1RfTrcvSetup@tx
  6556                           
  6557                           ;mrf49xa.c: 63: if (tx)
  6558  0499  0874               	movf	i1RfTrcvSetup@tx,w
  6559  049A  1903               	btfsc	3,2
  6560  049B  2CB0               	goto	i1l3041
  6561                           
  6562                           ;mrf49xa.c: 64: {
  6563                           ;mrf49xa.c: 65: MRF49XACommand(0x8200);
  6564  049C  3082               	movlw	130
  6565  049D  01F1               	clrf	i1MRF49XACommand@cmd
  6566  049E  00F2               	movwf	i1MRF49XACommand@cmd+1
  6567  049F  24D4  3184         	fcall	i1_MRF49XACommand
  6568                           
  6569                           ;mrf49xa.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  6570  04A1  30A8               	movlw	168
  6571  04A2  00F1               	movwf	i1MRF49XACommand@cmd
  6572  04A3  3080               	movlw	128
  6573  04A4  00F2               	movwf	i1MRF49XACommand@cmd+1
  6574  04A5  24D4  3184         	fcall	i1_MRF49XACommand
  6575                           
  6576                           ;mrf49xa.c: 67: MRF49XACommand(0x8200 |0x0020);
  6577  04A7  3020               	movlw	32
  6578  04A8  00F1               	movwf	i1MRF49XACommand@cmd
  6579  04A9  3082               	movlw	130
  6580  04AA  00F2               	movwf	i1MRF49XACommand@cmd+1
  6581  04AB  24D4  3184         	fcall	i1_MRF49XACommand
  6582                           
  6583                           ;mrf49xa.c: 70: RfTrcvPut(0x55);
  6584  04AD  3055               	movlw	85
  6585  04AE  2486               	fcall	i1_RfTrcvPut
  6586                           
  6587                           ;mrf49xa.c: 71: }
  6588  04AF  0008               	return
  6589  04B0                     i1l3041:	
  6590                           
  6591                           ;mrf49xa.c: 72: else
  6592                           ;mrf49xa.c: 73: {
  6593                           ;mrf49xa.c: 74: MRF49XACommand(0x8200);
  6594  04B0  3000               	movlw	0
  6595  04B1  00F1               	movwf	i1MRF49XACommand@cmd
  6596  04B2  3082               	movlw	130
  6597  04B3  00F2               	movwf	i1MRF49XACommand@cmd+1
  6598  04B4  24D4  3184         	fcall	i1_MRF49XACommand
  6599                           
  6600                           ;mrf49xa.c: 75: MRF49XACommand(0xCA81);
  6601  04B6  3081               	movlw	129
  6602  04B7  00F1               	movwf	i1MRF49XACommand@cmd
  6603  04B8  30CA               	movlw	202
  6604  04B9  00F2               	movwf	i1MRF49XACommand@cmd+1
  6605  04BA  24D4  3184         	fcall	i1_MRF49XACommand
  6606                           
  6607                           ;mrf49xa.c: 76: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  6608  04BC  3028               	movlw	40
  6609  04BD  00F1               	movwf	i1MRF49XACommand@cmd
  6610  04BE  3080               	movlw	128
  6611  04BF  00F2               	movwf	i1MRF49XACommand@cmd+1
  6612  04C0  24D4  3184         	fcall	i1_MRF49XACommand
  6613                           
  6614                           ;mrf49xa.c: 77: MRF49XACommand(0x8200 | 0x0080);
  6615  04C2  3080               	movlw	128
  6616  04C3  00F1               	movwf	i1MRF49XACommand@cmd
  6617  04C4  3082               	movlw	130
  6618  04C5  00F2               	movwf	i1MRF49XACommand@cmd+1
  6619  04C6  24D4  3184         	fcall	i1_MRF49XACommand
  6620                           
  6621                           ;mrf49xa.c: 78: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  6622  04C8  3068               	movlw	104
  6623  04C9  00F1               	movwf	i1MRF49XACommand@cmd
  6624  04CA  3080               	movlw	128
  6625  04CB  00F2               	movwf	i1MRF49XACommand@cmd+1
  6626  04CC  24D4  3184         	fcall	i1_MRF49XACommand
  6627                           
  6628                           ;mrf49xa.c: 79: MRF49XACommand(0xCA81 | 0x0002);
  6629  04CE  3083               	movlw	131
  6630  04CF  00F1               	movwf	i1MRF49XACommand@cmd
  6631  04D0  30CA               	movlw	202
  6632  04D1  00F2               	movwf	i1MRF49XACommand@cmd+1
  6633  04D2  24D4               	fcall	i1_MRF49XACommand
  6634  04D3  0008               	return
  6635  04D4                     __end_ofi1_RfTrcvSetup:	
  6636  04D4                     __ptext49:	
  6637 ;; *************** function i1_MRF49XACommand *****************
  6638 ;; Defined at:
  6639 ;;		line 30 in file "../../../src/devices/mrf49xa.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  cmd             2    1[COMMON] unsigned int 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;		None
  6644 ;; Return value:  Size  Location     Type
  6645 ;;		None               void
  6646 ;; Registers used:
  6647 ;;		wreg, status,2, status,0, pclath, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 1D/0
  6650 ;;		On exit  : 1F/2
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6653 ;;      Params:         2       0       0       0
  6654 ;;      Locals:         0       0       0       0
  6655 ;;      Temps:          0       0       0       0
  6656 ;;      Totals:         2       0       0       0
  6657 ;;Total ram usage:        2 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    1
  6660 ;; This function calls:
  6661 ;;		i1_SPI_Write
  6662 ;; This function is called by:
  6663 ;;		i1_RfTrcvPut
  6664 ;;		i1_RfTrcvSetup
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function i1_MRF49XACommand
  6670  04D4                     i1_MRF49XACommand:	
  6671                           
  6672                           ;mrf49xa.c: 32: LATCbits.LATC6 = 0;;
  6673                           
  6674                           ;incstack = 0
  6675                           ; Regs used in i1_MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  6676  04D4  0022               	movlb	2	; select bank2
  6677  04D5  130E               	bcf	14,6	;volatile
  6678                           
  6679                           ;mrf49xa.c: 34: SPI_Write((cmd & 0xFF00) >> 8);
  6680  04D6  0872               	movf	i1MRF49XACommand@cmd+1,w
  6681  04D7  24DD  3184         	fcall	i1_SPI_Write
  6682                           
  6683                           ;mrf49xa.c: 35: SPI_Write((cmd & 0x00FF));
  6684  04D9  0871               	movf	i1MRF49XACommand@cmd,w
  6685  04DA  24DD               	fcall	i1_SPI_Write
  6686                           
  6687                           ;mrf49xa.c: 37: LATCbits.LATC6 = 1;;
  6688  04DB  170E               	bsf	14,6	;volatile
  6689  04DC  0008               	return
  6690  04DD                     __end_ofi1_MRF49XACommand:	
  6691  04DD                     __ptext51:	
  6692 ;; *************** function i1_SPI_Write *****************
  6693 ;; Defined at:
  6694 ;;		line 191 in file "../../../src/devices/mrf49xa.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;  data            1    wreg     unsigned char 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  data            1    0[COMMON] unsigned char 
  6699 ;; Return value:  Size  Location     Type
  6700 ;;		None               void
  6701 ;; Registers used:
  6702 ;;		wreg
  6703 ;; Tracked objects:
  6704 ;;		On entry : 1F/2
  6705 ;;		On exit  : 1F/2
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6708 ;;      Params:         0       0       0       0
  6709 ;;      Locals:         1       0       0       0
  6710 ;;      Temps:          0       0       0       0
  6711 ;;      Totals:         1       0       0       0
  6712 ;;Total ram usage:        1 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; This function calls:
  6715 ;;		Nothing
  6716 ;; This function is called by:
  6717 ;;		i1_RfTrcvGet
  6718 ;;		i1_MRF49XACommand
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           
  6723                           ;psect for function i1_SPI_Write
  6724  04DD                     i1_SPI_Write:	
  6725                           
  6726                           ;incstack = 0
  6727                           ; Regs used in i1_SPI_Write: [wreg]
  6728                           ;i1SPI_Write@data stored from wreg
  6729  04DD  00F0               	movwf	i1SPI_Write@data
  6730                           
  6731                           ;mrf49xa.c: 198: LATCbits.LATC7 = 0;
  6732  04DE  138E               	bcf	14,7	;volatile
  6733  04DF  1BF0               	btfsc	i1SPI_Write@data,7
  6734  04E0  2CE3               	goto	i1l2951
  6735  04E1  0020               	movlb	0	; select bank0
  6736  04E2  2CE5               	goto	i1l228
  6737  04E3                     i1l2951:	
  6738  04E3  178D               	bsf	13,7	;volatile
  6739  04E4  2CE6               	goto	i1l229
  6740  04E5                     i1l228:	
  6741  04E5  138D               	bcf	13,7	;volatile
  6742  04E6                     i1l229:	
  6743  04E6  178E               	bsf	14,7	;volatile
  6744  04E7  138E               	bcf	14,7	;volatile
  6745  04E8  1B70               	btfsc	i1SPI_Write@data,6
  6746  04E9  2CEC               	goto	i1l2955
  6747  04EA  0020               	movlb	0	; select bank0
  6748  04EB  2CEE               	goto	i1l232
  6749  04EC                     i1l2955:	
  6750  04EC  178D               	bsf	13,7	;volatile
  6751  04ED  2CEF               	goto	i1l233
  6752  04EE                     i1l232:	
  6753  04EE  138D               	bcf	13,7	;volatile
  6754  04EF                     i1l233:	
  6755  04EF  178E               	bsf	14,7	;volatile
  6756  04F0  138E               	bcf	14,7	;volatile
  6757  04F1  1AF0               	btfsc	i1SPI_Write@data,5
  6758  04F2  2CF5               	goto	i1l2959
  6759  04F3  0020               	movlb	0	; select bank0
  6760  04F4  2CF7               	goto	i1l236
  6761  04F5                     i1l2959:	
  6762  04F5  178D               	bsf	13,7	;volatile
  6763  04F6  2CF8               	goto	i1l237
  6764  04F7                     i1l236:	
  6765  04F7  138D               	bcf	13,7	;volatile
  6766  04F8                     i1l237:	
  6767  04F8  178E               	bsf	14,7	;volatile
  6768  04F9  138E               	bcf	14,7	;volatile
  6769  04FA  1A70               	btfsc	i1SPI_Write@data,4
  6770  04FB  2CFE               	goto	i1l2963
  6771  04FC  0020               	movlb	0	; select bank0
  6772  04FD  2D00               	goto	i1l240
  6773  04FE                     i1l2963:	
  6774  04FE  178D               	bsf	13,7	;volatile
  6775  04FF  2D01               	goto	i1l241
  6776  0500                     i1l240:	
  6777  0500  138D               	bcf	13,7	;volatile
  6778  0501                     i1l241:	
  6779  0501  178E               	bsf	14,7	;volatile
  6780  0502  138E               	bcf	14,7	;volatile
  6781  0503  19F0               	btfsc	i1SPI_Write@data,3
  6782  0504  2D07               	goto	i1l2967
  6783  0505  0020               	movlb	0	; select bank0
  6784  0506  2D09               	goto	i1l244
  6785  0507                     i1l2967:	
  6786  0507  178D               	bsf	13,7	;volatile
  6787  0508  2D0A               	goto	i1l245
  6788  0509                     i1l244:	
  6789  0509  138D               	bcf	13,7	;volatile
  6790  050A                     i1l245:	
  6791  050A  178E               	bsf	14,7	;volatile
  6792  050B  138E               	bcf	14,7	;volatile
  6793  050C  1970               	btfsc	i1SPI_Write@data,2
  6794  050D  2D10               	goto	i1l2971
  6795  050E  0020               	movlb	0	; select bank0
  6796  050F  2D12               	goto	i1l248
  6797  0510                     i1l2971:	
  6798  0510  178D               	bsf	13,7	;volatile
  6799  0511  2D13               	goto	i1l249
  6800  0512                     i1l248:	
  6801  0512  138D               	bcf	13,7	;volatile
  6802  0513                     i1l249:	
  6803  0513  178E               	bsf	14,7	;volatile
  6804  0514  138E               	bcf	14,7	;volatile
  6805  0515  18F0               	btfsc	i1SPI_Write@data,1
  6806  0516  2D19               	goto	i1l2975
  6807  0517  0020               	movlb	0	; select bank0
  6808  0518  2D1B               	goto	i1l252
  6809  0519                     i1l2975:	
  6810  0519  178D               	bsf	13,7	;volatile
  6811  051A  2D1C               	goto	i1l253
  6812  051B                     i1l252:	
  6813  051B  138D               	bcf	13,7	;volatile
  6814  051C                     i1l253:	
  6815  051C  178E               	bsf	14,7	;volatile
  6816  051D  138E               	bcf	14,7	;volatile
  6817  051E  1870               	btfsc	i1SPI_Write@data,0
  6818  051F  2D22               	goto	i1l2979
  6819  0520  0020               	movlb	0	; select bank0
  6820  0521  2D24               	goto	i1l256
  6821  0522                     i1l2979:	
  6822  0522  178D               	bsf	13,7	;volatile
  6823  0523  2D25               	goto	i1l257
  6824  0524                     i1l256:	
  6825  0524  138D               	bcf	13,7	;volatile
  6826  0525                     i1l257:	
  6827  0525  178E               	bsf	14,7	;volatile
  6828  0526  138E               	bcf	14,7	;volatile
  6829  0527  0008               	return
  6830  0528                     __end_ofi1_SPI_Write:	
  6831  0528                     __ptext41:	
  6832 ;; *************** function i1_RfTrcvStatus *****************
  6833 ;; Defined at:
  6834 ;;		line 41 in file "../../../src/devices/mrf49xa.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;		None
  6839 ;; Return value:  Size  Location     Type
  6840 ;;		None               void
  6841 ;; Registers used:
  6842 ;;		wreg, status,2, pclath, cstack
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 1F/2
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6848 ;;      Params:         0       0       0       0
  6849 ;;      Locals:         0       0       0       0
  6850 ;;      Temps:          0       0       0       0
  6851 ;;      Totals:         0       0       0       0
  6852 ;;Total ram usage:        0 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    1
  6855 ;; This function calls:
  6856 ;;		i1_SPI_Read
  6857 ;; This function is called by:
  6858 ;;		i1_mrf49XaIsr
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           
  6863                           ;psect for function i1_RfTrcvStatus
  6864  0528                     i1_RfTrcvStatus:	
  6865                           
  6866                           ;mrf49xa.c: 43: LATCbits.LATC6 = 0;;
  6867                           
  6868                           ;incstack = 0
  6869                           ; Regs used in i1_RfTrcvStatus: [wreg+status,2+pclath+cstack]
  6870  0528  0022               	movlb	2	; select bank2
  6871  0529  130E               	bcf	14,6	;volatile
  6872                           
  6873                           ;mrf49xa.c: 45: rfTrcvStatus.byte[0] = SPI_Read();
  6874  052A  2534  3184         	fcall	i1_SPI_Read
  6875  052C  0020               	movlb	0	; select bank0
  6876  052D  00D0               	movwf	_rfTrcvStatus
  6877                           
  6878                           ;mrf49xa.c: 46: rfTrcvStatus.byte[1] = SPI_Read();
  6879  052E  2534               	fcall	i1_SPI_Read
  6880  052F  0020               	movlb	0	; select bank0
  6881  0530  00D1               	movwf	_rfTrcvStatus+1
  6882                           
  6883                           ;mrf49xa.c: 48: LATCbits.LATC6 = 1;;
  6884  0531  0022               	movlb	2	; select bank2
  6885  0532  170E               	bsf	14,6	;volatile
  6886  0533  0008               	return
  6887  0534                     __end_ofi1_RfTrcvStatus:	
  6888  0534                     __ptext52:	
  6889 ;; *************** function i1_SPI_Read *****************
  6890 ;; Defined at:
  6891 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;		None
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;  SPI_Read        1    0[COMMON] unsigned char 
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  1    wreg      unsigned char 
  6898 ;; Registers used:
  6899 ;;		wreg, status,2
  6900 ;; Tracked objects:
  6901 ;;		On entry : 1D/2
  6902 ;;		On exit  : 1F/2
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6905 ;;      Params:         0       0       0       0
  6906 ;;      Locals:         1       0       0       0
  6907 ;;      Temps:          0       0       0       0
  6908 ;;      Totals:         1       0       0       0
  6909 ;;Total ram usage:        1 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; This function calls:
  6912 ;;		Nothing
  6913 ;; This function is called by:
  6914 ;;		i1_RfTrcvGet
  6915 ;;		i1_RfTrcvStatus
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function i1_SPI_Read
  6921  0534                     i1_SPI_Read:	
  6922                           
  6923                           ;mrf49xa.c: 150: UI08_t data = 0;
  6924                           
  6925                           ;incstack = 0
  6926                           ; Regs used in i1_SPI_Read: [wreg+status,2]
  6927  0534  01F0               	clrf	i1SPI_Read@data
  6928                           
  6929                           ;mrf49xa.c: 151: LATCbits.LATC7 = 0;
  6930  0535  0022               	movlb	2	; select bank2
  6931  0536  138E               	bcf	14,7	;volatile
  6932                           
  6933                           ;mrf49xa.c: 152: LATBbits.LATB7 = 0;
  6934  0537  138D               	bcf	13,7	;volatile
  6935  0538  0020               	movlb	0	; select bank0
  6936  0539  1A8E               	btfsc	14,5	;volatile
  6937  053A  17F0               	bsf	i1SPI_Read@data,7
  6938  053B  0022               	movlb	2	; select bank2
  6939  053C  178E               	bsf	14,7	;volatile
  6940  053D  138E               	bcf	14,7	;volatile
  6941                           
  6942                           ;mrf49xa.c: 159: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  6943  053E  0020               	movlb	0	; select bank0
  6944  053F  1A8E               	btfsc	14,5	;volatile
  6945  0540  1770               	bsf	i1SPI_Read@data,6
  6946  0541  0022               	movlb	2	; select bank2
  6947  0542  178E               	bsf	14,7	;volatile
  6948  0543  138E               	bcf	14,7	;volatile
  6949                           
  6950                           ;mrf49xa.c: 160: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  6951  0544  0020               	movlb	0	; select bank0
  6952  0545  1A8E               	btfsc	14,5	;volatile
  6953  0546  16F0               	bsf	i1SPI_Read@data,5
  6954  0547  0022               	movlb	2	; select bank2
  6955  0548  178E               	bsf	14,7	;volatile
  6956  0549  138E               	bcf	14,7	;volatile
  6957                           
  6958                           ;mrf49xa.c: 161: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  6959  054A  0020               	movlb	0	; select bank0
  6960  054B  1A8E               	btfsc	14,5	;volatile
  6961  054C  1670               	bsf	i1SPI_Read@data,4
  6962  054D  0022               	movlb	2	; select bank2
  6963  054E  178E               	bsf	14,7	;volatile
  6964  054F  138E               	bcf	14,7	;volatile
  6965                           
  6966                           ;mrf49xa.c: 162: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  6967  0550  0020               	movlb	0	; select bank0
  6968  0551  1A8E               	btfsc	14,5	;volatile
  6969  0552  15F0               	bsf	i1SPI_Read@data,3
  6970  0553  0022               	movlb	2	; select bank2
  6971  0554  178E               	bsf	14,7	;volatile
  6972  0555  138E               	bcf	14,7	;volatile
  6973                           
  6974                           ;mrf49xa.c: 163: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  6975  0556  0020               	movlb	0	; select bank0
  6976  0557  1A8E               	btfsc	14,5	;volatile
  6977  0558  1570               	bsf	i1SPI_Read@data,2
  6978  0559  0022               	movlb	2	; select bank2
  6979  055A  178E               	bsf	14,7	;volatile
  6980  055B  138E               	bcf	14,7	;volatile
  6981                           
  6982                           ;mrf49xa.c: 164: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  6983  055C  0020               	movlb	0	; select bank0
  6984  055D  1A8E               	btfsc	14,5	;volatile
  6985  055E  14F0               	bsf	i1SPI_Read@data,1
  6986  055F  0022               	movlb	2	; select bank2
  6987  0560  178E               	bsf	14,7	;volatile
  6988  0561  138E               	bcf	14,7	;volatile
  6989                           
  6990                           ;mrf49xa.c: 165: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  6991  0562  0020               	movlb	0	; select bank0
  6992  0563  1A8E               	btfsc	14,5	;volatile
  6993  0564  1470               	bsf	i1SPI_Read@data,0
  6994  0565  0022               	movlb	2	; select bank2
  6995  0566  178E               	bsf	14,7	;volatile
  6996  0567  138E               	bcf	14,7	;volatile
  6997                           
  6998                           ;mrf49xa.c: 188: return data;
  6999  0568  0870               	movf	i1SPI_Read@data,w
  7000  0569  0008               	return
  7001  056A                     __end_ofi1_SPI_Read:	
  7002  056A                     __ptext43:	
  7003 ;; *************** function i1__CCBufWrByte *****************
  7004 ;; Defined at:
  7005 ;;		line 89 in file "../../../src/utilities/ccbuf_static.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  data            1    wreg     unsigned char 
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;  data            1    4[COMMON] unsigned char 
  7010 ;; Return value:  Size  Location     Type
  7011 ;;		None               void
  7012 ;; Registers used:
  7013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7014 ;; Tracked objects:
  7015 ;;		On entry : 1F/2
  7016 ;;		On exit  : 1F/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7019 ;;      Params:         0       0       0       0
  7020 ;;      Locals:         1       0       0       0
  7021 ;;      Temps:          1       0       0       0
  7022 ;;      Totals:         2       0       0       0
  7023 ;;Total ram usage:        2 bytes
  7024 ;; Hardware stack levels used:    1
  7025 ;; Hardware stack levels required when called:    1
  7026 ;; This function calls:
  7027 ;;		i1__CCBufCalcPt
  7028 ;;		i1__CCBufCanWr
  7029 ;; This function is called by:
  7030 ;;		i1_RfHalStatemachine
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function i1__CCBufWrByte
  7036  056A                     i1__CCBufWrByte:	
  7037                           
  7038                           ;incstack = 0
  7039                           ; Regs used in i1__CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7040                           ;i1__CCBufWrByte@data stored from wreg
  7041  056A  00F4               	movwf	i1__CCBufWrByte@data
  7042  056B                     i14L__ptext44:	
  7043                           ;ccbuf_static.c: 91: if (_CCBufCanWr())
  7044                           
  7045                           
  7046                           ;psect for function i1__CCBufCanWr
  7047  056B                     i14Li1__CCBufCanWr:	
  7048  056B                     i14Li1l2993:	
  7049  056B  0020               	movlb	0	; select bank0
  7050  056C  0861               	movf	_rfRxCC+2,w
  7051  056D  0662               	xorwf	_rfRxCC+3,w
  7052  056E  1D03               	btfss	3,2
  7053  056F  2D74               	ljmp	i14Li1l3001
  7054  0570  2D72               	ljmp	i14Li1l2995
  7055  0571                     i14Lu232_21:	
  7056  0571  2D74               	ljmp	i14Li1l3001
  7057  0572                     i14Lu232_20:	
  7058  0572                     i14Li1l2995:	
  7059  0572  3000               	movlw	0
  7060  0573  2D75               	ljmp	iL118
  7061  0574                     i14Li1l3001:	
  7062                           
  7063                           ;ccbuf_static.c: 37: else return 1;
  7064  0574  3001               	movlw	1
  7065  0575                     i14Li1l528:	
  7066  0575                     iL118:	
  7067  0575  3A00               	xorlw	0
  7068  0576  1903               	skipnz
  7069  0577  0008               	return
  7070  0578  0861               	movf	_rfRxCC+2,w
  7071  0579  075F               	addwf	_rfRxCC,w
  7072  057A  00F3               	movwf	??i1__CCBufWrByte
  7073  057B  0086               	movwf	6
  7074  057C  0187               	clrf	7
  7075  057D  0874               	movf	i1__CCBufWrByte@data,w
  7076  057E  0081               	movwf	1
  7077  057F  01F0               	clrf	i1__CCBufCalcPt@move
  7078  0580  0AF0               	incf	i1__CCBufCalcPt@move,f
  7079  0581  0861               	movf	_rfRxCC+2,w
  7080  0582  2585               	fcall	i1__CCBufCalcPt
  7081  0583  00E1               	movwf	_rfRxCC+2
  7082  0584  0008               	return
  7083  0585                     __end_ofi1__CCBufWrByte:	
  7084  0585                     __ptext45:	
  7085 ;; *************** function i1__CCBufCalcPt *****************
  7086 ;; Defined at:
  7087 ;;		line 24 in file "../../../src/utilities/ccbuf_static.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;  entry           1    wreg     unsigned char 
  7090 ;;  move            1    0[COMMON] unsigned char 
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;  entry           1    1[COMMON] unsigned char 
  7093 ;;  _CCBufCalcPt    1    2[COMMON] unsigned char 
  7094 ;; Return value:  Size  Location     Type
  7095 ;;                  1    wreg      unsigned char 
  7096 ;; Registers used:
  7097 ;;		wreg, status,2, status,0
  7098 ;; Tracked objects:
  7099 ;;		On entry : 1F/0
  7100 ;;		On exit  : 1F/0
  7101 ;;		Unchanged: 0/0
  7102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7103 ;;      Params:         1       0       0       0
  7104 ;;      Locals:         2       0       0       0
  7105 ;;      Temps:          0       0       0       0
  7106 ;;      Totals:         3       0       0       0
  7107 ;;Total ram usage:        3 bytes
  7108 ;; Hardware stack levels used:    1
  7109 ;; This function calls:
  7110 ;;		Nothing
  7111 ;; This function is called by:
  7112 ;;		i1__CCBufWrByte
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           
  7117                           ;psect for function i1__CCBufCalcPt
  7118  0585                     i1__CCBufCalcPt:	
  7119                           
  7120                           ;incstack = 0
  7121                           ; Regs used in i1__CCBufCalcPt: [wreg+status,2+status,0]
  7122                           ;i1__CCBufCalcPt@entry stored from wreg
  7123  0585  00F1               	movwf	i1__CCBufCalcPt@entry
  7124                           
  7125                           ;ccbuf_static.c: 26: I08_t result = ((I08_t)entry) + move;
  7126  0586  0770               	addwf	i1__CCBufCalcPt@move,w
  7127  0587  00F2               	movwf	i1__CCBufCalcPt@result
  7128  0588                     i1l2987:	
  7129                           ;ccbuf_static.c: 28: while (result < 0) result += CCDef->size;
  7130                           
  7131  0588  0860               	movf	_rfRxCC+1,w
  7132  0589  0272               	subwf	i1__CCBufCalcPt@result,w
  7133  058A  1C03               	btfss	3,0
  7134  058B  2D8F               	goto	i1l2989
  7135  058C  0860               	movf	_rfRxCC+1,w
  7136  058D  02F2               	subwf	i1__CCBufCalcPt@result,f
  7137  058E  2D88               	goto	i1l2987
  7138  058F                     i1l2989:	
  7139                           
  7140                           ;ccbuf_static.c: 31: return (UI08_t) result;
  7141  058F  0872               	movf	i1__CCBufCalcPt@result,w
  7142  0590  0008               	return
  7143  0591                     __end_ofi1__CCBufCalcPt:	
  7144                           
  7145                           	psect	text53
  7146  0000                     __ptext53:	
  7147 ;; *************** function i1_RfTrcvCrcTick *****************
  7148 ;; Defined at:
  7149 ;;		line 57 in file "../../../src/devices/mrf49xa.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;  initial         1    wreg     unsigned char 
  7152 ;;  data            1    0[COMMON] unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  initial         1    1[COMMON] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1    wreg      unsigned char 
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0
  7159 ;; Tracked objects:
  7160 ;;		On entry : 1F/0
  7161 ;;		On exit  : 1F/0
  7162 ;;		Unchanged: 1F/0
  7163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7164 ;;      Params:         1       0       0       0
  7165 ;;      Locals:         1       0       0       0
  7166 ;;      Temps:          0       0       0       0
  7167 ;;      Totals:         2       0       0       0
  7168 ;;Total ram usage:        2 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; This function calls:
  7171 ;;		Nothing
  7172 ;; This function is called by:
  7173 ;;		i1_RfHalStatemachine
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177  0000                     __end_ofi1_RfTrcvCrcTick:	
  7178                           ;mrf49xa.c: 59: return (initial ^ data);
  7179                           
  7180                           ;incstack = 0
  7181                           ; Regs used in i1_RfTrcvCrcTick: [wreg+status,2+status,0]
  7182                           ;i1RfTrcvCrcTick@initial stored from wreg
  7183                           
  7184                           ;psect for function i1_RfTrcvCrcTick
  7185                           
  7186                           
  7187                           	psect	functab
  7188  0400                     __pfunctab:	
  7189  0400                     __fptable:	
  7190  0400                     fptable:	
  7191  0400  3184               	movlp	high fptable
  7192  0401  0782               	addwf	2,f
  7193  0402                     fpbase:	
  7194  0402  2C02               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7195  0403                     fp__mrf49XaIsr:	
  7196  0403                     entry__mrf49XaIsr:	
  7197  0403  3186  2E51         	ljmp	_mrf49XaIsr
  7198  0405                     __end_of__fptable:	
  7199  007E                     btemp	set	126	;btemp
  7200  007E                     wtemp	set	126
  7201  007E                     wtemp0	set	126
  7202  0080                     wtemp1	set	128
  7203  0082                     wtemp2	set	130
  7204  0084                     wtemp3	set	132
  7205  0086                     wtemp4	set	134
  7206  0088                     wtemp5	set	136
  7207  007F                     wtemp6	set	127
  7208  007E                     ttemp	set	126
  7209  007E                     ttemp0	set	126
  7210  0081                     ttemp1	set	129
  7211  0084                     ttemp2	set	132
  7212  0087                     ttemp3	set	135
  7213  007F                     ttemp4	set	127
  7214  007E                     ltemp	set	126
  7215  007E                     ltemp0	set	126
  7216  0082                     ltemp1	set	130
  7217  0086                     ltemp2	set	134
  7218  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         106
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     11      67
    BANK1            80      0      56
    BANK2            80      0       0

Pointer List with Targets:

    rfPackets...data	PTR unsigned char  size(1) Largest target is 0

    NULL...data	PTR unsigned char  size(1) Largest target is 0

    NULL...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsTickTh@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsTickTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsTickTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halPkTh(BANK0[2]), 

    RfPacketsHandleClient@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleClient@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleClient@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsHandleServer@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleServer@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketReply@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketReply@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketTransmit@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketTransmit@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTxPut@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__RfHalRxGet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalRxPut@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalRxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    rfPackets...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalGetReturn@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalGetReturn@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__RfHalGetFree	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    S491$data	PTR unsigned char  size(1) Largest target is 0

    RfHalTickRxTh@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTickRxTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickRxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halRxBfTh(BANK0[2]), 

    RfHalTickTxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halTxBfTh(BANK0[2]), 

    CCDef	const PTR struct CircBufDef_s size(1) Largest target is 5
		 -> rfRxCC(BANK0[4]), 

    S526CircBufDef_s$bf	const PTR unsigned char  size(1) Largest target is 32
		 -> rfRxBf(BANK0[32]), 

    rfRxCC.bf	const PTR unsigned char  size(1) Largest target is 32
		 -> rfRxBf(BANK0[32]), 

    S518$txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> mrf49XaIsr(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    i1_mrf49XaIsr->i1_RfHalStatemachine
    i1_RfTrcvStatus->i1_SPI_Read
    i1_RfHalStatemachine->i1_RfTrcvMode
    i1__CCBufWrByte->i1__CCBufCalcPt
    i1_RfTrcvMode->i1_RfTrcvSetup
    i1_RfTrcvSetup->i1_RfTrcvPut
    i1_RfTrcvPut->i1_MRF49XACommand
    i1_MRF49XACommand->i1_SPI_Write
    i1_RfTrcvGet->i1_SPI_Read
    i1_RfTrcvGet->i1_SPI_Write

Critical Paths under _main in BANK0

    _main->_RfPacketsTickTh
    _mrf49XaIsr->_RfHalStatemachine
    _RfHalStatemachine->_RfTrcvMode
    __CCBufWrByte->__CCBufCalcPt
    _RfTrcvGet->_SPI_Read
    _RfTrcvGet->_SPI_Write
    _RfPacketsTickTh->_RfPacketsHandleClient
    _RfPacketsHandleClient->_RfPacketSimpleReply
    _RfPacketSimpleReply->_RfHalTxPut
    _RfHalTickTxTh->_RfTrcvMode
    _RfTrcvStatus->_SPI_Read
    _RfHalTickRxTh->__CCBufPeekByte
    _RfHalTickRxTh->__CCBufRdByte
    __CCBufRdReverse->__CCBufCalcPt
    __CCBufRdByte->__CCBufCalcPt
    __CCBufPeekByte->__CCBufCalcPt
    __CCBufCanRd->__CCBufCalcPt
    _RfHalInit->_RfTrcvMode
    __CCBufInit->__CCBufReset
    _RfTrcvMode->_RfTrcvSetup
    _MRF49XAInit->_RfTrcvSetup
    _RfTrcvSetup->_RfTrcvPut
    _RfTrcvPut->_MRF49XACommand
    _MRF49XACommand->_SPI_Write

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   32398
                            _AdcInit
                         _ExtIntInit
                        _MRF49XAInit
                          _RfHalInit
                      _RfHalTickRxTh
                      _RfHalTickTxTh
                    _RfPacketsTickTh
                       _RfTrcvStatus
                        _SysInitGpio
                         _mrf49XaIsr
 ---------------------------------------------------------------------------------
 (1) _mrf49XaIsr                                           0     0      0   11836
                  _RfHalStatemachine
                        _RfTrcvSetup
                       _RfTrcvStatus
 ---------------------------------------------------------------------------------
 (2) _RfHalStatemachine                                    1     1      0    7477
                                              6 BANK0      1     1      0
                      _RfTrcvCrcTick
                          _RfTrcvGet
                         _RfTrcvMode
                          _RfTrcvPut
                       __CCBufWrByte
 ---------------------------------------------------------------------------------
 (3) __CCBufWrByte                                         2     2      0     493
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanWr
 ---------------------------------------------------------------------------------
 (4) __CCBufCanWr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RfTrcvGet                                            1     1      0     230
                                              1 BANK0      1     1      0
                           _SPI_Read
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfPacketsTickTh                                      4     4      0    1235
                                              8 BANK0      3     3      0
                         _RfHalRxGet
                    _RfHalTxPutAgain
              _RfPacketsHandleClient
 ---------------------------------------------------------------------------------
 (2) _RfPacketsHandleClient                                1     1      0    1119
                                              7 BANK0      1     1      0
                _RfPacketSimpleReply
 ---------------------------------------------------------------------------------
 (3) _RfPacketSimpleReply                                  4     2      2     976
                                              3 BANK0      4     2      2
                         _RfHalTxPut
 ---------------------------------------------------------------------------------
 (4) _RfHalTxPut                                           3     2      1     433
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _RfHalTxPutAgain                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalRxGet                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalTickTxTh                                        4     4      0    4585
                                              6 BANK0      3     3      0
                         _RfHalTxGet
               _RfTrcvCarrierPresent
                         _RfTrcvMode
 ---------------------------------------------------------------------------------
 (2) _RfTrcvCarrierPresent                                 0     0      0      31
                       _RfTrcvStatus
 ---------------------------------------------------------------------------------
 (2) _RfTrcvStatus                                         0     0      0      31
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (3) _SPI_Read                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalTxGet                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalTickRxTh                                        5     5      0    3548
                                              5 BANK0      4     4      0
                       _RfHalGetFree
                     _RfHalGetReturn
                         _RfHalRxPut
                      _RfTrcvCrcTick
                        __CCBufCanRd
                     __CCBufPeekByte
                       __CCBufRdByte
                    __CCBufRdReverse
 ---------------------------------------------------------------------------------
 (2) __CCBufRdReverse                                      1     1      0     493
                                              3 BANK0      1     1      0
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (2) __CCBufRdByte                                         2     2      0     965
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanRd
 ---------------------------------------------------------------------------------
 (2) __CCBufPeekByte                                       2     2      0     965
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanRd
 ---------------------------------------------------------------------------------
 (3) __CCBufCanRd                                          0     0      0     471
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (4) __CCBufCalcPt                                         3     2      1     471
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _RfTrcvCrcTick                                        2     1      1     196
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _RfHalRxPut                                           1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalGetReturn                                       1     1      0     110
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalGetFree                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalInit                                            1     1      0    4509
                                              6 BANK0      1     1      0
                         _RfTrcvMode
                         __CCBufInit
 ---------------------------------------------------------------------------------
 (2) __CCBufInit                                           0     0      0      46
                        __CCBufReset
 ---------------------------------------------------------------------------------
 (3) __CCBufReset                                          2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RfTrcvMode                                           1     1      0    4394
                                              5 BANK0      1     1      0
                        _RfTrcvSetup
 ---------------------------------------------------------------------------------
 (1) _MRF49XAInit                                          2     2      0    6654
                                              5 BANK0      2     2      0
                     _MRF49XACommand
                        _RfTrcvSetup
 ---------------------------------------------------------------------------------
 (2) _RfTrcvSetup                                          1     1      0    4328
                                              4 BANK0      1     1      0
                     _MRF49XACommand
                          _RfTrcvPut
 ---------------------------------------------------------------------------------
 (3) _RfTrcvPut                                            1     1      0    2164
                                              3 BANK0      1     1      0
                     _MRF49XACommand
 ---------------------------------------------------------------------------------
 (4) _MRF49XACommand                                       2     0      2    2142
                                              1 BANK0      2     0      2
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (5) _SPI_Write                                            1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               0     0      0   10585
                       i1_mrf49XaIsr
 ---------------------------------------------------------------------------------
 (9) i1_mrf49XaIsr                                         0     0      0   10585
                i1_RfHalStatemachine
                      i1_RfTrcvSetup
                     i1_RfTrcvStatus
 ---------------------------------------------------------------------------------
 (10) i1_RfTrcvStatus                                      0     0      0      91
                         i1_SPI_Read
 ---------------------------------------------------------------------------------
 (10) i1_RfHalStatemachine                                 1     1      0    6962
                                              6 COMMON     1     1      0
                    i1_RfTrcvCrcTick
                        i1_RfTrcvGet
                       i1_RfTrcvMode
                        i1_RfTrcvPut
                     i1__CCBufWrByte
 ---------------------------------------------------------------------------------
 (11) i1__CCBufWrByte                                      2     2      0     460
                                              3 COMMON     2     2      0
                     i1__CCBufCalcPt
                      i1__CCBufCanWr
 ---------------------------------------------------------------------------------
 (12) i1__CCBufCanWr                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1__CCBufCalcPt                                      3     2      1     387
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvMode                                        1     1      0    3751
                                              5 COMMON     1     1      0
                      i1_RfTrcvSetup
 ---------------------------------------------------------------------------------
 (10) i1_RfTrcvSetup                                       1     1      0    3532
                                              4 COMMON     1     1      0
                   i1_MRF49XACommand
                        i1_RfTrcvPut
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvPut                                         1     1      0    1766
                                              3 COMMON     1     1      0
                   i1_MRF49XACommand
 ---------------------------------------------------------------------------------
 (12) i1_MRF49XACommand                                    2     0      2    1693
                                              1 COMMON     2     0      2
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvGet                                         1     1      0     750
                                              1 COMMON     1     1      0
                         i1_SPI_Read
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (13) i1_SPI_Write                                         1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_SPI_Read                                          1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvCrcTick                                     2     1      1     235
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _MRF49XAInit
     _MRF49XACommand
       _SPI_Write
     _RfTrcvSetup
       _MRF49XACommand
         _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
   _RfHalInit
     _RfTrcvMode
       _RfTrcvSetup
         _MRF49XACommand
           _SPI_Write
         _RfTrcvPut
           _MRF49XACommand
             _SPI_Write
     __CCBufInit
       __CCBufReset
   _RfHalTickRxTh
     _RfHalGetFree
     _RfHalGetReturn
     _RfHalRxPut
     _RfTrcvCrcTick
     __CCBufCanRd
       __CCBufCalcPt
     __CCBufPeekByte
       __CCBufCalcPt
       __CCBufCanRd
         __CCBufCalcPt
     __CCBufRdByte
       __CCBufCalcPt
       __CCBufCanRd
         __CCBufCalcPt
     __CCBufRdReverse
       __CCBufCalcPt
   _RfHalTickTxTh
     _RfHalTxGet
     _RfTrcvCarrierPresent
       _RfTrcvStatus
         _SPI_Read
     _RfTrcvMode
       _RfTrcvSetup
         _MRF49XACommand
           _SPI_Write
         _RfTrcvPut
           _MRF49XACommand
             _SPI_Write
   _RfPacketsTickTh
     _RfHalRxGet
     _RfHalTxPutAgain
     _RfPacketsHandleClient
       _RfPacketSimpleReply
         _RfHalTxPut
   _RfTrcvStatus
     _SPI_Read
   _SysInitGpio
   _mrf49XaIsr
     _RfHalStatemachine
       _RfTrcvCrcTick
       _RfTrcvGet
         _SPI_Read
         _SPI_Write
       _RfTrcvMode
         _RfTrcvSetup
           _MRF49XACommand
             _SPI_Write
           _RfTrcvPut
             _MRF49XACommand
               _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
       __CCBufWrByte
         __CCBufCalcPt
         __CCBufCanWr
     _RfTrcvSetup
       _MRF49XACommand
         _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
     _RfTrcvStatus
       _SPI_Read

 _extInt (ROOT)
   i1_mrf49XaIsr
     i1_RfHalStatemachine
       i1_RfTrcvCrcTick
       i1_RfTrcvGet
         i1_SPI_Read
         i1_SPI_Write
       i1_RfTrcvMode
         i1_RfTrcvSetup
           i1_MRF49XACommand
             i1_SPI_Write
           i1_RfTrcvPut
             i1_MRF49XACommand
               i1_SPI_Write
       i1_RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
       i1__CCBufWrByte
         i1__CCBufCalcPt
         i1__CCBufCanWr
     i1_RfTrcvSetup
       i1_MRF49XACommand
         i1_SPI_Write
       i1_RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
     i1_RfTrcvStatus
       i1_SPI_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      82       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      B      43       6       83.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      38       8       70.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      82      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Sat Apr  5 11:31:49 2014

        RfHalTickRxTh@pktLength 0059                               pc 0002                 ??i1_RfTrcvSetup 0074  
        __size_of_RfTrcvCrcTick 0000               ??i1_RfTrcvCrcTick 0071               RfHalTxPut@needAck 0052  
              ??i1_RfTrcvStatus 0071                      __CCBufInit 0000                             l240 0158  
                           l232 0144                             l241 015A                             l233 0146  
                           l401 05D4                             l252 0176                             l244 0162  
                           l236 014E                             l228 013A                             l253 0178  
                           l245 0164                             l237 0150                             l229 013C  
                           l181 0003                             l406 038F                             l191 00B2  
                           l256 0180                             l248 016C                             l257 0182  
                           l249 016E                             l195 0102                             l515 0014  
                           l532 0008                             l509 0002                             l640 003E  
                           l393 02C2                             l642 0050                             l627 0651  
                           l479 0612           __size_of__CCBufCalcPt 000C                             _isr 0029  
         __size_of__CCBufRdByte 001C                             wreg 0009                    ?_MRF49XAInit 0070  
         __size_of__CCBufWrByte 001B                     __CCBufCanRd 0000                            S3237 03E8  
                   __CCBufCanWr 0000                            PL130 03B7                            PL140 03D4  
                          PL132 03BF                            PL142 03D9                            PL134 03C5  
                          PL144 03DF                            PL136 03CA                            PL128 064B  
                          PL146 03E3                            PL138 03CF                     __CCBufReset 0000  
                          l2401 00B1                            l2423 0101                            l2503 035F  
                          l2505 0377                            l3241 0369                            l2273 065D  
                          l3243 027C                            l2603 0249                            l2275 065F  
                          l2381 0001                            l2605 0252                            l2541 01B2  
                          l2391 0089                            l2455 018B                            l2623 026F  
                          l2543 01B7                            l3239 05C3                            l2279 0665  
                          l2289 0125                            l2617 0263                            l2553 01D2  
                          l2625 0272                            l2481 033B                            l2467 0000  
                          l2635 0000                            l2627 0290                            l2619 0268  
                          l2483 0340                            l2811 05EC                            l2637 000B  
                          l2573 01F7                            l2557 01DB                            l2813 05F1  
                          l2741 0678                            l2591 01EC                            l2487 0345  
                          l2831 05A6                            l2823 0595                            l2751 0682  
                          l2743 067B                            l2911 0051                            l2593 022A  
                          l2489 034B                            l2841 05B7                            l2825 059B  
                          l2499 035B                            l2819 0606                            l2835 05AC  
                          l2843 05B9                            l2755 0684                            l2747 0680  
                          l2861 0010                            l2853 0000                            l2597 0235  
                          l2845 05CB                            l2773 06B6                            l2863 0013  
                          l2871 0296                            l2695 0001                            l2759 0687  
                          l2857 0004                            l2873 029D                            l2777 06B8  
                          l2769 06B0                            l2877 0000                            l2879 0006  
                          l2899 0039                            _main 002C                 __end_of_AdcInit 006E  
                          fsr0h 0005                            fsr1h 0007                            fsr0l 0004  
                          indf0 0000                            indf1 0001                            fsr1l 0006  
                          btemp 007E                            ltemp 007E                            start 000D  
                          ttemp 007E                      RfTrcvGet@b 0053                            wtemp 007E  
           i1__CCBufWrByte@data 0074                    __CCBufCalcPt 0293                     ?i1_SPI_Read 0070  
                  __CCBufRdByte 029F                   ??_RfTrcvSetup 0077          i1RfTrcvCrcTick@initial 0071  
         __size_ofi1_mrf49XaIsr 001B                    __CCBufWrByte 06D7                           ?_main 0070  
               _RfHalTxPutAgain 05DA                           i1l240 0500                           i1l232 04EE  
                         i1l241 0501                           i1l233 04EF                           i1l252 051B  
                         i1l244 0509                           i1l236 04F7                           i1l228 04E5  
                         i1l181 0003                           i1l253 051C                           i1l245 050A  
                         i1l237 04F8                           i1l229 04E6                           i1l256 0524  
                         i1l248 0512                           i1l257 0525                           i1l249 0513  
                         i1l627 0415                      _RfHalRxGet 05CD                      _RfHalTxGet 0387  
                    _RfHalRxPut 02D0                      _RfHalTxPut 062E                   ?_RfTrcvStatus 0070  
         __end_ofi1__CCBufCanWr 0000                           _delay 005D                   _RfTrcvCrcTick 0000  
                         fpbase 0402                __end_of_SPI_Read 0339                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
            __size_of_SPI_Write 0055         __size_of__CCBufPeekByte 001B                    __end_ofPL130 03BF  
                  __end_ofPL140 03D9                    __end_ofPL132 03C5                    __end_ofPL142 03DF  
                  __end_ofPL134 03CA                    __end_ofPL144 03E3                    __end_ofPL136 03CF  
                  __end_ofPL128 0651                    __end_ofPL146 03E8                    __end_ofPL138 03D4  
            __CCBufPeekByte@res 0056                    SPI_Read@data 0052                    i1_mrf49XaIsr 0415  
          __end_of_RfHalGetFree 02C8             i1RfTrcvCrcTick@data 0070                 __initialization 000F  
                    _ExtIntInit 006E                    __end_of_main 005F                  _MRF49XACommand 0125  
                    _RfTrcvMode 037A                  i1__CCBufCalcPt 0585            RfTrcvCrcTick@initial 0053  
                        ??_main 0077                     ?__CCBufInit 0070                    ?i1_SPI_Write 0070  
                i1__CCBufWrByte 056A                  ??_RfTrcvStatus 0077             __end_of_RfTrcvSetup 00A6  
            __size_of_RfHalInit 002A                   __CCBufReset@i 0053             __CCBufRdReverse@qty 0055  
                ?_RfTrcvCrcTick 0052                          _ADCON0 009D                 RfHalTickRxTh@pt 005A  
                        _ADCON1 009E                          _ADCON2 009F                       ??_AdcInit 0077  
                        i1S3245 0700                 RfHalTickTxTh@pt 005A     __end_ofi1_RfHalStatemachine 0486  
                        _ANSELA 018C                          _ANSELB 018D                          _ANSELC 018E  
                        i1l3041 04B0                          i1l3123 0428                          i1l3061 043A  
                        i1l3117 0420                          i1l3055 0431                          i1l3119 0422  
                        i1l3049 0410                          i1l3073 0441                          i1l3065 043C  
                        i1l3057 0435                          i1l3091 0472                          i1l3083 046A  
           __size_ofi1_SPI_Read 0036                          i1l3069 043E                          i1l3087 0470  
                        i1l3099 047B                          i1l2915 0001                          i1l2951 04E3  
                        i1l2971 0510                          i1l2963 04FE                          i1l2955 04EC  
                        i1l2975 0519                          i1l2967 0507                          i1l2959 04F5  
                        i1l2993 0000                          i1l2979 0522                          i1l2987 0588  
                        i1l2995 0007                          i1l2989 058F                          _FVRCON 0117  
                        u235_21 040E                          _OSCCON 0099     RfHalTickRxTh@pktRxByteIndex 0025  
              __end_of__fptable 0405              __size_of_RfTrcvGet 000E              __size_of_RfTrcvPut 000A  
        __end_of_MRF49XACommand 0130             _RfPacketSimpleReply 0613                  i1SPI_Read@data 0070  
       __end_of_RfHalTxPutAgain 05EA          __end_ofi1__CCBufCalcPt 0591                    MRF49XAInit@i 0057  
                  MRF49XAInit@j 0058           RfPacketsTickTh@packet 0027                          _rfRxCC 005F  
                        _rfRxBf 002A                          _extInt 0004          __end_ofi1__CCBufWrByte 0585  
                  ?i1_RfTrcvGet 0070                    ?i1_RfTrcvPut 0070                          fptable 0400  
     RfPacketSimpleReply@packet 0058               __end_of_SPI_Write 0185                          fptotal 0001  
                   ?_RfHalRxGet 0070                     ?_RfHalTxGet 0070                     ?_RfHalRxPut 0070  
                   ?_RfHalTxPut 0052            ?_RfPacketSimpleReply 0055   __size_of_RfTrcvCarrierPresent 0005  
     __size_ofi1_MRF49XACommand 0009        __size_of__CCBufRdReverse 0000            __size_of_MRF49XAInit 007F  
       __end_of__initialization 002A                __CCBufRdByte@res 0056                    RfTrcvMode@tx 0057  
               i1_RfTrcvCrcTick 0000             __size_of__CCBufInit 0000  __size_of_RfPacketsHandleClient 0029  
      __size_of_RfPacketsTickTh 003C   __end_of_RfPacketsHandleClient 0613                 ?_MRF49XACommand 0053  
             __end_of_RfHalInit 01AF                     ?_ExtIntInit 0070                  __pcstackCOMMON 0070  
                  __pidataBANK0 0000                     ?_RfTrcvMode 0070                 ?i1__CCBufCalcPt 0070  
       __size_of_RfHalGetReturn 0008                     _RfTrcvSetup 0073                       ?_SPI_Read 0070  
               ?i1__CCBufWrByte 0070               __end_of_RfTrcvGet 06D7           __end_of_RfHalTickRxTh 0293  
             __end_of_RfTrcvPut 06C9           __end_of_RfHalTickTxTh 037A                  _OPTION_REGbits 0095  
         ??_RfPacketSimpleReply 0077                 ??_RfTrcvCrcTick 0077             __CCBufCalcPt@result 0054  
                  ?__CCBufCanRd 0070                    ?__CCBufCanWr 0070     RfPacketsHandleClient@packet 0059  
                  ?__CCBufReset 0070                   ??_SysInitGpio 0077                      __pbssBANK0 0020  
                    __pbssBANK1 00A0           __size_of_RfHalGetFree 000D                  __CCBufPeekByte 02DC  
             __CCBufCalcPt@move 0052                  i1RfTrcvMode@tx 0075            __end_of_RfTrcvStatus 0301  
           __size_of_RfHalRxGet 000D             __size_of_RfHalTxGet 000F                      __pmaintext 002C  
           __size_of_RfHalRxPut 000C             __size_of_RfHalTxPut 001D                ?_RfHalTxPutAgain 0070  
                  ??i1_SPI_Read 0070                      __pintentry 0004                         ?_extInt 0070  
         __end_ofi1_RfTrcvSetup 04D4                      ??_SPI_Read 0077                      _mrf49XaIsr 0651  
          __size_ofi1_SPI_Write 004B                    _RfHalGetFree 02BB                         _AdcInit 005F  
       __end_ofi1_RfTrcvCrcTick 0000             __size_of_ExtIntInit 0005      RfHalTickRxTh@rxByteTimeout 0026  
           __size_of_RfTrcvMode 000D          __end_of__CCBufPeekByte 02F7            i1__CCBufCalcPt@entry 0071  
            __end_ofi1_SPI_Read 056A               ??__CCBufRdReverse 0077             __end_of_SysInitGpio 03B7  
             _RfHalStatemachine 066D                   SPI_Write@data 0052              ?_RfHalStatemachine 0070  
             ??_RfPacketsTickTh 005A                         _halPkTh 004A                 __size_of_extInt 0009  
                  ??__CCBufInit 0077                         __ptext1 0651                         __ptext2 066D  
                       __ptext3 06D7                         __ptext4 0000                         __ptext5 06C9  
                       __ptext6 039B                         __ptext7 0591                         __ptext8 05EA  
                       __ptext9 0613             ??_RfHalStatemachine 0058          RfPacketsTickTh@timeout 0028  
          __size_ofi1_RfTrcvGet 0009            __size_ofi1_RfTrcvPut 0009                i1_MRF49XACommand 04D4  
                 ?i1_RfTrcvMode 0070                         clrloop0 0717                RfHalRxPut@packet 0052  
       __size_ofi1_RfTrcvStatus 000C            end_of_initialization 002A      RfPacketSimpleReply@needAck 0056  
               ?__CCBufPeekByte 0070      RfPacketSimpleReply@nodeTmp 0057       __end_of_RfHalStatemachine 06BF  
        RfPacketSimpleReply@msg 0055              __end_of__CCBufInit 0000                  _RfHalGetReturn 02C8  
        __size_ofi1__CCBufCanWr 0000                       _PORTAbits 000C                       _PORTCbits 000E  
                  ??_RfHalRxGet 0077                    ??_RfHalTxGet 0077                    ??_RfHalRxPut 0077  
                   ?_mrf49XaIsr 0070                    ??_RfHalTxPut 0053                       _TRISAbits 008C  
                     _TRISBbits 008D                       _TRISCbits 008E                  ??i1_RfTrcvMode 0075  
                     _SPI_Write 0130                ?i1_RfTrcvCrcTick 0070                RfHalTxPut@packet 0054  
          __size_of__CCBufCanRd 0000            __size_of__CCBufCanWr 0000                     _SysInitGpio 039B  
         __size_of_RfTrcvStatus 000A                ??_MRF49XACommand 0077            __size_of__CCBufReset 0000  
                 RfTrcvPut@byte 0055                   RfTrcvSetup@tx 0056                ??i1__CCBufCalcPt 0071  
  __end_of_RfTrcvCarrierPresent 039B    __size_ofi1_RfHalStatemachine 0056               MRF49XACommand@cmd 0053  
        __end_of_RfHalGetReturn 02D0                    ??_ExtIntInit 0077              __end_of_RfHalRxGet 05DA  
              ??i1__CCBufWrByte 0073              __end_of_RfHalTxGet 0396              __end_of_RfHalRxPut 02DC  
            __end_of_RfHalTxPut 064B                    ??_RfTrcvMode 0077                 i1SPI_Write@data 0070  
                     _RfHalInit 0185                    ?_RfTrcvSetup 0070                  __end_of_extInt 000D  
             __size_of_SPI_Read 0038             start_initialization 000F                   ??_MRF49XAInit 0077  
                  _RfTrcvStatus 02F7                       _RfTrcvGet 06C9                       _RfTrcvPut 06BF  
                    ?_SPI_Write 0070                   i1__CCBufCanWr 0000               RfPacketsTickTh@pt 005C  
            __end_of_ExtIntInit 0073              __end_of_RfTrcvMode 0387      __size_of_RfHalStatemachine 0052  
               ?_RfHalGetReturn 0070             __size_of_mrf49XaIsr 001C                   ?__CCBufCalcPt 0052  
         _RfPacketsHandleClient 05EA                   ?__CCBufRdByte 0070                     __pdataBANK0 005D  
                      ??_extInt 0077     __end_of_RfPacketSimpleReply 062E                      ?_RfHalInit 0070  
                 ?__CCBufWrByte 0070                       ___latbits 0001                   __pcstackBANK0 0052  
              entry__mrf49XaIsr 0403                 __CCBufRdReverse 0000                      ?_RfTrcvGet 0070  
             __size_of__fptable 0005                  ?i1__CCBufCanWr 0070                      ?_RfTrcvPut 0070  
         __end_of_RfTrcvCrcTick 0000                  i1_RfTrcvStatus 0528                        ?_AdcInit 0070  
            __CCBufCalcPt@entry 0053                    _rfTrcvStatus 0050             __end_of_MRF49XAInit 0125  
               _RfPacketsTickTh 0591                       _halRxBfTh 004C                       _halTxBfTh 004E  
                 ?i1_mrf49XaIsr 0070          __size_of_RfHalTickRxTh 00E4          __size_of_RfHalTickTxTh 0041  
                ??__CCBufCalcPt 0077        __end_ofi1_MRF49XACommand 04DD                 i1RfTrcvPut@byte 0073  
                     __pfunctab 0400                 i1RfTrcvSetup@tx 0074                  ??__CCBufRdByte 0055  
          __end_ofi1_RfTrcvMode 0415                  ??__CCBufWrByte 0055                   ??i1_SPI_Write 0070  
                     __pswtext1 03E8                       __pswtext2 0700             i1__CCBufCalcPt@move 0070  
      __size_of_RfHalTxPutAgain 0010                       _rfPackets 00A0          __end_ofi1_RfTrcvStatus 0534  
          _RfTrcvCarrierPresent 0396                ??__CCBufPeekByte 0055                     ??_SPI_Write 0077  
             __CCBufWrByte@data 0056          __size_ofi1_RfTrcvSetup 003C                        _LATAbits 010C  
                      _LATBbits 010D                        _LATCbits 010E                       clear_ram0 0716  
                ??i1_mrf49XaIsr 0077          ?_RfPacketsHandleClient 0070                     ??_RfHalInit 0077  
           RfHalTickRxTh@packet 0024                        _SPI_Read 0301                   ??i1_RfTrcvGet 0071  
                 ??i1_RfTrcvPut 0073         __end_of__CCBufRdReverse 0000            __size_of_RfTrcvSetup 0033  
                      _WPUAbits 020C                    ??_mrf49XaIsr 0077                   _RfHalTickRxTh 01AF  
           i1_RfHalStatemachine 0430                   _RfHalTickTxTh 0339           ?_RfTrcvCarrierPresent 0070  
               ??i1__CCBufCanWr 0070           i1__CCBufCalcPt@result 0072                 ?i1_RfTrcvStatus 0070  
             RfTrcvCrcTick@data 0052                     _MRF49XAInit 00A6                     ??_RfTrcvGet 0077  
                   ??_RfTrcvPut 0077             __end_ofi1_SPI_Write 0528         __end_of_RfPacketsTickTh 05CD  
              __size_of_AdcInit 000F                    ?_SysInitGpio 0070            ?i1_RfHalStatemachine 0070  
            __end_of_mrf49XaIsr 066D                   i1_RfTrcvSetup 0498                  ?_RfHalTickRxTh 0070  
                ?_RfHalTickTxTh 0070                        __fptable 0400                    i1RfTrcvGet@b 0071  
                 ??__CCBufCanRd 0077                   ??__CCBufCanWr 0077             __end_ofi1_RfTrcvGet 0498  
           __end_ofi1_RfTrcvPut 048F                        __ptext10 062E                        __ptext11 05DA  
                      __ptext20 029F                        __ptext12 05CD                        __ptext21 02DC  
                      __ptext13 0339                        __ptext30 0000                        __ptext22 0000  
                      __ptext14 0396                        __ptext31 037A                        __ptext23 0293  
                      __ptext15 02F7                        __ptext40 0415                        __ptext32 00A6  
                      __ptext24 0000                        __ptext16 0301                        __ptext41 0528  
                      __ptext33 0073                        __ptext25 02D0                        __ptext17 0387  
                      __ptext50 048F                        __ptext42 0430                        __ptext34 06BF  
                      __ptext26 02C8                        __ptext18 01AF                        __ptext51 04DD  
                      __ptext43 056A                        __ptext35 0125                        __ptext27 02BB  
                      __ptext19 0000                        __ptext52 0534                        __ptext44 0000  
                      __ptext36 0130                        __ptext28 0185                        __ptext53 0000  
                      __ptext45 0585                        __ptext37 006E                        __ptext29 0000  
                      __ptext46 0405                        __ptext38 005F                        __ptext47 0498  
                      __ptext48 0486                        __ptext49 04D4            __end_of__CCBufCalcPt 029F  
                 ??__CCBufReset 0052               ??_RfHalTxPutAgain 0052            __end_of__CCBufRdByte 02BB  
          __end_of__CCBufWrByte 06F2                ??_RfHalGetReturn 0077                   __size_of_main 0033  
                      _rfStatus 0020           ??i1_RfHalStatemachine 0076           __size_ofi1_RfTrcvMode 0010  
      __size_ofi1_RfTrcvCrcTick 0000                  ?i1_RfTrcvSetup 0070                ?__CCBufRdReverse 0070  
                   i1_SPI_Write 04DD          ??_RfTrcvCarrierPresent 0077                      _INTCONbits 000B  
           i1MRF49XACommand@cmd 0071            __end_ofi1_mrf49XaIsr 0430                   ?_RfHalGetFree 0070  
                  i1_RfTrcvMode 0405                ?_RfPacketsTickTh 0070                        intlevel1 0400  
           __end_of__CCBufCanRd 0000             __end_of__CCBufCanWr 0000             __end_of__CCBufReset 0000  
          RfHalGetReturn@packet 0052               ?i1_MRF49XACommand 0071         __size_of_MRF49XACommand 000B  
                    i1_SPI_Read 0534              ??i1_MRF49XACommand 0073         __size_ofi1__CCBufCalcPt 000C  
               ??_RfHalTickRxTh 0057                 ??_RfHalTickTxTh 0058                     i1_RfTrcvGet 048F  
                   i1_RfTrcvPut 0486                  ??_RfHalGetFree 0077         __size_ofi1__CCBufWrByte 001B  
  __size_of_RfPacketSimpleReply 001B                      RfHalInit@i 0058                   fp__mrf49XaIsr 0403  
       ??_RfPacketsHandleClient 0077            __size_of_SysInitGpio 001C  

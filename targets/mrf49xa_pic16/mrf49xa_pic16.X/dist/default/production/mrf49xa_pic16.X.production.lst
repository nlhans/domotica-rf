

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Sat Jul 05 15:28:11 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text20,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text74,local,class=CODE,merge=1,delta=2
    17                           	psect	text77,local,class=CODE,merge=1,delta=2
    18                           	psect	pa_nodes,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     	;# 
    21  0001                     	;# 
    22  0002                     	;# 
    23  0003                     	;# 
    24  0004                     	;# 
    25  0005                     	;# 
    26  0006                     	;# 
    27  0007                     	;# 
    28  0008                     	;# 
    29  0009                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000D                     	;# 
    34  000E                     	;# 
    35  0011                     	;# 
    36  0012                     	;# 
    37  0013                     	;# 
    38  0015                     	;# 
    39  0016                     	;# 
    40  0016                     	;# 
    41  0017                     	;# 
    42  0018                     	;# 
    43  0019                     	;# 
    44  001A                     	;# 
    45  001B                     	;# 
    46  001C                     	;# 
    47  008C                     	;# 
    48  008D                     	;# 
    49  008E                     	;# 
    50  0091                     	;# 
    51  0092                     	;# 
    52  0093                     	;# 
    53  0095                     	;# 
    54  0096                     	;# 
    55  0097                     	;# 
    56  0099                     	;# 
    57  009A                     	;# 
    58  009B                     	;# 
    59  009B                     	;# 
    60  009C                     	;# 
    61  009D                     	;# 
    62  009E                     	;# 
    63  009F                     	;# 
    64  010C                     	;# 
    65  010D                     	;# 
    66  010E                     	;# 
    67  0111                     	;# 
    68  0112                     	;# 
    69  0113                     	;# 
    70  0114                     	;# 
    71  0115                     	;# 
    72  0116                     	;# 
    73  0117                     	;# 
    74  0118                     	;# 
    75  0119                     	;# 
    76  011D                     	;# 
    77  018C                     	;# 
    78  018D                     	;# 
    79  018E                     	;# 
    80  0191                     	;# 
    81  0191                     	;# 
    82  0192                     	;# 
    83  0193                     	;# 
    84  0193                     	;# 
    85  0194                     	;# 
    86  0195                     	;# 
    87  0196                     	;# 
    88  0199                     	;# 
    89  019A                     	;# 
    90  019B                     	;# 
    91  019B                     	;# 
    92  019C                     	;# 
    93  019D                     	;# 
    94  019E                     	;# 
    95  019F                     	;# 
    96  020C                     	;# 
    97  020D                     	;# 
    98  0211                     	;# 
    99  0211                     	;# 
   100  0212                     	;# 
   101  0212                     	;# 
   102  0213                     	;# 
   103  0213                     	;# 
   104  0214                     	;# 
   105  0214                     	;# 
   106  0215                     	;# 
   107  0215                     	;# 
   108  0215                     	;# 
   109  0216                     	;# 
   110  0216                     	;# 
   111  0217                     	;# 
   112  0217                     	;# 
   113  0391                     	;# 
   114  0392                     	;# 
   115  0393                     	;# 
   116  0394                     	;# 
   117  0395                     	;# 
   118  0396                     	;# 
   119  0498                     	;# 
   120  0498                     	;# 
   121  0499                     	;# 
   122  049A                     	;# 
   123  049B                     	;# 
   124  049B                     	;# 
   125  049C                     	;# 
   126  049E                     	;# 
   127  049F                     	;# 
   128  0611                     	;# 
   129  0612                     	;# 
   130  0613                     	;# 
   131  0613                     	;# 
   132  0614                     	;# 
   133  0615                     	;# 
   134  0616                     	;# 
   135  0616                     	;# 
   136  0617                     	;# 
   137  0618                     	;# 
   138  0619                     	;# 
   139  0619                     	;# 
   140  061A                     	;# 
   141  061B                     	;# 
   142  061C                     	;# 
   143  061C                     	;# 
   144  0691                     	;# 
   145  0692                     	;# 
   146  0693                     	;# 
   147  0694                     	;# 
   148  0695                     	;# 
   149  0F0F                     	;# 
   150  0F10                     	;# 
   151  0F11                     	;# 
   152  0F12                     	;# 
   153  0F13                     	;# 
   154  0F14                     	;# 
   155  0F15                     	;# 
   156  0F16                     	;# 
   157  0F17                     	;# 
   158  0F18                     	;# 
   159  0F19                     	;# 
   160  0F1A                     	;# 
   161  0F1B                     	;# 
   162  0F1C                     	;# 
   163  0F1D                     	;# 
   164  0F1E                     	;# 
   165  0F1F                     	;# 
   166  0F20                     	;# 
   167  0F21                     	;# 
   168  0F22                     	;# 
   169  0F23                     	;# 
   170  0F24                     	;# 
   171  0F25                     	;# 
   172  0F26                     	;# 
   173  0F27                     	;# 
   174  0F28                     	;# 
   175  0F29                     	;# 
   176  0F2A                     	;# 
   177  0F2B                     	;# 
   178  0F2C                     	;# 
   179  0F2D                     	;# 
   180  0F2E                     	;# 
   181  0F2F                     	;# 
   182  0F8C                     	;# 
   183  0F8D                     	;# 
   184  0F91                     	;# 
   185  0F95                     	;# 
   186  0F96                     	;# 
   187  0F97                     	;# 
   188  0F9C                     	;# 
   189  0F9D                     	;# 
   190  0F9E                     	;# 
   191  0FE3                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE9                     	;# 
   198  0FEA                     	;# 
   199  0FEB                     	;# 
   200  0FED                     	;# 
   201  0FEE                     	;# 
   202  0FEF                     	;# 
   203  0000                     	;# 
   204  0001                     	;# 
   205  0002                     	;# 
   206  0003                     	;# 
   207  0004                     	;# 
   208  0005                     	;# 
   209  0006                     	;# 
   210  0007                     	;# 
   211  0008                     	;# 
   212  0009                     	;# 
   213  000A                     	;# 
   214  000B                     	;# 
   215  000C                     	;# 
   216  000D                     	;# 
   217  000E                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0016                     	;# 
   224  0017                     	;# 
   225  0018                     	;# 
   226  0019                     	;# 
   227  001A                     	;# 
   228  001B                     	;# 
   229  001C                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  010E                     	;# 
   250  0111                     	;# 
   251  0112                     	;# 
   252  0113                     	;# 
   253  0114                     	;# 
   254  0115                     	;# 
   255  0116                     	;# 
   256  0117                     	;# 
   257  0118                     	;# 
   258  0119                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0194                     	;# 
   269  0195                     	;# 
   270  0196                     	;# 
   271  0199                     	;# 
   272  019A                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019C                     	;# 
   276  019D                     	;# 
   277  019E                     	;# 
   278  019F                     	;# 
   279  020C                     	;# 
   280  020D                     	;# 
   281  0211                     	;# 
   282  0211                     	;# 
   283  0212                     	;# 
   284  0212                     	;# 
   285  0213                     	;# 
   286  0213                     	;# 
   287  0214                     	;# 
   288  0214                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0216                     	;# 
   293  0216                     	;# 
   294  0217                     	;# 
   295  0217                     	;# 
   296  0391                     	;# 
   297  0392                     	;# 
   298  0393                     	;# 
   299  0394                     	;# 
   300  0395                     	;# 
   301  0396                     	;# 
   302  0498                     	;# 
   303  0498                     	;# 
   304  0499                     	;# 
   305  049A                     	;# 
   306  049B                     	;# 
   307  049B                     	;# 
   308  049C                     	;# 
   309  049E                     	;# 
   310  049F                     	;# 
   311  0611                     	;# 
   312  0612                     	;# 
   313  0613                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0615                     	;# 
   317  0616                     	;# 
   318  0616                     	;# 
   319  0617                     	;# 
   320  0618                     	;# 
   321  0619                     	;# 
   322  0619                     	;# 
   323  061A                     	;# 
   324  061B                     	;# 
   325  061C                     	;# 
   326  061C                     	;# 
   327  0691                     	;# 
   328  0692                     	;# 
   329  0693                     	;# 
   330  0694                     	;# 
   331  0695                     	;# 
   332  0F0F                     	;# 
   333  0F10                     	;# 
   334  0F11                     	;# 
   335  0F12                     	;# 
   336  0F13                     	;# 
   337  0F14                     	;# 
   338  0F15                     	;# 
   339  0F16                     	;# 
   340  0F17                     	;# 
   341  0F18                     	;# 
   342  0F19                     	;# 
   343  0F1A                     	;# 
   344  0F1B                     	;# 
   345  0F1C                     	;# 
   346  0F1D                     	;# 
   347  0F1E                     	;# 
   348  0F1F                     	;# 
   349  0F20                     	;# 
   350  0F21                     	;# 
   351  0F22                     	;# 
   352  0F23                     	;# 
   353  0F24                     	;# 
   354  0F25                     	;# 
   355  0F26                     	;# 
   356  0F27                     	;# 
   357  0F28                     	;# 
   358  0F29                     	;# 
   359  0F2A                     	;# 
   360  0F2B                     	;# 
   361  0F2C                     	;# 
   362  0F2D                     	;# 
   363  0F2E                     	;# 
   364  0F2F                     	;# 
   365  0F8C                     	;# 
   366  0F8D                     	;# 
   367  0F91                     	;# 
   368  0F95                     	;# 
   369  0F96                     	;# 
   370  0F97                     	;# 
   371  0F9C                     	;# 
   372  0F9D                     	;# 
   373  0F9E                     	;# 
   374  0FE3                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0013                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0093                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  009F                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  0111                     	;# 
   434  0112                     	;# 
   435  0113                     	;# 
   436  0114                     	;# 
   437  0115                     	;# 
   438  0116                     	;# 
   439  0117                     	;# 
   440  0118                     	;# 
   441  0119                     	;# 
   442  011D                     	;# 
   443  018C                     	;# 
   444  018D                     	;# 
   445  018E                     	;# 
   446  0191                     	;# 
   447  0191                     	;# 
   448  0192                     	;# 
   449  0193                     	;# 
   450  0193                     	;# 
   451  0194                     	;# 
   452  0195                     	;# 
   453  0196                     	;# 
   454  0199                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020C                     	;# 
   463  020D                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0391                     	;# 
   480  0392                     	;# 
   481  0393                     	;# 
   482  0394                     	;# 
   483  0395                     	;# 
   484  0396                     	;# 
   485  0498                     	;# 
   486  0498                     	;# 
   487  0499                     	;# 
   488  049A                     	;# 
   489  049B                     	;# 
   490  049B                     	;# 
   491  049C                     	;# 
   492  049E                     	;# 
   493  049F                     	;# 
   494  0611                     	;# 
   495  0612                     	;# 
   496  0613                     	;# 
   497  0613                     	;# 
   498  0614                     	;# 
   499  0615                     	;# 
   500  0616                     	;# 
   501  0616                     	;# 
   502  0617                     	;# 
   503  0618                     	;# 
   504  0619                     	;# 
   505  0619                     	;# 
   506  061A                     	;# 
   507  061B                     	;# 
   508  061C                     	;# 
   509  061C                     	;# 
   510  0691                     	;# 
   511  0692                     	;# 
   512  0693                     	;# 
   513  0694                     	;# 
   514  0695                     	;# 
   515  0F0F                     	;# 
   516  0F10                     	;# 
   517  0F11                     	;# 
   518  0F12                     	;# 
   519  0F13                     	;# 
   520  0F14                     	;# 
   521  0F15                     	;# 
   522  0F16                     	;# 
   523  0F17                     	;# 
   524  0F18                     	;# 
   525  0F19                     	;# 
   526  0F1A                     	;# 
   527  0F1B                     	;# 
   528  0F1C                     	;# 
   529  0F1D                     	;# 
   530  0F1E                     	;# 
   531  0F1F                     	;# 
   532  0F20                     	;# 
   533  0F21                     	;# 
   534  0F22                     	;# 
   535  0F23                     	;# 
   536  0F24                     	;# 
   537  0F25                     	;# 
   538  0F26                     	;# 
   539  0F27                     	;# 
   540  0F28                     	;# 
   541  0F29                     	;# 
   542  0F2A                     	;# 
   543  0F2B                     	;# 
   544  0F2C                     	;# 
   545  0F2D                     	;# 
   546  0F2E                     	;# 
   547  0F2F                     	;# 
   548  0F8C                     	;# 
   549  0F8D                     	;# 
   550  0F91                     	;# 
   551  0F95                     	;# 
   552  0F96                     	;# 
   553  0F97                     	;# 
   554  0F9C                     	;# 
   555  0F9D                     	;# 
   556  0F9E                     	;# 
   557  0FE3                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  009F                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  010E                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011D                     	;# 
   626  018C                     	;# 
   627  018D                     	;# 
   628  018E                     	;# 
   629  0191                     	;# 
   630  0191                     	;# 
   631  0192                     	;# 
   632  0193                     	;# 
   633  0193                     	;# 
   634  0194                     	;# 
   635  0195                     	;# 
   636  0196                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019B                     	;# 
   640  019B                     	;# 
   641  019C                     	;# 
   642  019D                     	;# 
   643  019E                     	;# 
   644  019F                     	;# 
   645  020C                     	;# 
   646  020D                     	;# 
   647  0211                     	;# 
   648  0211                     	;# 
   649  0212                     	;# 
   650  0212                     	;# 
   651  0213                     	;# 
   652  0213                     	;# 
   653  0214                     	;# 
   654  0214                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0215                     	;# 
   658  0216                     	;# 
   659  0216                     	;# 
   660  0217                     	;# 
   661  0217                     	;# 
   662  0391                     	;# 
   663  0392                     	;# 
   664  0393                     	;# 
   665  0394                     	;# 
   666  0395                     	;# 
   667  0396                     	;# 
   668  0498                     	;# 
   669  0498                     	;# 
   670  0499                     	;# 
   671  049A                     	;# 
   672  049B                     	;# 
   673  049B                     	;# 
   674  049C                     	;# 
   675  049E                     	;# 
   676  049F                     	;# 
   677  0611                     	;# 
   678  0612                     	;# 
   679  0613                     	;# 
   680  0613                     	;# 
   681  0614                     	;# 
   682  0615                     	;# 
   683  0616                     	;# 
   684  0616                     	;# 
   685  0617                     	;# 
   686  0618                     	;# 
   687  0619                     	;# 
   688  0619                     	;# 
   689  061A                     	;# 
   690  061B                     	;# 
   691  061C                     	;# 
   692  061C                     	;# 
   693  0691                     	;# 
   694  0692                     	;# 
   695  0693                     	;# 
   696  0694                     	;# 
   697  0695                     	;# 
   698  0F0F                     	;# 
   699  0F10                     	;# 
   700  0F11                     	;# 
   701  0F12                     	;# 
   702  0F13                     	;# 
   703  0F14                     	;# 
   704  0F15                     	;# 
   705  0F16                     	;# 
   706  0F17                     	;# 
   707  0F18                     	;# 
   708  0F19                     	;# 
   709  0F1A                     	;# 
   710  0F1B                     	;# 
   711  0F1C                     	;# 
   712  0F1D                     	;# 
   713  0F1E                     	;# 
   714  0F1F                     	;# 
   715  0F20                     	;# 
   716  0F21                     	;# 
   717  0F22                     	;# 
   718  0F23                     	;# 
   719  0F24                     	;# 
   720  0F25                     	;# 
   721  0F26                     	;# 
   722  0F27                     	;# 
   723  0F28                     	;# 
   724  0F29                     	;# 
   725  0F2A                     	;# 
   726  0F2B                     	;# 
   727  0F2C                     	;# 
   728  0F2D                     	;# 
   729  0F2E                     	;# 
   730  0F2F                     	;# 
   731  0F8C                     	;# 
   732  0F8D                     	;# 
   733  0F91                     	;# 
   734  0F95                     	;# 
   735  0F96                     	;# 
   736  0F97                     	;# 
   737  0F9C                     	;# 
   738  0F9D                     	;# 
   739  0F9E                     	;# 
   740  0FE3                     	;# 
   741  0FE4                     	;# 
   742  0FE5                     	;# 
   743  0FE6                     	;# 
   744  0FE7                     	;# 
   745  0FE8                     	;# 
   746  0FE9                     	;# 
   747  0FEA                     	;# 
   748  0FEB                     	;# 
   749  0FED                     	;# 
   750  0FEE                     	;# 
   751  0FEF                     	;# 
   752  0000                     	;# 
   753  0001                     	;# 
   754  0002                     	;# 
   755  0003                     	;# 
   756  0004                     	;# 
   757  0005                     	;# 
   758  0006                     	;# 
   759  0007                     	;# 
   760  0008                     	;# 
   761  0009                     	;# 
   762  000A                     	;# 
   763  000B                     	;# 
   764  000C                     	;# 
   765  000D                     	;# 
   766  000E                     	;# 
   767  0011                     	;# 
   768  0012                     	;# 
   769  0013                     	;# 
   770  0015                     	;# 
   771  0016                     	;# 
   772  0016                     	;# 
   773  0017                     	;# 
   774  0018                     	;# 
   775  0019                     	;# 
   776  001A                     	;# 
   777  001B                     	;# 
   778  001C                     	;# 
   779  008C                     	;# 
   780  008D                     	;# 
   781  008E                     	;# 
   782  0091                     	;# 
   783  0092                     	;# 
   784  0093                     	;# 
   785  0095                     	;# 
   786  0096                     	;# 
   787  0097                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009B                     	;# 
   792  009C                     	;# 
   793  009D                     	;# 
   794  009E                     	;# 
   795  009F                     	;# 
   796  010C                     	;# 
   797  010D                     	;# 
   798  010E                     	;# 
   799  0111                     	;# 
   800  0112                     	;# 
   801  0113                     	;# 
   802  0114                     	;# 
   803  0115                     	;# 
   804  0116                     	;# 
   805  0117                     	;# 
   806  0118                     	;# 
   807  0119                     	;# 
   808  011D                     	;# 
   809  018C                     	;# 
   810  018D                     	;# 
   811  018E                     	;# 
   812  0191                     	;# 
   813  0191                     	;# 
   814  0192                     	;# 
   815  0193                     	;# 
   816  0193                     	;# 
   817  0194                     	;# 
   818  0195                     	;# 
   819  0196                     	;# 
   820  0199                     	;# 
   821  019A                     	;# 
   822  019B                     	;# 
   823  019B                     	;# 
   824  019C                     	;# 
   825  019D                     	;# 
   826  019E                     	;# 
   827  019F                     	;# 
   828  020C                     	;# 
   829  020D                     	;# 
   830  0211                     	;# 
   831  0211                     	;# 
   832  0212                     	;# 
   833  0212                     	;# 
   834  0213                     	;# 
   835  0213                     	;# 
   836  0214                     	;# 
   837  0214                     	;# 
   838  0215                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0216                     	;# 
   842  0216                     	;# 
   843  0217                     	;# 
   844  0217                     	;# 
   845  0391                     	;# 
   846  0392                     	;# 
   847  0393                     	;# 
   848  0394                     	;# 
   849  0395                     	;# 
   850  0396                     	;# 
   851  0498                     	;# 
   852  0498                     	;# 
   853  0499                     	;# 
   854  049A                     	;# 
   855  049B                     	;# 
   856  049B                     	;# 
   857  049C                     	;# 
   858  049E                     	;# 
   859  049F                     	;# 
   860  0611                     	;# 
   861  0612                     	;# 
   862  0613                     	;# 
   863  0613                     	;# 
   864  0614                     	;# 
   865  0615                     	;# 
   866  0616                     	;# 
   867  0616                     	;# 
   868  0617                     	;# 
   869  0618                     	;# 
   870  0619                     	;# 
   871  0619                     	;# 
   872  061A                     	;# 
   873  061B                     	;# 
   874  061C                     	;# 
   875  061C                     	;# 
   876  0691                     	;# 
   877  0692                     	;# 
   878  0693                     	;# 
   879  0694                     	;# 
   880  0695                     	;# 
   881  0F0F                     	;# 
   882  0F10                     	;# 
   883  0F11                     	;# 
   884  0F12                     	;# 
   885  0F13                     	;# 
   886  0F14                     	;# 
   887  0F15                     	;# 
   888  0F16                     	;# 
   889  0F17                     	;# 
   890  0F18                     	;# 
   891  0F19                     	;# 
   892  0F1A                     	;# 
   893  0F1B                     	;# 
   894  0F1C                     	;# 
   895  0F1D                     	;# 
   896  0F1E                     	;# 
   897  0F1F                     	;# 
   898  0F20                     	;# 
   899  0F21                     	;# 
   900  0F22                     	;# 
   901  0F23                     	;# 
   902  0F24                     	;# 
   903  0F25                     	;# 
   904  0F26                     	;# 
   905  0F27                     	;# 
   906  0F28                     	;# 
   907  0F29                     	;# 
   908  0F2A                     	;# 
   909  0F2B                     	;# 
   910  0F2C                     	;# 
   911  0F2D                     	;# 
   912  0F2E                     	;# 
   913  0F2F                     	;# 
   914  0F8C                     	;# 
   915  0F8D                     	;# 
   916  0F91                     	;# 
   917  0F95                     	;# 
   918  0F96                     	;# 
   919  0F97                     	;# 
   920  0F9C                     	;# 
   921  0F9D                     	;# 
   922  0F9E                     	;# 
   923  0FE3                     	;# 
   924  0FE4                     	;# 
   925  0FE5                     	;# 
   926  0FE6                     	;# 
   927  0FE7                     	;# 
   928  0FE8                     	;# 
   929  0FE9                     	;# 
   930  0FEA                     	;# 
   931  0FEB                     	;# 
   932  0FED                     	;# 
   933  0FEE                     	;# 
   934  0FEF                     	;# 
   935  0000                     	;# 
   936  0001                     	;# 
   937  0002                     	;# 
   938  0003                     	;# 
   939  0004                     	;# 
   940  0005                     	;# 
   941  0006                     	;# 
   942  0007                     	;# 
   943  0008                     	;# 
   944  0009                     	;# 
   945  000A                     	;# 
   946  000B                     	;# 
   947  000C                     	;# 
   948  000D                     	;# 
   949  000E                     	;# 
   950  0011                     	;# 
   951  0012                     	;# 
   952  0013                     	;# 
   953  0015                     	;# 
   954  0016                     	;# 
   955  0016                     	;# 
   956  0017                     	;# 
   957  0018                     	;# 
   958  0019                     	;# 
   959  001A                     	;# 
   960  001B                     	;# 
   961  001C                     	;# 
   962  008C                     	;# 
   963  008D                     	;# 
   964  008E                     	;# 
   965  0091                     	;# 
   966  0092                     	;# 
   967  0093                     	;# 
   968  0095                     	;# 
   969  0096                     	;# 
   970  0097                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  009F                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0111                     	;# 
   983  0112                     	;# 
   984  0113                     	;# 
   985  0114                     	;# 
   986  0115                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  0118                     	;# 
   990  0119                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020C                     	;# 
  1012  020D                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0391                     	;# 
  1029  0392                     	;# 
  1030  0393                     	;# 
  1031  0394                     	;# 
  1032  0395                     	;# 
  1033  0396                     	;# 
  1034  0498                     	;# 
  1035  0498                     	;# 
  1036  0499                     	;# 
  1037  049A                     	;# 
  1038  049B                     	;# 
  1039  049B                     	;# 
  1040  049C                     	;# 
  1041  049E                     	;# 
  1042  049F                     	;# 
  1043  0611                     	;# 
  1044  0612                     	;# 
  1045  0613                     	;# 
  1046  0613                     	;# 
  1047  0614                     	;# 
  1048  0615                     	;# 
  1049  0616                     	;# 
  1050  0616                     	;# 
  1051  0617                     	;# 
  1052  0618                     	;# 
  1053  0619                     	;# 
  1054  0619                     	;# 
  1055  061A                     	;# 
  1056  061B                     	;# 
  1057  061C                     	;# 
  1058  061C                     	;# 
  1059  0691                     	;# 
  1060  0692                     	;# 
  1061  0693                     	;# 
  1062  0694                     	;# 
  1063  0695                     	;# 
  1064  0F0F                     	;# 
  1065  0F10                     	;# 
  1066  0F11                     	;# 
  1067  0F12                     	;# 
  1068  0F13                     	;# 
  1069  0F14                     	;# 
  1070  0F15                     	;# 
  1071  0F16                     	;# 
  1072  0F17                     	;# 
  1073  0F18                     	;# 
  1074  0F19                     	;# 
  1075  0F1A                     	;# 
  1076  0F1B                     	;# 
  1077  0F1C                     	;# 
  1078  0F1D                     	;# 
  1079  0F1E                     	;# 
  1080  0F1F                     	;# 
  1081  0F20                     	;# 
  1082  0F21                     	;# 
  1083  0F22                     	;# 
  1084  0F23                     	;# 
  1085  0F24                     	;# 
  1086  0F25                     	;# 
  1087  0F26                     	;# 
  1088  0F27                     	;# 
  1089  0F28                     	;# 
  1090  0F29                     	;# 
  1091  0F2A                     	;# 
  1092  0F2B                     	;# 
  1093  0F2C                     	;# 
  1094  0F2D                     	;# 
  1095  0F2E                     	;# 
  1096  0F2F                     	;# 
  1097  0F8C                     	;# 
  1098  0F8D                     	;# 
  1099  0F91                     	;# 
  1100  0F95                     	;# 
  1101  0F96                     	;# 
  1102  0F97                     	;# 
  1103  0F9C                     	;# 
  1104  0F9D                     	;# 
  1105  0F9E                     	;# 
  1106  0FE3                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000D                     	;# 
  1132  000E                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0015                     	;# 
  1137  0016                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  008C                     	;# 
  1146  008D                     	;# 
  1147  008E                     	;# 
  1148  0091                     	;# 
  1149  0092                     	;# 
  1150  0093                     	;# 
  1151  0095                     	;# 
  1152  0096                     	;# 
  1153  0097                     	;# 
  1154  0099                     	;# 
  1155  009A                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010D                     	;# 
  1164  010E                     	;# 
  1165  0111                     	;# 
  1166  0112                     	;# 
  1167  0113                     	;# 
  1168  0114                     	;# 
  1169  0115                     	;# 
  1170  0116                     	;# 
  1171  0117                     	;# 
  1172  0118                     	;# 
  1173  0119                     	;# 
  1174  011D                     	;# 
  1175  018C                     	;# 
  1176  018D                     	;# 
  1177  018E                     	;# 
  1178  0191                     	;# 
  1179  0191                     	;# 
  1180  0192                     	;# 
  1181  0193                     	;# 
  1182  0193                     	;# 
  1183  0194                     	;# 
  1184  0195                     	;# 
  1185  0196                     	;# 
  1186  0199                     	;# 
  1187  019A                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019D                     	;# 
  1192  019E                     	;# 
  1193  019F                     	;# 
  1194  020C                     	;# 
  1195  020D                     	;# 
  1196  0211                     	;# 
  1197  0211                     	;# 
  1198  0212                     	;# 
  1199  0212                     	;# 
  1200  0213                     	;# 
  1201  0213                     	;# 
  1202  0214                     	;# 
  1203  0214                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0216                     	;# 
  1208  0216                     	;# 
  1209  0217                     	;# 
  1210  0217                     	;# 
  1211  0391                     	;# 
  1212  0392                     	;# 
  1213  0393                     	;# 
  1214  0394                     	;# 
  1215  0395                     	;# 
  1216  0396                     	;# 
  1217  0498                     	;# 
  1218  0498                     	;# 
  1219  0499                     	;# 
  1220  049A                     	;# 
  1221  049B                     	;# 
  1222  049B                     	;# 
  1223  049C                     	;# 
  1224  049E                     	;# 
  1225  049F                     	;# 
  1226  0611                     	;# 
  1227  0612                     	;# 
  1228  0613                     	;# 
  1229  0613                     	;# 
  1230  0614                     	;# 
  1231  0615                     	;# 
  1232  0616                     	;# 
  1233  0616                     	;# 
  1234  0617                     	;# 
  1235  0618                     	;# 
  1236  0619                     	;# 
  1237  0619                     	;# 
  1238  061A                     	;# 
  1239  061B                     	;# 
  1240  061C                     	;# 
  1241  061C                     	;# 
  1242  0691                     	;# 
  1243  0692                     	;# 
  1244  0693                     	;# 
  1245  0694                     	;# 
  1246  0695                     	;# 
  1247  0F0F                     	;# 
  1248  0F10                     	;# 
  1249  0F11                     	;# 
  1250  0F12                     	;# 
  1251  0F13                     	;# 
  1252  0F14                     	;# 
  1253  0F15                     	;# 
  1254  0F16                     	;# 
  1255  0F17                     	;# 
  1256  0F18                     	;# 
  1257  0F19                     	;# 
  1258  0F1A                     	;# 
  1259  0F1B                     	;# 
  1260  0F1C                     	;# 
  1261  0F1D                     	;# 
  1262  0F1E                     	;# 
  1263  0F1F                     	;# 
  1264  0F20                     	;# 
  1265  0F21                     	;# 
  1266  0F22                     	;# 
  1267  0F23                     	;# 
  1268  0F24                     	;# 
  1269  0F25                     	;# 
  1270  0F26                     	;# 
  1271  0F27                     	;# 
  1272  0F28                     	;# 
  1273  0F29                     	;# 
  1274  0F2A                     	;# 
  1275  0F2B                     	;# 
  1276  0F2C                     	;# 
  1277  0F2D                     	;# 
  1278  0F2E                     	;# 
  1279  0F2F                     	;# 
  1280  0F8C                     	;# 
  1281  0F8D                     	;# 
  1282  0F91                     	;# 
  1283  0F95                     	;# 
  1284  0F96                     	;# 
  1285  0F97                     	;# 
  1286  0F9C                     	;# 
  1287  0F9D                     	;# 
  1288  0F9E                     	;# 
  1289  0FE3                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301  0000                     	;# 
  1302  0001                     	;# 
  1303  0002                     	;# 
  1304  0003                     	;# 
  1305  0004                     	;# 
  1306  0005                     	;# 
  1307  0006                     	;# 
  1308  0007                     	;# 
  1309  0008                     	;# 
  1310  0009                     	;# 
  1311  000A                     	;# 
  1312  000B                     	;# 
  1313  000C                     	;# 
  1314  000D                     	;# 
  1315  000E                     	;# 
  1316  0011                     	;# 
  1317  0012                     	;# 
  1318  0013                     	;# 
  1319  0015                     	;# 
  1320  0016                     	;# 
  1321  0016                     	;# 
  1322  0017                     	;# 
  1323  0018                     	;# 
  1324  0019                     	;# 
  1325  001A                     	;# 
  1326  001B                     	;# 
  1327  001C                     	;# 
  1328  008C                     	;# 
  1329  008D                     	;# 
  1330  008E                     	;# 
  1331  0091                     	;# 
  1332  0092                     	;# 
  1333  0093                     	;# 
  1334  0095                     	;# 
  1335  0096                     	;# 
  1336  0097                     	;# 
  1337  0099                     	;# 
  1338  009A                     	;# 
  1339  009B                     	;# 
  1340  009B                     	;# 
  1341  009C                     	;# 
  1342  009D                     	;# 
  1343  009E                     	;# 
  1344  009F                     	;# 
  1345  010C                     	;# 
  1346  010D                     	;# 
  1347  010E                     	;# 
  1348  0111                     	;# 
  1349  0112                     	;# 
  1350  0113                     	;# 
  1351  0114                     	;# 
  1352  0115                     	;# 
  1353  0116                     	;# 
  1354  0117                     	;# 
  1355  0118                     	;# 
  1356  0119                     	;# 
  1357  011D                     	;# 
  1358  018C                     	;# 
  1359  018D                     	;# 
  1360  018E                     	;# 
  1361  0191                     	;# 
  1362  0191                     	;# 
  1363  0192                     	;# 
  1364  0193                     	;# 
  1365  0193                     	;# 
  1366  0194                     	;# 
  1367  0195                     	;# 
  1368  0196                     	;# 
  1369  0199                     	;# 
  1370  019A                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019C                     	;# 
  1374  019D                     	;# 
  1375  019E                     	;# 
  1376  019F                     	;# 
  1377  020C                     	;# 
  1378  020D                     	;# 
  1379  0211                     	;# 
  1380  0211                     	;# 
  1381  0212                     	;# 
  1382  0212                     	;# 
  1383  0213                     	;# 
  1384  0213                     	;# 
  1385  0214                     	;# 
  1386  0214                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0216                     	;# 
  1391  0216                     	;# 
  1392  0217                     	;# 
  1393  0217                     	;# 
  1394  0391                     	;# 
  1395  0392                     	;# 
  1396  0393                     	;# 
  1397  0394                     	;# 
  1398  0395                     	;# 
  1399  0396                     	;# 
  1400  0498                     	;# 
  1401  0498                     	;# 
  1402  0499                     	;# 
  1403  049A                     	;# 
  1404  049B                     	;# 
  1405  049B                     	;# 
  1406  049C                     	;# 
  1407  049E                     	;# 
  1408  049F                     	;# 
  1409  0611                     	;# 
  1410  0612                     	;# 
  1411  0613                     	;# 
  1412  0613                     	;# 
  1413  0614                     	;# 
  1414  0615                     	;# 
  1415  0616                     	;# 
  1416  0616                     	;# 
  1417  0617                     	;# 
  1418  0618                     	;# 
  1419  0619                     	;# 
  1420  0619                     	;# 
  1421  061A                     	;# 
  1422  061B                     	;# 
  1423  061C                     	;# 
  1424  061C                     	;# 
  1425  0691                     	;# 
  1426  0692                     	;# 
  1427  0693                     	;# 
  1428  0694                     	;# 
  1429  0695                     	;# 
  1430  0F0F                     	;# 
  1431  0F10                     	;# 
  1432  0F11                     	;# 
  1433  0F12                     	;# 
  1434  0F13                     	;# 
  1435  0F14                     	;# 
  1436  0F15                     	;# 
  1437  0F16                     	;# 
  1438  0F17                     	;# 
  1439  0F18                     	;# 
  1440  0F19                     	;# 
  1441  0F1A                     	;# 
  1442  0F1B                     	;# 
  1443  0F1C                     	;# 
  1444  0F1D                     	;# 
  1445  0F1E                     	;# 
  1446  0F1F                     	;# 
  1447  0F20                     	;# 
  1448  0F21                     	;# 
  1449  0F22                     	;# 
  1450  0F23                     	;# 
  1451  0F24                     	;# 
  1452  0F25                     	;# 
  1453  0F26                     	;# 
  1454  0F27                     	;# 
  1455  0F28                     	;# 
  1456  0F29                     	;# 
  1457  0F2A                     	;# 
  1458  0F2B                     	;# 
  1459  0F2C                     	;# 
  1460  0F2D                     	;# 
  1461  0F2E                     	;# 
  1462  0F2F                     	;# 
  1463  0F8C                     	;# 
  1464  0F8D                     	;# 
  1465  0F91                     	;# 
  1466  0F95                     	;# 
  1467  0F96                     	;# 
  1468  0F97                     	;# 
  1469  0F9C                     	;# 
  1470  0F9D                     	;# 
  1471  0F9E                     	;# 
  1472  0FE3                     	;# 
  1473  0FE4                     	;# 
  1474  0FE5                     	;# 
  1475  0FE6                     	;# 
  1476  0FE7                     	;# 
  1477  0FE8                     	;# 
  1478  0FE9                     	;# 
  1479  0FEA                     	;# 
  1480  0FEB                     	;# 
  1481  0FED                     	;# 
  1482  0FEE                     	;# 
  1483  0FEF                     	;# 
  1484  0000                     	;# 
  1485  0001                     	;# 
  1486  0002                     	;# 
  1487  0003                     	;# 
  1488  0004                     	;# 
  1489  0005                     	;# 
  1490  0006                     	;# 
  1491  0007                     	;# 
  1492  0008                     	;# 
  1493  0009                     	;# 
  1494  000A                     	;# 
  1495  000B                     	;# 
  1496  000C                     	;# 
  1497  000D                     	;# 
  1498  000E                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0013                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008D                     	;# 
  1513  008E                     	;# 
  1514  0091                     	;# 
  1515  0092                     	;# 
  1516  0093                     	;# 
  1517  0095                     	;# 
  1518  0096                     	;# 
  1519  0097                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  009F                     	;# 
  1528  010C                     	;# 
  1529  010D                     	;# 
  1530  010E                     	;# 
  1531  0111                     	;# 
  1532  0112                     	;# 
  1533  0113                     	;# 
  1534  0114                     	;# 
  1535  0115                     	;# 
  1536  0116                     	;# 
  1537  0117                     	;# 
  1538  0118                     	;# 
  1539  0119                     	;# 
  1540  011D                     	;# 
  1541  018C                     	;# 
  1542  018D                     	;# 
  1543  018E                     	;# 
  1544  0191                     	;# 
  1545  0191                     	;# 
  1546  0192                     	;# 
  1547  0193                     	;# 
  1548  0193                     	;# 
  1549  0194                     	;# 
  1550  0195                     	;# 
  1551  0196                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020C                     	;# 
  1561  020D                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0391                     	;# 
  1578  0392                     	;# 
  1579  0393                     	;# 
  1580  0394                     	;# 
  1581  0395                     	;# 
  1582  0396                     	;# 
  1583  0498                     	;# 
  1584  0498                     	;# 
  1585  0499                     	;# 
  1586  049A                     	;# 
  1587  049B                     	;# 
  1588  049B                     	;# 
  1589  049C                     	;# 
  1590  049E                     	;# 
  1591  049F                     	;# 
  1592  0611                     	;# 
  1593  0612                     	;# 
  1594  0613                     	;# 
  1595  0613                     	;# 
  1596  0614                     	;# 
  1597  0615                     	;# 
  1598  0616                     	;# 
  1599  0616                     	;# 
  1600  0617                     	;# 
  1601  0618                     	;# 
  1602  0619                     	;# 
  1603  0619                     	;# 
  1604  061A                     	;# 
  1605  061B                     	;# 
  1606  061C                     	;# 
  1607  061C                     	;# 
  1608  0691                     	;# 
  1609  0692                     	;# 
  1610  0693                     	;# 
  1611  0694                     	;# 
  1612  0695                     	;# 
  1613  0F0F                     	;# 
  1614  0F10                     	;# 
  1615  0F11                     	;# 
  1616  0F12                     	;# 
  1617  0F13                     	;# 
  1618  0F14                     	;# 
  1619  0F15                     	;# 
  1620  0F16                     	;# 
  1621  0F17                     	;# 
  1622  0F18                     	;# 
  1623  0F19                     	;# 
  1624  0F1A                     	;# 
  1625  0F1B                     	;# 
  1626  0F1C                     	;# 
  1627  0F1D                     	;# 
  1628  0F1E                     	;# 
  1629  0F1F                     	;# 
  1630  0F20                     	;# 
  1631  0F21                     	;# 
  1632  0F22                     	;# 
  1633  0F23                     	;# 
  1634  0F24                     	;# 
  1635  0F25                     	;# 
  1636  0F26                     	;# 
  1637  0F27                     	;# 
  1638  0F28                     	;# 
  1639  0F29                     	;# 
  1640  0F2A                     	;# 
  1641  0F2B                     	;# 
  1642  0F2C                     	;# 
  1643  0F2D                     	;# 
  1644  0F2E                     	;# 
  1645  0F2F                     	;# 
  1646  0F8C                     	;# 
  1647  0F8D                     	;# 
  1648  0F91                     	;# 
  1649  0F95                     	;# 
  1650  0F96                     	;# 
  1651  0F97                     	;# 
  1652  0F9C                     	;# 
  1653  0F9D                     	;# 
  1654  0F9E                     	;# 
  1655  0FE3                     	;# 
  1656  0FE4                     	;# 
  1657  0FE5                     	;# 
  1658  0FE6                     	;# 
  1659  0FE7                     	;# 
  1660  0FE8                     	;# 
  1661  0FE9                     	;# 
  1662  0FEA                     	;# 
  1663  0FEB                     	;# 
  1664  0FED                     	;# 
  1665  0FEE                     	;# 
  1666  0FEF                     	;# 
  1667  0000                     	;# 
  1668  0001                     	;# 
  1669  0002                     	;# 
  1670  0003                     	;# 
  1671  0004                     	;# 
  1672  0005                     	;# 
  1673  0006                     	;# 
  1674  0007                     	;# 
  1675  0008                     	;# 
  1676  0009                     	;# 
  1677  000A                     	;# 
  1678  000B                     	;# 
  1679  000C                     	;# 
  1680  000D                     	;# 
  1681  000E                     	;# 
  1682  0011                     	;# 
  1683  0012                     	;# 
  1684  0013                     	;# 
  1685  0015                     	;# 
  1686  0016                     	;# 
  1687  0016                     	;# 
  1688  0017                     	;# 
  1689  0018                     	;# 
  1690  0019                     	;# 
  1691  001A                     	;# 
  1692  001B                     	;# 
  1693  001C                     	;# 
  1694  008C                     	;# 
  1695  008D                     	;# 
  1696  008E                     	;# 
  1697  0091                     	;# 
  1698  0092                     	;# 
  1699  0093                     	;# 
  1700  0095                     	;# 
  1701  0096                     	;# 
  1702  0097                     	;# 
  1703  0099                     	;# 
  1704  009A                     	;# 
  1705  009B                     	;# 
  1706  009B                     	;# 
  1707  009C                     	;# 
  1708  009D                     	;# 
  1709  009E                     	;# 
  1710  009F                     	;# 
  1711  010C                     	;# 
  1712  010D                     	;# 
  1713  010E                     	;# 
  1714  0111                     	;# 
  1715  0112                     	;# 
  1716  0113                     	;# 
  1717  0114                     	;# 
  1718  0115                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  0118                     	;# 
  1722  0119                     	;# 
  1723  011D                     	;# 
  1724  018C                     	;# 
  1725  018D                     	;# 
  1726  018E                     	;# 
  1727  0191                     	;# 
  1728  0191                     	;# 
  1729  0192                     	;# 
  1730  0193                     	;# 
  1731  0193                     	;# 
  1732  0194                     	;# 
  1733  0195                     	;# 
  1734  0196                     	;# 
  1735  0199                     	;# 
  1736  019A                     	;# 
  1737  019B                     	;# 
  1738  019B                     	;# 
  1739  019C                     	;# 
  1740  019D                     	;# 
  1741  019E                     	;# 
  1742  019F                     	;# 
  1743  020C                     	;# 
  1744  020D                     	;# 
  1745  0211                     	;# 
  1746  0211                     	;# 
  1747  0212                     	;# 
  1748  0212                     	;# 
  1749  0213                     	;# 
  1750  0213                     	;# 
  1751  0214                     	;# 
  1752  0214                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0215                     	;# 
  1756  0216                     	;# 
  1757  0216                     	;# 
  1758  0217                     	;# 
  1759  0217                     	;# 
  1760  0391                     	;# 
  1761  0392                     	;# 
  1762  0393                     	;# 
  1763  0394                     	;# 
  1764  0395                     	;# 
  1765  0396                     	;# 
  1766  0498                     	;# 
  1767  0498                     	;# 
  1768  0499                     	;# 
  1769  049A                     	;# 
  1770  049B                     	;# 
  1771  049B                     	;# 
  1772  049C                     	;# 
  1773  049E                     	;# 
  1774  049F                     	;# 
  1775  0611                     	;# 
  1776  0612                     	;# 
  1777  0613                     	;# 
  1778  0613                     	;# 
  1779  0614                     	;# 
  1780  0615                     	;# 
  1781  0616                     	;# 
  1782  0616                     	;# 
  1783  0617                     	;# 
  1784  0618                     	;# 
  1785  0619                     	;# 
  1786  0619                     	;# 
  1787  061A                     	;# 
  1788  061B                     	;# 
  1789  061C                     	;# 
  1790  061C                     	;# 
  1791  0691                     	;# 
  1792  0692                     	;# 
  1793  0693                     	;# 
  1794  0694                     	;# 
  1795  0695                     	;# 
  1796  0F0F                     	;# 
  1797  0F10                     	;# 
  1798  0F11                     	;# 
  1799  0F12                     	;# 
  1800  0F13                     	;# 
  1801  0F14                     	;# 
  1802  0F15                     	;# 
  1803  0F16                     	;# 
  1804  0F17                     	;# 
  1805  0F18                     	;# 
  1806  0F19                     	;# 
  1807  0F1A                     	;# 
  1808  0F1B                     	;# 
  1809  0F1C                     	;# 
  1810  0F1D                     	;# 
  1811  0F1E                     	;# 
  1812  0F1F                     	;# 
  1813  0F20                     	;# 
  1814  0F21                     	;# 
  1815  0F22                     	;# 
  1816  0F23                     	;# 
  1817  0F24                     	;# 
  1818  0F25                     	;# 
  1819  0F26                     	;# 
  1820  0F27                     	;# 
  1821  0F28                     	;# 
  1822  0F29                     	;# 
  1823  0F2A                     	;# 
  1824  0F2B                     	;# 
  1825  0F2C                     	;# 
  1826  0F2D                     	;# 
  1827  0F2E                     	;# 
  1828  0F2F                     	;# 
  1829  0F8C                     	;# 
  1830  0F8D                     	;# 
  1831  0F91                     	;# 
  1832  0F95                     	;# 
  1833  0F96                     	;# 
  1834  0F97                     	;# 
  1835  0F9C                     	;# 
  1836  0F9D                     	;# 
  1837  0F9E                     	;# 
  1838  0FE3                     	;# 
  1839  0FE4                     	;# 
  1840  0FE5                     	;# 
  1841  0FE6                     	;# 
  1842  0FE7                     	;# 
  1843  0FE8                     	;# 
  1844  0FE9                     	;# 
  1845  0FEA                     	;# 
  1846  0FEB                     	;# 
  1847  0FED                     	;# 
  1848  0FEE                     	;# 
  1849  0FEF                     	;# 
  1850  0000                     	;# 
  1851  0001                     	;# 
  1852  0002                     	;# 
  1853  0003                     	;# 
  1854  0004                     	;# 
  1855  0005                     	;# 
  1856  0006                     	;# 
  1857  0007                     	;# 
  1858  0008                     	;# 
  1859  0009                     	;# 
  1860  000A                     	;# 
  1861  000B                     	;# 
  1862  000C                     	;# 
  1863  000D                     	;# 
  1864  000E                     	;# 
  1865  0011                     	;# 
  1866  0012                     	;# 
  1867  0013                     	;# 
  1868  0015                     	;# 
  1869  0016                     	;# 
  1870  0016                     	;# 
  1871  0017                     	;# 
  1872  0018                     	;# 
  1873  0019                     	;# 
  1874  001A                     	;# 
  1875  001B                     	;# 
  1876  001C                     	;# 
  1877  008C                     	;# 
  1878  008D                     	;# 
  1879  008E                     	;# 
  1880  0091                     	;# 
  1881  0092                     	;# 
  1882  0093                     	;# 
  1883  0095                     	;# 
  1884  0096                     	;# 
  1885  0097                     	;# 
  1886  0099                     	;# 
  1887  009A                     	;# 
  1888  009B                     	;# 
  1889  009B                     	;# 
  1890  009C                     	;# 
  1891  009D                     	;# 
  1892  009E                     	;# 
  1893  009F                     	;# 
  1894  010C                     	;# 
  1895  010D                     	;# 
  1896  010E                     	;# 
  1897  0111                     	;# 
  1898  0112                     	;# 
  1899  0113                     	;# 
  1900  0114                     	;# 
  1901  0115                     	;# 
  1902  0116                     	;# 
  1903  0117                     	;# 
  1904  0118                     	;# 
  1905  0119                     	;# 
  1906  011D                     	;# 
  1907  018C                     	;# 
  1908  018D                     	;# 
  1909  018E                     	;# 
  1910  0191                     	;# 
  1911  0191                     	;# 
  1912  0192                     	;# 
  1913  0193                     	;# 
  1914  0193                     	;# 
  1915  0194                     	;# 
  1916  0195                     	;# 
  1917  0196                     	;# 
  1918  0199                     	;# 
  1919  019A                     	;# 
  1920  019B                     	;# 
  1921  019B                     	;# 
  1922  019C                     	;# 
  1923  019D                     	;# 
  1924  019E                     	;# 
  1925  019F                     	;# 
  1926  020C                     	;# 
  1927  020D                     	;# 
  1928  0211                     	;# 
  1929  0211                     	;# 
  1930  0212                     	;# 
  1931  0212                     	;# 
  1932  0213                     	;# 
  1933  0213                     	;# 
  1934  0214                     	;# 
  1935  0214                     	;# 
  1936  0215                     	;# 
  1937  0215                     	;# 
  1938  0215                     	;# 
  1939  0216                     	;# 
  1940  0216                     	;# 
  1941  0217                     	;# 
  1942  0217                     	;# 
  1943  0391                     	;# 
  1944  0392                     	;# 
  1945  0393                     	;# 
  1946  0394                     	;# 
  1947  0395                     	;# 
  1948  0396                     	;# 
  1949  0498                     	;# 
  1950  0498                     	;# 
  1951  0499                     	;# 
  1952  049A                     	;# 
  1953  049B                     	;# 
  1954  049B                     	;# 
  1955  049C                     	;# 
  1956  049E                     	;# 
  1957  049F                     	;# 
  1958  0611                     	;# 
  1959  0612                     	;# 
  1960  0613                     	;# 
  1961  0613                     	;# 
  1962  0614                     	;# 
  1963  0615                     	;# 
  1964  0616                     	;# 
  1965  0616                     	;# 
  1966  0617                     	;# 
  1967  0618                     	;# 
  1968  0619                     	;# 
  1969  0619                     	;# 
  1970  061A                     	;# 
  1971  061B                     	;# 
  1972  061C                     	;# 
  1973  061C                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0F0F                     	;# 
  1980  0F10                     	;# 
  1981  0F11                     	;# 
  1982  0F12                     	;# 
  1983  0F13                     	;# 
  1984  0F14                     	;# 
  1985  0F15                     	;# 
  1986  0F16                     	;# 
  1987  0F17                     	;# 
  1988  0F18                     	;# 
  1989  0F19                     	;# 
  1990  0F1A                     	;# 
  1991  0F1B                     	;# 
  1992  0F1C                     	;# 
  1993  0F1D                     	;# 
  1994  0F1E                     	;# 
  1995  0F1F                     	;# 
  1996  0F20                     	;# 
  1997  0F21                     	;# 
  1998  0F22                     	;# 
  1999  0F23                     	;# 
  2000  0F24                     	;# 
  2001  0F25                     	;# 
  2002  0F26                     	;# 
  2003  0F27                     	;# 
  2004  0F28                     	;# 
  2005  0F29                     	;# 
  2006  0F2A                     	;# 
  2007  0F2B                     	;# 
  2008  0F2C                     	;# 
  2009  0F2D                     	;# 
  2010  0F2E                     	;# 
  2011  0F2F                     	;# 
  2012  0F8C                     	;# 
  2013  0F8D                     	;# 
  2014  0F91                     	;# 
  2015  0F95                     	;# 
  2016  0F96                     	;# 
  2017  0F97                     	;# 
  2018  0F9C                     	;# 
  2019  0F9D                     	;# 
  2020  0F9E                     	;# 
  2021  0FE3                     	;# 
  2022  0FE4                     	;# 
  2023  0FE5                     	;# 
  2024  0FE6                     	;# 
  2025  0FE7                     	;# 
  2026  0FE8                     	;# 
  2027  0FE9                     	;# 
  2028  0FEA                     	;# 
  2029  0FEB                     	;# 
  2030  0FED                     	;# 
  2031  0FEE                     	;# 
  2032  0FEF                     	;# 
  2033  0000                     	;# 
  2034  0001                     	;# 
  2035  0002                     	;# 
  2036  0003                     	;# 
  2037  0004                     	;# 
  2038  0005                     	;# 
  2039  0006                     	;# 
  2040  0007                     	;# 
  2041  0008                     	;# 
  2042  0009                     	;# 
  2043  000A                     	;# 
  2044  000B                     	;# 
  2045  000C                     	;# 
  2046  000D                     	;# 
  2047  000E                     	;# 
  2048  0011                     	;# 
  2049  0012                     	;# 
  2050  0013                     	;# 
  2051  0015                     	;# 
  2052  0016                     	;# 
  2053  0016                     	;# 
  2054  0017                     	;# 
  2055  0018                     	;# 
  2056  0019                     	;# 
  2057  001A                     	;# 
  2058  001B                     	;# 
  2059  001C                     	;# 
  2060  008C                     	;# 
  2061  008D                     	;# 
  2062  008E                     	;# 
  2063  0091                     	;# 
  2064  0092                     	;# 
  2065  0093                     	;# 
  2066  0095                     	;# 
  2067  0096                     	;# 
  2068  0097                     	;# 
  2069  0099                     	;# 
  2070  009A                     	;# 
  2071  009B                     	;# 
  2072  009B                     	;# 
  2073  009C                     	;# 
  2074  009D                     	;# 
  2075  009E                     	;# 
  2076  009F                     	;# 
  2077  010C                     	;# 
  2078  010D                     	;# 
  2079  010E                     	;# 
  2080  0111                     	;# 
  2081  0112                     	;# 
  2082  0113                     	;# 
  2083  0114                     	;# 
  2084  0115                     	;# 
  2085  0116                     	;# 
  2086  0117                     	;# 
  2087  0118                     	;# 
  2088  0119                     	;# 
  2089  011D                     	;# 
  2090  018C                     	;# 
  2091  018D                     	;# 
  2092  018E                     	;# 
  2093  0191                     	;# 
  2094  0191                     	;# 
  2095  0192                     	;# 
  2096  0193                     	;# 
  2097  0193                     	;# 
  2098  0194                     	;# 
  2099  0195                     	;# 
  2100  0196                     	;# 
  2101  0199                     	;# 
  2102  019A                     	;# 
  2103  019B                     	;# 
  2104  019B                     	;# 
  2105  019C                     	;# 
  2106  019D                     	;# 
  2107  019E                     	;# 
  2108  019F                     	;# 
  2109  020C                     	;# 
  2110  020D                     	;# 
  2111  0211                     	;# 
  2112  0211                     	;# 
  2113  0212                     	;# 
  2114  0212                     	;# 
  2115  0213                     	;# 
  2116  0213                     	;# 
  2117  0214                     	;# 
  2118  0214                     	;# 
  2119  0215                     	;# 
  2120  0215                     	;# 
  2121  0215                     	;# 
  2122  0216                     	;# 
  2123  0216                     	;# 
  2124  0217                     	;# 
  2125  0217                     	;# 
  2126  0391                     	;# 
  2127  0392                     	;# 
  2128  0393                     	;# 
  2129  0394                     	;# 
  2130  0395                     	;# 
  2131  0396                     	;# 
  2132  0498                     	;# 
  2133  0498                     	;# 
  2134  0499                     	;# 
  2135  049A                     	;# 
  2136  049B                     	;# 
  2137  049B                     	;# 
  2138  049C                     	;# 
  2139  049E                     	;# 
  2140  049F                     	;# 
  2141  0611                     	;# 
  2142  0612                     	;# 
  2143  0613                     	;# 
  2144  0613                     	;# 
  2145  0614                     	;# 
  2146  0615                     	;# 
  2147  0616                     	;# 
  2148  0616                     	;# 
  2149  0617                     	;# 
  2150  0618                     	;# 
  2151  0619                     	;# 
  2152  0619                     	;# 
  2153  061A                     	;# 
  2154  061B                     	;# 
  2155  061C                     	;# 
  2156  061C                     	;# 
  2157  0691                     	;# 
  2158  0692                     	;# 
  2159  0693                     	;# 
  2160  0694                     	;# 
  2161  0695                     	;# 
  2162  0F0F                     	;# 
  2163  0F10                     	;# 
  2164  0F11                     	;# 
  2165  0F12                     	;# 
  2166  0F13                     	;# 
  2167  0F14                     	;# 
  2168  0F15                     	;# 
  2169  0F16                     	;# 
  2170  0F17                     	;# 
  2171  0F18                     	;# 
  2172  0F19                     	;# 
  2173  0F1A                     	;# 
  2174  0F1B                     	;# 
  2175  0F1C                     	;# 
  2176  0F1D                     	;# 
  2177  0F1E                     	;# 
  2178  0F1F                     	;# 
  2179  0F20                     	;# 
  2180  0F21                     	;# 
  2181  0F22                     	;# 
  2182  0F23                     	;# 
  2183  0F24                     	;# 
  2184  0F25                     	;# 
  2185  0F26                     	;# 
  2186  0F27                     	;# 
  2187  0F28                     	;# 
  2188  0F29                     	;# 
  2189  0F2A                     	;# 
  2190  0F2B                     	;# 
  2191  0F2C                     	;# 
  2192  0F2D                     	;# 
  2193  0F2E                     	;# 
  2194  0F2F                     	;# 
  2195  0F8C                     	;# 
  2196  0F8D                     	;# 
  2197  0F91                     	;# 
  2198  0F95                     	;# 
  2199  0F96                     	;# 
  2200  0F97                     	;# 
  2201  0F9C                     	;# 
  2202  0F9D                     	;# 
  2203  0F9E                     	;# 
  2204  0FE3                     	;# 
  2205  0FE4                     	;# 
  2206  0FE5                     	;# 
  2207  0FE6                     	;# 
  2208  0FE7                     	;# 
  2209  0FE8                     	;# 
  2210  0FE9                     	;# 
  2211  0FEA                     	;# 
  2212  0FEB                     	;# 
  2213  0FED                     	;# 
  2214  0FEE                     	;# 
  2215  0FEF                     	;# 
  2216  0000                     	;# 
  2217  0001                     	;# 
  2218  0002                     	;# 
  2219  0003                     	;# 
  2220  0004                     	;# 
  2221  0005                     	;# 
  2222  0006                     	;# 
  2223  0007                     	;# 
  2224  0008                     	;# 
  2225  0009                     	;# 
  2226  000A                     	;# 
  2227  000B                     	;# 
  2228  000C                     	;# 
  2229  000D                     	;# 
  2230  000E                     	;# 
  2231  0011                     	;# 
  2232  0012                     	;# 
  2233  0013                     	;# 
  2234  0015                     	;# 
  2235  0016                     	;# 
  2236  0016                     	;# 
  2237  0017                     	;# 
  2238  0018                     	;# 
  2239  0019                     	;# 
  2240  001A                     	;# 
  2241  001B                     	;# 
  2242  001C                     	;# 
  2243  008C                     	;# 
  2244  008D                     	;# 
  2245  008E                     	;# 
  2246  0091                     	;# 
  2247  0092                     	;# 
  2248  0093                     	;# 
  2249  0095                     	;# 
  2250  0096                     	;# 
  2251  0097                     	;# 
  2252  0099                     	;# 
  2253  009A                     	;# 
  2254  009B                     	;# 
  2255  009B                     	;# 
  2256  009C                     	;# 
  2257  009D                     	;# 
  2258  009E                     	;# 
  2259  009F                     	;# 
  2260  010C                     	;# 
  2261  010D                     	;# 
  2262  010E                     	;# 
  2263  0111                     	;# 
  2264  0112                     	;# 
  2265  0113                     	;# 
  2266  0114                     	;# 
  2267  0115                     	;# 
  2268  0116                     	;# 
  2269  0117                     	;# 
  2270  0118                     	;# 
  2271  0119                     	;# 
  2272  011D                     	;# 
  2273  018C                     	;# 
  2274  018D                     	;# 
  2275  018E                     	;# 
  2276  0191                     	;# 
  2277  0191                     	;# 
  2278  0192                     	;# 
  2279  0193                     	;# 
  2280  0193                     	;# 
  2281  0194                     	;# 
  2282  0195                     	;# 
  2283  0196                     	;# 
  2284  0199                     	;# 
  2285  019A                     	;# 
  2286  019B                     	;# 
  2287  019B                     	;# 
  2288  019C                     	;# 
  2289  019D                     	;# 
  2290  019E                     	;# 
  2291  019F                     	;# 
  2292  020C                     	;# 
  2293  020D                     	;# 
  2294  0211                     	;# 
  2295  0211                     	;# 
  2296  0212                     	;# 
  2297  0212                     	;# 
  2298  0213                     	;# 
  2299  0213                     	;# 
  2300  0214                     	;# 
  2301  0214                     	;# 
  2302  0215                     	;# 
  2303  0215                     	;# 
  2304  0215                     	;# 
  2305  0216                     	;# 
  2306  0216                     	;# 
  2307  0217                     	;# 
  2308  0217                     	;# 
  2309  0391                     	;# 
  2310  0392                     	;# 
  2311  0393                     	;# 
  2312  0394                     	;# 
  2313  0395                     	;# 
  2314  0396                     	;# 
  2315  0498                     	;# 
  2316  0498                     	;# 
  2317  0499                     	;# 
  2318  049A                     	;# 
  2319  049B                     	;# 
  2320  049B                     	;# 
  2321  049C                     	;# 
  2322  049E                     	;# 
  2323  049F                     	;# 
  2324  0611                     	;# 
  2325  0612                     	;# 
  2326  0613                     	;# 
  2327  0613                     	;# 
  2328  0614                     	;# 
  2329  0615                     	;# 
  2330  0616                     	;# 
  2331  0616                     	;# 
  2332  0617                     	;# 
  2333  0618                     	;# 
  2334  0619                     	;# 
  2335  0619                     	;# 
  2336  061A                     	;# 
  2337  061B                     	;# 
  2338  061C                     	;# 
  2339  061C                     	;# 
  2340  0691                     	;# 
  2341  0692                     	;# 
  2342  0693                     	;# 
  2343  0694                     	;# 
  2344  0695                     	;# 
  2345  0F0F                     	;# 
  2346  0F10                     	;# 
  2347  0F11                     	;# 
  2348  0F12                     	;# 
  2349  0F13                     	;# 
  2350  0F14                     	;# 
  2351  0F15                     	;# 
  2352  0F16                     	;# 
  2353  0F17                     	;# 
  2354  0F18                     	;# 
  2355  0F19                     	;# 
  2356  0F1A                     	;# 
  2357  0F1B                     	;# 
  2358  0F1C                     	;# 
  2359  0F1D                     	;# 
  2360  0F1E                     	;# 
  2361  0F1F                     	;# 
  2362  0F20                     	;# 
  2363  0F21                     	;# 
  2364  0F22                     	;# 
  2365  0F23                     	;# 
  2366  0F24                     	;# 
  2367  0F25                     	;# 
  2368  0F26                     	;# 
  2369  0F27                     	;# 
  2370  0F28                     	;# 
  2371  0F29                     	;# 
  2372  0F2A                     	;# 
  2373  0F2B                     	;# 
  2374  0F2C                     	;# 
  2375  0F2D                     	;# 
  2376  0F2E                     	;# 
  2377  0F2F                     	;# 
  2378  0F8C                     	;# 
  2379  0F8D                     	;# 
  2380  0F91                     	;# 
  2381  0F95                     	;# 
  2382  0F96                     	;# 
  2383  0F97                     	;# 
  2384  0F9C                     	;# 
  2385  0F9D                     	;# 
  2386  0F9E                     	;# 
  2387  0FE3                     	;# 
  2388  0FE4                     	;# 
  2389  0FE5                     	;# 
  2390  0FE6                     	;# 
  2391  0FE7                     	;# 
  2392  0FE8                     	;# 
  2393  0FE9                     	;# 
  2394  0FEA                     	;# 
  2395  0FEB                     	;# 
  2396  0FED                     	;# 
  2397  0FEE                     	;# 
  2398  0FEF                     	;# 
  2399  0000                     	;# 
  2400  0001                     	;# 
  2401  0002                     	;# 
  2402  0003                     	;# 
  2403  0004                     	;# 
  2404  0005                     	;# 
  2405  0006                     	;# 
  2406  0007                     	;# 
  2407  0008                     	;# 
  2408  0009                     	;# 
  2409  000A                     	;# 
  2410  000B                     	;# 
  2411  000C                     	;# 
  2412  000D                     	;# 
  2413  000E                     	;# 
  2414  0011                     	;# 
  2415  0012                     	;# 
  2416  0013                     	;# 
  2417  0015                     	;# 
  2418  0016                     	;# 
  2419  0016                     	;# 
  2420  0017                     	;# 
  2421  0018                     	;# 
  2422  0019                     	;# 
  2423  001A                     	;# 
  2424  001B                     	;# 
  2425  001C                     	;# 
  2426  008C                     	;# 
  2427  008D                     	;# 
  2428  008E                     	;# 
  2429  0091                     	;# 
  2430  0092                     	;# 
  2431  0093                     	;# 
  2432  0095                     	;# 
  2433  0096                     	;# 
  2434  0097                     	;# 
  2435  0099                     	;# 
  2436  009A                     	;# 
  2437  009B                     	;# 
  2438  009B                     	;# 
  2439  009C                     	;# 
  2440  009D                     	;# 
  2441  009E                     	;# 
  2442  009F                     	;# 
  2443  010C                     	;# 
  2444  010D                     	;# 
  2445  010E                     	;# 
  2446  0111                     	;# 
  2447  0112                     	;# 
  2448  0113                     	;# 
  2449  0114                     	;# 
  2450  0115                     	;# 
  2451  0116                     	;# 
  2452  0117                     	;# 
  2453  0118                     	;# 
  2454  0119                     	;# 
  2455  011D                     	;# 
  2456  018C                     	;# 
  2457  018D                     	;# 
  2458  018E                     	;# 
  2459  0191                     	;# 
  2460  0191                     	;# 
  2461  0192                     	;# 
  2462  0193                     	;# 
  2463  0193                     	;# 
  2464  0194                     	;# 
  2465  0195                     	;# 
  2466  0196                     	;# 
  2467  0199                     	;# 
  2468  019A                     	;# 
  2469  019B                     	;# 
  2470  019B                     	;# 
  2471  019C                     	;# 
  2472  019D                     	;# 
  2473  019E                     	;# 
  2474  019F                     	;# 
  2475  020C                     	;# 
  2476  020D                     	;# 
  2477  0211                     	;# 
  2478  0211                     	;# 
  2479  0212                     	;# 
  2480  0212                     	;# 
  2481  0213                     	;# 
  2482  0213                     	;# 
  2483  0214                     	;# 
  2484  0214                     	;# 
  2485  0215                     	;# 
  2486  0215                     	;# 
  2487  0215                     	;# 
  2488  0216                     	;# 
  2489  0216                     	;# 
  2490  0217                     	;# 
  2491  0217                     	;# 
  2492  0391                     	;# 
  2493  0392                     	;# 
  2494  0393                     	;# 
  2495  0394                     	;# 
  2496  0395                     	;# 
  2497  0396                     	;# 
  2498  0498                     	;# 
  2499  0498                     	;# 
  2500  0499                     	;# 
  2501  049A                     	;# 
  2502  049B                     	;# 
  2503  049B                     	;# 
  2504  049C                     	;# 
  2505  049E                     	;# 
  2506  049F                     	;# 
  2507  0611                     	;# 
  2508  0612                     	;# 
  2509  0613                     	;# 
  2510  0613                     	;# 
  2511  0614                     	;# 
  2512  0615                     	;# 
  2513  0616                     	;# 
  2514  0616                     	;# 
  2515  0617                     	;# 
  2516  0618                     	;# 
  2517  0619                     	;# 
  2518  0619                     	;# 
  2519  061A                     	;# 
  2520  061B                     	;# 
  2521  061C                     	;# 
  2522  061C                     	;# 
  2523  0691                     	;# 
  2524  0692                     	;# 
  2525  0693                     	;# 
  2526  0694                     	;# 
  2527  0695                     	;# 
  2528  0F0F                     	;# 
  2529  0F10                     	;# 
  2530  0F11                     	;# 
  2531  0F12                     	;# 
  2532  0F13                     	;# 
  2533  0F14                     	;# 
  2534  0F15                     	;# 
  2535  0F16                     	;# 
  2536  0F17                     	;# 
  2537  0F18                     	;# 
  2538  0F19                     	;# 
  2539  0F1A                     	;# 
  2540  0F1B                     	;# 
  2541  0F1C                     	;# 
  2542  0F1D                     	;# 
  2543  0F1E                     	;# 
  2544  0F1F                     	;# 
  2545  0F20                     	;# 
  2546  0F21                     	;# 
  2547  0F22                     	;# 
  2548  0F23                     	;# 
  2549  0F24                     	;# 
  2550  0F25                     	;# 
  2551  0F26                     	;# 
  2552  0F27                     	;# 
  2553  0F28                     	;# 
  2554  0F29                     	;# 
  2555  0F2A                     	;# 
  2556  0F2B                     	;# 
  2557  0F2C                     	;# 
  2558  0F2D                     	;# 
  2559  0F2E                     	;# 
  2560  0F2F                     	;# 
  2561  0F8C                     	;# 
  2562  0F8D                     	;# 
  2563  0F91                     	;# 
  2564  0F95                     	;# 
  2565  0F96                     	;# 
  2566  0F97                     	;# 
  2567  0F9C                     	;# 
  2568  0F9D                     	;# 
  2569  0F9E                     	;# 
  2570  0FE3                     	;# 
  2571  0FE4                     	;# 
  2572  0FE5                     	;# 
  2573  0FE6                     	;# 
  2574  0FE7                     	;# 
  2575  0FE8                     	;# 
  2576  0FE9                     	;# 
  2577  0FEA                     	;# 
  2578  0FEB                     	;# 
  2579  0FED                     	;# 
  2580  0FEE                     	;# 
  2581  0FEF                     	;# 
  2582  0000                     	;# 
  2583  0001                     	;# 
  2584  0002                     	;# 
  2585  0003                     	;# 
  2586  0004                     	;# 
  2587  0005                     	;# 
  2588  0006                     	;# 
  2589  0007                     	;# 
  2590  0008                     	;# 
  2591  0009                     	;# 
  2592  000A                     	;# 
  2593  000B                     	;# 
  2594  000C                     	;# 
  2595  000D                     	;# 
  2596  000E                     	;# 
  2597  0011                     	;# 
  2598  0012                     	;# 
  2599  0013                     	;# 
  2600  0015                     	;# 
  2601  0016                     	;# 
  2602  0016                     	;# 
  2603  0017                     	;# 
  2604  0018                     	;# 
  2605  0019                     	;# 
  2606  001A                     	;# 
  2607  001B                     	;# 
  2608  001C                     	;# 
  2609  008C                     	;# 
  2610  008D                     	;# 
  2611  008E                     	;# 
  2612  0091                     	;# 
  2613  0092                     	;# 
  2614  0093                     	;# 
  2615  0095                     	;# 
  2616  0096                     	;# 
  2617  0097                     	;# 
  2618  0099                     	;# 
  2619  009A                     	;# 
  2620  009B                     	;# 
  2621  009B                     	;# 
  2622  009C                     	;# 
  2623  009D                     	;# 
  2624  009E                     	;# 
  2625  009F                     	;# 
  2626  010C                     	;# 
  2627  010D                     	;# 
  2628  010E                     	;# 
  2629  0111                     	;# 
  2630  0112                     	;# 
  2631  0113                     	;# 
  2632  0114                     	;# 
  2633  0115                     	;# 
  2634  0116                     	;# 
  2635  0117                     	;# 
  2636  0118                     	;# 
  2637  0119                     	;# 
  2638  011D                     	;# 
  2639  018C                     	;# 
  2640  018D                     	;# 
  2641  018E                     	;# 
  2642  0191                     	;# 
  2643  0191                     	;# 
  2644  0192                     	;# 
  2645  0193                     	;# 
  2646  0193                     	;# 
  2647  0194                     	;# 
  2648  0195                     	;# 
  2649  0196                     	;# 
  2650  0199                     	;# 
  2651  019A                     	;# 
  2652  019B                     	;# 
  2653  019B                     	;# 
  2654  019C                     	;# 
  2655  019D                     	;# 
  2656  019E                     	;# 
  2657  019F                     	;# 
  2658  020C                     	;# 
  2659  020D                     	;# 
  2660  0211                     	;# 
  2661  0211                     	;# 
  2662  0212                     	;# 
  2663  0212                     	;# 
  2664  0213                     	;# 
  2665  0213                     	;# 
  2666  0214                     	;# 
  2667  0214                     	;# 
  2668  0215                     	;# 
  2669  0215                     	;# 
  2670  0215                     	;# 
  2671  0216                     	;# 
  2672  0216                     	;# 
  2673  0217                     	;# 
  2674  0217                     	;# 
  2675  0391                     	;# 
  2676  0392                     	;# 
  2677  0393                     	;# 
  2678  0394                     	;# 
  2679  0395                     	;# 
  2680  0396                     	;# 
  2681  0498                     	;# 
  2682  0498                     	;# 
  2683  0499                     	;# 
  2684  049A                     	;# 
  2685  049B                     	;# 
  2686  049B                     	;# 
  2687  049C                     	;# 
  2688  049E                     	;# 
  2689  049F                     	;# 
  2690  0611                     	;# 
  2691  0612                     	;# 
  2692  0613                     	;# 
  2693  0613                     	;# 
  2694  0614                     	;# 
  2695  0615                     	;# 
  2696  0616                     	;# 
  2697  0616                     	;# 
  2698  0617                     	;# 
  2699  0618                     	;# 
  2700  0619                     	;# 
  2701  0619                     	;# 
  2702  061A                     	;# 
  2703  061B                     	;# 
  2704  061C                     	;# 
  2705  061C                     	;# 
  2706  0691                     	;# 
  2707  0692                     	;# 
  2708  0693                     	;# 
  2709  0694                     	;# 
  2710  0695                     	;# 
  2711  0F0F                     	;# 
  2712  0F10                     	;# 
  2713  0F11                     	;# 
  2714  0F12                     	;# 
  2715  0F13                     	;# 
  2716  0F14                     	;# 
  2717  0F15                     	;# 
  2718  0F16                     	;# 
  2719  0F17                     	;# 
  2720  0F18                     	;# 
  2721  0F19                     	;# 
  2722  0F1A                     	;# 
  2723  0F1B                     	;# 
  2724  0F1C                     	;# 
  2725  0F1D                     	;# 
  2726  0F1E                     	;# 
  2727  0F1F                     	;# 
  2728  0F20                     	;# 
  2729  0F21                     	;# 
  2730  0F22                     	;# 
  2731  0F23                     	;# 
  2732  0F24                     	;# 
  2733  0F25                     	;# 
  2734  0F26                     	;# 
  2735  0F27                     	;# 
  2736  0F28                     	;# 
  2737  0F29                     	;# 
  2738  0F2A                     	;# 
  2739  0F2B                     	;# 
  2740  0F2C                     	;# 
  2741  0F2D                     	;# 
  2742  0F2E                     	;# 
  2743  0F2F                     	;# 
  2744  0F8C                     	;# 
  2745  0F8D                     	;# 
  2746  0F91                     	;# 
  2747  0F95                     	;# 
  2748  0F96                     	;# 
  2749  0F97                     	;# 
  2750  0F9C                     	;# 
  2751  0F9D                     	;# 
  2752  0F9E                     	;# 
  2753  0FE3                     	;# 
  2754  0FE4                     	;# 
  2755  0FE5                     	;# 
  2756  0FE6                     	;# 
  2757  0FE7                     	;# 
  2758  0FE8                     	;# 
  2759  0FE9                     	;# 
  2760  0FEA                     	;# 
  2761  0FEB                     	;# 
  2762  0FED                     	;# 
  2763  0FEE                     	;# 
  2764  0FEF                     	;# 
  2765                           
  2766                           	psect	idataBANK0
  2767  0000                     __pidataBANK0:	
  2768                           
  2769                           	psect	strings
  2770  020A                     __pstrings:	
  2771  020A                     __stringtab:	
  2772  020A  3400               	retlw	0
  2773  020B                     __end_of__stringtab:	
  2774  020B                     _mrfRegset_InitCnt:	
  2775  020B  3410               	retlw	16
  2776  020C                     __end_of_mrfRegset_InitCnt:	
  2777  020C                     _mrfRegset_RxCnt:	
  2778  020C  3406               	retlw	6
  2779  020D                     __end_of_mrfRegset_RxCnt:	
  2780  020D                     _mrfRegset_SleepCnt:	
  2781  020D  3403               	retlw	3
  2782  020E                     __end_of_mrfRegset_SleepCnt:	
  2783  020E                     _mrfRegset_TxCnt:	
  2784  020E  3404               	retlw	4
  2785  020F                     __end_of_mrfRegset_TxCnt:	
  2786  020F                     _mrfRegset_Init:	
  2787  020F  34CA               	retlw	202
  2788  0210  3471               	retlw	113
  2789  0211  34CA               	retlw	202
  2790  0212  3473               	retlw	115
  2791  0213  3480               	retlw	128
  2792  0214  3428               	retlw	40
  2793  0215  34C4               	retlw	196
  2794  0216  34E7               	retlw	231
  2795  0217  34A8               	retlw	168
  2796  0218  3460               	retlw	96
  2797  0219  34C6               	retlw	198
  2798  021A  3405               	retlw	5
  2799  021B  3482               	retlw	130
  2800  021C  3400               	retlw	0
  2801  021D  3490               	retlw	144
  2802  021E  3462               	retlw	98
  2803  021F  3498               	retlw	152
  2804  0220  3490               	retlw	144
  2805  0221  34C2               	retlw	194
  2806  0222  34AC               	retlw	172
  2807  0223  3482               	retlw	130
  2808  0224  3420               	retlw	32
  2809  0225  3455               	retlw	85
  2810  0226  3400               	retlw	0
  2811  0227  3482               	retlw	130
  2812  0228  3480               	retlw	128
  2813  0229  3480               	retlw	128
  2814  022A  3468               	retlw	104
  2815  022B  34CA               	retlw	202
  2816  022C  3471               	retlw	113
  2817  022D  34CA               	retlw	202
  2818  022E  3473               	retlw	115
  2819  022F                     __end_of_mrfRegset_Init:	
  2820  022F                     _mrfRegset_Rx:	
  2821  022F  3482               	retlw	130
  2822  0230  3400               	retlw	0
  2823  0231  34CA               	retlw	202
  2824  0232  3471               	retlw	113
  2825  0233  3480               	retlw	128
  2826  0234  3428               	retlw	40
  2827  0235  3482               	retlw	130
  2828  0236  3480               	retlw	128
  2829  0237  3480               	retlw	128
  2830  0238  3468               	retlw	104
  2831  0239  34CA               	retlw	202
  2832  023A  3473               	retlw	115
  2833  023B                     __end_of_mrfRegset_Rx:	
  2834  023B                     _mrfRegset_Tx:	
  2835  023B  3482               	retlw	130
  2836  023C  3400               	retlw	0
  2837  023D  34CA               	retlw	202
  2838  023E  3471               	retlw	113
  2839  023F  3480               	retlw	128
  2840  0240  34A8               	retlw	168
  2841  0241  3482               	retlw	130
  2842  0242  3420               	retlw	32
  2843  0243                     __end_of_mrfRegset_Tx:	
  2844  0243                     _mrfRegset_Sleep:	
  2845  0243  3482               	retlw	130
  2846  0244  3400               	retlw	0
  2847  0245  34CA               	retlw	202
  2848  0246  3471               	retlw	113
  2849  0247  3480               	retlw	128
  2850  0248  3468               	retlw	104
  2851  0249                     __end_of_mrfRegset_Sleep:	
  2852  0249                     _parameters:	
  2853  0249  3400               	retlw	0
  2854  024A  3401               	retlw	1
  2855  024B  3434               	retlw	_cfgRam& (0+255)
  2856  024C  3401               	retlw	1
  2857  024D  3402               	retlw	2
  2858  024E  343B               	retlw	(_cfgRam+7)& (0+255)
  2859  024F                     __end_of_parameters:	
  2860  000B                     _INTCONbits	set	11
  2861  000C                     _PORTAbits	set	12
  2862  000D                     _PORTBbits	set	13
  2863  000E                     _PORTCbits	set	14
  2864  009D                     _ADCON0	set	157
  2865  009E                     _ADCON1	set	158
  2866  009F                     _ADCON2	set	159
  2867  009C                     _ADRESH	set	156
  2868  009B                     _ADRESL	set	155
  2869  0095                     _OPTION_REGbits	set	149
  2870  0099                     _OSCCON	set	153
  2871  008C                     _TRISAbits	set	140
  2872  008D                     _TRISBbits	set	141
  2873  008E                     _TRISCbits	set	142
  2874  0097                     _WDTCONbits	set	151
  2875  0117                     _FVRCON	set	279
  2876  010C                     _LATAbits	set	268
  2877  010D                     _LATBbits	set	269
  2878  010E                     _LATCbits	set	270
  2879  018C                     _ANSELA	set	396
  2880  018D                     _ANSELB	set	397
  2881  018E                     _ANSELC	set	398
  2882  018E                     _ANSELCbits	set	398
  2883  020C                     _WPUAbits	set	524
  2884                           
  2885                           ; #config settings
  2886  0000                     
  2887                           	psect	cinit
  2888  0813                     start_initialization:	
  2889  0813                     __initialization:	
  2890                           
  2891                           ; Clear objects allocated to BANK0
  2892  0813  3033               	movlw	low __pbssBANK0
  2893  0814  0084               	movwf	4
  2894  0815  3000               	movlw	high __pbssBANK0
  2895  0816  0085               	movwf	5
  2896  0817  300C               	movlw	12
  2897  0818  3182  2271  3188   	fcall	clear_ram0
  2898                           
  2899                           ; Clear objects allocated to BANK1
  2900  081B  30A0               	movlw	low __pbssBANK1
  2901  081C  0084               	movwf	4
  2902  081D  3000               	movlw	high __pbssBANK1
  2903  081E  0085               	movwf	5
  2904  081F  304B               	movlw	75
  2905  0820  3182  2271  3188   	fcall	clear_ram0
  2906                           
  2907                           ;initializer for _coldBoot
  2908  0823  3001               	movlw	1
  2909  0824  00BF               	movwf	__pdataBANK0& (0+127)
  2910  0825                     end_of_initialization:	
  2911                           ;End of C runtime variable initialization code
  2912                           
  2913  0825                     __end_of__initialization:	
  2914  0825  0020               	movlb	0
  2915  0826  2856               	ljmp	_main	;jump to C main() function
  2916  0827                     __ptext25:	
  2917 ;; *************** function _SoftI2cInit *****************
  2918 ;; Defined at:
  2919 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;		None               void
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0, pclath, cstack
  2928 ;; Tracked objects:
  2929 ;;		On entry : 17F/2
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2933 ;;      Params:         0       0       0       0
  2934 ;;      Locals:         0       0       0       0
  2935 ;;      Temps:          0       0       0       0
  2936 ;;      Totals:         0       0       0       0
  2937 ;;Total ram usage:        0 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    7
  2940 ;; This function calls:
  2941 ;;		_SoftI2cStart
  2942 ;;		_SoftI2cStop
  2943 ;;		_SoftI2cTxByte
  2944 ;; This function is called by:
  2945 ;;		_PwrI2cInit
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           
  2950                           ;psect for function _SoftI2cInit
  2951  0827                     _SoftI2cInit:	
  2952                           
  2953                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  2954                           
  2955                           ;incstack = 0
  2956                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  2957                           
  2958                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  2959                           
  2960                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  2961                           
  2962                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  2963  0827  27CC  3188         	fcall	PL20	;call to abstracted procedure
  2964                           
  2965                           ;softI2c.c: 32: SoftI2cStart();
  2966  0829  22B2  3188         	fcall	_SoftI2cStart
  2967                           
  2968                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  2969  082B  3000               	movlw	0
  2970  082C  2244  3188         	fcall	_SoftI2cTxByte
  2971                           
  2972                           ;softI2c.c: 34: SoftI2cStop();
  2973  082E  2ABF               	ljmp	l2456
  2974  082F                     __end_of_SoftI2cInit:	
  2975  082F                     __ptext21:	
  2976 ;; *************** function _PwrRfInit *****************
  2977 ;; Defined at:
  2978 ;;		line 88 in file "../../../src/node/power.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;		None               void
  2985 ;; Registers used:
  2986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 1F/2
  2989 ;;		On exit  : 1F/1
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2992 ;;      Params:         0       0       0       0
  2993 ;;      Locals:         0       0       0       0
  2994 ;;      Temps:          0       0       0       0
  2995 ;;      Totals:         0       0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:   10
  2999 ;; This function calls:
  3000 ;;		_ExtIntInit
  3001 ;;		_Mrf49xaInit
  3002 ;;		_Sleepy
  3003 ;; This function is called by:
  3004 ;;		_main
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function _PwrRfInit
  3010  082F                     _PwrRfInit:	
  3011                           
  3012                           ;power.c: 90: TRISAbits.TRISA2 = 1;
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in _PwrRfInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3016  082F  0021               	movlb	1	; select bank1
  3017  0830  150C               	bsf	12,2	;volatile
  3018                           
  3019                           ;power.c: 91: TRISAbits.TRISA4 = 0;
  3020  0831  120C               	bcf	12,4	;volatile
  3021                           
  3022                           ;power.c: 92: TRISAbits.TRISA5 = 0;
  3023  0832  128C               	bcf	12,5	;volatile
  3024                           
  3025                           ;power.c: 94: TRISBbits.TRISB7 = 0;
  3026  0833  138D               	bcf	13,7	;volatile
  3027                           
  3028                           ;power.c: 96: TRISCbits.TRISC1 = 0;
  3029  0834  108E               	bcf	14,1	;volatile
  3030                           
  3031                           ;power.c: 97: TRISCbits.TRISC4 = 0;
  3032  0835  120E               	bcf	14,4	;volatile
  3033                           
  3034                           ;power.c: 98: TRISCbits.TRISC6 = 0;
  3035  0836  130E               	bcf	14,6	;volatile
  3036                           
  3037                           ;power.c: 99: TRISCbits.TRISC7 = 0;
  3038  0837  138E               	bcf	14,7	;volatile
  3039                           
  3040                           ;power.c: 100: TRISCbits.TRISC3 = 1;
  3041  0838  158E               	bsf	14,3	;volatile
  3042                           
  3043                           ;power.c: 101: TRISCbits.TRISC5 = 1;
  3044  0839  168E               	bsf	14,5	;volatile
  3045                           
  3046                           ;power.c: 103: LATCbits.LATC1 = 0;
  3047  083A  0022               	movlb	2	; select bank2
  3048  083B  108E               	bcf	14,1	;volatile
  3049                           
  3050                           ;power.c: 105: LATAbits.LATA4 = 0;
  3051  083C  120C               	bcf	12,4	;volatile
  3052                           
  3053                           ;power.c: 106: LATAbits.LATA5 = 0;
  3054  083D  128C               	bcf	12,5	;volatile
  3055                           
  3056                           ;power.c: 107: LATCbits.LATC4 = 0;
  3057  083E  120E               	bcf	14,4	;volatile
  3058                           
  3059                           ;power.c: 108: PORTCbits.RC6 = 1;
  3060  083F  0020               	movlb	0	; select bank0
  3061  0840  170E               	bsf	14,6	;volatile
  3062                           
  3063                           ;power.c: 109: LATCbits.LATC7 = 0;
  3064  0841  0022               	movlb	2	; select bank2
  3065  0842  138E               	bcf	14,7	;volatile
  3066                           
  3067                           ;power.c: 110: PORTBbits.RB7 = 0;
  3068  0843  0020               	movlb	0	; select bank0
  3069  0844  138D               	bcf	13,7	;volatile
  3070                           
  3071                           ;power.c: 112: WPUAbits.WPUA2 = 1;
  3072  0845  0024               	movlb	4	; select bank4
  3073  0846  150C               	bsf	12,2	;volatile
  3074                           
  3075                           ;power.c: 113: Sleepy(10);
  3076  0847  300A               	movlw	10
  3077  0848  0020               	movlb	0	; select bank0
  3078  0849  00A0               	movwf	Sleepy@ms
  3079  084A  01A1               	clrf	Sleepy@ms+1
  3080  084B  21A6  3188         	fcall	_Sleepy
  3081                           
  3082                           ;power.c: 115: Mrf49xaInit();
  3083  084D  2146  3188         	fcall	_Mrf49xaInit
  3084                           
  3085                           ;power.c: 116: ExtIntInit();
  3086  084F  2850               	ljmp	l3078
  3087  0850                     __end_of_PwrRfInit:	
  3088  0850                     __ptext58:	
  3089 ;; *************** function _ExtIntInit *****************
  3090 ;; Defined at:
  3091 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;		None
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;		None
  3096 ;; Return value:  Size  Location     Type
  3097 ;;		None               void
  3098 ;; Registers used:
  3099 ;;		None
  3100 ;; Tracked objects:
  3101 ;;		On entry : 1F/0
  3102 ;;		On exit  : 1F/1
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3105 ;;      Params:         0       0       0       0
  3106 ;;      Locals:         0       0       0       0
  3107 ;;      Temps:          0       0       0       0
  3108 ;;      Totals:         0       0       0       0
  3109 ;;Total ram usage:        0 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    5
  3112 ;; This function calls:
  3113 ;;		Nothing
  3114 ;; This function is called by:
  3115 ;;		_Mrf49xaTick
  3116 ;;		_PwrRfInit
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           
  3121                           ;psect for function _ExtIntInit
  3122  0850                     _ExtIntInit:	
  3123  0850                     l3078:	
  3124                           ;incstack = 0
  3125                           ; Regs used in _ExtIntInit: []
  3126                           
  3127                           
  3128                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3129  0850  0021               	movlb	1	; select bank1
  3130  0851  1315               	bcf	21,6	;volatile
  3131                           
  3132                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3133  0852  108B               	bcf	11,1	;volatile
  3134                           
  3135                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3136  0853  160B               	bsf	11,4	;volatile
  3137                           
  3138                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3139  0854  178B               	bsf	11,7	;volatile
  3140  0855  0008               	return
  3141  0856                     __end_of_ExtIntInit:	
  3142  0856                     __pmaintext:	
  3143 ;;
  3144 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3145 ;;
  3146 ;; *************** function _main *****************
  3147 ;; Defined at:
  3148 ;;		line 32 in file "../../../src/node/main.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  temperature     2   17[BANK0 ] unsigned int 
  3153 ;;  humidity        2   15[BANK0 ] unsigned int 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;		None               void
  3156 ;; Registers used:
  3157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 17F/0
  3160 ;;		On exit  : 1F/1
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3163 ;;      Params:         0       0       0       0
  3164 ;;      Locals:         0       4       0       0
  3165 ;;      Temps:          0       0       0       0
  3166 ;;      Totals:         0       4       0       0
  3167 ;;Total ram usage:        4 bytes
  3168 ;; Hardware stack levels required when called:   12
  3169 ;; This function calls:
  3170 ;;		_AdcSample
  3171 ;;		_CfgLoad
  3172 ;;		_Mcp9800Read
  3173 ;;		_Mcp9800Start
  3174 ;;		_Mrf49xaNeedsReset
  3175 ;;		_Mrf49xaTick
  3176 ;;		_PwrAdcInit
  3177 ;;		_PwrAdcSleep
  3178 ;;		_PwrAdcWake
  3179 ;;		_PwrI2cInit
  3180 ;;		_PwrI2cSleep
  3181 ;;		_PwrI2cWake
  3182 ;;		_PwrRfInit
  3183 ;;		_PwrRfSleep
  3184 ;;		_PwrRfWake
  3185 ;;		_PwrSensorInit
  3186 ;;		_PwrSensorSleep
  3187 ;;		_PwrSensorWake
  3188 ;;		_RfSendPowerState
  3189 ;;		_RfSendSampleWeatherNode
  3190 ;;		_Sleepy
  3191 ;; This function is called by:
  3192 ;;		Startup code after reset
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           
  3197                           ;psect for function _main
  3198  0856                     _main:	
  3199                           
  3200                           ;main.c: 35: OSCCON = 0b01111000;
  3201                           
  3202                           ;incstack = 0
  3203                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3204  0856  3078               	movlw	120
  3205  0857  0021               	movlb	1	; select bank1
  3206  0858  0099               	movwf	25	;volatile
  3207                           
  3208                           ;main.c: 37: PwrAdcInit();
  3209  0859  2746  3188         	fcall	_PwrAdcInit
  3210                           
  3211                           ;main.c: 38: PwrSensorInit();
  3212  085B  2404  3188         	fcall	_PwrSensorInit
  3213                           
  3214                           ;main.c: 39: PwrI2cInit();
  3215  085D  274F  3188         	fcall	_PwrI2cInit
  3216                           
  3217                           ;main.c: 40: PwrRfInit();
  3218  085F  202F  3188         	fcall	_PwrRfInit
  3219                           
  3220                           ;main.c: 42: CfgLoad();
  3221  0861  2681  3188         	fcall	_CfgLoad
  3222                           
  3223                           ;main.c: 44: PwrAdcSleep();
  3224  0863  2479  3188         	fcall	_PwrAdcSleep
  3225                           
  3226                           ;main.c: 45: PwrSensorSleep();
  3227  0865  23FB  3188         	fcall	_PwrSensorSleep
  3228                           
  3229                           ;main.c: 46: PwrI2cSleep();
  3230  0867  23F9  3188         	fcall	_PwrI2cSleep
  3231  0869                     l3618:	
  3232                           
  3233                           ;main.c: 47: PwrRfSleep();
  3234  0869  2757  3188         	fcall	_PwrRfSleep
  3235                           
  3236                           ;main.c: 50: {
  3237                           ;main.c: 53: Sleepy(5000);
  3238  086B  3088               	movlw	136
  3239  086C  0020               	movlb	0	; select bank0
  3240  086D  00A0               	movwf	Sleepy@ms
  3241  086E  3013               	movlw	19
  3242  086F  00A1               	movwf	Sleepy@ms+1
  3243  0870  21A6  3188         	fcall	_Sleepy
  3244                           
  3245                           ;main.c: 55: PwrSensorWake();
  3246  0872  2408  3188         	fcall	_PwrSensorWake
  3247                           
  3248                           ;main.c: 56: PwrI2cWake();
  3249  0874  2403  3188         	fcall	_PwrI2cWake
  3250                           
  3251                           ;main.c: 58: Mcp9800Start(Mcp9800_9bit);
  3252  0876  3000               	movlw	0
  3253  0877  2207  3188         	fcall	_Mcp9800Start
  3254                           
  3255                           ;main.c: 60: PwrAdcWake();
  3256  0879  247E  3188         	fcall	_PwrAdcWake
  3257                           
  3258                           ;main.c: 61: uint16_t humidity = AdcSample(ADC_AN4);
  3259  087B  3004               	movlw	4
  3260  087C  2444  3188         	fcall	_AdcSample
  3261  087E  0823               	movf	?_AdcSample+1,w
  3262  087F  00B0               	movwf	main@humidity+1
  3263  0880  0822               	movf	?_AdcSample,w
  3264  0881  00AF               	movwf	main@humidity
  3265                           
  3266                           ;main.c: 62: Sleepy(100);
  3267  0882  3064               	movlw	100
  3268  0883  00A0               	movwf	Sleepy@ms
  3269  0884  01A1               	clrf	Sleepy@ms+1
  3270  0885  21A6  3188         	fcall	_Sleepy
  3271                           
  3272                           ;main.c: 63: uint16_t temperature = Mcp9800Read();
  3273  0887  21D6  3188         	fcall	_Mcp9800Read
  3274  0889  0825               	movf	?_Mcp9800Read+1,w
  3275  088A  00B2               	movwf	main@temperature+1
  3276  088B  0824               	movf	?_Mcp9800Read,w
  3277  088C  00B1               	movwf	main@temperature
  3278                           
  3279                           ;main.c: 65: PwrSensorSleep();
  3280  088D  23FB  3188         	fcall	_PwrSensorSleep
  3281                           
  3282                           ;main.c: 66: PwrI2cSleep();
  3283  088F  23F9  3188         	fcall	_PwrI2cSleep
  3284                           
  3285                           ;main.c: 68: PwrRfWake();
  3286  0891  2764  3188         	fcall	_PwrRfWake
  3287                           
  3288                           ;main.c: 70: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  3289  0893  0021               	movlb	1	; select bank1
  3290  0894  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3291  0895  1903               	btfsc	3,2
  3292  0896  289B               	goto	l3648
  3293                           
  3294                           ;main.c: 71: {
  3295                           ;main.c: 72: Mrf49xaNeedsReset();
  3296  0897  23E2  3188         	fcall	_Mrf49xaNeedsReset
  3297                           
  3298                           ;main.c: 73: Mrf49xaTick();
  3299  0899  20BA  3188         	fcall	_Mrf49xaTick
  3300  089B                     l3648:	
  3301                           
  3302                           ;main.c: 74: }
  3303                           ;main.c: 76: powerStatusTicker++;
  3304  089B  0020               	movlb	0	; select bank0
  3305  089C  300F               	movlw	15
  3306  089D  0AB3               	incf	_powerStatusTicker,f
  3307                           
  3308                           ;main.c: 78: if (powerStatusTicker >= 15)
  3309  089E  0233               	subwf	_powerStatusTicker,w
  3310  089F  1C03               	skipc
  3311  08A0  28A9               	goto	l3660
  3312                           
  3313                           ;main.c: 79: {
  3314                           ;main.c: 80: powerStatusTicker = 0;
  3315  08A1  01B3               	clrf	_powerStatusTicker
  3316                           
  3317                           ;main.c: 83: RfSendPowerState();
  3318  08A2  240B  3188         	fcall	_RfSendPowerState
  3319  08A4                     l3656:	
  3320                           
  3321                           ;main.c: 85: {
  3322                           ;main.c: 86: Mrf49xaTick();
  3323  08A4  20BA  3188         	fcall	_Mrf49xaTick
  3324                           
  3325                           ;main.c: 87: }
  3326                           ;main.c: 88: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3327  08A6  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3328  08A7  1D03               	skipz
  3329  08A8  28A4               	goto	l3656
  3330  08A9                     l3660:	
  3331                           
  3332                           ;main.c: 89: }
  3333                           ;main.c: 91: RfSendSampleWeatherNode(temperature, humidity);
  3334  08A9  0020               	movlb	0	; select bank0
  3335  08AA  0832               	movf	main@temperature+1,w
  3336  08AB  00A7               	movwf	RfSendSampleWeatherNode@temperature+1
  3337  08AC  0831               	movf	main@temperature,w
  3338  08AD  00A6               	movwf	RfSendSampleWeatherNode@temperature
  3339  08AE  0830               	movf	main@humidity+1,w
  3340  08AF  00A9               	movwf	RfSendSampleWeatherNode@humidity+1
  3341  08B0  082F               	movf	main@humidity,w
  3342  08B1  00A8               	movwf	RfSendSampleWeatherNode@humidity
  3343  08B2  2483  3188         	fcall	_RfSendSampleWeatherNode
  3344  08B4                     l645:	
  3345                           ;main.c: 92: do
  3346                           
  3347                           
  3348                           ;main.c: 93: {
  3349                           ;main.c: 94: Mrf49xaTick();
  3350  08B4  20BA  3188         	fcall	_Mrf49xaTick
  3351                           
  3352                           ;main.c: 95: }
  3353                           ;main.c: 96: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3354  08B6  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3355  08B7  1903               	btfsc	3,2
  3356  08B8  2869               	goto	l3618
  3357  08B9  28B4               	goto	l645
  3358  08BA                     __end_of_main:	
  3359  08BA                     __ptext27:	
  3360 ;; *************** function _Mrf49xaTick *****************
  3361 ;; Defined at:
  3362 ;;		line 124 in file "../../../src/devices/mrf49xa_packet.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;		None
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  timeout         1   13[BANK0 ] unsigned char 
  3367 ;;  packet          1   14[BANK0 ] PTR struct rfTrcvPacket_
  3368 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;		None               void
  3371 ;; Registers used:
  3372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 1E/1
  3375 ;;		On exit  : 1F/1
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3378 ;;      Params:         0       0       0       0
  3379 ;;      Locals:         0       2       0       0
  3380 ;;      Temps:          0       1       0       0
  3381 ;;      Totals:         0       3       0       0
  3382 ;;Total ram usage:        3 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:   11
  3385 ;; This function calls:
  3386 ;;		_ExtIntInit
  3387 ;;		_HandlePacket
  3388 ;;		_Mrf49RxSts
  3389 ;;		_Mrf49xaFreePacket
  3390 ;;		_Mrf49xaInit
  3391 ;;		_Mrf49xaModeTx
  3392 ;;		_Mrf49xaPacketPending
  3393 ;;		_Mrf49xaRxPacket
  3394 ;;		_Sleepy
  3395 ;; This function is called by:
  3396 ;;		_main
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function _Mrf49xaTick
  3402  08BA                     _Mrf49xaTick:	
  3403                           
  3404                           ;mrf49xa_packet.c: 126: if (rfTrcvStatus.needsReset)
  3405                           
  3406                           ;incstack = 0
  3407                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3408  08BA  0021               	movlb	1	; select bank1
  3409  08BB  1FEA               	btfss	(_rfTrcvStatus^(0+128)+74),7
  3410  08BC  28C0               	goto	l3290
  3411                           
  3412                           ;mrf49xa_packet.c: 127: {
  3413                           ;mrf49xa_packet.c: 128: Mrf49xaInit();
  3414  08BD  2146  3188         	fcall	_Mrf49xaInit
  3415                           
  3416                           ;mrf49xa_packet.c: 129: ExtIntInit();
  3417  08BF  2850               	ljmp	l3078
  3418  08C0                     l3290:	
  3419                           
  3420                           ;mrf49xa_packet.c: 131: }
  3421                           ;mrf49xa_packet.c: 133: if (Mrf49xaPacketPending())
  3422  08C0  272F  3188         	fcall	_Mrf49xaPacketPending
  3423  08C2  3A00               	xorlw	0
  3424  08C3  1903               	skipnz
  3425  08C4  28E3               	goto	l3304
  3426                           
  3427                           ;mrf49xa_packet.c: 134: {
  3428                           ;mrf49xa_packet.c: 135: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  3429  08C5  2738  3188         	fcall	_Mrf49xaRxPacket
  3430  08C7  0020               	movlb	0	; select bank0
  3431  08C8  00AE               	movwf	Mrf49xaTick@packet
  3432                           
  3433                           ;mrf49xa_packet.c: 143: if (packet->packet.dst == 0xFF || packet->packet.dst == cfgRam.n
      +                          odeId)
  3434  08C9  3E03               	addlw	3
  3435  08CA  0086               	movwf	6
  3436  08CB  0187               	clrf	7
  3437  08CC  0801               	movf	1,w
  3438  08CD  3AFF               	xorlw	255
  3439  08CE  1903               	skipnz
  3440  08CF  28D7               	goto	l3298
  3441  08D0  082E               	movf	Mrf49xaTick@packet,w
  3442  08D1  3E03               	addlw	3
  3443  08D2  0086               	movwf	6
  3444  08D3  0801               	movf	1,w
  3445  08D4  0634               	xorwf	_cfgRam,w
  3446  08D5  1D03               	skipz
  3447  08D6  28E0               	goto	l3302
  3448  08D7                     l3298:	
  3449                           
  3450                           ;mrf49xa_packet.c: 144: {
  3451                           ;mrf49xa_packet.c: 145: packet->packet.size -= 5;
  3452  08D7  0A2E               	incf	Mrf49xaTick@packet,w
  3453  08D8  0086               	movwf	6
  3454  08D9  3005               	movlw	5
  3455  08DA  0187               	clrf	7
  3456  08DB  0281               	subwf	1,f
  3457                           
  3458                           ;mrf49xa_packet.c: 148: HandlePacket(packet);
  3459  08DC  082E               	movf	Mrf49xaTick@packet,w
  3460  08DD  24D4  3188         	fcall	_HandlePacket
  3461                           
  3462                           ;mrf49xa_packet.c: 150: }
  3463  08DF  28E3               	goto	l3304
  3464  08E0                     l3302:	
  3465                           
  3466                           ;mrf49xa_packet.c: 151: else
  3467                           ;mrf49xa_packet.c: 152: {
  3468                           ;mrf49xa_packet.c: 153: Mrf49xaFreePacket(packet);
  3469  08E0  082E               	movf	Mrf49xaTick@packet,w
  3470  08E1  23FE  3188         	fcall	_Mrf49xaFreePacket
  3471  08E3                     l3304:	
  3472                           
  3473                           ;mrf49xa_packet.c: 154: }
  3474                           ;mrf49xa_packet.c: 158: }
  3475                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  3476  08E3  0021               	movlb	1	; select bank1
  3477  08E4  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3478  08E5  3A03               	xorlw	3
  3479  08E6  1D03               	skipz
  3480  08E7  2916               	goto	l3324
  3481                           
  3482                           ;mrf49xa_packet.c: 161: {
  3483                           ;mrf49xa_packet.c: 162: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  3484  08E8  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3485  08E9  0C89               	rrf	9,f
  3486  08EA  0C89               	rrf	9,f
  3487  08EB  3903               	andlw	3
  3488  08EC  3A02               	xorlw	2
  3489  08ED  1D03               	skipz
  3490  08EE  28F1               	goto	l3310
  3491  08EF                     l3308:	
  3492                           
  3493                           ;mrf49xa_packet.c: 163: {
  3494                           ;mrf49xa_packet.c: 164: rfTrcvStatus.txPacket.state = PKT_FREE;
  3495  08EF  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  3496                           
  3497                           ;mrf49xa_packet.c: 165: }
  3498  08F0  2916               	goto	l3324
  3499  08F1                     l3310:	
  3500                           
  3501                           ;mrf49xa_packet.c: 166: else if (rfTrcvStatus.txPacket.retry == 10)
  3502  08F1  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3503  08F2  390F               	andlw	15
  3504  08F3  3A0A               	xorlw	10
  3505  08F4  1D03               	skipz
  3506  08F5  290E               	goto	l3320
  3507                           
  3508                           ;mrf49xa_packet.c: 167: {
  3509                           ;mrf49xa_packet.c: 168: if (rfTrcvStatus.txPacket.retransmit == 1)
  3510  08F6  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3511  08F7  3903               	andlw	3
  3512  08F8  3A01               	xorlw	1
  3513  08F9  1903               	btfsc	3,2
  3514  08FA  28EF               	goto	l3308
  3515                           
  3516                           ;mrf49xa_packet.c: 174: else
  3517                           ;mrf49xa_packet.c: 175: {
  3518                           ;mrf49xa_packet.c: 177: rfTrcvStatus.txPacket.retry = 0;
  3519  08FB  30F0               	movlw	-16
  3520  08FC  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  3521                           
  3522                           ;mrf49xa_packet.c: 178: rfTrcvStatus.txPacket.retransmit++;
  3523  08FD  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3524  08FE  3903               	andlw	3
  3525  08FF  0020               	movlb	0	; select bank0
  3526  0900  00AC               	movwf	??_Mrf49xaTick
  3527  0901  0AAC               	incf	??_Mrf49xaTick,f
  3528  0902  0EAC               	swapf	??_Mrf49xaTick,f
  3529  0903  0021               	movlb	1	; select bank1
  3530  0904  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3531  0905  0020               	movlb	0	; select bank0
  3532  0906  062C               	xorwf	??_Mrf49xaTick,w
  3533  0907  39CF               	andlw	-49
  3534  0908  062C               	xorwf	??_Mrf49xaTick,w
  3535  0909  0021               	movlb	1	; select bank1
  3536  090A  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  3537                           
  3538                           ;mrf49xa_packet.c: 179: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  3539  090B  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  3540  090C  0AD1               	incf	(_rfTrcvStatus^(0+128)+49),f
  3541  090D  2916               	goto	l3324
  3542  090E                     l3320:	
  3543                           
  3544                           ;mrf49xa_packet.c: 182: else
  3545                           ;mrf49xa_packet.c: 183: {
  3546                           ;mrf49xa_packet.c: 184: rfTrcvStatus.txPacket.retry++;
  3547  090E  27A5  3188         	fcall	PL10	;call to abstracted procedure
  3548                           
  3549                           ;mrf49xa_packet.c: 185: Sleepy(5);
  3550  0910  3005               	movlw	5
  3551  0911  0020               	movlb	0	; select bank0
  3552  0912  00A0               	movwf	Sleepy@ms
  3553  0913  01A1               	clrf	Sleepy@ms+1
  3554  0914  21A6  3188         	fcall	_Sleepy
  3555  0916                     l3324:	
  3556                           
  3557                           ;mrf49xa_packet.c: 186: }
  3558                           ;mrf49xa_packet.c: 187: }
  3559                           ;mrf49xa_packet.c: 189: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  3560                           ;mrf49xa_packet.c: 190: rfTrcvStatus.state == RECV_IDLE)
  3561  0916  0021               	movlb	1	; select bank1
  3562  0917  0B51               	decfsz	(_rfTrcvStatus^(0+128)+49),w
  3563  0918  0008               	return
  3564  0919  0B69               	decfsz	(_rfTrcvStatus^(0+128)+73),w
  3565  091A  0008               	return
  3566                           
  3567                           ;mrf49xa_packet.c: 191: {
  3568                           ;mrf49xa_packet.c: 192: if (rfTrcvStatus.txPacket.retry >= 10)
  3569  091B  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3570  091C  390F               	andlw	15
  3571  091D  0020               	movlb	0	; select bank0
  3572  091E  00AC               	movwf	??_Mrf49xaTick
  3573  091F  300A               	movlw	10
  3574  0920  022C               	subwf	??_Mrf49xaTick,w
  3575  0921  1C03               	skipc
  3576  0922  2929               	goto	l3336
  3577                           
  3578                           ;mrf49xa_packet.c: 193: {
  3579                           ;mrf49xa_packet.c: 195: rfTrcvStatus.txPacket.retry = 0;
  3580  0923  30F0               	movlw	-16
  3581  0924  0021               	movlb	1	; select bank1
  3582  0925  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  3583                           
  3584                           ;mrf49xa_packet.c: 196: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3585  0926  3003               	movlw	3
  3586  0927  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  3587  0928  0008               	return
  3588  0929                     l3336:	
  3589                           
  3590                           ;mrf49xa_packet.c: 198: }
  3591                           ;mrf49xa_packet.c: 202: uint8_t timeout = 0;
  3592  0929  01AD               	clrf	Mrf49xaTick@timeout
  3593  092A                     l3338:	
  3594                           
  3595                           ;mrf49xa_packet.c: 206: {
  3596                           ;mrf49xa_packet.c: 207: Mrf49RxSts();
  3597  092A  23EE  3188         	fcall	_Mrf49RxSts
  3598                           
  3599                           ;mrf49xa_packet.c: 209: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  3600  092C  0021               	movlb	1	; select bank1
  3601  092D  0B69               	decfsz	(_rfTrcvStatus^(0+128)+73),w
  3602  092E  2932               	goto	l3346
  3603  092F  0020               	movlb	0	; select bank0
  3604  0930  1C3D               	btfss	_mrf49Status,0
  3605  0931  2940               	goto	l417
  3606  0932                     l3346:	
  3607                           
  3608                           ;mrf49xa_packet.c: 213: }
  3609                           ;mrf49xa_packet.c: 215: Sleepy(5);
  3610  0932  3005               	movlw	5
  3611  0933  0020               	movlb	0	; select bank0
  3612  0934  00A0               	movwf	Sleepy@ms
  3613  0935  01A1               	clrf	Sleepy@ms+1
  3614  0936  21A6  3188         	fcall	_Sleepy
  3615  0938  300B               	movlw	11
  3616                           
  3617                           ;mrf49xa_packet.c: 216: timeout++;
  3618  0939  0AAD               	incf	Mrf49xaTick@timeout,f
  3619                           
  3620                           ;mrf49xa_packet.c: 218: if (timeout > 10)
  3621  093A  022D               	subwf	Mrf49xaTick@timeout,w
  3622  093B  1C03               	skipc
  3623  093C  292A               	goto	l3338
  3624                           
  3625                           ;mrf49xa_packet.c: 219: {
  3626                           ;mrf49xa_packet.c: 220: rfTrcvStatus.txPacket.retry++;
  3627  093D  0021               	movlb	1	; select bank1
  3628  093E  27A5               	fcall	PL10	;call to abstracted procedure
  3629  093F  0008               	return
  3630  0940                     l417:	
  3631                           
  3632                           ;mrf49xa_packet.c: 234: INTCONbits.INTE = 0;;
  3633  0940  120B               	bcf	11,4	;volatile
  3634                           
  3635                           ;mrf49xa_packet.c: 235: Mrf49xaModeTx();
  3636  0941  27DC               	fcall	_Mrf49xaModeTx
  3637                           
  3638                           ;mrf49xa_packet.c: 236: rfTrcvStatus.txPacket.state = PKT_HW_BUSY_TX;
  3639  0942  3002               	movlw	2
  3640  0943  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  3641                           
  3642                           ;mrf49xa_packet.c: 237: INTCONbits.INTE = 1;;
  3643  0944  160B               	bsf	11,4	;volatile
  3644  0945  0008               	return
  3645  0946                     __end_of_Mrf49xaTick:	
  3646  0946                     __ptext31:	
  3647 ;; *************** function _Mrf49xaInit *****************
  3648 ;; Defined at:
  3649 ;;		line 150 in file "../../../src/devices/mrf49xa.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  k               1    6[BANK0 ] unsigned char 
  3654 ;;  j               1    0        unsigned char 
  3655 ;;  i               1    0        unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;		None               void
  3658 ;; Registers used:
  3659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 1E/0
  3662 ;;		On exit  : 1F/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3665 ;;      Params:         0       0       0       0
  3666 ;;      Locals:         0       1       0       0
  3667 ;;      Temps:          0       0       0       0
  3668 ;;      Totals:         0       1       0       0
  3669 ;;Total ram usage:        1 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    9
  3672 ;; This function calls:
  3673 ;;		_Mrf49TxCmd
  3674 ;;		_Mrf49xaModeRx
  3675 ;;		_Mrf49xaServe
  3676 ;;		_Sleepy
  3677 ;; This function is called by:
  3678 ;;		_Mrf49xaTick
  3679 ;;		_PwrRfInit
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _Mrf49xaInit
  3685  0946                     _Mrf49xaInit:	
  3686  0946                     l234:	
  3687                           ;incstack = 0
  3688                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3689                           ;mrf49xa.c: 152: UI08_t k;
  3690                           ;mrf49xa.c: 154: UI08_t i, j;
  3691                           ;mrf49xa.c: 156: reset:
  3692                           
  3693                           
  3694                           ;mrf49xa.c: 158: for (k = 0; k < sizeof(rfTrcvStatus_t); k++)
  3695  0946  0020               	movlb	0	; select bank0
  3696  0947  01A6               	clrf	Mrf49xaInit@k
  3697  0948                     l3106:	
  3698                           
  3699                           ;mrf49xa.c: 159: {
  3700                           ;mrf49xa.c: 160: ((uint8_t*)&rfTrcvStatus)[k] = 0;
  3701  0948  0826               	movf	Mrf49xaInit@k,w
  3702  0949  3EA0               	addlw	_rfTrcvStatus& (0+255)
  3703  094A  0086               	movwf	6
  3704  094B  304B               	movlw	75
  3705  094C  0187               	clrf	7
  3706  094D  0181               	clrf	1
  3707  094E  0AA6               	incf	Mrf49xaInit@k,f
  3708  094F  0226               	subwf	Mrf49xaInit@k,w
  3709  0950  1C03               	skipc
  3710  0951  2948               	goto	l3106
  3711                           
  3712                           ;mrf49xa.c: 161: }
  3713                           ;mrf49xa.c: 164: PORTCbits.RC6 = 1;
  3714  0952  170E               	bsf	14,6	;volatile
  3715                           
  3716                           ;mrf49xa.c: 165: LATCbits.LATC7 = 0;
  3717  0953  0022               	movlb	2	; select bank2
  3718  0954  138E               	bcf	14,7	;volatile
  3719                           
  3720                           ;mrf49xa.c: 166: PORTBbits.RB7 = 0;
  3721  0955  0020               	movlb	0	; select bank0
  3722  0956  138D               	bcf	13,7	;volatile
  3723                           
  3724                           ;mrf49xa.c: 168: LATCbits.LATC1 = 0;
  3725  0957  0022               	movlb	2	; select bank2
  3726  0958  108E               	bcf	14,1	;volatile
  3727                           
  3728                           ;mrf49xa.c: 169: LATCbits.LATC4 = 1;
  3729  0959  160E               	bsf	14,4	;volatile
  3730                           
  3731                           ;mrf49xa.c: 171: LATAbits.LATA5 = 1;
  3732  095A  168C               	bsf	12,5	;volatile
  3733                           
  3734                           ;mrf49xa.c: 173: Sleepy(64);
  3735  095B  27D2  3188         	fcall	PL22	;call to abstracted procedure
  3736  095D  21A6  3188         	fcall	_Sleepy
  3737                           
  3738                           ;mrf49xa.c: 174: LATAbits.LATA4 = 0;
  3739  095F  0022               	movlb	2	; select bank2
  3740  0960  120C               	bcf	12,4	;volatile
  3741                           
  3742                           ;mrf49xa.c: 175: Sleepy(64);
  3743  0961  27D2  3188         	fcall	PL22	;call to abstracted procedure
  3744  0963  21A6  3188         	fcall	_Sleepy
  3745                           
  3746                           ;mrf49xa.c: 176: LATAbits.LATA4 = 1;
  3747  0965  0022               	movlb	2	; select bank2
  3748  0966  160C               	bsf	12,4	;volatile
  3749                           
  3750                           ;mrf49xa.c: 177: Sleepy(64);
  3751  0967  27D2  3188         	fcall	PL22	;call to abstracted procedure
  3752  0969  21A6               	fcall	_Sleepy
  3753                           
  3754                           ;mrf49xa.c: 179: rfTrcvStatus.state = RECV_IDLE;
  3755  096A  0021               	movlb	1	; select bank1
  3756  096B  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  3757  096C  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  3758                           
  3759                           ;mrf49xa.c: 181: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(5); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  3760  096D  0020               	movlb	0	; select bank0
  3761  096E  300B               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3762  096F  01A6               	clrf	Mrf49xaInit@k
  3763  0970  3182               	movlp	high __stringtab
  3764  0971  000A               	callw
  3765  0972  3188               	pagesel	$	;select current page
  3766  0973  3800               	iorlw	0
  3767  0974  1903               	btfsc	3,2
  3768  0975  2998               	goto	l3136
  3769  0976                     l3126:	
  3770  0976  3526               	lslf	Mrf49xaInit@k,w
  3771  0977  3E0F               	addlw	low (_mrfRegset_Init| (0+32768))
  3772  0978  3182               	movlp	high __stringtab
  3773  0979  000A               	callw
  3774  097A  3188               	pagesel	$	;select current page
  3775  097B  3A55               	xorlw	85
  3776  097C  1D03               	skipz
  3777  097D  2984               	goto	l3130
  3778  097E  3005               	movlw	5
  3779  097F  00A0               	movwf	Sleepy@ms
  3780  0980  01A1               	clrf	Sleepy@ms+1
  3781  0981  21A6  3188         	fcall	_Sleepy
  3782  0983  2990               	goto	l3132
  3783  0984                     l3130:	
  3784  0984  3526               	lslf	Mrf49xaInit@k,w
  3785  0985  3E10               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3786  0986  3182               	movlp	high __stringtab
  3787  0987  000A               	callw
  3788  0988  3188               	pagesel	$	;select current page
  3789  0989  00A1               	movwf	Mrf49TxCmd@val
  3790  098A  3526               	lslf	Mrf49xaInit@k,w
  3791  098B  3E0F               	addlw	low (_mrfRegset_Init| (0+32768))
  3792  098C  3182               	movlp	high __stringtab
  3793  098D  000A               	callw
  3794  098E  3188               	pagesel	$	;select current page
  3795  098F  23E5               	fcall	_Mrf49TxCmd
  3796  0990                     l3132:	
  3797  0990  300B               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3798  0991  0AA6               	incf	Mrf49xaInit@k,f
  3799  0992  3182               	movlp	high __stringtab
  3800  0993  000A               	callw
  3801  0994  3188               	pagesel	$	;select current page
  3802  0995  0226               	subwf	Mrf49xaInit@k,w
  3803  0996  1C03               	skipc
  3804  0997  2976               	goto	l3126
  3805  0998                     l3136:	
  3806                           
  3807                           ;mrf49xa.c: 184: Mrf49xaModeRx();
  3808  0998  23BD  3188         	fcall	_Mrf49xaModeRx
  3809                           
  3810                           ;mrf49xa.c: 186: k = 0;
  3811  099A  01A6               	clrf	Mrf49xaInit@k
  3812  099B                     l3148:	
  3813                           ;mrf49xa.c: 187: while(PORTAbits.RA2 == 0)
  3814                           
  3815  099B  0020               	movlb	0	; select bank0
  3816  099C  190C               	btfsc	12,2	;volatile
  3817  099D  0008               	return
  3818                           
  3819                           ;mrf49xa.c: 188: {
  3820                           ;mrf49xa.c: 189: k++;
  3821  099E  0AA6               	incf	Mrf49xaInit@k,f
  3822                           
  3823                           ;mrf49xa.c: 190: if (k == 255)
  3824  099F  0826               	movf	Mrf49xaInit@k,w
  3825  09A0  3AFF               	xorlw	255
  3826  09A1  1903               	btfsc	3,2
  3827  09A2  2946               	goto	l234
  3828                           
  3829                           ;mrf49xa.c: 195: }
  3830                           ;mrf49xa.c: 200: Mrf49xaServe();
  3831                           
  3832                           ;mrf49xa.c: 194: goto reset;
  3833  09A3  22CE  3188         	fcall	_Mrf49xaServe
  3834  09A5  299B               	goto	l3148
  3835  09A6                     __end_of_Mrf49xaInit:	
  3836  09A6                     __ptext32:	
  3837 ;; *************** function _Sleepy *****************
  3838 ;; Defined at:
  3839 ;;		line 42 in file "../../../src/node/power.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  ms              2    0[BANK0 ] unsigned int 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  b               1    3[BANK0 ] unsigned char 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;		None               void
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0
  3848 ;; Tracked objects:
  3849 ;;		On entry : 1F/0
  3850 ;;		On exit  : 1F/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3853 ;;      Params:         0       2       0       0
  3854 ;;      Locals:         0       1       0       0
  3855 ;;      Temps:          0       1       0       0
  3856 ;;      Totals:         0       4       0       0
  3857 ;;Total ram usage:        4 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    5
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_Mrf49xaInit
  3864 ;;		_Mrf49xaTick
  3865 ;;		_main
  3866 ;;		_PwrRfInit
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           
  3871                           ;psect for function _Sleepy
  3872  09A6                     _Sleepy:	
  3873                           
  3874                           ;power.c: 44: uint8_t b = 0;
  3875                           
  3876                           ;incstack = 0
  3877                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  3878  09A6  01A3               	clrf	Sleepy@b
  3879  09A7                     l2966:	
  3880                           ;power.c: 46: while (ms != 0)
  3881                           
  3882  09A7  0821               	movf	Sleepy@ms+1,w
  3883  09A8  0420               	iorwf	Sleepy@ms,w
  3884  09A9  1903               	btfsc	3,2
  3885  09AA  0008               	return
  3886                           
  3887                           ;power.c: 47: {
  3888                           ;power.c: 48: if ((ms & 1) != 0)
  3889  09AB  1C20               	btfss	Sleepy@ms,0
  3890  09AC  29BC               	goto	l2962
  3891                           
  3892                           ;power.c: 49: {
  3893                           ;power.c: 50: WDTCONbits.WDTPS = b;
  3894  09AD  0823               	movf	Sleepy@b,w
  3895  09AE  00A2               	movwf	??_Sleepy
  3896  09AF  0DA2               	rlf	??_Sleepy,f
  3897  09B0  0021               	movlb	1	; select bank1
  3898  09B1  0817               	movf	23,w	;volatile
  3899  09B2  0020               	movlb	0	; select bank0
  3900  09B3  0622               	xorwf	??_Sleepy,w
  3901  09B4  39C1               	andlw	-63
  3902  09B5  0622               	xorwf	??_Sleepy,w
  3903  09B6  0021               	movlb	1	; select bank1
  3904  09B7  0097               	movwf	23	;volatile
  3905                           
  3906                           ;power.c: 51: WDTCONbits.SWDTEN = 1;
  3907  09B8  1417               	bsf	23,0	;volatile
  3908  09B9  0063               	sleep	;# 
  3909                           
  3910                           ;power.c: 55: WDTCONbits.SWDTEN = 0;
  3911  09BA  0021               	movlb	1	; select bank1
  3912  09BB  1017               	bcf	23,0	;volatile
  3913  09BC                     l2962:	
  3914                           
  3915                           ;power.c: 56: }
  3916                           ;power.c: 57: ms = ms >> 1;
  3917  09BC  0020               	movlb	0	; select bank0
  3918  09BD  36A1               	lsrf	Sleepy@ms+1,f
  3919  09BE  0CA0               	rrf	Sleepy@ms,f
  3920                           
  3921                           ;power.c: 58: b++;
  3922  09BF  0AA3               	incf	Sleepy@b,f
  3923  09C0  29A7               	goto	l2966
  3924  09C1                     __end_of_Sleepy:	
  3925  09C1                     __ptext54:	
  3926 ;; *************** function _SoftI2cRepeatedStart *****************
  3927 ;; Defined at:
  3928 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;		None
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;		None
  3933 ;; Return value:  Size  Location     Type
  3934 ;;		None               void
  3935 ;; Registers used:
  3936 ;;		wreg, status,2, status,0, pclath, cstack
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3942 ;;      Params:         0       0       0       0
  3943 ;;      Locals:         0       0       0       0
  3944 ;;      Temps:          0       0       0       0
  3945 ;;      Totals:         0       0       0       0
  3946 ;;Total ram usage:        0 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:    6
  3949 ;; This function calls:
  3950 ;;		_SoftI2cNop
  3951 ;; This function is called by:
  3952 ;;		_eepromRxBytes
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           
  3957                           ;psect for function _SoftI2cRepeatedStart
  3958  09C1                     _SoftI2cRepeatedStart:	
  3959                           
  3960                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  3961                           
  3962                           ;incstack = 0
  3963                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  3964  09C1  0021               	movlb	1	; select bank1
  3965  09C2  120D               	bcf	13,4	;volatile
  3966                           
  3967                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  3968  09C3  0022               	movlb	2	; select bank2
  3969  09C4  130D               	bcf	13,6	;volatile
  3970                           
  3971                           ;softI2c.c: 57: SoftI2cNop();
  3972  09C5  22AB  3188         	fcall	_SoftI2cNop
  3973                           
  3974                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  3975  09C7  0022               	movlb	2	; select bank2
  3976  09C8  160D               	bsf	13,4	;volatile
  3977                           
  3978                           ;softI2c.c: 60: SoftI2cNop();
  3979  09C9  22AB  3188         	fcall	_SoftI2cNop
  3980                           
  3981                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  3982  09CB  0022               	movlb	2	; select bank2
  3983  09CC  170D               	bsf	13,6	;volatile
  3984                           
  3985                           ;softI2c.c: 63: SoftI2cNop();
  3986  09CD  22AB  3188         	fcall	_SoftI2cNop
  3987                           
  3988                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  3989  09CF  0022               	movlb	2	; select bank2
  3990  09D0  120D               	bcf	13,4	;volatile
  3991                           
  3992                           ;softI2c.c: 66: SoftI2cNop();
  3993  09D1  22AB  3188         	fcall	_SoftI2cNop
  3994                           
  3995                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  3996  09D3  0022               	movlb	2	; select bank2
  3997  09D4  130D               	bcf	13,6	;volatile
  3998                           
  3999                           ;softI2c.c: 69: SoftI2cNop();
  4000  09D5  2AAB               	ljmp	l2412
  4001  09D6                     __end_of_SoftI2cRepeatedStart:	
  4002  09D6                     __ptext60:	
  4003 ;; *************** function _Mcp9800Read *****************
  4004 ;; Defined at:
  4005 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  tempL           1    7[BANK0 ] unsigned char 
  4010 ;;  tempH           1    6[BANK0 ] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  2    4[BANK0 ] unsigned int 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0, pclath, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 1F/0
  4017 ;;		On exit  : 1F/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4020 ;;      Params:         0       2       0       0
  4021 ;;      Locals:         0       2       0       0
  4022 ;;      Temps:          0       0       0       0
  4023 ;;      Totals:         0       4       0       0
  4024 ;;Total ram usage:        4 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    7
  4027 ;; This function calls:
  4028 ;;		_SoftI2cRxByte
  4029 ;;		_SoftI2cStart
  4030 ;;		_SoftI2cStop
  4031 ;;		_SoftI2cTxByte
  4032 ;; This function is called by:
  4033 ;;		_main
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           
  4038                           ;psect for function _Mcp9800Read
  4039  09D6                     _Mcp9800Read:	
  4040                           
  4041                           ;mcp9800.c: 21: SoftI2cStart();
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  4045  09D6  22B2  3188         	fcall	_SoftI2cStart
  4046                           
  4047                           ;mcp9800.c: 22: SoftI2cTxByte(0b10010001);
  4048  09D8  3091               	movlw	145
  4049  09D9  2244  3188         	fcall	_SoftI2cTxByte
  4050                           
  4051                           ;mcp9800.c: 23: UI08_t tempH = SoftI2cRxByte(1);
  4052  09DB  3001               	movlw	1
  4053  09DC  2272  3188         	fcall	_SoftI2cRxByte
  4054  09DE  00A6               	movwf	Mcp9800Read@tempH
  4055                           
  4056                           ;mcp9800.c: 24: UI08_t tempL = SoftI2cRxByte(0);
  4057  09DF  3000               	movlw	0
  4058  09E0  2272  3188         	fcall	_SoftI2cRxByte
  4059  09E2  00A7               	movwf	Mcp9800Read@tempL
  4060                           
  4061                           ;mcp9800.c: 25: SoftI2cStop();
  4062  09E3  22BF               	fcall	_SoftI2cStop
  4063                           
  4064                           ;mcp9800.c: 27: return (tempH << 8) | tempL;
  4065  09E4  0020               	movlb	0	; select bank0
  4066  09E5  0826               	movf	Mcp9800Read@tempH,w
  4067  09E6  00A5               	movwf	?_Mcp9800Read+1
  4068  09E7  01A4               	clrf	?_Mcp9800Read
  4069  09E8  0827               	movf	Mcp9800Read@tempL,w
  4070  09E9  04A4               	iorwf	?_Mcp9800Read,f
  4071  09EA  0008               	return
  4072  09EB                     __end_of_Mcp9800Read:	
  4073  09EB                     __ptext51:	
  4074 ;; *************** function _eepromTxBytes *****************
  4075 ;; Defined at:
  4076 ;;		line 25 in file "../../../src/devices/24aa64.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  address         2    4[BANK0 ] unsigned int 
  4079 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4080 ;;		 -> eepromTxByte@byte(1), cfgRam(9), 
  4081 ;;  size            1    7[BANK0 ] unsigned char 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;		None
  4084 ;; Return value:  Size  Location     Type
  4085 ;;		None               void
  4086 ;; Registers used:
  4087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 1F/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4093 ;;      Params:         0       4       0       0
  4094 ;;      Locals:         0       0       0       0
  4095 ;;      Temps:          0       0       0       0
  4096 ;;      Totals:         0       4       0       0
  4097 ;;Total ram usage:        4 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    7
  4100 ;; This function calls:
  4101 ;;		_SoftI2cStart
  4102 ;;		_SoftI2cStop
  4103 ;;		_SoftI2cTxByte
  4104 ;; This function is called by:
  4105 ;;		_CfgSave
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           
  4110                           ;psect for function _eepromTxBytes
  4111  09EB                     _eepromTxBytes:	
  4112  09EB                     l2610:	
  4113                           ;incstack = 0
  4114                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4115                           
  4116                           
  4117                           ;24aa64.c: 28: SoftI2cStart();
  4118  09EB  22B2  3188         	fcall	_SoftI2cStart
  4119                           
  4120                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  4121  09ED  30A0               	movlw	160
  4122  09EE  2244  3188         	fcall	_SoftI2cTxByte
  4123                           
  4124                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  4125  09F0  0020               	movlb	0	; select bank0
  4126  09F1  0825               	movf	eepromTxBytes@address+1,w
  4127  09F2  2244  3188         	fcall	_SoftI2cTxByte
  4128                           
  4129                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  4130  09F4  0020               	movlb	0	; select bank0
  4131  09F5  0824               	movf	eepromTxBytes@address,w
  4132  09F6  2244  3188         	fcall	_SoftI2cTxByte
  4133  09F8                     l2618:	
  4134                           ;24aa64.c: 33: while (size != 0)
  4135                           
  4136  09F8  0020               	movlb	0	; select bank0
  4137  09F9  08A7               	movf	eepromTxBytes@size,f
  4138  09FA  1903               	btfsc	3,2
  4139  09FB  2A06               	goto	l2620
  4140                           
  4141                           ;24aa64.c: 34: {
  4142                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  4143  09FC  0826               	movf	eepromTxBytes@data,w
  4144  09FD  0086               	movwf	6
  4145  09FE  0187               	clrf	7
  4146  09FF  0801               	movf	1,w
  4147  0A00  2244  3188         	fcall	_SoftI2cTxByte
  4148                           
  4149                           ;24aa64.c: 37: data++;
  4150  0A02  0020               	movlb	0	; select bank0
  4151  0A03  0AA6               	incf	eepromTxBytes@data,f
  4152                           
  4153                           ;24aa64.c: 38: size--;
  4154  0A04  03A7               	decf	eepromTxBytes@size,f
  4155  0A05  29F8               	goto	l2618
  4156  0A06                     l2620:	
  4157                           
  4158                           ;24aa64.c: 39: }
  4159                           ;24aa64.c: 40: SoftI2cStop();
  4160  0A06  2ABF               	ljmp	l2456
  4161  0A07                     __end_of_eepromTxBytes:	
  4162  0A07                     __ptext59:	
  4163 ;; *************** function _Mcp9800Start *****************
  4164 ;; Defined at:
  4165 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  resolution      1    wreg     enum E4252
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  resolution      1    4[BANK0 ] enum E4252
  4170 ;; Return value:  Size  Location     Type
  4171 ;;		None               void
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 1F/2
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4179 ;;      Params:         0       0       0       0
  4180 ;;      Locals:         0       1       0       0
  4181 ;;      Temps:          0       0       0       0
  4182 ;;      Totals:         0       1       0       0
  4183 ;;Total ram usage:        1 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    7
  4186 ;; This function calls:
  4187 ;;		_SoftI2cStart
  4188 ;;		_SoftI2cStop
  4189 ;;		_SoftI2cTxByte
  4190 ;; This function is called by:
  4191 ;;		_main
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _Mcp9800Start
  4197  0A07                     _Mcp9800Start:	
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  4201                           ;Mcp9800Start@resolution stored from wreg
  4202  0A07  0020               	movlb	0	; select bank0
  4203  0A08  00A4               	movwf	Mcp9800Start@resolution
  4204                           
  4205                           ;mcp9800.c: 6: SoftI2cStart();
  4206  0A09  22B2  3188         	fcall	_SoftI2cStart
  4207                           
  4208                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  4209  0A0B  3090               	movlw	144
  4210  0A0C  2244  3188         	fcall	_SoftI2cTxByte
  4211                           
  4212                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  4213  0A0E  3001               	movlw	1
  4214  0A0F  2244  3188         	fcall	_SoftI2cTxByte
  4215                           
  4216                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  4217  0A11  0020               	movlb	0	; select bank0
  4218  0A12  0824               	movf	Mcp9800Start@resolution,w
  4219  0A13  2244  3188         	fcall	_SoftI2cTxByte
  4220                           
  4221                           ;mcp9800.c: 10: SoftI2cStop();
  4222  0A15  22BF  3188         	fcall	_SoftI2cStop
  4223                           
  4224                           ;mcp9800.c: 12: SoftI2cStart();
  4225  0A17  22B2  3188         	fcall	_SoftI2cStart
  4226                           
  4227                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  4228  0A19  3090               	movlw	144
  4229  0A1A  2244  3188         	fcall	_SoftI2cTxByte
  4230                           
  4231                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  4232  0A1C  3000               	movlw	0
  4233  0A1D  2244  3188         	fcall	_SoftI2cTxByte
  4234                           
  4235                           ;mcp9800.c: 15: SoftI2cStop();
  4236  0A1F  2ABF               	ljmp	l2456
  4237  0A20                     __end_of_Mcp9800Start:	
  4238  0A20                     __ptext53:	
  4239 ;; *************** function _eepromRxBytes *****************
  4240 ;; Defined at:
  4241 ;;		line 4 in file "../../../src/devices/24aa64.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  address         2    4[BANK0 ] unsigned int 
  4244 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4245 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwCmd@packet..(21), eepromRxByte@dat(1), 
  4246 ;;		 -> NULL(0), cfgRam(9), 
  4247 ;;  size            1    7[BANK0 ] unsigned char 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;		None               void
  4252 ;; Registers used:
  4253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 1F/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4259 ;;      Params:         0       4       0       0
  4260 ;;      Locals:         0       0       0       0
  4261 ;;      Temps:          0       0       0       0
  4262 ;;      Totals:         0       4       0       0
  4263 ;;Total ram usage:        4 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    7
  4266 ;; This function calls:
  4267 ;;		_SoftI2cRepeatedStart
  4268 ;;		_SoftI2cRxByte
  4269 ;;		_SoftI2cStart
  4270 ;;		_SoftI2cStop
  4271 ;;		_SoftI2cTxByte
  4272 ;; This function is called by:
  4273 ;;		_handleFwCmd
  4274 ;;		_CfgLoad
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           
  4279                           ;psect for function _eepromRxBytes
  4280  0A20                     _eepromRxBytes:	
  4281  0A20                     l2598:	
  4282                           ;incstack = 0
  4283                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4284                           
  4285                           
  4286                           ;24aa64.c: 7: SoftI2cStart();
  4287  0A20  22B2  3188         	fcall	_SoftI2cStart
  4288                           
  4289                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  4290  0A22  30A0               	movlw	160
  4291  0A23  2244  3188         	fcall	_SoftI2cTxByte
  4292                           
  4293                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  4294  0A25  0020               	movlb	0	; select bank0
  4295  0A26  0825               	movf	eepromRxBytes@address+1,w
  4296  0A27  2244  3188         	fcall	_SoftI2cTxByte
  4297                           
  4298                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  4299  0A29  0020               	movlb	0	; select bank0
  4300  0A2A  0824               	movf	eepromRxBytes@address,w
  4301  0A2B  2244  3188         	fcall	_SoftI2cTxByte
  4302                           
  4303                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  4304  0A2D  21C1  3188         	fcall	_SoftI2cRepeatedStart
  4305                           
  4306                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  4307  0A2F  30A1               	movlw	161
  4308  0A30  2244  3188         	fcall	_SoftI2cTxByte
  4309  0A32                     l2606:	
  4310                           ;24aa64.c: 15: while (size != 0)
  4311                           
  4312  0A32  0020               	movlb	0	; select bank0
  4313  0A33  08A7               	movf	eepromRxBytes@size,f
  4314  0A34  1903               	btfsc	3,2
  4315  0A35  2A43               	goto	l2608
  4316                           
  4317                           ;24aa64.c: 16: {
  4318                           ;24aa64.c: 17: size--;
  4319  0A36  03A7               	decf	eepromRxBytes@size,f
  4320                           
  4321                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  4322  0A37  0826               	movf	eepromRxBytes@data,w
  4323  0A38  0086               	movwf	6
  4324  0A39  3000               	movlw	0
  4325  0A3A  0187               	clrf	7
  4326  0A3B  08A7               	movf	eepromRxBytes@size,f
  4327  0A3C  1D03               	skipz
  4328  0A3D  3001               	movlw	1
  4329  0A3E  2272  3188         	fcall	_SoftI2cRxByte
  4330  0A40  0081               	movwf	1
  4331                           
  4332                           ;24aa64.c: 21: data++;
  4333  0A41  0AA6               	incf	eepromRxBytes@data,f
  4334  0A42  2A32               	goto	l2606
  4335  0A43                     l2608:	
  4336                           
  4337                           ;24aa64.c: 22: }
  4338                           ;24aa64.c: 23: SoftI2cStop();
  4339  0A43  2ABF               	ljmp	l2456
  4340  0A44                     __end_of_eepromRxBytes:	
  4341  0A44                     __ptext61:	
  4342 ;; *************** function _SoftI2cTxByte *****************
  4343 ;; Defined at:
  4344 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  data            1    wreg     unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  data            1    2[BANK0 ] unsigned char 
  4349 ;;  i               1    3[BANK0 ] unsigned char 
  4350 ;;  ack             1    0        unsigned char 
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  1    wreg      unsigned char 
  4353 ;; Registers used:
  4354 ;;		wreg, status,2, status,0, pclath, cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/1
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4360 ;;      Params:         0       0       0       0
  4361 ;;      Locals:         0       3       0       0
  4362 ;;      Temps:          0       0       0       0
  4363 ;;      Totals:         0       3       0       0
  4364 ;;Total ram usage:        3 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    6
  4367 ;; This function calls:
  4368 ;;		_SoftI2cNop
  4369 ;; This function is called by:
  4370 ;;		_SoftI2cInit
  4371 ;;		_Mcp9800Start
  4372 ;;		_Mcp9800Read
  4373 ;;		_eepromRxBytes
  4374 ;;		_eepromTxBytes
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           
  4379                           ;psect for function _SoftI2cTxByte
  4380  0A44                     _SoftI2cTxByte:	
  4381                           
  4382                           ;incstack = 0
  4383                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  4384                           ;SoftI2cTxByte@data stored from wreg
  4385  0A44  0020               	movlb	0	; select bank0
  4386  0A45  00A2               	movwf	SoftI2cTxByte@data
  4387                           
  4388                           ;softI2c.c: 89: UI08_t i;
  4389                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  4390  0A46  3080               	movlw	128
  4391  0A47  00A3               	movwf	SoftI2cTxByte@i
  4392  0A48                     l32:	
  4393                           
  4394                           ;softI2c.c: 92: {
  4395                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  4396  0A48  0022               	movlb	2	; select bank2
  4397  0A49  130D               	bcf	13,6	;volatile
  4398                           
  4399                           ;softI2c.c: 94: SoftI2cNop();
  4400  0A4A  22AB  3188         	fcall	_SoftI2cNop
  4401                           
  4402                           ;softI2c.c: 96: if(data & i)
  4403  0A4C  0020               	movlb	0	; select bank0
  4404  0A4D  0822               	movf	SoftI2cTxByte@data,w
  4405  0A4E  0523               	andwf	SoftI2cTxByte@i,w
  4406  0A4F  1903               	btfsc	3,2
  4407  0A50  2A54               	goto	l34
  4408                           
  4409                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  4410  0A51  0022               	movlb	2	; select bank2
  4411  0A52  160D               	bsf	13,4	;volatile
  4412  0A53  2A56               	goto	l35
  4413  0A54                     l34:	
  4414                           
  4415                           ;softI2c.c: 98: else
  4416                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  4417  0A54  0022               	movlb	2	; select bank2
  4418  0A55  120D               	bcf	13,4	;volatile
  4419  0A56                     l35:	
  4420                           
  4421                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  4422  0A56  0021               	movlb	1	; select bank1
  4423  0A57  120D               	bcf	13,4	;volatile
  4424                           
  4425                           ;softI2c.c: 102: SoftI2cNop();
  4426  0A58  22AB  3188         	fcall	_SoftI2cNop
  4427                           
  4428                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  4429  0A5A  0022               	movlb	2	; select bank2
  4430  0A5B  170D               	bsf	13,6	;volatile
  4431                           
  4432                           ;softI2c.c: 105: SoftI2cNop();
  4433  0A5C  22AB  3188         	fcall	_SoftI2cNop
  4434  0A5E  0020               	movlb	0	; select bank0
  4435  0A5F  36A3               	lsrf	SoftI2cTxByte@i,f
  4436  0A60  08A3               	movf	SoftI2cTxByte@i,f
  4437  0A61  1D03               	skipz
  4438  0A62  2A48               	goto	l32
  4439                           
  4440                           ;softI2c.c: 109: }
  4441                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  4442  0A63  0022               	movlb	2	; select bank2
  4443  0A64  130D               	bcf	13,6	;volatile
  4444                           
  4445                           ;softI2c.c: 113: SoftI2cNop();
  4446  0A65  22AB  3188         	fcall	_SoftI2cNop
  4447                           
  4448                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  4449  0A67  0021               	movlb	1	; select bank1
  4450  0A68  160D               	bsf	13,4	;volatile
  4451                           
  4452                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  4453  0A69  0022               	movlb	2	; select bank2
  4454  0A6A  170D               	bsf	13,6	;volatile
  4455                           
  4456                           ;softI2c.c: 118: SoftI2cNop();
  4457  0A6B  22AB  3188         	fcall	_SoftI2cNop
  4458  0A6D  0020               	movlb	0	; select bank0
  4459  0A6E  080D               	movf	13,w	;volatile
  4460                           
  4461                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  4462  0A6F  0022               	movlb	2	; select bank2
  4463  0A70  130D               	bcf	13,6	;volatile
  4464                           
  4465                           ;softI2c.c: 123: SoftI2cNop();
  4466  0A71  2AAB               	ljmp	l2412
  4467  0A72                     __end_of_SoftI2cTxByte:	
  4468  0A72                     __ptext64:	
  4469 ;; *************** function _SoftI2cRxByte *****************
  4470 ;; Defined at:
  4471 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  ack             1    wreg     unsigned char 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  ack             1    1[BANK0 ] unsigned char 
  4476 ;;  i               1    3[BANK0 ] unsigned char 
  4477 ;;  data            1    2[BANK0 ] unsigned char 
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  1    wreg      unsigned char 
  4480 ;; Registers used:
  4481 ;;		wreg, status,2, status,0, pclath, cstack
  4482 ;; Tracked objects:
  4483 ;;		On entry : 0/0
  4484 ;;		On exit  : 1F/0
  4485 ;;		Unchanged: 0/0
  4486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4487 ;;      Params:         0       0       0       0
  4488 ;;      Locals:         0       3       0       0
  4489 ;;      Temps:          0       0       0       0
  4490 ;;      Totals:         0       3       0       0
  4491 ;;Total ram usage:        3 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:    6
  4494 ;; This function calls:
  4495 ;;		_SoftI2cNop
  4496 ;; This function is called by:
  4497 ;;		_Mcp9800Read
  4498 ;;		_eepromRxBytes
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           
  4503                           ;psect for function _SoftI2cRxByte
  4504  0A72                     _SoftI2cRxByte:	
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  4508                           ;SoftI2cRxByte@ack stored from wreg
  4509  0A72  0020               	movlb	0	; select bank0
  4510  0A73  00A1               	movwf	SoftI2cRxByte@ack
  4511                           
  4512                           ;softI2c.c: 131: UI08_t data=0x00;
  4513  0A74  01A2               	clrf	SoftI2cRxByte@data
  4514                           
  4515                           ;softI2c.c: 132: UI08_t i;
  4516                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  4517  0A75  0022               	movlb	2	; select bank2
  4518  0A76  130D               	bcf	13,6	;volatile
  4519                           
  4520                           ;softI2c.c: 135: SoftI2cNop();
  4521  0A77  22AB  3188         	fcall	_SoftI2cNop
  4522                           
  4523                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  4524  0A79  0021               	movlb	1	; select bank1
  4525  0A7A  160D               	bsf	13,4	;volatile
  4526                           
  4527                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  4528  0A7B  0022               	movlb	2	; select bank2
  4529  0A7C  160D               	bsf	13,4	;volatile
  4530                           
  4531                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  4532  0A7D  3080               	movlw	128
  4533  0A7E  0020               	movlb	0	; select bank0
  4534  0A7F  00A3               	movwf	SoftI2cRxByte@i
  4535  0A80                     l39:	
  4536                           
  4537                           ;softI2c.c: 140: {
  4538                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  4539  0A80  0022               	movlb	2	; select bank2
  4540  0A81  130D               	bcf	13,6	;volatile
  4541                           
  4542                           ;softI2c.c: 142: SoftI2cNop();
  4543  0A82  22AB  3188         	fcall	_SoftI2cNop
  4544                           
  4545                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  4546  0A84  0022               	movlb	2	; select bank2
  4547  0A85  170D               	bsf	13,6	;volatile
  4548                           
  4549                           ;softI2c.c: 144: SoftI2cNop();
  4550  0A86  22AB  3188         	fcall	_SoftI2cNop
  4551                           
  4552                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  4553  0A88  0020               	movlb	0	; select bank0
  4554                           
  4555                           ;softI2c.c: 150: data |= i;
  4556  0A89  0823               	movf	SoftI2cRxByte@i,w
  4557  0A8A  1A0D               	btfsc	13,4	;volatile
  4558  0A8B  04A2               	iorwf	SoftI2cRxByte@data,f
  4559  0A8C  36A3               	lsrf	SoftI2cRxByte@i,f
  4560  0A8D  08A3               	movf	SoftI2cRxByte@i,f
  4561  0A8E  1D03               	skipz
  4562  0A8F  2A80               	goto	l39
  4563                           
  4564                           ;softI2c.c: 152: }
  4565                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  4566  0A90  0022               	movlb	2	; select bank2
  4567  0A91  130D               	bcf	13,6	;volatile
  4568                           
  4569                           ;softI2c.c: 155: SoftI2cNop();
  4570  0A92  22AB  3188         	fcall	_SoftI2cNop
  4571                           
  4572                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  4573  0A94  0021               	movlb	1	; select bank1
  4574  0A95  120D               	bcf	13,4	;volatile
  4575                           
  4576                           ;softI2c.c: 158: if(ack)
  4577  0A96  0020               	movlb	0	; select bank0
  4578  0A97  0821               	movf	SoftI2cRxByte@ack,w
  4579  0A98  1903               	btfsc	3,2
  4580  0A99  2A9D               	goto	l42
  4581                           
  4582                           ;softI2c.c: 159: {
  4583                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  4584  0A9A  0022               	movlb	2	; select bank2
  4585  0A9B  120D               	bcf	13,4	;volatile
  4586                           
  4587                           ;softI2c.c: 161: }
  4588  0A9C  2A9F               	goto	l2512
  4589  0A9D                     l42:	
  4590                           
  4591                           ;softI2c.c: 162: else
  4592                           ;softI2c.c: 163: {
  4593                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  4594  0A9D  0022               	movlb	2	; select bank2
  4595  0A9E  160D               	bsf	13,4	;volatile
  4596  0A9F                     l2512:	
  4597                           
  4598                           ;softI2c.c: 165: }
  4599                           ;softI2c.c: 166: SoftI2cNop();
  4600  0A9F  22AB  3188         	fcall	_SoftI2cNop
  4601                           
  4602                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  4603  0AA1  0022               	movlb	2	; select bank2
  4604  0AA2  170D               	bsf	13,6	;volatile
  4605                           
  4606                           ;softI2c.c: 169: SoftI2cNop();
  4607  0AA3  22AB  3188         	fcall	_SoftI2cNop
  4608                           
  4609                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  4610  0AA5  0022               	movlb	2	; select bank2
  4611  0AA6  130D               	bcf	13,6	;volatile
  4612                           
  4613                           ;softI2c.c: 172: SoftI2cNop();
  4614  0AA7  22AB               	fcall	_SoftI2cNop
  4615                           
  4616                           ;softI2c.c: 174: return data;
  4617  0AA8  0020               	movlb	0	; select bank0
  4618  0AA9  0822               	movf	SoftI2cRxByte@data,w
  4619  0AAA  0008               	return
  4620  0AAB                     __end_of_SoftI2cRxByte:	
  4621  0AAB                     __ptext65:	
  4622 ;; *************** function _SoftI2cNop *****************
  4623 ;; Defined at:
  4624 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;		None
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;		None
  4629 ;; Return value:  Size  Location     Type
  4630 ;;		None               void
  4631 ;; Registers used:
  4632 ;;		wreg
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/2
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4638 ;;      Params:         0       0       0       0
  4639 ;;      Locals:         0       0       0       0
  4640 ;;      Temps:          0       1       0       0
  4641 ;;      Totals:         0       1       0       0
  4642 ;;Total ram usage:        1 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    5
  4645 ;; This function calls:
  4646 ;;		Nothing
  4647 ;; This function is called by:
  4648 ;;		_SoftI2cStart
  4649 ;;		_SoftI2cRepeatedStart
  4650 ;;		_SoftI2cStop
  4651 ;;		_SoftI2cTxByte
  4652 ;;		_SoftI2cRxByte
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _SoftI2cNop
  4658  0AAB                     _SoftI2cNop:	
  4659  0AAB                     l2412:	
  4660                           ;incstack = 0
  4661                           ; Regs used in _SoftI2cNop: [wreg]
  4662                           
  4663                           
  4664                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  4665  0AAB  300A               	movlw	10
  4666  0AAC  0020               	movlb	0	; select bank0
  4667  0AAD  00A0               	movwf	??_SoftI2cNop
  4668  0AAE                     u2467:	
  4669  0AAE  0BA0               	decfsz	??_SoftI2cNop,f
  4670  0AAF  2AAE               	goto	u2467
  4671  0AB0  0000               	nop
  4672  0AB1  0008               	return
  4673  0AB2                     __end_of_SoftI2cNop:	
  4674  0AB2                     __ptext63:	
  4675 ;; *************** function _SoftI2cStart *****************
  4676 ;; Defined at:
  4677 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;		None
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;		None
  4682 ;; Return value:  Size  Location     Type
  4683 ;;		None               void
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0, pclath, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/1
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4691 ;;      Params:         0       0       0       0
  4692 ;;      Locals:         0       0       0       0
  4693 ;;      Temps:          0       0       0       0
  4694 ;;      Totals:         0       0       0       0
  4695 ;;Total ram usage:        0 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    6
  4698 ;; This function calls:
  4699 ;;		_SoftI2cNop
  4700 ;; This function is called by:
  4701 ;;		_SoftI2cInit
  4702 ;;		_Mcp9800Start
  4703 ;;		_Mcp9800Read
  4704 ;;		_eepromRxBytes
  4705 ;;		_eepromTxBytes
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function _SoftI2cStart
  4711  0AB2                     _SoftI2cStart:	
  4712                           
  4713                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  4717  0AB2  0021               	movlb	1	; select bank1
  4718  0AB3  120D               	bcf	13,4	;volatile
  4719                           
  4720                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  4721  0AB4  0022               	movlb	2	; select bank2
  4722  0AB5  170D               	bsf	13,6	;volatile
  4723                           
  4724                           ;softI2c.c: 43: SoftI2cNop();
  4725  0AB6  22AB  3188         	fcall	_SoftI2cNop
  4726                           
  4727                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  4728  0AB8  0022               	movlb	2	; select bank2
  4729  0AB9  120D               	bcf	13,4	;volatile
  4730                           
  4731                           ;softI2c.c: 46: SoftI2cNop();
  4732  0ABA  22AB  3188         	fcall	_SoftI2cNop
  4733                           
  4734                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  4735  0ABC  0022               	movlb	2	; select bank2
  4736  0ABD  130D               	bcf	13,6	;volatile
  4737                           
  4738                           ;softI2c.c: 48: SoftI2cNop();
  4739  0ABE  2AAB               	ljmp	l2412
  4740  0ABF                     __end_of_SoftI2cStart:	
  4741  0ABF                     __ptext62:	
  4742 ;; *************** function _SoftI2cStop *****************
  4743 ;; Defined at:
  4744 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;		None
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;		None
  4749 ;; Return value:  Size  Location     Type
  4750 ;;		None               void
  4751 ;; Registers used:
  4752 ;;		wreg, status,2, status,0, pclath, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/1
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4758 ;;      Params:         0       0       0       0
  4759 ;;      Locals:         0       0       0       0
  4760 ;;      Temps:          0       0       0       0
  4761 ;;      Totals:         0       0       0       0
  4762 ;;Total ram usage:        0 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; Hardware stack levels required when called:    6
  4765 ;; This function calls:
  4766 ;;		_SoftI2cNop
  4767 ;; This function is called by:
  4768 ;;		_SoftI2cInit
  4769 ;;		_Mcp9800Start
  4770 ;;		_Mcp9800Read
  4771 ;;		_eepromRxBytes
  4772 ;;		_eepromTxBytes
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           
  4777                           ;psect for function _SoftI2cStop
  4778  0ABF                     _SoftI2cStop:	
  4779  0ABF                     l2456:	
  4780                           ;incstack = 0
  4781                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  4782                           
  4783                           
  4784                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  4785  0ABF  0021               	movlb	1	; select bank1
  4786  0AC0  120D               	bcf	13,4	;volatile
  4787                           
  4788                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  4789  0AC1  0022               	movlb	2	; select bank2
  4790  0AC2  120D               	bcf	13,4	;volatile
  4791                           
  4792                           ;softI2c.c: 78: SoftI2cNop();
  4793  0AC3  22AB  3188         	fcall	_SoftI2cNop
  4794                           
  4795                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  4796  0AC5  0022               	movlb	2	; select bank2
  4797  0AC6  170D               	bsf	13,6	;volatile
  4798                           
  4799                           ;softI2c.c: 81: SoftI2cNop();
  4800  0AC7  22AB  3188         	fcall	_SoftI2cNop
  4801                           
  4802                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  4803  0AC9  0022               	movlb	2	; select bank2
  4804  0ACA  160D               	bsf	13,4	;volatile
  4805                           
  4806                           ;softI2c.c: 83: SoftI2cNop();
  4807  0ACB  22AB  3188         	fcall	_SoftI2cNop
  4808                           
  4809                           ;softI2c.c: 84: SoftI2cNop();
  4810  0ACD  2AAB               	ljmp	l2412
  4811  0ACE                     __end_of_SoftI2cStop:	
  4812  0ACE                     __ptext33:	
  4813 ;; *************** function _Mrf49xaServe *****************
  4814 ;; Defined at:
  4815 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  data            1    5[BANK0 ] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      unsigned char 
  4822 ;; Registers used:
  4823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 1F/0
  4826 ;;		On exit  : 1E/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4829 ;;      Params:         0       0       0       0
  4830 ;;      Locals:         0       1       0       0
  4831 ;;      Temps:          0       1       0       0
  4832 ;;      Totals:         0       2       0       0
  4833 ;;Total ram usage:        2 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    8
  4836 ;; This function calls:
  4837 ;;		_Mrf49RxByte
  4838 ;;		_Mrf49RxSts
  4839 ;;		_Mrf49TxByte
  4840 ;;		_Mrf49xaModeRx
  4841 ;;		_Mrf49xaNeedsReset
  4842 ;; This function is called by:
  4843 ;;		_Mrf49xaInit
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function _Mrf49xaServe
  4849  0ACE                     _Mrf49xaServe:	
  4850                           
  4851                           ;mrf49xa_data.c: 10: uint8_t data;
  4852                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4856  0ACE  0021               	movlb	1	; select bank1
  4857  0ACF  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
  4858  0AD0  1903               	btfsc	3,2
  4859                           
  4860                           ;mrf49xa_data.c: 13: return 0;
  4861  0AD1  3400               	retlw	0
  4862                           
  4863                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  4864  0AD2  1BEA               	btfsc	(_rfTrcvStatus^(0+128)+74),7
  4865  0AD3  3400               	retlw	0
  4866                           
  4867                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  4868  0AD4  23EE  3188         	fcall	_Mrf49RxSts
  4869                           
  4870                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  4871  0AD6  083D               	movf	_mrf49Status,w
  4872  0AD7  3AFF               	xorlw	255
  4873  0AD8  1D03               	skipz
  4874  0AD9  2ADE               	goto	l441
  4875  0ADA  083E               	movf	_mrf49Status+1,w
  4876  0ADB  3AFF               	xorlw	255
  4877  0ADC  1903               	btfsc	3,2
  4878  0ADD  3400               	retlw	0
  4879  0ADE                     l441:	
  4880                           ;mrf49xa_data.c: 26: {
  4881                           
  4882                           
  4883                           ;mrf49xa_data.c: 28: }
  4884                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  4885  0ADE  1ABD               	btfsc	_mrf49Status,5
  4886  0ADF  2AED               	goto	l2866
  4887  0AE0  2AFC               	goto	l442
  4888  0AE1                     l2860:	
  4889                           
  4890                           ;mrf49xa_data.c: 36: case RECV_DATA:
  4891                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  4892  0AE1  23BB  3188         	fcall	_Mrf49RxByte
  4893  0AE3  00A5               	movwf	Mrf49xaServe@data
  4894                           
  4895                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  4896  0AE4  23BB  3188         	fcall	_Mrf49RxByte
  4897  0AE6  00A5               	movwf	Mrf49xaServe@data
  4898                           
  4899                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  4900  0AE7  23BD  3188         	fcall	_Mrf49xaModeRx
  4901                           
  4902                           ;mrf49xa_data.c: 47: break;
  4903  0AE9  2AFC               	goto	l442
  4904  0AEA                     l2862:	
  4905                           
  4906                           ;mrf49xa_data.c: 50: Mrf49xaNeedsReset();
  4907  0AEA  23E2  3188         	fcall	_Mrf49xaNeedsReset
  4908                           
  4909                           ;mrf49xa_data.c: 51: break;
  4910  0AEC  2AFC               	goto	l442
  4911  0AED                     l2866:	
  4912  0AED  0021               	movlb	1	; select bank1
  4913  0AEE  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  4914                           
  4915                           ; Switch size 1, requested type "space"
  4916                           ; Number of cases is 4, Range of values is 0 to 3
  4917                           ; switch strategies available:
  4918                           ; Name         Instructions Cycles
  4919                           ; simple_byte           13     7 (average)
  4920                           ; direct_byte           14     6 (fixed)
  4921                           ; jumptable            260     6 (fixed)
  4922                           ;	Chosen strategy is simple_byte
  4923  0AEF  3A00               	xorlw	0	; case 0
  4924  0AF0  1903               	skipnz
  4925  0AF1  2AEA               	goto	l2862
  4926  0AF2  3A01               	xorlw	1	; case 1
  4927  0AF3  1903               	skipnz
  4928  0AF4  2AE1               	goto	l2860
  4929  0AF5  3A03               	xorlw	3	; case 2
  4930  0AF6  1903               	skipnz
  4931  0AF7  2AE1               	goto	l2860
  4932  0AF8  3A01               	xorlw	1	; case 3
  4933  0AF9  1903               	skipnz
  4934  0AFA  2AFC               	goto	l442
  4935  0AFB  2AFC               	goto	l442
  4936  0AFC                     l442:	
  4937                           
  4938                           ;mrf49xa_data.c: 60: }
  4939                           ;mrf49xa_data.c: 69: if (mrf49Status.flags.msb.fifoTxRx == 1)
  4940  0AFC  0020               	movlb	0	; select bank0
  4941  0AFD  1BBD               	btfsc	_mrf49Status,7
  4942  0AFE  2BA2               	goto	l2948
  4943  0AFF  2BB1               	goto	l2950
  4944  0B00                     l2870:	
  4945                           
  4946                           ;mrf49xa_data.c: 75: Mrf49xaNeedsReset();
  4947  0B00  23E2  3188         	fcall	_Mrf49xaNeedsReset
  4948                           
  4949                           ;mrf49xa_data.c: 76: break;
  4950  0B02  2BB1               	goto	l2950
  4951  0B03                     l2872:	
  4952                           
  4953                           ;mrf49xa_data.c: 79: data = Mrf49RxByte();
  4954  0B03  23BB  3188         	fcall	_Mrf49RxByte
  4955  0B05  00A5               	movwf	Mrf49xaServe@data
  4956                           
  4957                           ;mrf49xa_data.c: 83: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4958  0B06  1BBE               	btfsc	_mrf49Status+1,7
  4959  0B07  2B0B               	goto	l2878
  4960  0B08                     l2876:	
  4961                           
  4962                           ;mrf49xa_data.c: 84: {
  4963                           ;mrf49xa_data.c: 85: Mrf49xaModeRx();
  4964  0B08  23BD  3188         	fcall	_Mrf49xaModeRx
  4965                           
  4966                           ;mrf49xa_data.c: 86: break;
  4967  0B0A  2BB1               	goto	l2950
  4968  0B0B                     l2878:	
  4969                           
  4970                           ;mrf49xa_data.c: 87: }
  4971                           ;mrf49xa_data.c: 89: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  4972  0B0B  0021               	movlb	1	; select bank1
  4973  0B0C  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  4974  0B0D  1D03               	skipz
  4975  0B0E  2B11               	goto	l2882
  4976  0B0F  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  4977  0B10  2B15               	goto	L1
  4978  0B11                     l2882:	
  4979                           
  4980                           ;mrf49xa_data.c: 90: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  4981  0B11  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  4982  0B12  1D03               	skipz
  4983  0B13  2B08               	goto	l2876
  4984  0B14  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  4985  0B15                     L1:	
  4986  0B15  00A0               	movwf	_rfTrcvStatus^(0+128)
  4987                           
  4988                           ;mrf49xa_data.c: 97: }
  4989                           ;mrf49xa_data.c: 98: rfTrcvStatus.hwRx->packet.size = data;
  4990  0B16  0A20               	incf	_rfTrcvStatus^(0+128),w
  4991  0B17  0086               	movwf	6
  4992  0B18  0187               	clrf	7
  4993                           
  4994                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->crc = 0;
  4995  0B19  27C0  3188         	fcall	PL16	;call to abstracted procedure
  4996  0B1B  3E16               	addlw	22
  4997  0B1C  0086               	movwf	6
  4998  0B1D  0181               	clrf	1
  4999                           
  5000                           ;mrf49xa_data.c: 100: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  5001  0B1E  0820               	movf	_rfTrcvStatus^(0+128),w
  5002  0B1F  0086               	movwf	6
  5003  0B20  3004               	movlw	4
  5004  0B21  0081               	movwf	1
  5005                           
  5006                           ;mrf49xa_data.c: 102: rfTrcvStatus.state = RECV_DATA;
  5007  0B22  3002               	movlw	2
  5008  0B23  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  5009                           
  5010                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwByte = 1;
  5011  0B24  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5012  0B25  3980               	andlw	-128
  5013  0B26  3801               	iorlw	1
  5014  0B27  2B52               	goto	L2
  5015  0B28                     l2898:	
  5016                           ;mrf49xa_data.c: 105: break;
  5017                           
  5018                           
  5019                           ;mrf49xa_data.c: 109: data = Mrf49RxByte();
  5020  0B28  23BB  3188         	fcall	_Mrf49RxByte
  5021  0B2A  00A5               	movwf	Mrf49xaServe@data
  5022                           
  5023                           ;mrf49xa_data.c: 113: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  5024  0B2B  1BBE               	btfsc	_mrf49Status+1,7
  5025  0B2C  2B33               	goto	l2906
  5026                           
  5027                           ;mrf49xa_data.c: 114: {
  5028                           ;mrf49xa_data.c: 115: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5029  0B2D  0021               	movlb	1	; select bank1
  5030  0B2E  0820               	movf	_rfTrcvStatus^(0+128),w
  5031  0B2F  0086               	movwf	6
  5032  0B30  3005               	movlw	5
  5033  0B31  0187               	clrf	7
  5034  0B32  2B43               	goto	L3
  5035  0B33                     l2906:	
  5036                           
  5037                           ;mrf49xa_data.c: 118: }
  5038                           ;mrf49xa_data.c: 120: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  5039  0B33  0021               	movlb	1	; select bank1
  5040  0B34  0A20               	incf	_rfTrcvStatus^(0+128),w
  5041  0B35  0086               	movwf	6
  5042  0B36  0187               	clrf	7
  5043  0B37  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5044  0B38  397F               	andlw	127
  5045  0B39  0601               	xorwf	1,w
  5046  0B3A  1D03               	skipz
  5047  0B3B  2B45               	goto	l2912
  5048                           
  5049                           ;mrf49xa_data.c: 121: {
  5050                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->crc = data;
  5051  0B3C  0820               	movf	_rfTrcvStatus^(0+128),w
  5052  0B3D  3E16               	addlw	22
  5053  0B3E  0086               	movwf	6
  5054                           
  5055                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5056  0B3F  27C0  3188         	fcall	PL16	;call to abstracted procedure
  5057  0B41  0086               	movwf	6
  5058  0B42  3005               	movlw	5
  5059  0B43                     L3:	
  5060  0B43  0081               	movwf	1
  5061  0B44  2B08               	goto	l2876
  5062  0B45                     l2912:	
  5063                           
  5064                           ;mrf49xa_data.c: 135: else
  5065                           ;mrf49xa_data.c: 136: {
  5066                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  5067  0B45  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5068  0B46  397F               	andlw	127
  5069  0B47  0720               	addwf	_rfTrcvStatus^(0+128),w
  5070  0B48  0020               	movlb	0	; select bank0
  5071  0B49  00A4               	movwf	??_Mrf49xaServe
  5072  0B4A  0A24               	incf	??_Mrf49xaServe,w
  5073  0B4B  0086               	movwf	6
  5074  0B4C  0187               	clrf	7
  5075  0B4D  0825               	movf	Mrf49xaServe@data,w
  5076  0B4E  0081               	movwf	1
  5077  0B4F  0021               	movlb	1	; select bank1
  5078  0B50  27B3  3188         	fcall	PL12	;call to abstracted procedure
  5079  0B52                     L2:	
  5080  0B52  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5081  0B53  2BB1               	goto	l2950
  5082  0B54                     l2916:	
  5083                           
  5084                           ;mrf49xa_data.c: 143: rfTrcvStatus.hwByte++;
  5085  0B54  27B3  3188         	fcall	PL12	;call to abstracted procedure
  5086  0B56  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5087                           
  5088                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  5089  0B57  397F               	andlw	127
  5090  0B58  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
  5091  0B59  1D03               	skipz
  5092  0B5A  2B90               	goto	l2944
  5093                           
  5094                           ;mrf49xa_data.c: 146: rfTrcvStatus.hwByte = 49;
  5095  0B5B  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5096  0B5C  3980               	andlw	-128
  5097  0B5D  3831               	iorlw	49
  5098  0B5E  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5099  0B5F  2B90               	goto	l2944
  5100  0B60                     l2920:	
  5101                           
  5102                           ;mrf49xa_data.c: 151: Mrf49TxByte(0x2D);
  5103  0B60  302D               	movlw	45
  5104  0B61  23B6  3188         	fcall	_Mrf49TxByte
  5105                           
  5106                           ;mrf49xa_data.c: 152: break;
  5107  0B63  2BB1               	goto	l2950
  5108  0B64                     l2922:	
  5109                           
  5110                           ;mrf49xa_data.c: 155: Mrf49TxByte(0xD4);
  5111  0B64  30D4               	movlw	212
  5112  0B65  23B6  3188         	fcall	_Mrf49TxByte
  5113                           
  5114                           ;mrf49xa_data.c: 156: rfTrcvStatus.hwByte = 0x7F;
  5115  0B67  307F               	movlw	127
  5116  0B68  0021               	movlb	1	; select bank1
  5117  0B69  04EA               	iorwf	(_rfTrcvStatus^(0+128)+74),f
  5118                           
  5119                           ;mrf49xa_data.c: 157: break;
  5120  0B6A  2BB1               	goto	l2950
  5121  0B6B                     l2926:	
  5122                           
  5123                           ;mrf49xa_data.c: 161: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  5124  0B6B  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5125  0B6C  397F               	andlw	127
  5126  0B6D  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  5127  0B6E  0086               	movwf	6
  5128  0B6F  0187               	clrf	7
  5129  0B70  0801               	movf	1,w
  5130  0B71  23B6  3188         	fcall	_Mrf49TxByte
  5131                           
  5132                           ;mrf49xa_data.c: 162: break;
  5133  0B73  2BB1               	goto	l2950
  5134  0B74                     l2928:	
  5135                           
  5136                           ;mrf49xa_data.c: 165: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  5137  0B74  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  5138  0B75  23B6  3188         	fcall	_Mrf49TxByte
  5139                           
  5140                           ;mrf49xa_data.c: 166: break;
  5141  0B77  2BB1               	goto	l2950
  5142  0B78                     l2930:	
  5143                           
  5144                           ;mrf49xa_data.c: 169: Mrf49TxByte(0x00);
  5145  0B78  3000               	movlw	0
  5146  0B79  23B6  3188         	fcall	_Mrf49TxByte
  5147                           
  5148                           ;mrf49xa_data.c: 170: break;
  5149  0B7B  2BB1               	goto	l2950
  5150  0B7C                     l2932:	
  5151                           
  5152                           ;mrf49xa_data.c: 173: Mrf49TxByte(0x00);
  5153  0B7C  3000               	movlw	0
  5154  0B7D  23B6  3188         	fcall	_Mrf49TxByte
  5155                           
  5156                           ;mrf49xa_data.c: 174: Mrf49xaModeRx();
  5157  0B7F  23BD  3188         	fcall	_Mrf49xaModeRx
  5158                           
  5159                           ;mrf49xa_data.c: 176: rfTrcvStatus.txPacket.retry = 0;
  5160  0B81  30F0               	movlw	-16
  5161  0B82  0021               	movlb	1	; select bank1
  5162  0B83  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  5163                           
  5164                           ;mrf49xa_data.c: 178: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  5165  0B84  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  5166  0B85  0C89               	rrf	9,f
  5167  0B86  0C89               	rrf	9,f
  5168  0B87  3903               	andlw	3
  5169  0B88  3A01               	xorlw	1
  5170  0B89  1D03               	skipz
  5171  0B8A  2B8E               	goto	l2940
  5172                           
  5173                           ;mrf49xa_data.c: 179: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  5174  0B8B  3003               	movlw	3
  5175  0B8C  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  5176  0B8D  2BB1               	goto	l2950
  5177  0B8E                     l2940:	
  5178                           
  5179                           ;mrf49xa_data.c: 180: else
  5180                           ;mrf49xa_data.c: 181: rfTrcvStatus.txPacket.state = PKT_FREE;
  5181  0B8E  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  5182  0B8F  2BB1               	goto	l2950
  5183  0B90                     l2944:	
  5184  0B90  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5185  0B91  397F               	andlw	127
  5186                           
  5187                           ; Switch size 1, requested type "space"
  5188                           ; Number of cases is 5, Range of values is 49 to 101
  5189                           ; switch strategies available:
  5190                           ; Name         Instructions Cycles
  5191                           ; simple_byte           16     9 (average)
  5192                           ; direct_byte          115     9 (fixed)
  5193                           ; jumptable            263     9 (fixed)
  5194                           ;	Chosen strategy is simple_byte
  5195  0B92  3A31               	xorlw	49	; case 49
  5196  0B93  1903               	skipnz
  5197  0B94  2B74               	goto	l2928
  5198  0B95  3A03               	xorlw	3	; case 50
  5199  0B96  1903               	skipnz
  5200  0B97  2B78               	goto	l2930
  5201  0B98  3A01               	xorlw	1	; case 51
  5202  0B99  1903               	skipnz
  5203  0B9A  2B7C               	goto	l2932
  5204  0B9B  3A57               	xorlw	87	; case 100
  5205  0B9C  1903               	skipnz
  5206  0B9D  2B60               	goto	l2920
  5207  0B9E  3A01               	xorlw	1	; case 101
  5208  0B9F  1903               	skipnz
  5209  0BA0  2B64               	goto	l2922
  5210  0BA1  2B6B               	goto	l2926
  5211  0BA2                     l2948:	
  5212  0BA2  0021               	movlb	1	; select bank1
  5213  0BA3  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  5214                           
  5215                           ; Switch size 1, requested type "space"
  5216                           ; Number of cases is 4, Range of values is 0 to 3
  5217                           ; switch strategies available:
  5218                           ; Name         Instructions Cycles
  5219                           ; simple_byte           13     7 (average)
  5220                           ; direct_byte           14     6 (fixed)
  5221                           ; jumptable            260     6 (fixed)
  5222                           ;	Chosen strategy is simple_byte
  5223  0BA4  3A00               	xorlw	0	; case 0
  5224  0BA5  1903               	skipnz
  5225  0BA6  2B00               	goto	l2870
  5226  0BA7  3A01               	xorlw	1	; case 1
  5227  0BA8  1903               	skipnz
  5228  0BA9  2B03               	goto	l2872
  5229  0BAA  3A03               	xorlw	3	; case 2
  5230  0BAB  1903               	skipnz
  5231  0BAC  2B28               	goto	l2898
  5232  0BAD  3A01               	xorlw	1	; case 3
  5233  0BAE  1903               	skipnz
  5234  0BAF  2B54               	goto	l2916
  5235  0BB0  2BB1               	goto	l2950
  5236  0BB1                     l2950:	
  5237                           
  5238                           ;mrf49xa_data.c: 188: }
  5239                           ;mrf49xa_data.c: 202: return PORTAbits.RA2 == 1 ? 1 : 0;
  5240  0BB1  0020               	movlb	0	; select bank0
  5241  0BB2  0C0C               	rrf	12,w	;volatile
  5242  0BB3  0C89               	rrf	9,f
  5243  0BB4  3901               	andlw	1
  5244  0BB5  0008               	return
  5245  0BB6                     __end_of_Mrf49xaServe:	
  5246  0BB6                     __ptext36:	
  5247 ;; *************** function _Mrf49TxByte *****************
  5248 ;; Defined at:
  5249 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;  byte            1    wreg     unsigned char 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  byte            1    3[BANK0 ] unsigned char 
  5254 ;; Return value:  Size  Location     Type
  5255 ;;		None               void
  5256 ;; Registers used:
  5257 ;;		wreg, status,2, status,0, pclath, cstack
  5258 ;; Tracked objects:
  5259 ;;		On entry : 1E/1
  5260 ;;		On exit  : 1F/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5263 ;;      Params:         0       0       0       0
  5264 ;;      Locals:         0       1       0       0
  5265 ;;      Temps:          0       0       0       0
  5266 ;;      Totals:         0       1       0       0
  5267 ;;Total ram usage:        1 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    7
  5270 ;; This function calls:
  5271 ;;		_Mrf49TxCmd
  5272 ;; This function is called by:
  5273 ;;		_Mrf49xaServe
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           
  5278                           ;psect for function _Mrf49TxByte
  5279  0BB6                     _Mrf49TxByte:	
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  5283                           ;Mrf49TxByte@byte stored from wreg
  5284  0BB6  0020               	movlb	0	; select bank0
  5285  0BB7  00A3               	movwf	Mrf49TxByte@byte
  5286                           
  5287                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  5288  0BB8  00A1               	movwf	Mrf49TxCmd@val
  5289  0BB9  30B8               	movlw	184
  5290  0BBA  2BE5               	ljmp	_Mrf49TxCmd
  5291  0BBB                     __end_of_Mrf49TxByte:	
  5292  0BBB                     __ptext39:	
  5293 ;; *************** function _Mrf49RxByte *****************
  5294 ;; Defined at:
  5295 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;		None
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;		None
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  1    wreg      unsigned char 
  5302 ;; Registers used:
  5303 ;;		wreg, status,2, status,0, pclath, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 1E/1
  5306 ;;		On exit  : 1F/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5309 ;;      Params:         0       0       0       0
  5310 ;;      Locals:         0       0       0       0
  5311 ;;      Temps:          0       0       0       0
  5312 ;;      Totals:         0       0       0       0
  5313 ;;Total ram usage:        0 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    7
  5316 ;; This function calls:
  5317 ;;		_Mrf49RxCmd
  5318 ;; This function is called by:
  5319 ;;		_Mrf49xaServe
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           
  5324                           ;psect for function _Mrf49RxByte
  5325  0BBB                     _Mrf49RxByte:	
  5326                           
  5327                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  5331  0BBB  30B0               	movlw	176
  5332  0BBC  2F6E               	ljmp	_Mrf49RxCmd
  5333  0BBD                     __end_of_Mrf49RxByte:	
  5334  0BBD                     __ptext35:	
  5335 ;; *************** function _Mrf49xaModeRx *****************
  5336 ;; Defined at:
  5337 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  k               1    3[BANK0 ] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;		None               void
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0, pclath, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 1E/1
  5348 ;;		On exit  : 1F/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5351 ;;      Params:         0       0       0       0
  5352 ;;      Locals:         0       1       0       0
  5353 ;;      Temps:          0       0       0       0
  5354 ;;      Totals:         0       1       0       0
  5355 ;;Total ram usage:        1 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    7
  5358 ;; This function calls:
  5359 ;;		_Mrf49TxCmd
  5360 ;; This function is called by:
  5361 ;;		_Mrf49xaReboot
  5362 ;;		_Mrf49xaInit
  5363 ;;		_Mrf49xaServe
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           
  5368                           ;psect for function _Mrf49xaModeRx
  5369  0BBD                     _Mrf49xaModeRx:	
  5370  0BBD                     l2632:	
  5371                           ;incstack = 0
  5372                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  5373                           
  5374                           
  5375                           ;mrf49xa.c: 101: UI08_t k;
  5376                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  5377  0BBD  0020               	movlb	0	; select bank0
  5378  0BBE  300C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5379  0BBF  01A3               	clrf	Mrf49xaModeRx@k
  5380  0BC0  3182               	movlp	high __stringtab
  5381  0BC1  000A               	callw
  5382  0BC2  3188               	pagesel	$	;select current page
  5383  0BC3  3800               	iorlw	0
  5384  0BC4  1903               	btfsc	3,2
  5385  0BC5  2BDA               	goto	l211
  5386  0BC6                     l2638:	
  5387  0BC6  3523               	lslf	Mrf49xaModeRx@k,w
  5388  0BC7  3E30               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  5389  0BC8  3182               	movlp	high __stringtab
  5390  0BC9  000A               	callw
  5391  0BCA  3188               	pagesel	$	;select current page
  5392  0BCB  00A1               	movwf	Mrf49TxCmd@val
  5393  0BCC  3523               	lslf	Mrf49xaModeRx@k,w
  5394  0BCD  3E2F               	addlw	low (_mrfRegset_Rx| (0+32768))
  5395  0BCE  3182               	movlp	high __stringtab
  5396  0BCF  000A               	callw
  5397  0BD0  3188               	pagesel	$	;select current page
  5398  0BD1  23E5               	fcall	_Mrf49TxCmd
  5399  0BD2  300C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5400  0BD3  0AA3               	incf	Mrf49xaModeRx@k,f
  5401  0BD4  3182               	movlp	high __stringtab
  5402  0BD5  000A               	callw
  5403  0BD6  3188               	pagesel	$	;select current page
  5404  0BD7  0223               	subwf	Mrf49xaModeRx@k,w
  5405  0BD8  1C03               	skipc
  5406  0BD9  2BC6               	goto	l2638
  5407  0BDA                     l211:	
  5408                           
  5409                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  5410  0BDA  0021               	movlb	1	; select bank1
  5411  0BDB  3080               	movlw	-128
  5412  0BDC  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  5413  0BDD  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  5414                           
  5415                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  5416  0BDE  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
  5417                           
  5418                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  5419  0BDF  0020               	movlb	0	; select bank0
  5420  0BE0  13BD               	bcf	_mrf49Status,7
  5421  0BE1  0008               	return
  5422  0BE2                     __end_of_Mrf49xaModeRx:	
  5423  0BE2                     __ptext34:	
  5424 ;; *************** function _Mrf49xaNeedsReset *****************
  5425 ;; Defined at:
  5426 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;		None
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;		None               void
  5433 ;; Registers used:
  5434 ;;		None
  5435 ;; Tracked objects:
  5436 ;;		On entry : 1E/1
  5437 ;;		On exit  : 1F/1
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5440 ;;      Params:         0       0       0       0
  5441 ;;      Locals:         0       0       0       0
  5442 ;;      Temps:          0       0       0       0
  5443 ;;      Totals:         0       0       0       0
  5444 ;;Total ram usage:        0 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:    5
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_Mrf49xaServe
  5451 ;;		_main
  5452 ;; This function uses a non-reentrant model
  5453 ;;
  5454                           
  5455                           
  5456                           ;psect for function _Mrf49xaNeedsReset
  5457  0BE2                     _Mrf49xaNeedsReset:	
  5458                           
  5459                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  5460                           
  5461                           ;incstack = 0
  5462                           ; Regs used in _Mrf49xaNeedsReset: []
  5463  0BE2  0021               	movlb	1	; select bank1
  5464  0BE3  17EA               	bsf	(_rfTrcvStatus^(0+128)+74),7
  5465  0BE4  0008               	return
  5466  0BE5                     __end_of_Mrf49xaNeedsReset:	
  5467  0BE5                     __ptext37:	
  5468 ;; *************** function _Mrf49TxCmd *****************
  5469 ;; Defined at:
  5470 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  cmd             1    wreg     unsigned char 
  5473 ;;  val             1    1[BANK0 ] unsigned char 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  cmd             1    2[BANK0 ] unsigned char 
  5476 ;; Return value:  Size  Location     Type
  5477 ;;		None               void
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0, pclath, cstack
  5480 ;; Tracked objects:
  5481 ;;		On entry : 1F/0
  5482 ;;		On exit  : 1F/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5485 ;;      Params:         0       1       0       0
  5486 ;;      Locals:         0       1       0       0
  5487 ;;      Temps:          0       0       0       0
  5488 ;;      Totals:         0       2       0       0
  5489 ;;Total ram usage:        2 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    6
  5492 ;; This function calls:
  5493 ;;		_Mrf49SpiTx
  5494 ;; This function is called by:
  5495 ;;		_Mrf49xaModeRx
  5496 ;;		_Mrf49xaModeTx
  5497 ;;		_Mrf49xaModeSleep
  5498 ;;		_Mrf49xaInit
  5499 ;;		_Mrf49TxByte
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           
  5504                           ;psect for function _Mrf49TxCmd
  5505  0BE5                     _Mrf49TxCmd:	
  5506                           
  5507                           ;incstack = 0
  5508                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  5509                           ;Mrf49TxCmd@cmd stored from wreg
  5510  0BE5  00A2               	movwf	Mrf49TxCmd@cmd
  5511                           
  5512                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  5513  0BE6  130E               	bcf	14,6	;volatile
  5514                           
  5515                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  5516  0BE7  0822               	movf	Mrf49TxCmd@cmd,w
  5517  0BE8  26D4  3188         	fcall	_Mrf49SpiTx
  5518                           
  5519                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  5520  0BEA  0821               	movf	Mrf49TxCmd@val,w
  5521  0BEB  26D4               	fcall	_Mrf49SpiTx
  5522                           
  5523                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  5524  0BEC  170E               	bsf	14,6	;volatile
  5525  0BED  0008               	return
  5526  0BEE                     __end_of_Mrf49TxCmd:	
  5527  0BEE                     __ptext38:	
  5528 ;; *************** function _Mrf49RxSts *****************
  5529 ;; Defined at:
  5530 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;		None               void
  5537 ;; Registers used:
  5538 ;;		wreg, status,2, pclath, cstack
  5539 ;; Tracked objects:
  5540 ;;		On entry : 1E/0
  5541 ;;		On exit  : 1F/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5544 ;;      Params:         0       0       0       0
  5545 ;;      Locals:         0       0       0       0
  5546 ;;      Temps:          0       0       0       0
  5547 ;;      Totals:         0       0       0       0
  5548 ;;Total ram usage:        0 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    6
  5551 ;; This function calls:
  5552 ;;		_Mrf49SpiRx
  5553 ;; This function is called by:
  5554 ;;		_Mrf49xaTick
  5555 ;;		_Mrf49xaServe
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _Mrf49RxSts
  5561  0BEE                     _Mrf49RxSts:	
  5562                           
  5563                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  5564                           
  5565                           ;incstack = 0
  5566                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  5567  0BEE  120B               	bcf	11,4	;volatile
  5568                           
  5569                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  5570  0BEF  0020               	movlb	0	; select bank0
  5571  0BF0  130E               	bcf	14,6	;volatile
  5572                           
  5573                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  5574  0BF1  2690  3188         	fcall	_Mrf49SpiRx
  5575  0BF3  00BD               	movwf	_mrf49Status
  5576                           
  5577                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  5578  0BF4  2690               	fcall	_Mrf49SpiRx
  5579  0BF5  00BE               	movwf	_mrf49Status+1
  5580                           
  5581                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  5582  0BF6  170E               	bsf	14,6	;volatile
  5583                           
  5584                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  5585  0BF7  160B               	bsf	11,4	;volatile
  5586  0BF8  0008               	return
  5587  0BF9                     __end_of_Mrf49RxSts:	
  5588  0BF9                     __ptext23:	
  5589 ;; *************** function _PwrI2cSleep *****************
  5590 ;; Defined at:
  5591 ;;		line 73 in file "../../../src/node/power.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;		None
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;		None
  5596 ;; Return value:  Size  Location     Type
  5597 ;;		None               void
  5598 ;; Registers used:
  5599 ;;		None
  5600 ;; Tracked objects:
  5601 ;;		On entry : 1F/2
  5602 ;;		On exit  : 1F/1
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5605 ;;      Params:         0       0       0       0
  5606 ;;      Locals:         0       0       0       0
  5607 ;;      Temps:          0       0       0       0
  5608 ;;      Totals:         0       0       0       0
  5609 ;;Total ram usage:        0 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    5
  5612 ;; This function calls:
  5613 ;;		Nothing
  5614 ;; This function is called by:
  5615 ;;		_main
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           
  5620                           ;psect for function _PwrI2cSleep
  5621  0BF9                     _PwrI2cSleep:	
  5622                           
  5623                           ;power.c: 75: LATBbits.LATB6 = 1;
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in _PwrI2cSleep: []
  5627                           
  5628                           ;power.c: 76: LATBbits.LATB4 = 1;
  5629                           
  5630                           ;power.c: 78: TRISBbits.TRISB6 = 0;
  5631                           
  5632                           ;power.c: 79: TRISBbits.TRISB4 = 0;
  5633  0BF9  27CC               	fcall	PL20	;call to abstracted procedure
  5634  0BFA  0008               	return
  5635  0BFB                     __end_of_PwrI2cSleep:	
  5636  0BFB                     __ptext14:	
  5637 ;; *************** function _PwrSensorSleep *****************
  5638 ;; Defined at:
  5639 ;;		line 158 in file "../../../src/node/power.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;		None
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;		None
  5644 ;; Return value:  Size  Location     Type
  5645 ;;		None               void
  5646 ;; Registers used:
  5647 ;;		None
  5648 ;; Tracked objects:
  5649 ;;		On entry : 1E/1
  5650 ;;		On exit  : 1F/2
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5653 ;;      Params:         0       0       0       0
  5654 ;;      Locals:         0       0       0       0
  5655 ;;      Temps:          0       0       0       0
  5656 ;;      Totals:         0       0       0       0
  5657 ;;Total ram usage:        0 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    5
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_main
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           
  5668                           ;psect for function _PwrSensorSleep
  5669  0BFB                     _PwrSensorSleep:	
  5670                           
  5671                           ;power.c: 160: LATCbits.LATC2 = 0;
  5672                           
  5673                           ;incstack = 0
  5674                           ; Regs used in _PwrSensorSleep: []
  5675  0BFB  0022               	movlb	2	; select bank2
  5676  0BFC  110E               	bcf	14,2	;volatile
  5677  0BFD  0008               	return
  5678  0BFE                     __end_of_PwrSensorSleep:	
  5679  0BFE                     __ptext57:	
  5680 ;; *************** function _Mrf49xaFreePacket *****************
  5681 ;; Defined at:
  5682 ;;		line 85 in file "../../../src/devices/mrf49xa_packet.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5685 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5688 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;		None               void
  5691 ;; Registers used:
  5692 ;;		wreg, fsr1l, fsr1h, status,2
  5693 ;; Tracked objects:
  5694 ;;		On entry : 1F/0
  5695 ;;		On exit  : 1F/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5698 ;;      Params:         0       0       0       0
  5699 ;;      Locals:         0       1       0       0
  5700 ;;      Temps:          0       0       0       0
  5701 ;;      Totals:         0       1       0       0
  5702 ;;Total ram usage:        1 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    5
  5705 ;; This function calls:
  5706 ;;		Nothing
  5707 ;; This function is called by:
  5708 ;;		_Mrf49xaTick
  5709 ;;		_HandlePacket
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           
  5714                           ;psect for function _Mrf49xaFreePacket
  5715  0BFE                     _Mrf49xaFreePacket:	
  5716                           
  5717                           ;incstack = 0
  5718                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  5719                           ;Mrf49xaFreePacket@packet stored from wreg
  5720  0BFE  00A0               	movwf	Mrf49xaFreePacket@packet
  5721                           
  5722                           ;mrf49xa_packet.c: 87: packet->state = PKT_FREE;
  5723  0BFF  0086               	movwf	6
  5724  0C00  0187               	clrf	7
  5725  0C01  0181               	clrf	1
  5726  0C02  0008               	return
  5727  0C03                     __end_of_Mrf49xaFreePacket:	
  5728  0C03                     __ptext22:	
  5729 ;; *************** function _PwrI2cWake *****************
  5730 ;; Defined at:
  5731 ;;		line 82 in file "../../../src/node/power.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;		None
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;		None               void
  5738 ;; Registers used:
  5739 ;;		None
  5740 ;; Tracked objects:
  5741 ;;		On entry : 1F/2
  5742 ;;		On exit  : 1F/2
  5743 ;;		Unchanged: 1F/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5745 ;;      Params:         0       0       0       0
  5746 ;;      Locals:         0       0       0       0
  5747 ;;      Temps:          0       0       0       0
  5748 ;;      Totals:         0       0       0       0
  5749 ;;Total ram usage:        0 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    5
  5752 ;; This function calls:
  5753 ;;		Nothing
  5754 ;; This function is called by:
  5755 ;;		_main
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function _PwrI2cWake
  5761  0C03                     _PwrI2cWake:	
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in _PwrI2cWake: []
  5765  0C03  0008               	return
  5766  0C04                     __end_of_PwrI2cWake:	
  5767  0C04                     __ptext15:	
  5768 ;; *************** function _PwrSensorInit *****************
  5769 ;; Defined at:
  5770 ;;		line 151 in file "../../../src/node/power.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;		None
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;		None
  5775 ;; Return value:  Size  Location     Type
  5776 ;;		None               void
  5777 ;; Registers used:
  5778 ;;		None
  5779 ;; Tracked objects:
  5780 ;;		On entry : 17F/1
  5781 ;;		On exit  : 17F/2
  5782 ;;		Unchanged: 160/0
  5783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5784 ;;      Params:         0       0       0       0
  5785 ;;      Locals:         0       0       0       0
  5786 ;;      Temps:          0       0       0       0
  5787 ;;      Totals:         0       0       0       0
  5788 ;;Total ram usage:        0 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    5
  5791 ;; This function calls:
  5792 ;;		Nothing
  5793 ;; This function is called by:
  5794 ;;		_main
  5795 ;; This function uses a non-reentrant model
  5796 ;;
  5797                           
  5798                           
  5799                           ;psect for function _PwrSensorInit
  5800  0C04                     _PwrSensorInit:	
  5801                           
  5802                           ;power.c: 153: TRISCbits.TRISC2 = 0;
  5803                           
  5804                           ;incstack = 0
  5805                           ; Regs used in _PwrSensorInit: []
  5806  0C04  110E               	bcf	14,2	;volatile
  5807                           
  5808                           ;power.c: 155: LATCbits.LATC2 = 0;
  5809  0C05  0022               	movlb	2	; select bank2
  5810  0C06  110E               	bcf	14,2	;volatile
  5811  0C07  0008               	return
  5812  0C08                     __end_of_PwrSensorInit:	
  5813  0C08                     __ptext13:	
  5814 ;; *************** function _PwrSensorWake *****************
  5815 ;; Defined at:
  5816 ;;		line 163 in file "../../../src/node/power.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;		None
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;		None
  5821 ;; Return value:  Size  Location     Type
  5822 ;;		None               void
  5823 ;; Registers used:
  5824 ;;		None
  5825 ;; Tracked objects:
  5826 ;;		On entry : 1F/0
  5827 ;;		On exit  : 1F/2
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5830 ;;      Params:         0       0       0       0
  5831 ;;      Locals:         0       0       0       0
  5832 ;;      Temps:          0       0       0       0
  5833 ;;      Totals:         0       0       0       0
  5834 ;;Total ram usage:        0 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    5
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_main
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _PwrSensorWake
  5846  0C08                     _PwrSensorWake:	
  5847                           
  5848                           ;power.c: 165: LATCbits.LATC2 = 1;
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _PwrSensorWake: []
  5852  0C08  0022               	movlb	2	; select bank2
  5853  0C09  150E               	bsf	14,2	;volatile
  5854  0C0A  0008               	return
  5855  0C0B                     __end_of_PwrSensorWake:	
  5856  0C0B                     __ptext2:	
  5857 ;; *************** function _RfSendPowerState *****************
  5858 ;; Defined at:
  5859 ;;		line 13 in file "../../../src/rfstack/packets.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  s               2    6[BANK0 ] unsigned int 
  5864 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  5865 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;		None               void
  5868 ;; Registers used:
  5869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 1F/0
  5872 ;;		On exit  : 1F/1
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5875 ;;      Params:         0       0       0       0
  5876 ;;      Locals:         0       3       0       0
  5877 ;;      Temps:          0       0       0       0
  5878 ;;      Totals:         0       3       0       0
  5879 ;;Total ram usage:        3 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    7
  5882 ;; This function calls:
  5883 ;;		_AdcSample
  5884 ;;		_Mrf49xaAllocPacket
  5885 ;;		_Mrf49xaTxPacket
  5886 ;;		_PwrAdcSleep
  5887 ;;		_PwrAdcWake
  5888 ;; This function is called by:
  5889 ;;		_main
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           
  5894                           ;psect for function _RfSendPowerState
  5895  0C0B                     _RfSendPowerState:	
  5896                           
  5897                           ;packets.c: 15: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in _RfSendPowerState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5901  0C0B  24C7  3188         	fcall	_Mrf49xaAllocPacket
  5902  0C0D  0020               	movlb	0	; select bank0
  5903  0C0E  00A8               	movwf	RfSendPowerState@packet
  5904                           
  5905                           ;packets.c: 17: packet->packet.size = 4;
  5906  0C0F  0A28               	incf	RfSendPowerState@packet,w
  5907  0C10  0086               	movwf	6
  5908  0C11  3004               	movlw	4
  5909  0C12  0187               	clrf	7
  5910  0C13  0081               	movwf	1
  5911                           
  5912                           ;packets.c: 18: packet->packet.id = RF_POWER_STATUS;
  5913  0C14  0828               	movf	RfSendPowerState@packet,w
  5914  0C15  3E04               	addlw	4
  5915  0C16  0086               	movwf	6
  5916  0C17  30A3               	movlw	163
  5917  0C18  0081               	movwf	1
  5918                           
  5919                           ;packets.c: 19: packet->packet.dst = 0xFF;
  5920  0C19  0828               	movf	RfSendPowerState@packet,w
  5921  0C1A  3E03               	addlw	3
  5922  0C1B  0086               	movwf	6
  5923  0C1C  30FF               	movlw	255
  5924  0C1D  0081               	movwf	1
  5925                           
  5926                           ;packets.c: 21: packet->packet.data[0] = coldBoot; coldBoot = 0;
  5927  0C1E  0828               	movf	RfSendPowerState@packet,w
  5928  0C1F  3E06               	addlw	6
  5929  0C20  0086               	movwf	6
  5930  0C21  083F               	movf	_coldBoot,w
  5931  0C22  0081               	movwf	1
  5932  0C23  01BF               	clrf	_coldBoot
  5933                           
  5934                           ;packets.c: 22: packet->packet.data[1] = 0;
  5935  0C24  0828               	movf	RfSendPowerState@packet,w
  5936  0C25  3E07               	addlw	7
  5937  0C26  0086               	movwf	6
  5938  0C27  0181               	clrf	1
  5939                           
  5940                           ;packets.c: 24: PwrAdcWake();
  5941  0C28  247E  3188         	fcall	_PwrAdcWake
  5942                           
  5943                           ;packets.c: 25: uint16_t s = AdcSample(ADC_FVR);
  5944  0C2A  301F               	movlw	31
  5945  0C2B  2444  3188         	fcall	_AdcSample
  5946  0C2D  0823               	movf	?_AdcSample+1,w
  5947  0C2E  00A7               	movwf	RfSendPowerState@s+1
  5948  0C2F  0822               	movf	?_AdcSample,w
  5949  0C30  00A6               	movwf	RfSendPowerState@s
  5950                           
  5951                           ;packets.c: 26: PwrAdcSleep();
  5952  0C31  2479  3188         	fcall	_PwrAdcSleep
  5953                           
  5954                           ;packets.c: 27: packet->packet.data[2] = s & 0xFF;
  5955  0C33  0020               	movlb	0	; select bank0
  5956  0C34  0828               	movf	RfSendPowerState@packet,w
  5957  0C35  3E08               	addlw	8
  5958  0C36  0086               	movwf	6
  5959  0C37  0187               	clrf	7
  5960  0C38  0826               	movf	RfSendPowerState@s,w
  5961  0C39  0081               	movwf	1
  5962                           
  5963                           ;packets.c: 28: packet->packet.data[3] = s >> 8;
  5964  0C3A  0828               	movf	RfSendPowerState@packet,w
  5965  0C3B  3E09               	addlw	9
  5966  0C3C  0086               	movwf	6
  5967  0C3D  0827               	movf	RfSendPowerState@s+1,w
  5968  0C3E  0081               	movwf	1
  5969                           
  5970                           ;packets.c: 30: Mrf49xaTxPacket(packet, 0, 1);
  5971  0C3F  01A0               	clrf	Mrf49xaTxPacket@response
  5972  0C40  01A1               	clrf	Mrf49xaTxPacket@needAck
  5973  0C41  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  5974  0C42  0828               	movf	RfSendPowerState@packet,w
  5975  0C43  2D44               	ljmp	_Mrf49xaTxPacket
  5976  0C44                     __end_of_RfSendPowerState:	
  5977  0C44                     __ptext8:	
  5978 ;; *************** function _AdcSample *****************
  5979 ;; Defined at:
  5980 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  ch              1    wreg     unsigned char 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  ch              1    5[BANK0 ] unsigned char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  2    2[BANK0 ] unsigned int 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, status,0, pclath, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 1F/1
  5991 ;;		On exit  : 1F/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5994 ;;      Params:         0       2       0       0
  5995 ;;      Locals:         0       1       0       0
  5996 ;;      Temps:          0       1       0       0
  5997 ;;      Totals:         0       4       0       0
  5998 ;;Total ram usage:        4 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    6
  6001 ;; This function calls:
  6002 ;;		_AdcChSelect
  6003 ;;		_AdcGetResult
  6004 ;;		_AdcGo
  6005 ;;		_AdcIsBusy
  6006 ;; This function is called by:
  6007 ;;		_RfSendPowerState
  6008 ;;		_main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _AdcSample
  6014  0C44                     _AdcSample:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  6018                           ;AdcSample@ch stored from wreg
  6019  0C44  0020               	movlb	0	; select bank0
  6020  0C45  00A5               	movwf	AdcSample@ch
  6021                           
  6022                           ;adc16.c: 83: AdcChSelect(ch);
  6023  0C46  0825               	movf	AdcSample@ch,w
  6024  0C47  2472  3188         	fcall	_AdcChSelect
  6025                           
  6026                           ;adc16.c: 86: AdcGo();
  6027  0C49  246C  3188         	fcall	_AdcGo
  6028                           
  6029                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  6030  0C4B  30C7               	movlw	199
  6031  0C4C  0020               	movlb	0	; select bank0
  6032  0C4D  00A4               	movwf	??_AdcSample
  6033  0C4E                     u2457:	
  6034  0C4E  0000               	nop
  6035  0C4F  0BA4               	decfsz	??_AdcSample,f
  6036  0C50  2C4E               	goto	u2457
  6037  0C51  3200               	nop2	;nop
  6038  0C52  0000               	nop
  6039  0C53                     l3068:	
  6040                           ;adc16.c: 88: while (AdcIsBusy());
  6041                           
  6042  0C53  246E  3188         	fcall	_AdcIsBusy
  6043  0C55  3800               	iorlw	0
  6044  0C56  1D03               	skipz
  6045  0C57  2C53               	goto	l3068
  6046                           
  6047                           ;adc16.c: 89: AdcGo();
  6048  0C58  246C  3188         	fcall	_AdcGo
  6049  0C5A                     l3072:	
  6050                           ;adc16.c: 90: while (AdcIsBusy());
  6051                           
  6052  0C5A  246E  3188         	fcall	_AdcIsBusy
  6053  0C5C  3800               	iorlw	0
  6054  0C5D  1D03               	skipz
  6055  0C5E  2C5A               	goto	l3072
  6056                           
  6057                           ;psect for function _AdcGetResult
  6058                           
  6059                           ;adc16.c: 92: return AdcGetResult();
  6060  0C5F                     i1L_AdcGetResult:	
  6061  0C5F                     i1Ll2826:	
  6062                           
  6063                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  6064  0C5F  081C               	movf	28,w	;volatile
  6065  0C60  0020               	movlb	0	; select bank0
  6066  0C61  00A1               	movwf	?_AdcGetResult+1
  6067  0C62  01A0               	clrf	?_AdcGetResult
  6068  0C63  0021               	movlb	1	; select bank1
  6069  0C64  081B               	movf	27,w	;volatile
  6070  0C65  0020               	movlb	0	; select bank0
  6071  0C66  04A0               	iorwf	?_AdcGetResult,f
  6072  0C67                     i1Ll79:	
  6073  0C67  0821               	movf	?_AdcGetResult+1,w
  6074  0C68  00A3               	movwf	?_AdcSample+1
  6075  0C69  0820               	movf	?_AdcGetResult,w
  6076  0C6A  00A2               	movwf	?_AdcSample
  6077  0C6B  0008               	return
  6078  0C6C                     __end_of_AdcSample:	
  6079  0C6C                     __ptext10:	
  6080 ;; *************** function _AdcGo *****************
  6081 ;; Defined at:
  6082 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;		None
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;		None               void
  6089 ;; Registers used:
  6090 ;;		None
  6091 ;; Tracked objects:
  6092 ;;		On entry : 1F/1
  6093 ;;		On exit  : 1F/1
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6096 ;;      Params:         0       0       0       0
  6097 ;;      Locals:         0       0       0       0
  6098 ;;      Temps:          0       0       0       0
  6099 ;;      Totals:         0       0       0       0
  6100 ;;Total ram usage:        0 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    5
  6103 ;; This function calls:
  6104 ;;		Nothing
  6105 ;; This function is called by:
  6106 ;;		_AdcSample
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           
  6111                           ;psect for function _AdcGo
  6112  0C6C                     _AdcGo:	
  6113                           
  6114                           ;adc16.c: 31: ADCON0 |= 1<<1;
  6115                           
  6116                           ;incstack = 0
  6117                           ; Regs used in _AdcGo: []
  6118  0C6C  149D               	bsf	29,1	;volatile
  6119  0C6D  0008               	return
  6120  0C6E                     __end_of_AdcGo:	
  6121  0C6E                     __ptext9:	
  6122 ;; *************** function _AdcIsBusy *****************
  6123 ;; Defined at:
  6124 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;		None
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;		None
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      unsigned char 
  6131 ;; Registers used:
  6132 ;;		wreg, status,2, status,0
  6133 ;; Tracked objects:
  6134 ;;		On entry : 0/1
  6135 ;;		On exit  : 1F/1
  6136 ;;		Unchanged: 0/0
  6137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6138 ;;      Params:         0       0       0       0
  6139 ;;      Locals:         0       0       0       0
  6140 ;;      Temps:          0       0       0       0
  6141 ;;      Totals:         0       0       0       0
  6142 ;;Total ram usage:        0 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; Hardware stack levels required when called:    5
  6145 ;; This function calls:
  6146 ;;		Nothing
  6147 ;; This function is called by:
  6148 ;;		_AdcSample
  6149 ;; This function uses a non-reentrant model
  6150 ;;
  6151                           
  6152                           
  6153                           ;psect for function _AdcIsBusy
  6154  0C6E                     _AdcIsBusy:	
  6155                           
  6156                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  6157                           
  6158                           ;incstack = 0
  6159                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  6160  0C6E  0021               	movlb	1	; select bank1
  6161  0C6F  361D               	lsrf	29,w	;volatile
  6162  0C70  3901               	andlw	1
  6163  0C71  0008               	return
  6164  0C72                     __end_of_AdcIsBusy:	
  6165  0C72                     __ptext12:	
  6166 ;; *************** function _AdcChSelect *****************
  6167 ;; Defined at:
  6168 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;  channel         1    wreg     enum E4222
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  channel         1    0[BANK0 ] enum E4222
  6173 ;; Return value:  Size  Location     Type
  6174 ;;		None               void
  6175 ;; Registers used:
  6176 ;;		wreg, status,2, status,0
  6177 ;; Tracked objects:
  6178 ;;		On entry : 1F/0
  6179 ;;		On exit  : 1F/1
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6182 ;;      Params:         0       0       0       0
  6183 ;;      Locals:         0       1       0       0
  6184 ;;      Temps:          0       0       0       0
  6185 ;;      Totals:         0       1       0       0
  6186 ;;Total ram usage:        1 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; Hardware stack levels required when called:    5
  6189 ;; This function calls:
  6190 ;;		Nothing
  6191 ;; This function is called by:
  6192 ;;		_AdcSample
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           
  6197                           ;psect for function _AdcChSelect
  6198  0C72                     _AdcChSelect:	
  6199                           
  6200                           ;incstack = 0
  6201                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  6202                           ;AdcChSelect@channel stored from wreg
  6203  0C72  00A0               	movwf	AdcChSelect@channel
  6204                           
  6205                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  6206  0C73  0709               	addwf	9,w
  6207  0C74  0709               	addwf	9,w
  6208  0C75  3801               	iorlw	1
  6209  0C76  0021               	movlb	1	; select bank1
  6210  0C77  009D               	movwf	29	;volatile
  6211  0C78  0008               	return
  6212  0C79                     __end_of_AdcChSelect:	
  6213  0C79                     __ptext5:	
  6214 ;; *************** function _PwrAdcSleep *****************
  6215 ;; Defined at:
  6216 ;;		line 179 in file "../../../src/node/power.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;		None
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;		None
  6221 ;; Return value:  Size  Location     Type
  6222 ;;		None               void
  6223 ;; Registers used:
  6224 ;;		status,2, status,0, pclath, cstack
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/1
  6227 ;;		On exit  : 1F/1
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6230 ;;      Params:         0       0       0       0
  6231 ;;      Locals:         0       0       0       0
  6232 ;;      Temps:          0       0       0       0
  6233 ;;      Totals:         0       0       0       0
  6234 ;;Total ram usage:        0 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    6
  6237 ;; This function calls:
  6238 ;;		_AdcDeinit
  6239 ;; This function is called by:
  6240 ;;		_RfSendPowerState
  6241 ;;		_main
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           
  6246                           ;psect for function _PwrAdcSleep
  6247  0C79                     _PwrAdcSleep:	
  6248                           
  6249                           ;power.c: 181: ANSELC = 0;
  6250                           
  6251                           ;incstack = 0
  6252                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  6253  0C79  0023               	movlb	3	; select bank3
  6254  0C7A  018E               	clrf	14	;volatile
  6255                           
  6256                           ;power.c: 182: TRISCbits.TRISC0 = 0;
  6257  0C7B  0021               	movlb	1	; select bank1
  6258  0C7C  100E               	bcf	14,0	;volatile
  6259                           
  6260                           ;power.c: 184: AdcDeinit();
  6261  0C7D  2F7B               	ljmp	l2824
  6262  0C7E                     __end_of_PwrAdcSleep:	
  6263  0C7E                     __ptext3:	
  6264 ;; *************** function _PwrAdcWake *****************
  6265 ;; Defined at:
  6266 ;;		line 187 in file "../../../src/node/power.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;		None
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;		None               void
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0, pclath, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/2
  6277 ;;		On exit  : 1F/1
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6280 ;;      Params:         0       0       0       0
  6281 ;;      Locals:         0       0       0       0
  6282 ;;      Temps:          0       0       0       0
  6283 ;;      Totals:         0       0       0       0
  6284 ;;Total ram usage:        0 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    6
  6287 ;; This function calls:
  6288 ;;		_AdcInit
  6289 ;; This function is called by:
  6290 ;;		_RfSendPowerState
  6291 ;;		_main
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function _PwrAdcWake
  6297  0C7E                     _PwrAdcWake:	
  6298                           
  6299                           ;power.c: 189: ANSELCbits.ANSC0 = 1;
  6300                           
  6301                           ;incstack = 0
  6302                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  6303  0C7E  0023               	movlb	3	; select bank3
  6304  0C7F  140E               	bsf	14,0	;volatile
  6305                           
  6306                           ;power.c: 190: TRISCbits.TRISC0 = 1;
  6307  0C80  0021               	movlb	1	; select bank1
  6308  0C81  140E               	bsf	14,0	;volatile
  6309                           
  6310                           ;power.c: 192: AdcInit();
  6311  0C82  2F82               	ljmp	l2816
  6312  0C83                     __end_of_PwrAdcWake:	
  6313  0C83                     __ptext1:	
  6314 ;; *************** function _RfSendSampleWeatherNode *****************
  6315 ;; Defined at:
  6316 ;;		line 33 in file "../../../src/rfstack/packets.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  temperature     2    6[BANK0 ] unsigned int 
  6319 ;;  humidity        2    8[BANK0 ] unsigned int 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  6322 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;		None               void
  6325 ;; Registers used:
  6326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 1F/0
  6329 ;;		On exit  : 1F/1
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6332 ;;      Params:         0       4       0       0
  6333 ;;      Locals:         0       1       0       0
  6334 ;;      Temps:          0       0       0       0
  6335 ;;      Totals:         0       5       0       0
  6336 ;;Total ram usage:        5 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    6
  6339 ;; This function calls:
  6340 ;;		_Mrf49xaAllocPacket
  6341 ;;		_Mrf49xaTxPacket
  6342 ;; This function is called by:
  6343 ;;		_main
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           
  6348                           ;psect for function _RfSendSampleWeatherNode
  6349  0C83                     _RfSendSampleWeatherNode:	
  6350                           
  6351                           ;packets.c: 35: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  6352                           
  6353                           ;incstack = 0
  6354                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6355  0C83  24C7  3188         	fcall	_Mrf49xaAllocPacket
  6356  0C85  0020               	movlb	0	; select bank0
  6357  0C86  00AA               	movwf	RfSendSampleWeatherNode@packet
  6358                           
  6359                           ;packets.c: 37: packet->packet.size = 10;
  6360  0C87  0A2A               	incf	RfSendSampleWeatherNode@packet,w
  6361  0C88  0086               	movwf	6
  6362  0C89  300A               	movlw	10
  6363  0C8A  0187               	clrf	7
  6364  0C8B  0081               	movwf	1
  6365                           
  6366                           ;packets.c: 38: packet->packet.id = RF_APP_SAMPLE;
  6367  0C8C  082A               	movf	RfSendSampleWeatherNode@packet,w
  6368  0C8D  3E04               	addlw	4
  6369  0C8E  0086               	movwf	6
  6370  0C8F  0181               	clrf	1
  6371                           
  6372                           ;packets.c: 39: packet->packet.dst = 0xFF;
  6373  0C90  082A               	movf	RfSendSampleWeatherNode@packet,w
  6374  0C91  3E03               	addlw	3
  6375  0C92  0086               	movwf	6
  6376  0C93  30FF               	movlw	255
  6377  0C94  0081               	movwf	1
  6378                           
  6379                           ;packets.c: 41: packet->packet.data[0] = 0;
  6380  0C95  082A               	movf	RfSendSampleWeatherNode@packet,w
  6381  0C96  3E06               	addlw	6
  6382  0C97  0086               	movwf	6
  6383  0C98  0181               	clrf	1
  6384                           
  6385                           ;packets.c: 42: packet->packet.data[1] = 0;
  6386  0C99  082A               	movf	RfSendSampleWeatherNode@packet,w
  6387  0C9A  3E07               	addlw	7
  6388  0C9B  0086               	movwf	6
  6389  0C9C  0181               	clrf	1
  6390                           
  6391                           ;packets.c: 43: packet->packet.data[2] = 0;
  6392  0C9D  082A               	movf	RfSendSampleWeatherNode@packet,w
  6393  0C9E  3E08               	addlw	8
  6394  0C9F  0086               	movwf	6
  6395  0CA0  0181               	clrf	1
  6396                           
  6397                           ;packets.c: 44: packet->packet.data[3] = 0;
  6398  0CA1  082A               	movf	RfSendSampleWeatherNode@packet,w
  6399  0CA2  3E09               	addlw	9
  6400  0CA3  0086               	movwf	6
  6401  0CA4  0181               	clrf	1
  6402                           
  6403                           ;packets.c: 46: packet->packet.data[4] = 0;
  6404  0CA5  082A               	movf	RfSendSampleWeatherNode@packet,w
  6405  0CA6  3E0A               	addlw	10
  6406  0CA7  0086               	movwf	6
  6407  0CA8  0181               	clrf	1
  6408                           
  6409                           ;packets.c: 48: packet->packet.data[6] = temperature >> 8;
  6410  0CA9  082A               	movf	RfSendSampleWeatherNode@packet,w
  6411  0CAA  3E0C               	addlw	12
  6412  0CAB  0086               	movwf	6
  6413  0CAC  0827               	movf	RfSendSampleWeatherNode@temperature+1,w
  6414  0CAD  0081               	movwf	1
  6415                           
  6416                           ;packets.c: 49: packet->packet.data[5] = temperature & 0xFF;
  6417  0CAE  082A               	movf	RfSendSampleWeatherNode@packet,w
  6418  0CAF  3E0B               	addlw	11
  6419  0CB0  0086               	movwf	6
  6420  0CB1  0826               	movf	RfSendSampleWeatherNode@temperature,w
  6421  0CB2  0081               	movwf	1
  6422                           
  6423                           ;packets.c: 51: packet->packet.data[7] = 1;
  6424  0CB3  082A               	movf	RfSendSampleWeatherNode@packet,w
  6425  0CB4  3E0D               	addlw	13
  6426  0CB5  0086               	movwf	6
  6427  0CB6  0181               	clrf	1
  6428  0CB7  0A81               	incf	1,f
  6429                           
  6430                           ;packets.c: 53: packet->packet.data[9] = humidity >> 8;
  6431  0CB8  082A               	movf	RfSendSampleWeatherNode@packet,w
  6432  0CB9  3E0F               	addlw	15
  6433  0CBA  0086               	movwf	6
  6434  0CBB  0829               	movf	RfSendSampleWeatherNode@humidity+1,w
  6435  0CBC  0081               	movwf	1
  6436                           
  6437                           ;packets.c: 54: packet->packet.data[8] = humidity & 0xFF;
  6438  0CBD  082A               	movf	RfSendSampleWeatherNode@packet,w
  6439  0CBE  3E0E               	addlw	14
  6440  0CBF  0086               	movwf	6
  6441  0CC0  0828               	movf	RfSendSampleWeatherNode@humidity,w
  6442  0CC1  0081               	movwf	1
  6443                           
  6444                           ;packets.c: 56: Mrf49xaTxPacket(packet, 0, 1);
  6445  0CC2  01A0               	clrf	Mrf49xaTxPacket@response
  6446  0CC3  01A1               	clrf	Mrf49xaTxPacket@needAck
  6447  0CC4  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  6448  0CC5  082A               	movf	RfSendSampleWeatherNode@packet,w
  6449  0CC6  2D44               	ljmp	_Mrf49xaTxPacket
  6450  0CC7                     __end_of_RfSendSampleWeatherNode:	
  6451  0CC7                     __ptext7:	
  6452 ;; *************** function _Mrf49xaAllocPacket *****************
  6453 ;; Defined at:
  6454 ;;		line 107 in file "../../../src/devices/mrf49xa_packet.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;		None
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;		None
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  1    wreg      PTR struct rfTrcvPacket_
  6461 ;; Registers used:
  6462 ;;		wreg, status,2, status,0
  6463 ;; Tracked objects:
  6464 ;;		On entry : 1F/0
  6465 ;;		On exit  : 1F/1
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6468 ;;      Params:         0       0       0       0
  6469 ;;      Locals:         0       0       0       0
  6470 ;;      Temps:          0       0       0       0
  6471 ;;      Totals:         0       0       0       0
  6472 ;;Total ram usage:        0 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; Hardware stack levels required when called:    5
  6475 ;; This function calls:
  6476 ;;		Nothing
  6477 ;; This function is called by:
  6478 ;;		_RfSendPowerState
  6479 ;;		_RfSendSampleWeatherNode
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           
  6484                           ;psect for function _Mrf49xaAllocPacket
  6485  0CC7                     _Mrf49xaAllocPacket:	
  6486                           
  6487                           ;mrf49xa_packet.c: 109: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  6488                           
  6489                           ;incstack = 0
  6490                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  6491  0CC7  0021               	movlb	1	; select bank1
  6492  0CC8  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  6493  0CC9  1D03               	skipz
  6494  0CCA  2CCE               	goto	l3186
  6495                           
  6496                           ;mrf49xa_packet.c: 110: {
  6497                           ;mrf49xa_packet.c: 111: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  6498  0CCB  3006               	movlw	6
  6499  0CCC  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  6500                           
  6501                           ;mrf49xa_packet.c: 112: return &(rfTrcvStatus.rxPacket[0]);
  6502  0CCD  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  6503  0CCE                     l3186:	
  6504                           
  6505                           ;mrf49xa_packet.c: 113: }
  6506                           ;mrf49xa_packet.c: 115: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  6507  0CCE  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  6508  0CCF  1D03               	skipz
  6509  0CD0  3400               	retlw	0
  6510                           
  6511                           ;mrf49xa_packet.c: 116: {
  6512                           ;mrf49xa_packet.c: 117: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  6513  0CD1  3006               	movlw	6
  6514  0CD2  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  6515                           
  6516                           ;mrf49xa_packet.c: 118: return &(rfTrcvStatus.rxPacket[1]);
  6517  0CD3  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  6518  0CD4                     __end_of_Mrf49xaAllocPacket:	
  6519                           ;mrf49xa_packet.c: 119: }
  6520                           ;mrf49xa_packet.c: 121: return (0);
  6521                           
  6522  0CD4                     __ptext43:	
  6523 ;; *************** function _HandlePacket *****************
  6524 ;; Defined at:
  6525 ;;		line 150 in file "../../../src/rfstack/client.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6528 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  packet          1   11[BANK0 ] PTR struct rfTrcvPacket_
  6531 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6532 ;;  response        1   10[BANK0 ] struct .
  6533 ;; Return value:  Size  Location     Type
  6534 ;;		None               void
  6535 ;; Registers used:
  6536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6537 ;; Tracked objects:
  6538 ;;		On entry : 1F/0
  6539 ;;		On exit  : 1F/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6542 ;;      Params:         0       0       0       0
  6543 ;;      Locals:         0       2       0       0
  6544 ;;      Temps:          0       1       0       0
  6545 ;;      Totals:         0       3       0       0
  6546 ;;Total ram usage:        3 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:   10
  6549 ;; This function calls:
  6550 ;;		_Mrf49xaFreePacket
  6551 ;;		_Mrf49xaTxAck
  6552 ;;		_Mrf49xaTxPacket
  6553 ;;		_handleCfgCmd
  6554 ;;		_handleCfgRead
  6555 ;;		_handleCfgWrite
  6556 ;;		_handleFwCmd
  6557 ;; This function is called by:
  6558 ;;		_Mrf49xaTick
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function _HandlePacket
  6564  0CD4                     _HandlePacket:	
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6568                           ;HandlePacket@packet stored from wreg
  6569  0CD4  00AB               	movwf	HandlePacket@packet
  6570                           
  6571                           ;client.c: 153: struct
  6572                           ;client.c: 154: {
  6573                           ;client.c: 155: bool_t reset:1;
  6574                           ;client.c: 156: bool_t needAck:1;
  6575                           ;client.c: 157: bool_t sendAck:1;
  6576                           ;client.c: 158: bool_t sendMsg:1;
  6577                           ;client.c: 159: } response;
  6578                           ;client.c: 162: switch (packet->packet.id)
  6579  0CD5  2D07               	goto	l3222
  6580  0CD6                     l3198:	
  6581                           
  6582                           ;client.c: 165: packet->packet.data[0] = 2;
  6583  0CD6  082B               	movf	HandlePacket@packet,w
  6584  0CD7  3E06               	addlw	6
  6585  0CD8  0086               	movwf	6
  6586  0CD9  3002               	movlw	2
  6587  0CDA  0187               	clrf	7
  6588  0CDB  0081               	movwf	1
  6589  0CDC                     l3200:	
  6590                           
  6591                           ;client.c: 166: response.sendMsg = 1;
  6592  0CDC  0020               	movlb	0	; select bank0
  6593  0CDD  15AA               	bsf	HandlePacket@response,3
  6594                           
  6595                           ;client.c: 167: break;
  6596  0CDE  2D25               	goto	l555
  6597  0CDF                     l3202:	
  6598                           
  6599                           ;client.c: 170: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  6600                           ;client.c: 171: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  6601  0CDF  082B               	movf	HandlePacket@packet,w
  6602  0CE0  3E07               	addlw	7
  6603  0CE1  0086               	movwf	6
  6604  0CE2  0187               	clrf	7
  6605  0CE3  0021               	movlb	1	; select bank1
  6606  0CE4  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  6607  0CE5  0601               	xorwf	1,w
  6608  0CE6  1D03               	skipz
  6609  0CE7  2D25               	goto	l555
  6610  0CE8  0020               	movlb	0	; select bank0
  6611  0CE9  082B               	movf	HandlePacket@packet,w
  6612  0CEA  3E06               	addlw	6
  6613  0CEB  0086               	movwf	6
  6614  0CEC  0021               	movlb	1	; select bank1
  6615  0CED  0855               	movf	(_rfTrcvStatus^(0+128)+53),w
  6616  0CEE  0601               	xorwf	1,w
  6617  0CEF  1D03               	skipz
  6618  0CF0  2D25               	goto	l555
  6619                           
  6620                           ;client.c: 172: {
  6621                           ;client.c: 173: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  6622  0CF1  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  6623  0CF2  393F               	andlw	-193
  6624  0CF3  3880               	iorlw	128
  6625  0CF4  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  6626  0CF5  2D25               	goto	l555
  6627  0CF6                     l558:	
  6628                           ;client.c: 178: syncedTime = *((uint32_t*) packet->packet.data);
  6629                           
  6630                           
  6631                           ;client.c: 179: response.sendAck = 1;
  6632  0CF6  152A               	bsf	HandlePacket@response,2
  6633                           
  6634                           ;client.c: 180: break;
  6635  0CF7  2D25               	goto	l555
  6636  0CF8                     l3208:	
  6637                           
  6638                           ;client.c: 190: handleCfgCmd(packet);
  6639  0CF8  082B               	movf	HandlePacket@packet,w
  6640  0CF9  25C1  3188         	fcall	_handleCfgCmd
  6641  0CFB  2CDC               	goto	l3200
  6642  0CFC                     l3212:	
  6643                           
  6644                           ;client.c: 196: handleCfgWrite(packet);
  6645  0CFC  082B               	movf	HandlePacket@packet,w
  6646  0CFD  262C  3188         	fcall	_handleCfgWrite
  6647  0CFF                     l562:	
  6648                           ;client.c: 197: case RF_CFG_READ:
  6649                           
  6650                           
  6651                           ;client.c: 198: handleCfgRead(packet);
  6652  0CFF  082B               	movf	HandlePacket@packet,w
  6653  0D00  25E9  3188         	fcall	_handleCfgRead
  6654  0D02  2CDC               	goto	l3200
  6655  0D03                     l3216:	
  6656                           
  6657                           ;client.c: 205: handleFwCmd(packet);
  6658  0D03  082B               	movf	HandlePacket@packet,w
  6659  0D04  2660  3188         	fcall	_handleFwCmd
  6660  0D06  2CDC               	goto	l3200
  6661  0D07                     l3222:	
  6662  0D07  082B               	movf	HandlePacket@packet,w
  6663  0D08  3E04               	addlw	4
  6664  0D09  0086               	movwf	6
  6665  0D0A  0187               	clrf	7
  6666  0D0B  0801               	movf	1,w
  6667                           
  6668                           ; Switch size 1, requested type "space"
  6669                           ; Number of cases is 8, Range of values is 160 to 192
  6670                           ; switch strategies available:
  6671                           ; Name         Instructions Cycles
  6672                           ; simple_byte           25    13 (average)
  6673                           ; direct_byte           75     9 (fixed)
  6674                           ; jumptable            263     9 (fixed)
  6675                           ;	Chosen strategy is simple_byte
  6676  0D0C  3AA0               	xorlw	160	; case 160
  6677  0D0D  1903               	skipnz
  6678  0D0E  2CD6               	goto	l3198
  6679  0D0F  3A01               	xorlw	1	; case 161
  6680  0D10  1903               	skipnz
  6681  0D11  2CDF               	goto	l3202
  6682  0D12  3A03               	xorlw	3	; case 162
  6683  0D13  1903               	skipnz
  6684  0D14  2CF6               	goto	l558
  6685  0D15  3A01               	xorlw	1	; case 163
  6686  0D16  1903               	skipnz
  6687  0D17  2D25               	goto	l555
  6688  0D18  3A13               	xorlw	19	; case 176
  6689  0D19  1903               	skipnz
  6690  0D1A  2CF8               	goto	l3208
  6691  0D1B  3A01               	xorlw	1	; case 177
  6692  0D1C  1903               	skipnz
  6693  0D1D  2CFC               	goto	l3212
  6694  0D1E  3A03               	xorlw	3	; case 178
  6695  0D1F  1903               	skipnz
  6696  0D20  2CFF               	goto	l562
  6697  0D21  3A72               	xorlw	114	; case 192
  6698  0D22  1903               	skipnz
  6699  0D23  2D03               	goto	l3216
  6700  0D24  2D25               	goto	l555
  6701  0D25                     l555:	
  6702                           
  6703                           ;client.c: 228: response.reset = 1;
  6704  0D25  0020               	movlb	0	; select bank0
  6705  0D26  142A               	bsf	HandlePacket@response,0
  6706                           
  6707                           ;client.c: 231: if (response.sendMsg)
  6708  0D27  1DAA               	btfss	HandlePacket@response,3
  6709  0D28  2D33               	goto	l564
  6710  0D29  3000               	movlw	0
  6711                           
  6712                           ;client.c: 232: response.reset = Mrf49xaTxPacket(packet, 1, response.needAck);
  6713  0D2A  01A0               	clrf	Mrf49xaTxPacket@response
  6714  0D2B  0AA0               	incf	Mrf49xaTxPacket@response,f
  6715  0D2C  18AA               	btfsc	HandlePacket@response,1
  6716  0D2D  3001               	movlw	1
  6717  0D2E  00A1               	movwf	Mrf49xaTxPacket@needAck
  6718  0D2F  082B               	movf	HandlePacket@packet,w
  6719  0D30  2544  3188         	fcall	_Mrf49xaTxPacket
  6720  0D32  2D38               	goto	L4
  6721  0D33                     l564:	
  6722                           
  6723                           ;client.c: 233: else if (response.sendAck)
  6724  0D33  1D2A               	btfss	HandlePacket@response,2
  6725  0D34  2D3F               	goto	l566
  6726                           
  6727                           ;client.c: 234: response.reset = Mrf49xaTxAck(packet);
  6728  0D35  082B               	movf	HandlePacket@packet,w
  6729  0D36  25A1  3188         	fcall	_Mrf49xaTxAck
  6730  0D38                     L4:	
  6731  0D38  0020               	movlb	0	; select bank0
  6732  0D39  00A9               	movwf	??_HandlePacket
  6733  0D3A  062A               	xorwf	HandlePacket@response,w
  6734  0D3B  39FE               	andlw	-2
  6735  0D3C  0629               	xorwf	??_HandlePacket,w
  6736  0D3D  00AA               	movwf	HandlePacket@response
  6737  0D3E  2D40               	goto	l565
  6738  0D3F                     l566:	
  6739                           
  6740                           ;client.c: 235: else
  6741                           ;client.c: 236: response.reset = 0;
  6742  0D3F  102A               	bcf	HandlePacket@response,0
  6743  0D40                     l565:	
  6744                           
  6745                           ;client.c: 238: if (!response.reset)
  6746  0D40  182A               	btfsc	HandlePacket@response,0
  6747  0D41  0008               	return
  6748                           
  6749                           ;client.c: 239: Mrf49xaFreePacket(packet);
  6750  0D42  082B               	movf	HandlePacket@packet,w
  6751  0D43  2BFE               	ljmp	_Mrf49xaFreePacket
  6752  0D44                     __end_of_HandlePacket:	
  6753  0D44                     __ptext56:	
  6754 ;; *************** function _Mrf49xaTxPacket *****************
  6755 ;; Defined at:
  6756 ;;		line 27 in file "../../../src/devices/mrf49xa_packet.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6759 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6760 ;;  response        1    0[BANK0 ] unsigned char 
  6761 ;;  needAck         1    1[BANK0 ] unsigned char 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  6764 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6765 ;;  i               1    4[BANK0 ] unsigned char 
  6766 ;;  crc             1    3[BANK0 ] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      unsigned char 
  6769 ;; Registers used:
  6770 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6771 ;; Tracked objects:
  6772 ;;		On entry : 1F/0
  6773 ;;		On exit  : 1F/1
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6776 ;;      Params:         0       2       0       0
  6777 ;;      Locals:         0       3       0       0
  6778 ;;      Temps:          0       1       0       0
  6779 ;;      Totals:         0       6       0       0
  6780 ;;Total ram usage:        6 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    5
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		_Mrf49xaTxAck
  6787 ;;		_HandlePacket
  6788 ;;		_RfSendPowerState
  6789 ;;		_RfSendSampleWeatherNode
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           
  6794                           ;psect for function _Mrf49xaTxPacket
  6795  0D44                     _Mrf49xaTxPacket:	
  6796                           
  6797                           ;incstack = 0
  6798                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  6799                           ;Mrf49xaTxPacket@packet stored from wreg
  6800  0D44  00A5               	movwf	Mrf49xaTxPacket@packet
  6801  0D45  3031               	movlw	49
  6802                           
  6803                           ;mrf49xa_packet.c: 29: uint8_t i, crc = 0;
  6804  0D46  01A3               	clrf	Mrf49xaTxPacket@crc
  6805                           
  6806                           ;mrf49xa_packet.c: 31: if (&(rfTrcvStatus.txPacket) == packet)
  6807  0D47  3EA0               	addlw	_rfTrcvStatus& (0+255)
  6808  0D48  0625               	xorwf	Mrf49xaTxPacket@packet,w
  6809  0D49  1D03               	skipz
  6810  0D4A  2D5A               	goto	l2678
  6811                           
  6812                           ;mrf49xa_packet.c: 32: {
  6813                           ;mrf49xa_packet.c: 33: if (response)
  6814  0D4B  0820               	movf	Mrf49xaTxPacket@response,w
  6815  0D4C  1903               	btfsc	3,2
  6816  0D4D  2D51               	goto	l374
  6817                           
  6818                           ;mrf49xa_packet.c: 34: {
  6819                           ;mrf49xa_packet.c: 35: rfTrcvStatus.txPacket.packet.dst = rfTrcvStatus.txPacket.packet.s
      +                          rc;
  6820  0D4E  0021               	movlb	1	; select bank1
  6821  0D4F  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  6822  0D50  00D4               	movwf	(_rfTrcvStatus^(0+128)+52)
  6823  0D51                     l374:	
  6824                           
  6825                           ;mrf49xa_packet.c: 36: }
  6826                           ;mrf49xa_packet.c: 37: rfTrcvStatus.txPacket.packet.src = cfgRam.nodeId;
  6827  0D51  0020               	movlb	0	; select bank0
  6828  0D52  0834               	movf	_cfgRam,w
  6829  0D53  0021               	movlb	1	; select bank1
  6830  0D54  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  6831                           
  6832                           ;mrf49xa_packet.c: 38: rfTrcvStatus.txPacket.packet.size += 5;
  6833  0D55  3005               	movlw	5
  6834  0D56  07D2               	addwf	(_rfTrcvStatus^(0+128)+50),f
  6835                           
  6836                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6837                           
  6838                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retry = 0;
  6839                           
  6840                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.retransmit = 0;
  6841                           
  6842                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6843  0D57  278D               	fcall	PL8	;call to abstracted procedure
  6844                           
  6845                           ;mrf49xa_packet.c: 44: rfTrcvStatus.txPacket.crc = 0;
  6846  0D58  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  6847                           
  6848                           ;mrf49xa_packet.c: 45: return 1;
  6849  0D59  3401               	retlw	1
  6850  0D5A                     l2678:	
  6851                           
  6852                           ;mrf49xa_packet.c: 46: }
  6853                           ;mrf49xa_packet.c: 49: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  6854  0D5A  0021               	movlb	1	; select bank1
  6855  0D5B  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  6856  0D5C  1D03               	skipz
  6857                           
  6858                           ;mrf49xa_packet.c: 50: {
  6859                           ;mrf49xa_packet.c: 52: return 0;
  6860  0D5D  3400               	retlw	0
  6861                           
  6862                           ;mrf49xa_packet.c: 54: else
  6863                           ;mrf49xa_packet.c: 55: {
  6864                           ;mrf49xa_packet.c: 56: if (response)
  6865  0D5E  0020               	movlb	0	; select bank0
  6866  0D5F  0820               	movf	Mrf49xaTxPacket@response,w
  6867  0D60  1903               	btfsc	3,2
  6868  0D61  2D6C               	goto	l2690
  6869                           
  6870                           ;mrf49xa_packet.c: 57: {
  6871                           ;mrf49xa_packet.c: 58: packet->packet.dst = packet->packet.src;
  6872  0D62  0825               	movf	Mrf49xaTxPacket@packet,w
  6873  0D63  3E03               	addlw	3
  6874  0D64  0086               	movwf	6
  6875  0D65  0187               	clrf	7
  6876  0D66  0825               	movf	Mrf49xaTxPacket@packet,w
  6877  0D67  3E02               	addlw	2
  6878  0D68  0084               	movwf	4
  6879  0D69  0185               	clrf	5
  6880  0D6A  0800               	movf	0,w
  6881  0D6B  0081               	movwf	1
  6882  0D6C                     l2690:	
  6883                           
  6884                           ;mrf49xa_packet.c: 59: }
  6885                           ;mrf49xa_packet.c: 60: packet->packet.src = cfgRam.nodeId;
  6886  0D6C  0825               	movf	Mrf49xaTxPacket@packet,w
  6887  0D6D  3E02               	addlw	2
  6888  0D6E  0086               	movwf	6
  6889  0D6F  0187               	clrf	7
  6890  0D70  0834               	movf	_cfgRam,w
  6891  0D71  0081               	movwf	1
  6892                           
  6893                           ;mrf49xa_packet.c: 61: packet->packet.size += 5;
  6894  0D72  0A25               	incf	Mrf49xaTxPacket@packet,w
  6895  0D73  0086               	movwf	6
  6896  0D74  3005               	movlw	5
  6897  0D75  0781               	addwf	1,f
  6898                           
  6899                           ;mrf49xa_packet.c: 63: packet->state = PKT_FREE;
  6900  0D76  0825               	movf	Mrf49xaTxPacket@packet,w
  6901  0D77  0086               	movwf	6
  6902  0D78  0181               	clrf	1
  6903                           
  6904                           ;mrf49xa_packet.c: 66: for (i = 0; i < (16 + 5); i++)
  6905  0D79  01A4               	clrf	Mrf49xaTxPacket@i
  6906  0D7A                     l2702:	
  6907                           
  6908                           ;mrf49xa_packet.c: 67: {
  6909                           ;mrf49xa_packet.c: 68: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  6910  0D7A  0824               	movf	Mrf49xaTxPacket@i,w
  6911  0D7B  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  6912  0D7C  0086               	movwf	6
  6913  0D7D  0187               	clrf	7
  6914  0D7E  0824               	movf	Mrf49xaTxPacket@i,w
  6915  0D7F  0725               	addwf	Mrf49xaTxPacket@packet,w
  6916  0D80  00A2               	movwf	??_Mrf49xaTxPacket
  6917  0D81  0A22               	incf	??_Mrf49xaTxPacket,w
  6918  0D82  0084               	movwf	4
  6919  0D83  0185               	clrf	5
  6920  0D84  0800               	movf	0,w
  6921  0D85  0081               	movwf	1
  6922  0D86  3015               	movlw	21
  6923  0D87  0AA4               	incf	Mrf49xaTxPacket@i,f
  6924  0D88  0224               	subwf	Mrf49xaTxPacket@i,w
  6925  0D89  1C03               	skipc
  6926  0D8A  2D7A               	goto	l2702
  6927                           
  6928                           ;mrf49xa_packet.c: 69: }
  6929                           ;mrf49xa_packet.c: 70: for (i = 0; i < packet->packet.size; i++)
  6930  0D8B  01A4               	clrf	Mrf49xaTxPacket@i
  6931  0D8C                     l381:	
  6932  0D8C  0A25               	incf	Mrf49xaTxPacket@packet,w
  6933  0D8D  0086               	movwf	6
  6934  0D8E  0187               	clrf	7
  6935  0D8F  0801               	movf	1,w
  6936  0D90  0224               	subwf	Mrf49xaTxPacket@i,w
  6937  0D91  1803               	btfsc	3,0
  6938  0D92  2D9A               	goto	l383
  6939                           
  6940                           ;mrf49xa_packet.c: 71: {
  6941                           ;mrf49xa_packet.c: 72: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  6942  0D93  0824               	movf	Mrf49xaTxPacket@i,w
  6943  0D94  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  6944  0D95  0086               	movwf	6
  6945  0D96  0801               	movf	1,w
  6946  0D97  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  6947  0D98  0AA4               	incf	Mrf49xaTxPacket@i,f
  6948  0D99  2D8C               	goto	l381
  6949  0D9A                     l383:	
  6950                           
  6951                           ;mrf49xa_packet.c: 73: }
  6952                           ;mrf49xa_packet.c: 75: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6953  0D9A  0021               	movlb	1	; select bank1
  6954                           
  6955                           ;mrf49xa_packet.c: 76: rfTrcvStatus.txPacket.retry = 0;
  6956                           
  6957                           ;mrf49xa_packet.c: 77: rfTrcvStatus.txPacket.retransmit = 0;
  6958                           
  6959                           ;mrf49xa_packet.c: 78: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6960  0D9B  278D               	fcall	PL8	;call to abstracted procedure
  6961                           
  6962                           ;mrf49xa_packet.c: 80: rfTrcvStatus.txPacket.crc = crc;
  6963  0D9C  0020               	movlb	0	; select bank0
  6964  0D9D  0823               	movf	Mrf49xaTxPacket@crc,w
  6965  0D9E  0021               	movlb	1	; select bank1
  6966  0D9F  00E7               	movwf	(_rfTrcvStatus^(0+128)+71)
  6967  0DA0  3401               	retlw	1
  6968  0DA1                     __end_of_Mrf49xaTxPacket:	
  6969  0DA1                     __ptext55:	
  6970 ;; *************** function _Mrf49xaTxAck *****************
  6971 ;; Defined at:
  6972 ;;		line 15 in file "../../../src/devices/mrf49xa_packet.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6975 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  6978 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      unsigned char 
  6981 ;; Registers used:
  6982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 1F/0
  6985 ;;		On exit  : 1F/1
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6988 ;;      Params:         0       0       0       0
  6989 ;;      Locals:         0       1       0       0
  6990 ;;      Temps:          0       0       0       0
  6991 ;;      Totals:         0       1       0       0
  6992 ;;Total ram usage:        1 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    6
  6995 ;; This function calls:
  6996 ;;		_Mrf49xaTxPacket
  6997 ;; This function is called by:
  6998 ;;		_HandlePacket
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           
  7003                           ;psect for function _Mrf49xaTxAck
  7004  0DA1                     _Mrf49xaTxAck:	
  7005                           
  7006                           ;incstack = 0
  7007                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7008                           ;Mrf49xaTxAck@packet stored from wreg
  7009  0DA1  00A6               	movwf	Mrf49xaTxAck@packet
  7010                           
  7011                           ;mrf49xa_packet.c: 17: packet->packet.data[0] = packet->packet.id;
  7012  0DA2  3E06               	addlw	6
  7013  0DA3  0086               	movwf	6
  7014  0DA4  0187               	clrf	7
  7015  0DA5  0826               	movf	Mrf49xaTxAck@packet,w
  7016  0DA6  3E04               	addlw	4
  7017  0DA7  0084               	movwf	4
  7018  0DA8  0185               	clrf	5
  7019  0DA9  0800               	movf	0,w
  7020  0DAA  0081               	movwf	1
  7021                           
  7022                           ;mrf49xa_packet.c: 18: packet->packet.data[1] = packet->crc;
  7023  0DAB  0826               	movf	Mrf49xaTxAck@packet,w
  7024  0DAC  3E07               	addlw	7
  7025  0DAD  0086               	movwf	6
  7026  0DAE  0826               	movf	Mrf49xaTxAck@packet,w
  7027  0DAF  3E16               	addlw	22
  7028  0DB0  0084               	movwf	4
  7029  0DB1  0800               	movf	0,w
  7030  0DB2  0081               	movwf	1
  7031                           
  7032                           ;mrf49xa_packet.c: 21: packet->packet.id = RF_ACK;
  7033  0DB3  0826               	movf	Mrf49xaTxAck@packet,w
  7034  0DB4  3E04               	addlw	4
  7035  0DB5  0086               	movwf	6
  7036  0DB6  30A1               	movlw	161
  7037  0DB7  0081               	movwf	1
  7038                           
  7039                           ;mrf49xa_packet.c: 22: packet->packet.size = 2;
  7040  0DB8  0A26               	incf	Mrf49xaTxAck@packet,w
  7041  0DB9  0086               	movwf	6
  7042  0DBA  3002               	movlw	2
  7043  0DBB  0081               	movwf	1
  7044                           
  7045                           ;mrf49xa_packet.c: 24: return Mrf49xaTxPacket(packet, 1, 0);
  7046  0DBC  01A0               	clrf	Mrf49xaTxPacket@response
  7047  0DBD  0AA0               	incf	Mrf49xaTxPacket@response,f
  7048  0DBE  01A1               	clrf	Mrf49xaTxPacket@needAck
  7049  0DBF  0826               	movf	Mrf49xaTxAck@packet,w
  7050  0DC0  2D44               	ljmp	_Mrf49xaTxPacket
  7051  0DC1                     __end_of_Mrf49xaTxAck:	
  7052  0DC1                     __ptext49:	
  7053 ;; *************** function _handleCfgCmd *****************
  7054 ;; Defined at:
  7055 ;;		line 124 in file "../../../src/rfstack/client.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7058 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7061 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7062 ;; Return value:  Size  Location     Type
  7063 ;;		None               void
  7064 ;; Registers used:
  7065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 1F/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7071 ;;      Params:         0       0       0       0
  7072 ;;      Locals:         0       1       0       0
  7073 ;;      Temps:          0       0       0       0
  7074 ;;      Totals:         0       1       0       0
  7075 ;;Total ram usage:        1 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    9
  7078 ;; This function calls:
  7079 ;;		_CfgLoad
  7080 ;;		_CfgSave
  7081 ;; This function is called by:
  7082 ;;		_HandlePacket
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           
  7087                           ;psect for function _handleCfgCmd
  7088  0DC1                     _handleCfgCmd:	
  7089                           
  7090                           ;incstack = 0
  7091                           ; Regs used in _handleCfgCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7092                           ;handleCfgCmd@packet stored from wreg
  7093  0DC1  00A8               	movwf	handleCfgCmd@packet
  7094                           
  7095                           ;client.c: 126: switch (packet->packet.data[0])
  7096  0DC2  2DD8               	goto	l3040
  7097  0DC3                     l3030:	
  7098                           
  7099                           ;client.c: 129: CfgSave();
  7100  0DC3  2E89               	ljmp	l2754
  7101  0DC4                     l3032:	
  7102                           ;client.c: 130: break;
  7103                           
  7104                           
  7105                           ;client.c: 133: CfgLoad();
  7106  0DC4  2E81               	ljmp	l2756
  7107  0DC5                     l3034:	
  7108                           ;client.c: 134: break;
  7109                           
  7110                           
  7111                           ;client.c: 137: packet->packet.size = 2;
  7112  0DC5  0A28               	incf	handleCfgCmd@packet,w
  7113  0DC6  0086               	movwf	6
  7114  0DC7  3002               	movlw	2
  7115  0DC8  27C6               	fcall	PL18	;call to abstracted procedure
  7116  0DC9  3002               	movlw	2
  7117  0DCA  0081               	movwf	1
  7118                           
  7119                           ;client.c: 139: break;
  7120  0DCB  0008               	return
  7121  0DCC                     l3036:	
  7122                           
  7123                           ;client.c: 142: packet->packet.size = 3;
  7124  0DCC  0A28               	incf	handleCfgCmd@packet,w
  7125  0DCD  0086               	movwf	6
  7126  0DCE  3003               	movlw	3
  7127                           
  7128                           ;client.c: 143: packet->packet.data[1] = cfgRam.checksum >> 8;
  7129  0DCF  27C6               	fcall	PL18	;call to abstracted procedure
  7130  0DD0  083C               	movf	_cfgRam+8,w
  7131  0DD1  0081               	movwf	1
  7132                           
  7133                           ;client.c: 144: packet->packet.data[2] = cfgRam.checksum & 0xFF;
  7134  0DD2  0828               	movf	handleCfgCmd@packet,w
  7135  0DD3  3E08               	addlw	8
  7136  0DD4  0086               	movwf	6
  7137  0DD5  083B               	movf	_cfgRam+7,w
  7138  0DD6  0081               	movwf	1
  7139                           
  7140                           ;client.c: 145: break;
  7141  0DD7  0008               	return
  7142  0DD8                     l3040:	
  7143  0DD8  0828               	movf	handleCfgCmd@packet,w
  7144  0DD9  27D7  3188         	fcall	PL24	;call to abstracted procedure
  7145                           
  7146                           ; Switch size 1, requested type "space"
  7147                           ; Number of cases is 4, Range of values is 1 to 4
  7148                           ; switch strategies available:
  7149                           ; Name         Instructions Cycles
  7150                           ; simple_byte           13     7 (average)
  7151                           ; direct_byte           17     9 (fixed)
  7152                           ; jumptable            263     9 (fixed)
  7153                           ;	Chosen strategy is simple_byte
  7154  0DDB  3A01               	xorlw	1	; case 1
  7155  0DDC  1903               	skipnz
  7156  0DDD  2DC3               	goto	l3030
  7157  0DDE  3A03               	xorlw	3	; case 2
  7158  0DDF  1903               	skipnz
  7159  0DE0  2DC4               	goto	l3032
  7160  0DE1  3A01               	xorlw	1	; case 3
  7161  0DE2  1903               	skipnz
  7162  0DE3  2DC5               	goto	l3034
  7163  0DE4  3A07               	xorlw	7	; case 4
  7164  0DE5  1903               	skipnz
  7165  0DE6  2DCC               	goto	l3036
  7166  0DE7  2DE8               	goto	l550
  7167  0DE8                     l550:	
  7168  0DE8  0008               	return
  7169  0DE9                     __end_of_handleCfgCmd:	
  7170  0DE9                     __ptext46:	
  7171 ;; *************** function _handleCfgRead *****************
  7172 ;; Defined at:
  7173 ;;		line 102 in file "../../../src/rfstack/client.c"
  7174 ;; Parameters:    Size  Location     Type
  7175 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7176 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7179 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7180 ;;  index           1    7[BANK0 ] unsigned char 
  7181 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;		None               void
  7184 ;; Registers used:
  7185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 1F/0
  7188 ;;		On exit  : 1F/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7191 ;;      Params:         0       0       0       0
  7192 ;;      Locals:         0       3       0       0
  7193 ;;      Temps:          0       0       0       0
  7194 ;;      Totals:         0       3       0       0
  7195 ;;Total ram usage:        3 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    6
  7198 ;; This function calls:
  7199 ;;		_CfgGetSizeByType
  7200 ;;		_memcpy
  7201 ;; This function is called by:
  7202 ;;		_HandlePacket
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           
  7207                           ;psect for function _handleCfgRead
  7208  0DE9                     _handleCfgRead:	
  7209                           
  7210                           ;incstack = 0
  7211                           ; Regs used in _handleCfgRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7212                           ;handleCfgRead@packet stored from wreg
  7213  0DE9  00A8               	movwf	handleCfgRead@packet
  7214                           
  7215                           ;client.c: 104: uint8_t index = packet->packet.data[0];
  7216  0DEA  0086               	movwf	6
  7217  0DEB  0187               	clrf	7
  7218  0DEC  3F46               	moviw [6]fsr1
  7219  0DED  00A7               	movwf	handleCfgRead@index
  7220                           
  7221                           ;client.c: 105: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  7222  0DEE  0727               	addwf	handleCfgRead@index,w
  7223  0DEF  0727               	addwf	handleCfgRead@index,w
  7224  0DF0  3E49               	addlw	low (_parameters| (0+32768))
  7225  0DF1  3182               	movlp	high __stringtab
  7226  0DF2  000A               	callw
  7227  0DF3  3188               	pagesel	$	;select current page
  7228  0DF4  261A               	fcall	_CfgGetSizeByType
  7229  0DF5  00A6               	movwf	handleCfgRead@nrOfBytes
  7230                           
  7231                           ;client.c: 107: packet->packet.size = nrOfBytes + 2;
  7232  0DF6  0A28               	incf	handleCfgRead@packet,w
  7233  0DF7  0086               	movwf	6
  7234  0DF8  0187               	clrf	7
  7235  0DF9  0826               	movf	handleCfgRead@nrOfBytes,w
  7236  0DFA  3E02               	addlw	2
  7237  0DFB  0081               	movwf	1
  7238                           
  7239                           ;client.c: 108: packet->packet.id = RF_CFG_READ;
  7240  0DFC  0828               	movf	handleCfgRead@packet,w
  7241  0DFD  3E04               	addlw	4
  7242  0DFE  0086               	movwf	6
  7243  0DFF  30B2               	movlw	178
  7244  0E00  0081               	movwf	1
  7245                           
  7246                           ;client.c: 110: packet->packet.data[1] = parameters[index].id;
  7247  0E01  0828               	movf	handleCfgRead@packet,w
  7248  0E02  3E07               	addlw	7
  7249  0E03  0086               	movwf	6
  7250  0E04  0827               	movf	handleCfgRead@index,w
  7251  0E05  0727               	addwf	handleCfgRead@index,w
  7252  0E06  0727               	addwf	handleCfgRead@index,w
  7253  0E07  3E4A               	addlw	low ((_parameters| (0+32768)+1))
  7254  0E08  3182               	movlp	high __stringtab
  7255  0E09  000A               	callw
  7256  0E0A  3188               	pagesel	$	;select current page
  7257  0E0B  0081               	movwf	1
  7258                           
  7259                           ;client.c: 112: memcpy(packet->packet.data + 2, parameters[index].ptr, nrOfBytes);
  7260  0E0C  0827               	movf	handleCfgRead@index,w
  7261  0E0D  0727               	addwf	handleCfgRead@index,w
  7262  0E0E  0727               	addwf	handleCfgRead@index,w
  7263  0E0F  3E4B               	addlw	low ((_parameters| (0+32768)+2))
  7264  0E10  3182               	movlp	high __stringtab
  7265  0E11  000A               	callw
  7266  0E12  3188               	pagesel	$	;select current page
  7267  0E13  00A0               	movwf	memcpy@s1
  7268  0E14  0826               	movf	handleCfgRead@nrOfBytes,w
  7269  0E15  00A1               	movwf	memcpy@n
  7270  0E16  01A2               	clrf	memcpy@n+1
  7271  0E17  0828               	movf	handleCfgRead@packet,w
  7272  0E18  3E08               	addlw	8
  7273  0E19  2E47               	ljmp	_memcpy
  7274  0E1A                     __end_of_handleCfgRead:	
  7275  0E1A                     __ptext48:	
  7276 ;; *************** function _CfgGetSizeByType *****************
  7277 ;; Defined at:
  7278 ;;		line 29 in file "../../../src/node/config.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;  type            1    wreg     enum E4252
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  type            1    0[BANK0 ] enum E4252
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  1    wreg      unsigned char 
  7285 ;; Registers used:
  7286 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7287 ;; Tracked objects:
  7288 ;;		On entry : 1F/0
  7289 ;;		On exit  : 1F/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7292 ;;      Params:         0       0       0       0
  7293 ;;      Locals:         0       1       0       0
  7294 ;;      Temps:          0       0       0       0
  7295 ;;      Totals:         0       1       0       0
  7296 ;;Total ram usage:        1 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    5
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_handleCfgRead
  7303 ;;		_handleCfgWrite
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           
  7308                           ;psect for function _CfgGetSizeByType
  7309  0E1A                     _CfgGetSizeByType:	
  7310                           
  7311                           ;incstack = 0
  7312                           ; Regs used in _CfgGetSizeByType: [wreg-fsr0h+status,2+status,0]
  7313                           ;CfgGetSizeByType@type stored from wreg
  7314  0E1A  00A0               	movwf	CfgGetSizeByType@type
  7315                           
  7316                           ;config.c: 31: switch(type)
  7317  0E1B  2E20               	goto	l2742
  7318  0E1C                     l2724:	
  7319  0E1C  3401               	retlw	1
  7320  0E1D                     l2728:	
  7321  0E1D  3402               	retlw	2
  7322  0E1E                     l2732:	
  7323  0E1E  3404               	retlw	4
  7324  0E1F                     l2736:	
  7325  0E1F  3400               	retlw	0
  7326  0E20                     l2742:	
  7327  0E20  0820               	movf	CfgGetSizeByType@type,w
  7328                           
  7329                           ; Switch size 1, requested type "space"
  7330                           ; Number of cases is 3, Range of values is 0 to 2
  7331                           ; switch strategies available:
  7332                           ; Name         Instructions Cycles
  7333                           ; simple_byte           10     6 (average)
  7334                           ; direct_byte           12     6 (fixed)
  7335                           ; jumptable            260     6 (fixed)
  7336                           ;	Chosen strategy is simple_byte
  7337  0E21  3A00               	xorlw	0	; case 0
  7338  0E22  1903               	skipnz
  7339  0E23  2E1C               	goto	l2724
  7340  0E24  3A01               	xorlw	1	; case 1
  7341  0E25  1903               	skipnz
  7342  0E26  2E1D               	goto	l2728
  7343  0E27  3A03               	xorlw	3	; case 2
  7344  0E28  1903               	skipnz
  7345  0E29  2E1E               	goto	l2732
  7346  0E2A  2E1F               	goto	l2736
  7347  0E2B  0008               	return
  7348  0E2C                     __end_of_CfgGetSizeByType:	
  7349  0E2C                     __ptext45:	
  7350 ;; *************** function _handleCfgWrite *****************
  7351 ;; Defined at:
  7352 ;;		line 115 in file "../../../src/rfstack/client.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7355 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7358 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7359 ;;  index           1    7[BANK0 ] unsigned char 
  7360 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  7361 ;; Return value:  Size  Location     Type
  7362 ;;		None               void
  7363 ;; Registers used:
  7364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7365 ;; Tracked objects:
  7366 ;;		On entry : 1F/0
  7367 ;;		On exit  : 1F/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7370 ;;      Params:         0       0       0       0
  7371 ;;      Locals:         0       3       0       0
  7372 ;;      Temps:          0       0       0       0
  7373 ;;      Totals:         0       3       0       0
  7374 ;;Total ram usage:        3 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    6
  7377 ;; This function calls:
  7378 ;;		_CfgGetSizeByType
  7379 ;;		_memcpy
  7380 ;; This function is called by:
  7381 ;;		_HandlePacket
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           
  7386                           ;psect for function _handleCfgWrite
  7387  0E2C                     _handleCfgWrite:	
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in _handleCfgWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7391                           ;handleCfgWrite@packet stored from wreg
  7392  0E2C  00A8               	movwf	handleCfgWrite@packet
  7393                           
  7394                           ;client.c: 117: uint8_t index = packet->packet.data[0];
  7395  0E2D  0086               	movwf	6
  7396  0E2E  0187               	clrf	7
  7397  0E2F  3F46               	moviw [6]fsr1
  7398  0E30  00A7               	movwf	handleCfgWrite@index
  7399                           
  7400                           ;client.c: 118: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  7401  0E31  0727               	addwf	handleCfgWrite@index,w
  7402  0E32  0727               	addwf	handleCfgWrite@index,w
  7403  0E33  3E49               	addlw	low (_parameters| (0+32768))
  7404  0E34  3182               	movlp	high __stringtab
  7405  0E35  000A               	callw
  7406  0E36  3188               	pagesel	$	;select current page
  7407  0E37  261A               	fcall	_CfgGetSizeByType
  7408  0E38  00A6               	movwf	handleCfgWrite@nrOfBytes
  7409                           
  7410                           ;client.c: 120: memcpy(parameters[index].ptr, packet->packet.data + 1, nrOfBytes);
  7411  0E39  0828               	movf	handleCfgWrite@packet,w
  7412  0E3A  3E07               	addlw	7
  7413  0E3B  00A0               	movwf	memcpy@s1
  7414  0E3C  0826               	movf	handleCfgWrite@nrOfBytes,w
  7415  0E3D  00A1               	movwf	memcpy@n
  7416  0E3E  01A2               	clrf	memcpy@n+1
  7417  0E3F  0827               	movf	handleCfgWrite@index,w
  7418  0E40  0727               	addwf	handleCfgWrite@index,w
  7419  0E41  0727               	addwf	handleCfgWrite@index,w
  7420  0E42  3E4B               	addlw	low ((_parameters| (0+32768)+2))
  7421  0E43  3182               	movlp	high __stringtab
  7422  0E44  000A               	callw
  7423  0E45  3188               	pagesel	$	;select current page
  7424  0E46  2E47               	ljmp	_memcpy
  7425  0E47                     __end_of_handleCfgWrite:	
  7426  0E47                     __ptext47:	
  7427 ;; *************** function _memcpy *****************
  7428 ;; Defined at:
  7429 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\memcpy.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  d1              1    wreg     PTR void 
  7432 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  7433 ;;		 -> cfgRam(9), 
  7434 ;;  s1              1    0[BANK0 ] PTR const void 
  7435 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), NULL(0), 
  7436 ;;		 -> cfgRam(9), 
  7437 ;;  n               2    1[BANK0 ] unsigned int 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  d1              1    5[BANK0 ] PTR void 
  7440 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  7441 ;;		 -> cfgRam(9), 
  7442 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  7443 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), NULL(0), 
  7444 ;;		 -> cfgRam(9), 
  7445 ;;  d               1    3[BANK0 ] PTR unsigned char 
  7446 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  7447 ;;		 -> cfgRam(9), 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  1    wreg      PTR void 
  7450 ;; Registers used:
  7451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7452 ;; Tracked objects:
  7453 ;;		On entry : 1F/0
  7454 ;;		On exit  : 1F/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7457 ;;      Params:         0       3       0       0
  7458 ;;      Locals:         0       3       0       0
  7459 ;;      Temps:          0       0       0       0
  7460 ;;      Totals:         0       6       0       0
  7461 ;;Total ram usage:        6 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    5
  7464 ;; This function calls:
  7465 ;;		Nothing
  7466 ;; This function is called by:
  7467 ;;		_handleCfgRead
  7468 ;;		_handleCfgWrite
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           
  7473                           ;psect for function _memcpy
  7474  0E47                     _memcpy:	
  7475                           
  7476                           ;incstack = 0
  7477                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  7478                           ;memcpy@d1 stored from wreg
  7479  0E47  00A5               	movwf	memcpy@d1
  7480  0E48  0820               	movf	memcpy@s1,w
  7481  0E49  00A4               	movwf	memcpy@s
  7482  0E4A  0825               	movf	memcpy@d1,w
  7483  0E4B  00A3               	movwf	memcpy@d
  7484  0E4C                     l2752:	
  7485  0E4C  3001               	movlw	1
  7486  0E4D  02A1               	subwf	memcpy@n,f
  7487  0E4E  3000               	movlw	0
  7488  0E4F  3BA2               	subwfb	memcpy@n+1,f
  7489  0E50  0A21               	incf	memcpy@n,w
  7490  0E51  1903               	skipnz
  7491  0E52  0A22               	incf	memcpy@n+1,w
  7492  0E53  1903               	btfsc	3,2
  7493  0E54  0008               	return
  7494  0E55  0823               	movf	memcpy@d,w
  7495  0E56  0086               	movwf	6
  7496  0E57  0187               	clrf	7
  7497  0E58  0824               	movf	memcpy@s,w
  7498  0E59  0084               	movwf	4
  7499  0E5A  0185               	clrf	5
  7500  0E5B  0800               	movf	0,w
  7501  0E5C  0081               	movwf	1
  7502  0E5D  0AA4               	incf	memcpy@s,f
  7503  0E5E  0AA3               	incf	memcpy@d,f
  7504  0E5F  2E4C               	goto	l2752
  7505  0E60                     __end_of_memcpy:	
  7506  0E60                     __ptext44:	
  7507 ;; *************** function _handleFwCmd *****************
  7508 ;; Defined at:
  7509 ;;		line 8 in file "../../../src/rfstack/client.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7512 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7515 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7516 ;; Return value:  Size  Location     Type
  7517 ;;		None               void
  7518 ;; Registers used:
  7519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7520 ;; Tracked objects:
  7521 ;;		On entry : 1F/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7525 ;;      Params:         0       0       0       0
  7526 ;;      Locals:         0       1       0       0
  7527 ;;      Temps:          0       0       0       0
  7528 ;;      Totals:         0       1       0       0
  7529 ;;Total ram usage:        1 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    8
  7532 ;; This function calls:
  7533 ;;		_eepromRxBytes
  7534 ;; This function is called by:
  7535 ;;		_HandlePacket
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           
  7540                           ;psect for function _handleFwCmd
  7541  0E60                     _handleFwCmd:	
  7542                           
  7543                           ;incstack = 0
  7544                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7545                           ;handleFwCmd@packet stored from wreg
  7546  0E60  00A8               	movwf	handleFwCmd@packet
  7547                           
  7548                           ;client.c: 23: break;
  7549                           
  7550                           ;client.c: 10: switch(packet->packet.data[0])
  7551  0E61  27D7  3188         	fcall	PL24	;call to abstracted procedure
  7552                           
  7553                           ; Switch size 1, requested type "space"
  7554                           ; Number of cases is 2, Range of values is 0 to 1
  7555                           ; switch strategies available:
  7556                           ; Name         Instructions Cycles
  7557                           ; simple_byte            7     4 (average)
  7558                           ; direct_byte           10     6 (fixed)
  7559                           ; jumptable            260     6 (fixed)
  7560                           ;	Chosen strategy is simple_byte
  7561  0E63  3A00               	xorlw	0	; case 0
  7562  0E64  1903               	skipnz
  7563  0E65  2E80               	goto	l535
  7564  0E66  3A01               	xorlw	1	; case 1
  7565  0E67  1903               	skipnz
  7566  0E68  2E6A               	goto	l2998
  7567  0E69  2E80               	goto	l535
  7568  0E6A                     l2998:	
  7569                           
  7570                           ;client.c: 17: packet->packet.size = 5;
  7571  0E6A  0A28               	incf	handleFwCmd@packet,w
  7572  0E6B  0086               	movwf	6
  7573  0E6C  3005               	movlw	5
  7574  0E6D  0187               	clrf	7
  7575  0E6E  0081               	movwf	1
  7576                           
  7577                           ;client.c: 18: packet->packet.data[1] = 0;
  7578  0E6F  0828               	movf	handleFwCmd@packet,w
  7579  0E70  3E07               	addlw	7
  7580  0E71  0086               	movwf	6
  7581  0E72  0181               	clrf	1
  7582                           
  7583                           ;client.c: 19: packet->packet.data[2] = 1;
  7584  0E73  0828               	movf	handleFwCmd@packet,w
  7585  0E74  3E08               	addlw	8
  7586  0E75  0086               	movwf	6
  7587  0E76  0181               	clrf	1
  7588  0E77  0A81               	incf	1,f
  7589                           
  7590                           ;client.c: 21: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  7591  0E78  01A4               	clrf	eepromRxBytes@address
  7592  0E79  01A5               	clrf	eepromRxBytes@address+1
  7593  0E7A  0828               	movf	handleFwCmd@packet,w
  7594  0E7B  3E09               	addlw	9
  7595  0E7C  00A6               	movwf	eepromRxBytes@data
  7596  0E7D  3002               	movlw	2
  7597  0E7E  00A7               	movwf	eepromRxBytes@size
  7598  0E7F  2A20               	ljmp	l2598
  7599  0E80                     l535:	
  7600  0E80  0008               	return
  7601  0E81                     __end_of_handleFwCmd:	
  7602  0E81                     __ptext52:	
  7603 ;; *************** function _CfgLoad *****************
  7604 ;; Defined at:
  7605 ;;		line 19 in file "../../../src/node/config.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;		None
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;		None
  7610 ;; Return value:  Size  Location     Type
  7611 ;;		None               void
  7612 ;; Registers used:
  7613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7614 ;; Tracked objects:
  7615 ;;		On entry : 1E/1
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7619 ;;      Params:         0       0       0       0
  7620 ;;      Locals:         0       0       0       0
  7621 ;;      Temps:          0       0       0       0
  7622 ;;      Totals:         0       0       0       0
  7623 ;;Total ram usage:        0 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    8
  7626 ;; This function calls:
  7627 ;;		_eepromRxBytes
  7628 ;; This function is called by:
  7629 ;;		_handleCfgCmd
  7630 ;;		_main
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           
  7635                           ;psect for function _CfgLoad
  7636  0E81                     _CfgLoad:	
  7637  0E81                     l2756:	
  7638                           ;incstack = 0
  7639                           ; Regs used in _CfgLoad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7640                           
  7641                           
  7642                           ;config.c: 21: eepromRxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  7643  0E81  0020               	movlb	0	; select bank0
  7644  0E82  3034               	movlw	_cfgRam& (0+255)
  7645  0E83  01A4               	clrf	eepromRxBytes@address
  7646  0E84  01A5               	clrf	eepromRxBytes@address+1
  7647  0E85  00A6               	movwf	eepromRxBytes@data
  7648  0E86  3009               	movlw	9
  7649  0E87  00A7               	movwf	eepromRxBytes@size
  7650  0E88  2A20               	ljmp	l2598
  7651  0E89                     __end_of_CfgLoad:	
  7652  0E89                     __ptext50:	
  7653 ;; *************** function _CfgSave *****************
  7654 ;; Defined at:
  7655 ;;		line 24 in file "../../../src/node/config.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;		None
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;		None
  7660 ;; Return value:  Size  Location     Type
  7661 ;;		None               void
  7662 ;; Registers used:
  7663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7664 ;; Tracked objects:
  7665 ;;		On entry : 1F/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7669 ;;      Params:         0       0       0       0
  7670 ;;      Locals:         0       0       0       0
  7671 ;;      Temps:          0       0       0       0
  7672 ;;      Totals:         0       0       0       0
  7673 ;;Total ram usage:        0 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    8
  7676 ;; This function calls:
  7677 ;;		_eepromTxBytes
  7678 ;; This function is called by:
  7679 ;;		_handleCfgCmd
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           
  7684                           ;psect for function _CfgSave
  7685  0E89                     _CfgSave:	
  7686  0E89                     l2754:	
  7687                           ;incstack = 0
  7688                           ; Regs used in _CfgSave: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7689                           
  7690  0E89  3034               	movlw	_cfgRam& (0+255)
  7691                           
  7692                           ;config.c: 26: eepromTxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  7693  0E8A  01A4               	clrf	eepromTxBytes@address
  7694  0E8B  01A5               	clrf	eepromTxBytes@address+1
  7695  0E8C  00A6               	movwf	eepromTxBytes@data
  7696  0E8D  3009               	movlw	9
  7697  0E8E  00A7               	movwf	eepromTxBytes@size
  7698  0E8F  29EB               	ljmp	l2610
  7699  0E90                     __end_of_CfgSave:	
  7700  0E90                     __ptext42:	
  7701 ;; *************** function _Mrf49SpiRx *****************
  7702 ;; Defined at:
  7703 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;		None
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;  data            1    0[BANK0 ] unsigned char 
  7708 ;; Return value:  Size  Location     Type
  7709 ;;                  1    wreg      unsigned char 
  7710 ;; Registers used:
  7711 ;;		wreg, status,2
  7712 ;; Tracked objects:
  7713 ;;		On entry : 1F/0
  7714 ;;		On exit  : 1F/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7717 ;;      Params:         0       0       0       0
  7718 ;;      Locals:         0       1       0       0
  7719 ;;      Temps:          0       0       0       0
  7720 ;;      Totals:         0       1       0       0
  7721 ;;Total ram usage:        1 bytes
  7722 ;; Hardware stack levels used:    1
  7723 ;; Hardware stack levels required when called:    5
  7724 ;; This function calls:
  7725 ;;		Nothing
  7726 ;; This function is called by:
  7727 ;;		_Mrf49RxCmd
  7728 ;;		_Mrf49RxSts
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           
  7733                           ;psect for function _Mrf49SpiRx
  7734  0E90                     _Mrf49SpiRx:	
  7735                           
  7736                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7737                           
  7738                           ;incstack = 0
  7739                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  7740  0E90  01A0               	clrf	Mrf49SpiRx@data
  7741                           
  7742                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  7743  0E91  138D               	bcf	13,7	;volatile
  7744  0E92  1A8E               	btfsc	14,5	;volatile
  7745  0E93  17A0               	bsf	Mrf49SpiRx@data,7
  7746  0E94  0022               	movlb	2	; select bank2
  7747  0E95  178E               	bsf	14,7	;volatile
  7748  0E96  0000               	nop	;# 
  7749  0E97  0022               	movlb	2	; select bank2
  7750  0E98  138E               	bcf	14,7	;volatile
  7751                           
  7752                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7753  0E99  0020               	movlb	0	; select bank0
  7754  0E9A  1A8E               	btfsc	14,5	;volatile
  7755  0E9B  1720               	bsf	Mrf49SpiRx@data,6
  7756  0E9C  0022               	movlb	2	; select bank2
  7757  0E9D  178E               	bsf	14,7	;volatile
  7758  0E9E  0000               	nop	;# 
  7759  0E9F  0022               	movlb	2	; select bank2
  7760  0EA0  138E               	bcf	14,7	;volatile
  7761                           
  7762                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7763  0EA1  0020               	movlb	0	; select bank0
  7764  0EA2  1A8E               	btfsc	14,5	;volatile
  7765  0EA3  16A0               	bsf	Mrf49SpiRx@data,5
  7766  0EA4  0022               	movlb	2	; select bank2
  7767  0EA5  178E               	bsf	14,7	;volatile
  7768  0EA6  0000               	nop	;# 
  7769  0EA7  0022               	movlb	2	; select bank2
  7770  0EA8  138E               	bcf	14,7	;volatile
  7771                           
  7772                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7773  0EA9  0020               	movlb	0	; select bank0
  7774  0EAA  1A8E               	btfsc	14,5	;volatile
  7775  0EAB  1620               	bsf	Mrf49SpiRx@data,4
  7776  0EAC  0022               	movlb	2	; select bank2
  7777  0EAD  178E               	bsf	14,7	;volatile
  7778  0EAE  0000               	nop	;# 
  7779  0EAF  0022               	movlb	2	; select bank2
  7780  0EB0  138E               	bcf	14,7	;volatile
  7781                           
  7782                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7783  0EB1  0020               	movlb	0	; select bank0
  7784  0EB2  1A8E               	btfsc	14,5	;volatile
  7785  0EB3  15A0               	bsf	Mrf49SpiRx@data,3
  7786  0EB4  0022               	movlb	2	; select bank2
  7787  0EB5  178E               	bsf	14,7	;volatile
  7788  0EB6  0000               	nop	;# 
  7789  0EB7  0022               	movlb	2	; select bank2
  7790  0EB8  138E               	bcf	14,7	;volatile
  7791                           
  7792                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7793  0EB9  0020               	movlb	0	; select bank0
  7794  0EBA  1A8E               	btfsc	14,5	;volatile
  7795  0EBB  1520               	bsf	Mrf49SpiRx@data,2
  7796  0EBC  0022               	movlb	2	; select bank2
  7797  0EBD  178E               	bsf	14,7	;volatile
  7798  0EBE  0000               	nop	;# 
  7799  0EBF  0022               	movlb	2	; select bank2
  7800  0EC0  138E               	bcf	14,7	;volatile
  7801                           
  7802                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7803  0EC1  0020               	movlb	0	; select bank0
  7804  0EC2  1A8E               	btfsc	14,5	;volatile
  7805  0EC3  14A0               	bsf	Mrf49SpiRx@data,1
  7806  0EC4  0022               	movlb	2	; select bank2
  7807  0EC5  178E               	bsf	14,7	;volatile
  7808  0EC6  0000               	nop	;# 
  7809  0EC7  0022               	movlb	2	; select bank2
  7810  0EC8  138E               	bcf	14,7	;volatile
  7811                           
  7812                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7813  0EC9  0020               	movlb	0	; select bank0
  7814  0ECA  1A8E               	btfsc	14,5	;volatile
  7815  0ECB  1420               	bsf	Mrf49SpiRx@data,0
  7816  0ECC  0022               	movlb	2	; select bank2
  7817  0ECD  178E               	bsf	14,7	;volatile
  7818  0ECE  0000               	nop	;# 
  7819  0ECF  0022               	movlb	2	; select bank2
  7820  0ED0  138E               	bcf	14,7	;volatile
  7821                           
  7822                           ;mrf49xa_spi_pic16.c: 40: return data;
  7823  0ED1  0020               	movlb	0	; select bank0
  7824  0ED2  0820               	movf	Mrf49SpiRx@data,w
  7825  0ED3  0008               	return
  7826  0ED4                     __end_of_Mrf49SpiRx:	
  7827  0ED4                     __ptext41:	
  7828 ;; *************** function _Mrf49SpiTx *****************
  7829 ;; Defined at:
  7830 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  byte            1    wreg     unsigned char 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;  byte            1    0[BANK0 ] unsigned char 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;		None               void
  7837 ;; Registers used:
  7838 ;;		wreg
  7839 ;; Tracked objects:
  7840 ;;		On entry : 1F/0
  7841 ;;		On exit  : 1F/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7844 ;;      Params:         0       0       0       0
  7845 ;;      Locals:         0       1       0       0
  7846 ;;      Temps:          0       0       0       0
  7847 ;;      Totals:         0       1       0       0
  7848 ;;Total ram usage:        1 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    5
  7851 ;; This function calls:
  7852 ;;		Nothing
  7853 ;; This function is called by:
  7854 ;;		_Mrf49TxCmd
  7855 ;;		_Mrf49RxCmd
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function _Mrf49SpiTx
  7861  0ED4                     _Mrf49SpiTx:	
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in _Mrf49SpiTx: [wreg]
  7865                           ;Mrf49SpiTx@byte stored from wreg
  7866  0ED4  00A0               	movwf	Mrf49SpiTx@byte
  7867                           
  7868                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  7869  0ED5  1FA0               	btfss	Mrf49SpiTx@byte,7
  7870  0ED6  2ED9               	goto	l255
  7871  0ED7  178D               	bsf	13,7	;volatile
  7872  0ED8  2EDA               	goto	l256
  7873  0ED9                     l255:	
  7874  0ED9  138D               	bcf	13,7	;volatile
  7875  0EDA                     l256:	
  7876  0EDA  0022               	movlb	2	; select bank2
  7877  0EDB  178E               	bsf	14,7	;volatile
  7878  0EDC  0000               	nop	;# 
  7879  0EDD  0022               	movlb	2	; select bank2
  7880  0EDE  138E               	bcf	14,7	;volatile
  7881  0EDF  0020               	movlb	0	; select bank0
  7882  0EE0  1F20               	btfss	Mrf49SpiTx@byte,6
  7883  0EE1  2EE4               	goto	l259
  7884  0EE2  178D               	bsf	13,7	;volatile
  7885  0EE3  2EE5               	goto	l260
  7886  0EE4                     l259:	
  7887  0EE4  138D               	bcf	13,7	;volatile
  7888  0EE5                     l260:	
  7889  0EE5  0022               	movlb	2	; select bank2
  7890  0EE6  178E               	bsf	14,7	;volatile
  7891  0EE7  0000               	nop	;# 
  7892  0EE8  0022               	movlb	2	; select bank2
  7893  0EE9  138E               	bcf	14,7	;volatile
  7894  0EEA  0020               	movlb	0	; select bank0
  7895  0EEB  1EA0               	btfss	Mrf49SpiTx@byte,5
  7896  0EEC  2EEF               	goto	l263
  7897  0EED  178D               	bsf	13,7	;volatile
  7898  0EEE  2EF0               	goto	l264
  7899  0EEF                     l263:	
  7900  0EEF  138D               	bcf	13,7	;volatile
  7901  0EF0                     l264:	
  7902  0EF0  0022               	movlb	2	; select bank2
  7903  0EF1  178E               	bsf	14,7	;volatile
  7904  0EF2  0000               	nop	;# 
  7905  0EF3  0022               	movlb	2	; select bank2
  7906  0EF4  138E               	bcf	14,7	;volatile
  7907  0EF5  0020               	movlb	0	; select bank0
  7908  0EF6  1E20               	btfss	Mrf49SpiTx@byte,4
  7909  0EF7  2EFA               	goto	l267
  7910  0EF8  178D               	bsf	13,7	;volatile
  7911  0EF9  2EFB               	goto	l268
  7912  0EFA                     l267:	
  7913  0EFA  138D               	bcf	13,7	;volatile
  7914  0EFB                     l268:	
  7915  0EFB  0022               	movlb	2	; select bank2
  7916  0EFC  178E               	bsf	14,7	;volatile
  7917  0EFD  0000               	nop	;# 
  7918  0EFE  0022               	movlb	2	; select bank2
  7919  0EFF  138E               	bcf	14,7	;volatile
  7920  0F00  0020               	movlb	0	; select bank0
  7921  0F01  1DA0               	btfss	Mrf49SpiTx@byte,3
  7922  0F02  2F05               	goto	l271
  7923  0F03  178D               	bsf	13,7	;volatile
  7924  0F04  2F06               	goto	l272
  7925  0F05                     l271:	
  7926  0F05  138D               	bcf	13,7	;volatile
  7927  0F06                     l272:	
  7928  0F06  0022               	movlb	2	; select bank2
  7929  0F07  178E               	bsf	14,7	;volatile
  7930  0F08  0000               	nop	;# 
  7931  0F09  0022               	movlb	2	; select bank2
  7932  0F0A  138E               	bcf	14,7	;volatile
  7933  0F0B  0020               	movlb	0	; select bank0
  7934  0F0C  1D20               	btfss	Mrf49SpiTx@byte,2
  7935  0F0D  2F10               	goto	l275
  7936  0F0E  178D               	bsf	13,7	;volatile
  7937  0F0F  2F11               	goto	l276
  7938  0F10                     l275:	
  7939  0F10  138D               	bcf	13,7	;volatile
  7940  0F11                     l276:	
  7941  0F11  0022               	movlb	2	; select bank2
  7942  0F12  178E               	bsf	14,7	;volatile
  7943  0F13  0000               	nop	;# 
  7944  0F14  0022               	movlb	2	; select bank2
  7945  0F15  138E               	bcf	14,7	;volatile
  7946  0F16  0020               	movlb	0	; select bank0
  7947  0F17  1CA0               	btfss	Mrf49SpiTx@byte,1
  7948  0F18  2F1B               	goto	l279
  7949  0F19  178D               	bsf	13,7	;volatile
  7950  0F1A  2F1C               	goto	l280
  7951  0F1B                     l279:	
  7952  0F1B  138D               	bcf	13,7	;volatile
  7953  0F1C                     l280:	
  7954  0F1C  0022               	movlb	2	; select bank2
  7955  0F1D  178E               	bsf	14,7	;volatile
  7956  0F1E  0000               	nop	;# 
  7957  0F1F  0022               	movlb	2	; select bank2
  7958  0F20  138E               	bcf	14,7	;volatile
  7959  0F21  0020               	movlb	0	; select bank0
  7960  0F22  1C20               	btfss	Mrf49SpiTx@byte,0
  7961  0F23  2F26               	goto	l283
  7962  0F24  178D               	bsf	13,7	;volatile
  7963  0F25  2F27               	goto	l284
  7964  0F26                     l283:	
  7965  0F26  138D               	bcf	13,7	;volatile
  7966  0F27                     l284:	
  7967  0F27  0022               	movlb	2	; select bank2
  7968  0F28  178E               	bsf	14,7	;volatile
  7969  0F29  0000               	nop	;# 
  7970  0F2A  0022               	movlb	2	; select bank2
  7971  0F2B  138E               	bcf	14,7	;volatile
  7972                           
  7973                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  7974  0F2C  0020               	movlb	0	; select bank0
  7975  0F2D  138D               	bcf	13,7	;volatile
  7976  0F2E  0008               	return
  7977  0F2F                     __end_of_Mrf49SpiTx:	
  7978  0F2F                     __ptext29:	
  7979 ;; *************** function _Mrf49xaPacketPending *****************
  7980 ;; Defined at:
  7981 ;;		line 6 in file "../../../src/devices/mrf49xa_packet.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;		None
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;		None
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      unsigned char 
  7988 ;; Registers used:
  7989 ;;		wreg
  7990 ;; Tracked objects:
  7991 ;;		On entry : 1F/1
  7992 ;;		On exit  : 1F/1
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7995 ;;      Params:         0       0       0       0
  7996 ;;      Locals:         0       0       0       0
  7997 ;;      Temps:          0       0       0       0
  7998 ;;      Totals:         0       0       0       0
  7999 ;;Total ram usage:        0 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    5
  8002 ;; This function calls:
  8003 ;;		Nothing
  8004 ;; This function is called by:
  8005 ;;		_Mrf49xaTick
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           
  8010                           ;psect for function _Mrf49xaPacketPending
  8011  0F2F                     _Mrf49xaPacketPending:	
  8012                           
  8013                           ;mrf49xa_packet.c: 8: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  8014                           ;mrf49xa_packet.c: 9: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  8015                           
  8016                           ;incstack = 0
  8017                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  8018  0F2F  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  8019  0F30  3A05               	xorlw	5
  8020  0F31  1903               	skipnz
  8021  0F32  3401               	retlw	1
  8022  0F33  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  8023  0F34  3A05               	xorlw	5
  8024  0F35  1903               	btfsc	3,2
  8025                           
  8026                           ;mrf49xa_packet.c: 10: return 1;
  8027  0F36  3401               	retlw	1
  8028                           
  8029                           ;mrf49xa_packet.c: 11: else
  8030                           ;mrf49xa_packet.c: 12: return 0;
  8031  0F37  3400               	retlw	0
  8032  0F38                     __end_of_Mrf49xaPacketPending:	
  8033  0F38                     __ptext28:	
  8034 ;; *************** function _Mrf49xaRxPacket *****************
  8035 ;; Defined at:
  8036 ;;		line 90 in file "../../../src/devices/mrf49xa_packet.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;		None
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;		None
  8041 ;; Return value:  Size  Location     Type
  8042 ;;                  1    wreg      PTR struct rfTrcvPacket_
  8043 ;; Registers used:
  8044 ;;		wreg
  8045 ;; Tracked objects:
  8046 ;;		On entry : 1F/1
  8047 ;;		On exit  : 1F/1
  8048 ;;		Unchanged: 0/0
  8049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8050 ;;      Params:         0       0       0       0
  8051 ;;      Locals:         0       0       0       0
  8052 ;;      Temps:          0       0       0       0
  8053 ;;      Totals:         0       0       0       0
  8054 ;;Total ram usage:        0 bytes
  8055 ;; Hardware stack levels used:    1
  8056 ;; Hardware stack levels required when called:    5
  8057 ;; This function calls:
  8058 ;;		Nothing
  8059 ;; This function is called by:
  8060 ;;		_Mrf49xaTick
  8061 ;; This function uses a non-reentrant model
  8062 ;;
  8063                           
  8064                           
  8065                           ;psect for function _Mrf49xaRxPacket
  8066  0F38                     _Mrf49xaRxPacket:	
  8067                           
  8068                           ;mrf49xa_packet.c: 92: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  8069                           
  8070                           ;incstack = 0
  8071                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  8072  0F38  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  8073  0F39  3A05               	xorlw	5
  8074  0F3A  1D03               	skipz
  8075  0F3B  2F3F               	goto	l3170
  8076                           
  8077                           ;mrf49xa_packet.c: 93: {
  8078                           ;mrf49xa_packet.c: 94: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  8079  0F3C  3006               	movlw	6
  8080  0F3D  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  8081                           
  8082                           ;mrf49xa_packet.c: 95: return &(rfTrcvStatus.rxPacket[0]);
  8083  0F3E  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  8084  0F3F                     l3170:	
  8085                           
  8086                           ;mrf49xa_packet.c: 96: }
  8087                           ;mrf49xa_packet.c: 98: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  8088  0F3F  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  8089  0F40  3A05               	xorlw	5
  8090  0F41  1D03               	skipz
  8091  0F42  3400               	retlw	0
  8092                           
  8093                           ;mrf49xa_packet.c: 99: {
  8094                           ;mrf49xa_packet.c: 100: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  8095  0F43  3006               	movlw	6
  8096  0F44  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  8097                           
  8098                           ;mrf49xa_packet.c: 101: return &(rfTrcvStatus.rxPacket[1]);
  8099  0F45  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  8100  0F46                     __end_of_Mrf49xaRxPacket:	
  8101                           ;mrf49xa_packet.c: 102: }
  8102                           ;mrf49xa_packet.c: 104: return (0);
  8103                           
  8104  0F46                     __ptext26:	
  8105 ;; *************** function _PwrAdcInit *****************
  8106 ;; Defined at:
  8107 ;;		line 169 in file "../../../src/node/power.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;		None               void
  8114 ;; Registers used:
  8115 ;;		status,2
  8116 ;; Tracked objects:
  8117 ;;		On entry : 17F/1
  8118 ;;		On exit  : 17F/1
  8119 ;;		Unchanged: 160/0
  8120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8121 ;;      Params:         0       0       0       0
  8122 ;;      Locals:         0       0       0       0
  8123 ;;      Temps:          0       0       0       0
  8124 ;;      Totals:         0       0       0       0
  8125 ;;Total ram usage:        0 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    5
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_main
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           
  8136                           ;psect for function _PwrAdcInit
  8137  0F46                     _PwrAdcInit:	
  8138                           
  8139                           ;power.c: 171: ANSELA = 0;
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in _PwrAdcInit: [status,2]
  8143  0F46  0023               	movlb	3	; select bank3
  8144  0F47  018C               	clrf	12	;volatile
  8145                           
  8146                           ;power.c: 172: ANSELB = 0;
  8147  0F48  018D               	clrf	13	;volatile
  8148                           
  8149                           ;power.c: 173: ANSELC = 0;
  8150  0F49  018E               	clrf	14	;volatile
  8151                           
  8152                           ;power.c: 175: PORTCbits.RC0 = 1;
  8153  0F4A  0020               	movlb	0	; select bank0
  8154  0F4B  140E               	bsf	14,0	;volatile
  8155                           
  8156                           ;power.c: 176: TRISCbits.TRISC0 = 0;
  8157  0F4C  0021               	movlb	1	; select bank1
  8158  0F4D  100E               	bcf	14,0	;volatile
  8159  0F4E  0008               	return
  8160  0F4F                     __end_of_PwrAdcInit:	
  8161  0F4F                     __ptext24:	
  8162 ;; *************** function _PwrI2cInit *****************
  8163 ;; Defined at:
  8164 ;;		line 62 in file "../../../src/node/power.c"
  8165 ;; Parameters:    Size  Location     Type
  8166 ;;		None
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;		None
  8169 ;; Return value:  Size  Location     Type
  8170 ;;		None               void
  8171 ;; Registers used:
  8172 ;;		wreg, status,2, status,0, pclath, cstack
  8173 ;; Tracked objects:
  8174 ;;		On entry : 17F/2
  8175 ;;		On exit  : 1F/2
  8176 ;;		Unchanged: 0/0
  8177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8178 ;;      Params:         0       0       0       0
  8179 ;;      Locals:         0       0       0       0
  8180 ;;      Temps:          0       0       0       0
  8181 ;;      Totals:         0       0       0       0
  8182 ;;Total ram usage:        0 bytes
  8183 ;; Hardware stack levels used:    1
  8184 ;; Hardware stack levels required when called:    8
  8185 ;; This function calls:
  8186 ;;		_SoftI2cInit
  8187 ;; This function is called by:
  8188 ;;		_main
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           
  8193                           ;psect for function _PwrI2cInit
  8194  0F4F                     _PwrI2cInit:	
  8195                           
  8196                           ;power.c: 64: SoftI2cInit();
  8197                           
  8198                           ;incstack = 0
  8199                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  8200  0F4F  2027               	fcall	_SoftI2cInit
  8201                           
  8202                           ;power.c: 66: TRISBbits.TRISB4 = 0;
  8203  0F50  0021               	movlb	1	; select bank1
  8204  0F51  120D               	bcf	13,4	;volatile
  8205                           
  8206                           ;power.c: 67: TRISBbits.TRISB6 = 0;
  8207  0F52  130D               	bcf	13,6	;volatile
  8208                           
  8209                           ;power.c: 69: TRISBbits.TRISB5 = 0;
  8210  0F53  128D               	bcf	13,5	;volatile
  8211                           
  8212                           ;power.c: 70: LATBbits.LATB5 = 1;
  8213  0F54  0022               	movlb	2	; select bank2
  8214  0F55  168D               	bsf	13,5	;volatile
  8215  0F56  0008               	return
  8216  0F57                     __end_of_PwrI2cInit:	
  8217  0F57                     __ptext18:	
  8218 ;; *************** function _PwrRfSleep *****************
  8219 ;; Defined at:
  8220 ;;		line 119 in file "../../../src/node/power.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;		None
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;		None
  8225 ;; Return value:  Size  Location     Type
  8226 ;;		None               void
  8227 ;; Registers used:
  8228 ;;		wreg, status,2, status,0, pclath, cstack
  8229 ;; Tracked objects:
  8230 ;;		On entry : 1E/1
  8231 ;;		On exit  : 1F/1
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8234 ;;      Params:         0       0       0       0
  8235 ;;      Locals:         0       0       0       0
  8236 ;;      Temps:          0       0       0       0
  8237 ;;      Totals:         0       0       0       0
  8238 ;;Total ram usage:        0 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; Hardware stack levels required when called:    9
  8241 ;; This function calls:
  8242 ;;		_Mrf49xaShutdown
  8243 ;; This function is called by:
  8244 ;;		_main
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           
  8249                           ;psect for function _PwrRfSleep
  8250  0F57                     _PwrRfSleep:	
  8251                           
  8252                           ;power.c: 121: Mrf49xaShutdown();
  8253                           
  8254                           ;incstack = 0
  8255                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  8256  0F57  2778               	fcall	_Mrf49xaShutdown
  8257                           
  8258                           ;power.c: 122: INTCONbits.INTE = 0;
  8259  0F58  120B               	bcf	11,4	;volatile
  8260                           
  8261                           ;power.c: 124: LATAbits.LATA5 = 1;
  8262  0F59  0022               	movlb	2	; select bank2
  8263  0F5A  168C               	bsf	12,5	;volatile
  8264                           
  8265                           ;power.c: 125: LATCbits.LATC5 = 1;
  8266  0F5B  168E               	bsf	14,5	;volatile
  8267                           
  8268                           ;power.c: 127: LATBbits.LATB7 = 1;
  8269  0F5C  178D               	bsf	13,7	;volatile
  8270                           
  8271                           ;power.c: 128: LATCbits.LATC7 = 1;
  8272  0F5D  178E               	bsf	14,7	;volatile
  8273                           
  8274                           ;power.c: 130: WPUAbits.WPUA5 = 0;
  8275  0F5E  0024               	movlb	4	; select bank4
  8276  0F5F  128C               	bcf	12,5	;volatile
  8277                           
  8278                           ;power.c: 132: TRISAbits.TRISA5 = 0;
  8279  0F60  0021               	movlb	1	; select bank1
  8280  0F61  128C               	bcf	12,5	;volatile
  8281                           
  8282                           ;power.c: 133: TRISCbits.TRISC5 = 0;
  8283  0F62  128E               	bcf	14,5	;volatile
  8284  0F63  0008               	return
  8285  0F64                     __end_of_PwrRfSleep:	
  8286  0F64                     __ptext16:	
  8287 ;; *************** function _PwrRfWake *****************
  8288 ;; Defined at:
  8289 ;;		line 136 in file "../../../src/node/power.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;		None
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;		None
  8294 ;; Return value:  Size  Location     Type
  8295 ;;		None               void
  8296 ;; Registers used:
  8297 ;;		wreg, status,2, status,0, pclath, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 1F/1
  8300 ;;		On exit  : 1F/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8303 ;;      Params:         0       0       0       0
  8304 ;;      Locals:         0       0       0       0
  8305 ;;      Temps:          0       0       0       0
  8306 ;;      Totals:         0       0       0       0
  8307 ;;Total ram usage:        0 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    9
  8310 ;; This function calls:
  8311 ;;		_Mrf49xaReboot
  8312 ;; This function is called by:
  8313 ;;		_main
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           
  8318                           ;psect for function _PwrRfWake
  8319  0F64                     _PwrRfWake:	
  8320                           
  8321                           ;power.c: 138: WPUAbits.WPUA5 = 1;
  8322                           
  8323                           ;incstack = 0
  8324                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  8325  0F64  0024               	movlb	4	; select bank4
  8326  0F65  168C               	bsf	12,5	;volatile
  8327                           
  8328                           ;power.c: 140: LATBbits.LATB7 = 0;
  8329  0F66  0022               	movlb	2	; select bank2
  8330  0F67  138D               	bcf	13,7	;volatile
  8331                           
  8332                           ;power.c: 141: LATCbits.LATC7 = 0;
  8333  0F68  138E               	bcf	14,7	;volatile
  8334                           
  8335                           ;power.c: 143: TRISAbits.TRISA5 = 1;
  8336  0F69  0021               	movlb	1	; select bank1
  8337  0F6A  168C               	bsf	12,5	;volatile
  8338                           
  8339                           ;power.c: 144: TRISCbits.TRISC5 = 1;
  8340  0F6B  168E               	bsf	14,5	;volatile
  8341                           
  8342                           ;power.c: 146: INTCONbits.INTE = 1;
  8343  0F6C  160B               	bsf	11,4	;volatile
  8344                           
  8345                           ;power.c: 147: Mrf49xaReboot();
  8346  0F6D  2BBD               	ljmp	l2632
  8347  0F6E                     __end_of_PwrRfWake:	
  8348  0F6E                     __ptext40:	
  8349 ;; *************** function _Mrf49RxCmd *****************
  8350 ;; Defined at:
  8351 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  cmd             1    wreg     unsigned char 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  cmd             1    1[BANK0 ] unsigned char 
  8356 ;;  val             1    2[BANK0 ] unsigned char 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  1    wreg      unsigned char 
  8359 ;; Registers used:
  8360 ;;		wreg, status,2, status,0, pclath, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 1E/1
  8363 ;;		On exit  : 1F/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8366 ;;      Params:         0       0       0       0
  8367 ;;      Locals:         0       2       0       0
  8368 ;;      Temps:          0       0       0       0
  8369 ;;      Totals:         0       2       0       0
  8370 ;;Total ram usage:        2 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    6
  8373 ;; This function calls:
  8374 ;;		_Mrf49SpiRx
  8375 ;;		_Mrf49SpiTx
  8376 ;; This function is called by:
  8377 ;;		_Mrf49RxByte
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           
  8382                           ;psect for function _Mrf49RxCmd
  8383  0F6E                     _Mrf49RxCmd:	
  8384                           
  8385                           ;incstack = 0
  8386                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  8387                           ;Mrf49RxCmd@cmd stored from wreg
  8388  0F6E  0020               	movlb	0	; select bank0
  8389  0F6F  00A1               	movwf	Mrf49RxCmd@cmd
  8390                           
  8391                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  8392  0F70  130E               	bcf	14,6	;volatile
  8393                           
  8394                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  8395  0F71  0821               	movf	Mrf49RxCmd@cmd,w
  8396  0F72  26D4  3188         	fcall	_Mrf49SpiTx
  8397                           
  8398                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  8399  0F74  2690               	fcall	_Mrf49SpiRx
  8400  0F75  00A2               	movwf	Mrf49RxCmd@val
  8401                           
  8402                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  8403  0F76  170E               	bsf	14,6	;volatile
  8404                           
  8405                           ;mrf49xa_cmd.c: 27: return val;
  8406  0F77  0008               	return
  8407  0F78                     __end_of_Mrf49RxCmd:	
  8408  0F78                     __ptext19:	
  8409 ;; *************** function _Mrf49xaShutdown *****************
  8410 ;; Defined at:
  8411 ;;		line 131 in file "../../../src/devices/mrf49xa.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;		None
  8416 ;; Return value:  Size  Location     Type
  8417 ;;		None               void
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, status,0, pclath, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 1E/1
  8422 ;;		On exit  : 1F/1
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8425 ;;      Params:         0       0       0       0
  8426 ;;      Locals:         0       0       0       0
  8427 ;;      Temps:          0       0       0       0
  8428 ;;      Totals:         0       0       0       0
  8429 ;;Total ram usage:        0 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    8
  8432 ;; This function calls:
  8433 ;;		_Mrf49xaModeSleep
  8434 ;; This function is called by:
  8435 ;;		_PwrRfSleep
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function _Mrf49xaShutdown
  8441  0F78                     _Mrf49xaShutdown:	
  8442                           
  8443                           ;mrf49xa.c: 133: Mrf49xaModeSleep();
  8444                           
  8445                           ;incstack = 0
  8446                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  8447  0F78  3182  2A4F         	ljmp	l2968
  8448  0F7A                     __end_of_Mrf49xaShutdown:	
  8449  0F7A                     __ptext17:	
  8450 ;; *************** function _Mrf49xaReboot *****************
  8451 ;; Defined at:
  8452 ;;		line 139 in file "../../../src/devices/mrf49xa.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;		None
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;		None
  8457 ;; Return value:  Size  Location     Type
  8458 ;;		None               void
  8459 ;; Registers used:
  8460 ;;		wreg, status,2, status,0, pclath, cstack
  8461 ;; Tracked objects:
  8462 ;;		On entry : 1F/1
  8463 ;;		On exit  : 1F/0
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8466 ;;      Params:         0       0       0       0
  8467 ;;      Locals:         0       0       0       0
  8468 ;;      Temps:          0       0       0       0
  8469 ;;      Totals:         0       0       0       0
  8470 ;;Total ram usage:        0 bytes
  8471 ;; Hardware stack levels used:    1
  8472 ;; Hardware stack levels required when called:    8
  8473 ;; This function calls:
  8474 ;;		_Mrf49xaModeRx
  8475 ;; This function is called by:
  8476 ;;		_PwrRfWake
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           
  8481                           ;psect for function _Mrf49xaReboot
  8482  0F7A                     _Mrf49xaReboot:	
  8483                           
  8484                           ;mrf49xa.c: 141: Mrf49xaModeRx();
  8485                           
  8486                           ;incstack = 0
  8487                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  8488  0F7A  2BBD               	ljmp	l2632
  8489  0F7B                     __end_of_Mrf49xaReboot:	
  8490  0F7B                     __ptext6:	
  8491 ;; *************** function _AdcDeinit *****************
  8492 ;; Defined at:
  8493 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;		None
  8498 ;; Return value:  Size  Location     Type
  8499 ;;		None               void
  8500 ;; Registers used:
  8501 ;;		status,2
  8502 ;; Tracked objects:
  8503 ;;		On entry : 1F/1
  8504 ;;		On exit  : 1F/1
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8507 ;;      Params:         0       0       0       0
  8508 ;;      Locals:         0       0       0       0
  8509 ;;      Temps:          0       0       0       0
  8510 ;;      Totals:         0       0       0       0
  8511 ;;Total ram usage:        0 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    5
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_PwrAdcSleep
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           
  8522                           ;psect for function _AdcDeinit
  8523  0F7B                     _AdcDeinit:	
  8524  0F7B                     l2824:	
  8525                           ;incstack = 0
  8526                           ; Regs used in _AdcDeinit: [status,2]
  8527                           
  8528                           
  8529                           ;adc16.c: 17: FVRCON = 0;
  8530  0F7B  0022               	movlb	2	; select bank2
  8531  0F7C  0197               	clrf	23	;volatile
  8532                           
  8533                           ;adc16.c: 19: ADCON2 = 0;
  8534  0F7D  0021               	movlb	1	; select bank1
  8535  0F7E  019F               	clrf	31	;volatile
  8536                           
  8537                           ;adc16.c: 20: ADCON1 = 0;
  8538  0F7F  019E               	clrf	30	;volatile
  8539                           
  8540                           ;adc16.c: 21: ADCON0 = 0;
  8541  0F80  019D               	clrf	29	;volatile
  8542  0F81  0008               	return
  8543  0F82                     __end_of_AdcDeinit:	
  8544  0F82                     __ptext4:	
  8545 ;; *************** function _AdcInit *****************
  8546 ;; Defined at:
  8547 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  8548 ;; Parameters:    Size  Location     Type
  8549 ;;		None
  8550 ;; Auto vars:     Size  Location     Type
  8551 ;;		None
  8552 ;; Return value:  Size  Location     Type
  8553 ;;		None               void
  8554 ;; Registers used:
  8555 ;;		wreg, status,2
  8556 ;; Tracked objects:
  8557 ;;		On entry : 1F/1
  8558 ;;		On exit  : 1F/1
  8559 ;;		Unchanged: 0/0
  8560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8561 ;;      Params:         0       0       0       0
  8562 ;;      Locals:         0       0       0       0
  8563 ;;      Temps:          0       0       0       0
  8564 ;;      Totals:         0       0       0       0
  8565 ;;Total ram usage:        0 bytes
  8566 ;; Hardware stack levels used:    1
  8567 ;; Hardware stack levels required when called:    5
  8568 ;; This function calls:
  8569 ;;		Nothing
  8570 ;; This function is called by:
  8571 ;;		_PwrAdcWake
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           
  8576                           ;psect for function _AdcInit
  8577  0F82                     _AdcInit:	
  8578  0F82                     l2816:	
  8579                           ;incstack = 0
  8580                           ; Regs used in _AdcInit: [wreg+status,2]
  8581                           
  8582                           
  8583                           ;adc16.c: 6: FVRCON = 0b11100001;
  8584  0F82  30E1               	movlw	225
  8585  0F83  0022               	movlb	2	; select bank2
  8586  0F84  0097               	movwf	23	;volatile
  8587                           
  8588                           ;adc16.c: 8: ADCON2 = 0b00000000;
  8589  0F85  0021               	movlb	1	; select bank1
  8590  0F86  019F               	clrf	31	;volatile
  8591                           
  8592                           ;adc16.c: 9: ADCON1 = 0b11110000;
  8593  0F87  30F0               	movlw	240
  8594  0F88  009E               	movwf	30	;volatile
  8595                           
  8596                           ;adc16.c: 10: ADCON0 = 0b00000000;
  8597  0F89  019D               	clrf	29	;volatile
  8598                           
  8599                           ;adc16.c: 12: ADCON0 = 0b00010011;
  8600  0F8A  3013               	movlw	19
  8601  0F8B  009D               	movwf	29	;volatile
  8602  0F8C  0008               	return
  8603  0F8D                     __end_of_AdcInit:	
  8604  0F8D                     PL8:	
  8605  0F8D  30F0               	movlw	-16
  8606  0F8E  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  8607  0F8F  0AD1               	incf	(_rfTrcvStatus^(0+128)+49),f
  8608  0F90  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  8609  0F91  30CF               	movlw	-49
  8610  0F92  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  8611  0F93  0020               	movlb	0	; select bank0
  8612  0F94  0321               	decf	Mrf49xaTxPacket@needAck,w
  8613  0F95  3000               	movlw	0
  8614  0F96  1903               	skipnz
  8615  0F97  3001               	movlw	1
  8616  0F98  00A2               	movwf	??_Mrf49xaTxPacket
  8617  0F99  0EA2               	swapf	??_Mrf49xaTxPacket,f
  8618  0F9A  0DA2               	rlf	??_Mrf49xaTxPacket,f
  8619  0F9B  0DA2               	rlf	??_Mrf49xaTxPacket,f
  8620  0F9C  0021               	movlb	1	; select bank1
  8621  0F9D  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8622  0F9E  0020               	movlb	0	; select bank0
  8623  0F9F  0622               	xorwf	??_Mrf49xaTxPacket,w
  8624  0FA0  393F               	andlw	-193
  8625  0FA1  0622               	xorwf	??_Mrf49xaTxPacket,w
  8626  0FA2  0021               	movlb	1	; select bank1
  8627  0FA3  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  8628  0FA4  0008               	return
  8629  0FA5                     __end_ofPL8:	
  8630  0FA5                     PL10:	
  8631  0FA5  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8632  0FA6  390F               	andlw	15
  8633  0FA7  0020               	movlb	0	; select bank0
  8634  0FA8  00AC               	movwf	??_Mrf49xaTick
  8635  0FA9  0AAC               	incf	??_Mrf49xaTick,f
  8636  0FAA  0021               	movlb	1	; select bank1
  8637  0FAB  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8638  0FAC  0020               	movlb	0	; select bank0
  8639  0FAD  062C               	xorwf	??_Mrf49xaTick,w
  8640  0FAE  39F0               	andlw	-16
  8641  0FAF  062C               	xorwf	??_Mrf49xaTick,w
  8642  0FB0  0021               	movlb	1	; select bank1
  8643  0FB1  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  8644  0FB2  0008               	return
  8645  0FB3                     __end_ofPL10:	
  8646  0FB3                     PL12:	
  8647  0FB3  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8648  0FB4  397F               	andlw	127
  8649  0FB5  0020               	movlb	0	; select bank0
  8650  0FB6  00A4               	movwf	??_Mrf49xaServe
  8651  0FB7  0AA4               	incf	??_Mrf49xaServe,f
  8652  0FB8  0021               	movlb	1	; select bank1
  8653  0FB9  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8654  0FBA  0020               	movlb	0	; select bank0
  8655  0FBB  0624               	xorwf	??_Mrf49xaServe,w
  8656  0FBC  3980               	andlw	-128
  8657  0FBD  0624               	xorwf	??_Mrf49xaServe,w
  8658  0FBE  0021               	movlb	1	; select bank1
  8659  0FBF  0008               	return
  8660  0FC0                     __end_ofPL12:	
  8661  0FC0                     PL16:	
  8662  0FC0  0020               	movlb	0	; select bank0
  8663  0FC1  0825               	movf	Mrf49xaServe@data,w
  8664  0FC2  0081               	movwf	1
  8665  0FC3  0021               	movlb	1	; select bank1
  8666  0FC4  0820               	movf	_rfTrcvStatus^(0+128),w
  8667  0FC5  0008               	return
  8668  0FC6                     __end_ofPL16:	
  8669  0FC6                     PL18:	
  8670  0FC6  0187               	clrf	7
  8671  0FC7  0081               	movwf	1
  8672  0FC8  0828               	movf	handleCfgCmd@packet,w
  8673  0FC9  3E07               	addlw	7
  8674  0FCA  0086               	movwf	6
  8675  0FCB  0008               	return
  8676  0FCC                     __end_ofPL18:	
  8677  0FCC                     PL20:	
  8678  0FCC  170D               	bsf	13,6	;volatile
  8679  0FCD  160D               	bsf	13,4	;volatile
  8680  0FCE  0021               	movlb	1	; select bank1
  8681  0FCF  130D               	bcf	13,6	;volatile
  8682  0FD0  120D               	bcf	13,4	;volatile
  8683  0FD1  0008               	return
  8684  0FD2                     __end_ofPL20:	
  8685  0FD2                     PL22:	
  8686  0FD2  3040               	movlw	64
  8687  0FD3  0020               	movlb	0	; select bank0
  8688  0FD4  00A0               	movwf	Sleepy@ms
  8689  0FD5  01A1               	clrf	Sleepy@ms+1
  8690  0FD6  0008               	return
  8691  0FD7                     __end_ofPL22:	
  8692  0FD7                     PL24:	
  8693  0FD7  3E06               	addlw	6
  8694  0FD8  0086               	movwf	6
  8695  0FD9  0187               	clrf	7
  8696  0FDA  0801               	movf	1,w
  8697  0FDB  0008               	return
  8698  0FDC                     __end_ofPL24:	
  8699  0FDC                     __ptext30:	
  8700 ;; *************** function _Mrf49xaModeTx *****************
  8701 ;; Defined at:
  8702 ;;		line 111 in file "../../../src/devices/mrf49xa.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;		None
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;  k               1    3[BANK0 ] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;		None               void
  8709 ;; Registers used:
  8710 ;;		wreg, status,2, status,0, pclath, cstack
  8711 ;; Tracked objects:
  8712 ;;		On entry : 1F/0
  8713 ;;		On exit  : 1F/1
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8716 ;;      Params:         0       0       0       0
  8717 ;;      Locals:         0       1       0       0
  8718 ;;      Temps:          0       0       0       0
  8719 ;;      Totals:         0       1       0       0
  8720 ;;Total ram usage:        1 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    7
  8723 ;; This function calls:
  8724 ;;		_Mrf49TxCmd
  8725 ;; This function is called by:
  8726 ;;		_Mrf49xaTick
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           
  8731                           ;psect for function _Mrf49xaModeTx
  8732  0FDC                     _Mrf49xaModeTx:	
  8733  0FDC  300E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8734                           
  8735                           ;mrf49xa.c: 113: UI08_t k;
  8736                           ;mrf49xa.c: 114: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  8737                           
  8738                           ;incstack = 0
  8739                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  8740  0FDD  01A3               	clrf	Mrf49xaModeTx@k
  8741  0FDE  3182               	movlp	high __stringtab
  8742  0FDF  000A               	callw
  8743  0FE0  3188               	pagesel	$	;select current page
  8744  0FE1  3800               	iorlw	0
  8745  0FE2  1903               	btfsc	3,2
  8746  0FE3  2FF8               	goto	l3092
  8747  0FE4                     l3086:	
  8748  0FE4  3523               	lslf	Mrf49xaModeTx@k,w
  8749  0FE5  3E3C               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  8750  0FE6  3182               	movlp	high __stringtab
  8751  0FE7  000A               	callw
  8752  0FE8  3188               	pagesel	$	;select current page
  8753  0FE9  00A1               	movwf	Mrf49TxCmd@val
  8754  0FEA  3523               	lslf	Mrf49xaModeTx@k,w
  8755  0FEB  3E3B               	addlw	low (_mrfRegset_Tx| (0+32768))
  8756  0FEC  3182               	movlp	high __stringtab
  8757  0FED  000A               	callw
  8758  0FEE  3188               	pagesel	$	;select current page
  8759  0FEF  23E5               	fcall	_Mrf49TxCmd
  8760  0FF0  300E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8761  0FF1  0AA3               	incf	Mrf49xaModeTx@k,f
  8762  0FF2  3182               	movlp	high __stringtab
  8763  0FF3  000A               	callw
  8764  0FF4  3188               	pagesel	$	;select current page
  8765  0FF5  0223               	subwf	Mrf49xaModeTx@k,w
  8766  0FF6  1C03               	skipc
  8767  0FF7  2FE4               	goto	l3086
  8768  0FF8                     l3092:	
  8769                           
  8770                           ;mrf49xa.c: 117: rfTrcvStatus.state = TX_PACKET;
  8771  0FF8  3003               	movlw	3
  8772  0FF9  0021               	movlb	1	; select bank1
  8773  0FFA  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  8774                           
  8775                           ;mrf49xa.c: 118: rfTrcvStatus.hwByte = 99;
  8776  0FFB  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8777  0FFC  3980               	andlw	-128
  8778  0FFD  3863               	iorlw	99
  8779  0FFE  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  8780  0FFF  0008               	return
  8781  1000                     __end_of_Mrf49xaModeTx:	
  8782                           
  8783                           	psect	bssBANK0
  8784  0033                     __pbssBANK0:	
  8785  0033                     _powerStatusTicker:	
  8786  0033                     	ds	1
  8787  0034                     _cfgRam:	
  8788  0034                     	ds	9
  8789  003D                     _mrf49Status:	
  8790  003D                     	ds	2
  8791                           
  8792                           	psect	dataBANK0
  8793  003F                     __pdataBANK0:	
  8794  003F                     _coldBoot:	
  8795  003F                     	ds	1
  8796                           
  8797                           	psect	bssBANK1
  8798  00A0                     __pbssBANK1:	
  8799  00A0                     _rfTrcvStatus:	
  8800  00A0                     	ds	75
  8801                           
  8802                           	psect	clrtext
  8803  0271                     clear_ram0:	
  8804                           ;	Called with FSR0 containing the base address, and
  8805                           ;	WREG with the size to clear
  8806                           
  8807  0271  0064               	clrwdt	;clear the watchdog before getting into this loop
  8808  0272                     clrloop0:	
  8809  0272  0180               	clrf	0	;clear RAM location pointed to by FSR
  8810  0273  3101               	addfsr 0,1
  8811  0274  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8812  0275  2A72               	goto	clrloop0	;have we reached the end yet?
  8813  0276  3400               	retlw	0	;all done for this memory range, return
  8814                           
  8815                           	psect	cstackCOMMON
  8816  0070                     __pcstackCOMMON:	
  8817  0070                     ?_SoftI2cStart:	
  8818  0070                     ?_SoftI2cStop:	
  8819                           ; 0 bytes @ 0x0
  8820                           
  8821  0070                     ?_Mrf49xaNeedsReset:	
  8822                           ; 0 bytes @ 0x0
  8823                           
  8824  0070                     ?_Mrf49RxSts:	
  8825                           ; 0 bytes @ 0x0
  8826                           
  8827  0070                     ?_HandlePacket:	
  8828                           ; 0 bytes @ 0x0
  8829                           
  8830  0070                     ?_CfgSave:	
  8831                           ; 0 bytes @ 0x0
  8832                           
  8833  0070                     ?_CfgLoad:	
  8834                           ; 0 bytes @ 0x0
  8835                           
  8836  0070                     ?_PwrAdcWake:	
  8837                           ; 0 bytes @ 0x0
  8838                           
  8839  0070                     ?_PwrAdcSleep:	
  8840                           ; 0 bytes @ 0x0
  8841                           
  8842  0070                     ?_PwrAdcInit:	
  8843                           ; 0 bytes @ 0x0
  8844                           
  8845  0070                     ?_PwrSensorInit:	
  8846                           ; 0 bytes @ 0x0
  8847                           
  8848  0070                     ?_PwrI2cInit:	
  8849                           ; 0 bytes @ 0x0
  8850                           
  8851  0070                     ?_PwrRfInit:	
  8852                           ; 0 bytes @ 0x0
  8853                           
  8854  0070                     ?_PwrSensorSleep:	
  8855                           ; 0 bytes @ 0x0
  8856                           
  8857  0070                     ?_PwrI2cSleep:	
  8858                           ; 0 bytes @ 0x0
  8859                           
  8860  0070                     ?_PwrRfSleep:	
  8861                           ; 0 bytes @ 0x0
  8862                           
  8863  0070                     ?_PwrSensorWake:	
  8864                           ; 0 bytes @ 0x0
  8865                           
  8866  0070                     ?_PwrI2cWake:	
  8867                           ; 0 bytes @ 0x0
  8868                           
  8869  0070                     ?_PwrRfWake:	
  8870                           ; 0 bytes @ 0x0
  8871                           
  8872  0070                     ?_SoftI2cNop:	
  8873                           ; 0 bytes @ 0x0
  8874                           
  8875  0070                     ?_SoftI2cInit:	
  8876                           ; 0 bytes @ 0x0
  8877                           
  8878  0070                     ?_SoftI2cRepeatedStart:	
  8879                           ; 0 bytes @ 0x0
  8880                           
  8881  0070                     ?_AdcInit:	
  8882                           ; 0 bytes @ 0x0
  8883                           
  8884  0070                     ?_AdcDeinit:	
  8885                           ; 0 bytes @ 0x0
  8886                           
  8887  0070                     ?_AdcGo:	
  8888                           ; 0 bytes @ 0x0
  8889                           
  8890  0070                     ?_AdcChSelect:	
  8891                           ; 0 bytes @ 0x0
  8892                           
  8893  0070                     ?_ExtIntInit:	
  8894                           ; 0 bytes @ 0x0
  8895                           
  8896  0070                     ?_ExtIntDeinit:	
  8897                           ; 0 bytes @ 0x0
  8898                           
  8899  0070                     ??_ExtIntDeinit:	
  8900                           ; 0 bytes @ 0x0
  8901                           
  8902  0070                     ?_extInt:	
  8903                           ; 0 bytes @ 0x0
  8904                           
  8905  0070                     ?_Mcp9800Start:	
  8906                           ; 0 bytes @ 0x0
  8907                           
  8908  0070                     ?_Mrf49xaModeRx:	
  8909                           ; 0 bytes @ 0x0
  8910                           
  8911  0070                     ?_Mrf49xaModeTx:	
  8912                           ; 0 bytes @ 0x0
  8913                           
  8914  0070                     ?_Mrf49xaModeSleep:	
  8915                           ; 0 bytes @ 0x0
  8916                           
  8917  0070                     ?_Mrf49xaShutdown:	
  8918                           ; 0 bytes @ 0x0
  8919                           
  8920  0070                     ?_Mrf49xaReboot:	
  8921                           ; 0 bytes @ 0x0
  8922                           
  8923  0070                     ?_Mrf49xaInit:	
  8924                           ; 0 bytes @ 0x0
  8925                           
  8926  0070                     ?_Mrf49SpiTx:	
  8927                           ; 0 bytes @ 0x0
  8928                           
  8929  0070                     ?_Mrf49TxByte:	
  8930                           ; 0 bytes @ 0x0
  8931                           
  8932  0070                     ?_Mrf49xaFreePacket:	
  8933                           ; 0 bytes @ 0x0
  8934                           
  8935  0070                     ?_Mrf49xaTick:	
  8936                           ; 0 bytes @ 0x0
  8937                           
  8938  0070                     ?_handleFwCmd:	
  8939                           ; 0 bytes @ 0x0
  8940                           
  8941  0070                     ?_handleCfgRead:	
  8942                           ; 0 bytes @ 0x0
  8943                           
  8944  0070                     ?_handleCfgWrite:	
  8945                           ; 0 bytes @ 0x0
  8946                           
  8947  0070                     ?_handleCfgCmd:	
  8948                           ; 0 bytes @ 0x0
  8949                           
  8950  0070                     ?_RfSendPowerState:	
  8951                           ; 0 bytes @ 0x0
  8952                           
  8953  0070                     ?_main:	
  8954                           ; 0 bytes @ 0x0
  8955                           
  8956  0070                     ?i1_Mrf49xaModeRx:	
  8957                           ; 0 bytes @ 0x0
  8958                           
  8959  0070                     ?i1_Mrf49xaNeedsReset:	
  8960                           ; 0 bytes @ 0x0
  8961                           
  8962  0070                     ??i1_Mrf49xaNeedsReset:	
  8963                           ; 0 bytes @ 0x0
  8964                           
  8965  0070                     ?i1_Mrf49SpiTx:	
  8966                           ; 0 bytes @ 0x0
  8967                           
  8968  0070                     ??i1_Mrf49SpiTx:	
  8969                           ; 0 bytes @ 0x0
  8970                           
  8971  0070                     ??i1_Mrf49SpiRx:	
  8972                           ; 0 bytes @ 0x0
  8973                           
  8974  0070                     ?i1_Mrf49RxSts:	
  8975                           ; 0 bytes @ 0x0
  8976                           
  8977  0070                     ?i1_Mrf49TxByte:	
  8978                           ; 0 bytes @ 0x0
  8979                           
  8980  0070                     ?_SoftI2cTxByte:	
  8981                           ; 0 bytes @ 0x0
  8982                           
  8983  0070                     ?_Mrf49xaServe:	
  8984                           ; 1 bytes @ 0x0
  8985                           
  8986  0070                     ?_CfgGetSizeByType:	
  8987                           ; 1 bytes @ 0x0
  8988                           
  8989  0070                     ?_SoftI2cRxByte:	
  8990                           ; 1 bytes @ 0x0
  8991                           
  8992  0070                     ?_AdcIsBusy:	
  8993                           ; 1 bytes @ 0x0
  8994                           
  8995  0070                     ?_Mrf49SpiRx:	
  8996                           ; 1 bytes @ 0x0
  8997                           
  8998  0070                     ?_Mrf49RxCmd:	
  8999                           ; 1 bytes @ 0x0
  9000                           
  9001  0070                     ?_Mrf49RxByte:	
  9002                           ; 1 bytes @ 0x0
  9003                           
  9004  0070                     ?_Mrf49xaPacketPending:	
  9005                           ; 1 bytes @ 0x0
  9006                           
  9007  0070                     ?_Mrf49xaTxAck:	
  9008                           ; 1 bytes @ 0x0
  9009                           
  9010  0070                     ?_Mrf49xaRxPacket:	
  9011                           ; 1 bytes @ 0x0
  9012                           
  9013  0070                     ?_Mrf49xaAllocPacket:	
  9014                           ; 1 bytes @ 0x0
  9015                           
  9016  0070                     ?i1_Mrf49SpiRx:	
  9017                           ; 1 bytes @ 0x0
  9018                           
  9019  0070                     ?i1_Mrf49RxCmd:	
  9020                           ; 1 bytes @ 0x0
  9021                           
  9022  0070                     ?i1_Mrf49RxByte:	
  9023                           ; 1 bytes @ 0x0
  9024                           
  9025  0070                     ?i1_Mrf49xaServe:	
  9026                           ; 1 bytes @ 0x0
  9027                           
  9028  0070                     i1Mrf49SpiTx@byte:	
  9029                           ; 1 bytes @ 0x0
  9030                           
  9031  0070                     i1Mrf49SpiRx@data:	
  9032                           ; 1 bytes @ 0x0
  9033                           
  9034                           
  9035                           ; 1 bytes @ 0x0
  9036  0070                     	ds	1
  9037  0071                     ?i1_Mrf49TxCmd:	
  9038  0071                     ??i1_Mrf49RxCmd:	
  9039                           ; 0 bytes @ 0x1
  9040                           
  9041  0071                     ??i1_Mrf49RxSts:	
  9042                           ; 0 bytes @ 0x1
  9043                           
  9044  0071                     i1Mrf49TxCmd@val:	
  9045                           ; 0 bytes @ 0x1
  9046                           
  9047  0071                     i1Mrf49RxCmd@cmd:	
  9048                           ; 1 bytes @ 0x1
  9049                           
  9050                           
  9051                           ; 1 bytes @ 0x1
  9052  0071                     	ds	1
  9053  0072                     ??i1_Mrf49TxCmd:	
  9054  0072                     i1Mrf49TxCmd@cmd:	
  9055                           ; 0 bytes @ 0x2
  9056                           
  9057  0072                     i1Mrf49RxCmd@val:	
  9058                           ; 1 bytes @ 0x2
  9059                           
  9060                           
  9061                           ; 1 bytes @ 0x2
  9062  0072                     	ds	1
  9063  0073                     ??i1_Mrf49xaModeRx:	
  9064  0073                     ??i1_Mrf49RxByte:	
  9065                           ; 0 bytes @ 0x3
  9066                           
  9067  0073                     ??i1_Mrf49TxByte:	
  9068                           ; 0 bytes @ 0x3
  9069                           
  9070  0073                     i1Mrf49xaModeRx@k:	
  9071                           ; 0 bytes @ 0x3
  9072                           
  9073  0073                     i1Mrf49TxByte@byte:	
  9074                           ; 1 bytes @ 0x3
  9075                           
  9076                           
  9077                           ; 1 bytes @ 0x3
  9078  0073                     	ds	1
  9079  0074                     ??i1_Mrf49xaServe:	
  9080                           
  9081                           ; 0 bytes @ 0x4
  9082  0074                     	ds	1
  9083  0075                     i1Mrf49xaServe@data:	
  9084                           
  9085                           ; 1 bytes @ 0x5
  9086  0075                     	ds	1
  9087  0076                     ??_extInt:	
  9088                           
  9089                           ; 0 bytes @ 0x6
  9090  0076                     	ds	1
  9091  0077                     extInt@ofw:	
  9092                           
  9093                           ; 1 bytes @ 0x7
  9094  0077                     	ds	1
  9095                           
  9096                           	psect	cstackBANK0
  9097  0020                     __pcstackBANK0:	
  9098  0020                     ??_Mrf49xaNeedsReset:	
  9099  0020                     ?_Sleepy:	
  9100                           ; 0 bytes @ 0x0
  9101                           
  9102  0020                     ??_CfgGetSizeByType:	
  9103                           ; 0 bytes @ 0x0
  9104                           
  9105  0020                     ??_PwrAdcWake:	
  9106                           ; 0 bytes @ 0x0
  9107                           
  9108  0020                     ??_PwrAdcSleep:	
  9109                           ; 0 bytes @ 0x0
  9110                           
  9111  0020                     ??_PwrAdcInit:	
  9112                           ; 0 bytes @ 0x0
  9113                           
  9114  0020                     ??_PwrSensorInit:	
  9115                           ; 0 bytes @ 0x0
  9116                           
  9117  0020                     ??_PwrSensorSleep:	
  9118                           ; 0 bytes @ 0x0
  9119                           
  9120  0020                     ??_PwrI2cSleep:	
  9121                           ; 0 bytes @ 0x0
  9122                           
  9123  0020                     ??_PwrSensorWake:	
  9124                           ; 0 bytes @ 0x0
  9125                           
  9126  0020                     ??_PwrI2cWake:	
  9127                           ; 0 bytes @ 0x0
  9128                           
  9129  0020                     ??_SoftI2cNop:	
  9130                           ; 0 bytes @ 0x0
  9131                           
  9132  0020                     ??_AdcInit:	
  9133                           ; 0 bytes @ 0x0
  9134                           
  9135  0020                     ??_AdcDeinit:	
  9136                           ; 0 bytes @ 0x0
  9137                           
  9138  0020                     ??_AdcGo:	
  9139                           ; 0 bytes @ 0x0
  9140                           
  9141  0020                     ??_AdcIsBusy:	
  9142                           ; 0 bytes @ 0x0
  9143                           
  9144  0020                     ??_AdcChSelect:	
  9145                           ; 0 bytes @ 0x0
  9146                           
  9147  0020                     ??_ExtIntInit:	
  9148                           ; 0 bytes @ 0x0
  9149                           
  9150  0020                     ??_Mrf49SpiTx:	
  9151                           ; 0 bytes @ 0x0
  9152                           
  9153  0020                     ??_Mrf49SpiRx:	
  9154                           ; 0 bytes @ 0x0
  9155                           
  9156  0020                     ??_Mrf49xaPacketPending:	
  9157                           ; 0 bytes @ 0x0
  9158                           
  9159  0020                     ??_Mrf49xaFreePacket:	
  9160                           ; 0 bytes @ 0x0
  9161                           
  9162  0020                     ??_Mrf49xaRxPacket:	
  9163                           ; 0 bytes @ 0x0
  9164                           
  9165  0020                     ??_Mrf49xaAllocPacket:	
  9166                           ; 0 bytes @ 0x0
  9167                           
  9168  0020                     ?_Mrf49xaTxPacket:	
  9169                           ; 0 bytes @ 0x0
  9170                           
  9171  0020                     ?_memcpy:	
  9172                           ; 1 bytes @ 0x0
  9173                           
  9174  0020                     ?_AdcGetResult:	
  9175                           ; 1 bytes @ 0x0
  9176                           
  9177  0020                     AdcChSelect@channel:	
  9178                           ; 2 bytes @ 0x0
  9179                           
  9180  0020                     Mrf49SpiTx@byte:	
  9181                           ; 1 bytes @ 0x0
  9182                           
  9183  0020                     Mrf49SpiRx@data:	
  9184                           ; 1 bytes @ 0x0
  9185                           
  9186  0020                     Mrf49xaTxPacket@response:	
  9187                           ; 1 bytes @ 0x0
  9188                           
  9189  0020                     Mrf49xaFreePacket@packet:	
  9190                           ; 1 bytes @ 0x0
  9191                           
  9192  0020                     CfgGetSizeByType@type:	
  9193                           ; 1 bytes @ 0x0
  9194                           
  9195  0020                     memcpy@s1:	
  9196                           ; 1 bytes @ 0x0
  9197                           
  9198  0020                     Sleepy@ms:	
  9199                           ; 1 bytes @ 0x0
  9200                           
  9201                           
  9202                           ; 2 bytes @ 0x0
  9203  0020                     	ds	1
  9204  0021                     ??_SoftI2cStart:	
  9205  0021                     ??_SoftI2cTxByte:	
  9206                           ; 0 bytes @ 0x1
  9207                           
  9208  0021                     ??_SoftI2cStop:	
  9209                           ; 0 bytes @ 0x1
  9210                           
  9211  0021                     ?_Mrf49TxCmd:	
  9212                           ; 0 bytes @ 0x1
  9213                           
  9214  0021                     ??_Mrf49RxSts:	
  9215                           ; 0 bytes @ 0x1
  9216                           
  9217  0021                     ??_SoftI2cRepeatedStart:	
  9218                           ; 0 bytes @ 0x1
  9219                           
  9220  0021                     ??_SoftI2cRxByte:	
  9221                           ; 0 bytes @ 0x1
  9222                           
  9223  0021                     ??_Mrf49RxCmd:	
  9224                           ; 0 bytes @ 0x1
  9225                           
  9226  0021                     SoftI2cRxByte@ack:	
  9227                           ; 0 bytes @ 0x1
  9228                           
  9229  0021                     Mrf49TxCmd@val:	
  9230                           ; 1 bytes @ 0x1
  9231                           
  9232  0021                     Mrf49RxCmd@cmd:	
  9233                           ; 1 bytes @ 0x1
  9234                           
  9235  0021                     Mrf49xaTxPacket@needAck:	
  9236                           ; 1 bytes @ 0x1
  9237                           
  9238  0021                     memcpy@n:	
  9239                           ; 1 bytes @ 0x1
  9240                           
  9241                           
  9242                           ; 2 bytes @ 0x1
  9243  0021                     	ds	1
  9244  0022                     ??_Sleepy:	
  9245  0022                     ??_Mrf49TxCmd:	
  9246                           ; 0 bytes @ 0x2
  9247                           
  9248  0022                     ??_Mrf49xaTxPacket:	
  9249                           ; 0 bytes @ 0x2
  9250                           
  9251  0022                     ??_AdcGetResult:	
  9252                           ; 0 bytes @ 0x2
  9253                           
  9254  0022                     ?_AdcSample:	
  9255                           ; 0 bytes @ 0x2
  9256                           
  9257  0022                     SoftI2cTxByte@data:	
  9258                           ; 2 bytes @ 0x2
  9259                           
  9260  0022                     SoftI2cRxByte@data:	
  9261                           ; 1 bytes @ 0x2
  9262                           
  9263  0022                     Mrf49TxCmd@cmd:	
  9264                           ; 1 bytes @ 0x2
  9265                           
  9266  0022                     Mrf49RxCmd@val:	
  9267                           ; 1 bytes @ 0x2
  9268                           
  9269                           
  9270                           ; 1 bytes @ 0x2
  9271  0022                     	ds	1
  9272  0023                     ??_memcpy:	
  9273  0023                     ??_Mrf49xaModeRx:	
  9274                           ; 0 bytes @ 0x3
  9275                           
  9276  0023                     ??_Mrf49xaModeTx:	
  9277                           ; 0 bytes @ 0x3
  9278                           
  9279  0023                     ??_Mrf49xaModeSleep:	
  9280                           ; 0 bytes @ 0x3
  9281                           
  9282  0023                     ??_Mrf49RxByte:	
  9283                           ; 0 bytes @ 0x3
  9284                           
  9285  0023                     ??_Mrf49TxByte:	
  9286                           ; 0 bytes @ 0x3
  9287                           
  9288  0023                     SoftI2cTxByte@i:	
  9289                           ; 0 bytes @ 0x3
  9290                           
  9291  0023                     SoftI2cRxByte@i:	
  9292                           ; 1 bytes @ 0x3
  9293                           
  9294  0023                     Mrf49xaModeRx@k:	
  9295                           ; 1 bytes @ 0x3
  9296                           
  9297  0023                     Mrf49xaModeTx@k:	
  9298                           ; 1 bytes @ 0x3
  9299                           
  9300  0023                     Mrf49xaModeSleep@k:	
  9301                           ; 1 bytes @ 0x3
  9302                           
  9303  0023                     Mrf49TxByte@byte:	
  9304                           ; 1 bytes @ 0x3
  9305                           
  9306  0023                     Mrf49xaTxPacket@crc:	
  9307                           ; 1 bytes @ 0x3
  9308                           
  9309  0023                     Sleepy@b:	
  9310                           ; 1 bytes @ 0x3
  9311                           
  9312  0023                     memcpy@d:	
  9313                           ; 1 bytes @ 0x3
  9314                           
  9315                           
  9316                           ; 1 bytes @ 0x3
  9317  0023                     	ds	1
  9318  0024                     ??_Mrf49xaServe:	
  9319  0024                     ??_PwrI2cInit:	
  9320                           ; 0 bytes @ 0x4
  9321                           
  9322  0024                     ??_PwrRfSleep:	
  9323                           ; 0 bytes @ 0x4
  9324                           
  9325  0024                     ??_PwrRfWake:	
  9326                           ; 0 bytes @ 0x4
  9327                           
  9328  0024                     ??_SoftI2cInit:	
  9329                           ; 0 bytes @ 0x4
  9330                           
  9331  0024                     ??_AdcSample:	
  9332                           ; 0 bytes @ 0x4
  9333                           
  9334  0024                     ??_Mcp9800Start:	
  9335                           ; 0 bytes @ 0x4
  9336                           
  9337  0024                     ??_Mrf49xaShutdown:	
  9338                           ; 0 bytes @ 0x4
  9339                           
  9340  0024                     ??_Mrf49xaReboot:	
  9341                           ; 0 bytes @ 0x4
  9342                           
  9343  0024                     ?_eepromRxBytes:	
  9344                           ; 0 bytes @ 0x4
  9345                           
  9346  0024                     ?_eepromTxBytes:	
  9347                           ; 0 bytes @ 0x4
  9348                           
  9349  0024                     ?_Mcp9800Read:	
  9350                           ; 0 bytes @ 0x4
  9351                           
  9352  0024                     Mcp9800Start@resolution:	
  9353                           ; 2 bytes @ 0x4
  9354                           
  9355  0024                     Mrf49xaTxPacket@i:	
  9356                           ; 1 bytes @ 0x4
  9357                           
  9358  0024                     memcpy@s:	
  9359                           ; 1 bytes @ 0x4
  9360                           
  9361  0024                     eepromRxBytes@address:	
  9362                           ; 1 bytes @ 0x4
  9363                           
  9364  0024                     eepromTxBytes@address:	
  9365                           ; 2 bytes @ 0x4
  9366                           
  9367                           
  9368                           ; 2 bytes @ 0x4
  9369  0024                     	ds	1
  9370  0025                     AdcSample@ch:	
  9371  0025                     Mrf49xaTxPacket@packet:	
  9372                           ; 1 bytes @ 0x5
  9373                           
  9374  0025                     Mrf49xaServe@data:	
  9375                           ; 1 bytes @ 0x5
  9376                           
  9377  0025                     memcpy@d1:	
  9378                           ; 1 bytes @ 0x5
  9379                           
  9380                           
  9381                           ; 1 bytes @ 0x5
  9382  0025                     	ds	1
  9383  0026                     ??_Mcp9800Read:	
  9384  0026                     ??_Mrf49xaInit:	
  9385                           ; 0 bytes @ 0x6
  9386                           
  9387  0026                     ??_Mrf49xaTxAck:	
  9388                           ; 0 bytes @ 0x6
  9389                           
  9390  0026                     ??_handleCfgRead:	
  9391                           ; 0 bytes @ 0x6
  9392                           
  9393  0026                     ??_handleCfgWrite:	
  9394                           ; 0 bytes @ 0x6
  9395                           
  9396  0026                     ??_RfSendPowerState:	
  9397                           ; 0 bytes @ 0x6
  9398                           
  9399  0026                     ?_RfSendSampleWeatherNode:	
  9400                           ; 0 bytes @ 0x6
  9401                           
  9402  0026                     Mcp9800Read@tempH:	
  9403                           ; 0 bytes @ 0x6
  9404                           
  9405  0026                     Mrf49xaInit@k:	
  9406                           ; 1 bytes @ 0x6
  9407                           
  9408  0026                     Mrf49xaTxAck@packet:	
  9409                           ; 1 bytes @ 0x6
  9410                           
  9411  0026                     eepromRxBytes@data:	
  9412                           ; 1 bytes @ 0x6
  9413                           
  9414  0026                     eepromTxBytes@data:	
  9415                           ; 1 bytes @ 0x6
  9416                           
  9417  0026                     handleCfgRead@nrOfBytes:	
  9418                           ; 1 bytes @ 0x6
  9419                           
  9420  0026                     handleCfgWrite@nrOfBytes:	
  9421                           ; 1 bytes @ 0x6
  9422                           
  9423  0026                     RfSendPowerState@s:	
  9424                           ; 1 bytes @ 0x6
  9425                           
  9426  0026                     RfSendSampleWeatherNode@temperature:	
  9427                           ; 2 bytes @ 0x6
  9428                           
  9429                           
  9430                           ; 2 bytes @ 0x6
  9431  0026                     	ds	1
  9432  0027                     ??_PwrRfInit:	
  9433  0027                     Mcp9800Read@tempL:	
  9434                           ; 0 bytes @ 0x7
  9435                           
  9436  0027                     eepromRxBytes@size:	
  9437                           ; 1 bytes @ 0x7
  9438                           
  9439  0027                     eepromTxBytes@size:	
  9440                           ; 1 bytes @ 0x7
  9441                           
  9442  0027                     handleCfgRead@index:	
  9443                           ; 1 bytes @ 0x7
  9444                           
  9445  0027                     handleCfgWrite@index:	
  9446                           ; 1 bytes @ 0x7
  9447                           
  9448                           
  9449                           ; 1 bytes @ 0x7
  9450  0027                     	ds	1
  9451  0028                     ??_CfgSave:	
  9452  0028                     ??_CfgLoad:	
  9453                           ; 0 bytes @ 0x8
  9454                           
  9455  0028                     ??_eepromRxBytes:	
  9456                           ; 0 bytes @ 0x8
  9457                           
  9458  0028                     ??_eepromTxBytes:	
  9459                           ; 0 bytes @ 0x8
  9460                           
  9461  0028                     ??_handleFwCmd:	
  9462                           ; 0 bytes @ 0x8
  9463                           
  9464  0028                     ??_handleCfgCmd:	
  9465                           ; 0 bytes @ 0x8
  9466                           
  9467  0028                     handleFwCmd@packet:	
  9468                           ; 0 bytes @ 0x8
  9469                           
  9470  0028                     handleCfgRead@packet:	
  9471                           ; 1 bytes @ 0x8
  9472                           
  9473  0028                     handleCfgWrite@packet:	
  9474                           ; 1 bytes @ 0x8
  9475                           
  9476  0028                     handleCfgCmd@packet:	
  9477                           ; 1 bytes @ 0x8
  9478                           
  9479  0028                     RfSendPowerState@packet:	
  9480                           ; 1 bytes @ 0x8
  9481                           
  9482  0028                     RfSendSampleWeatherNode@humidity:	
  9483                           ; 1 bytes @ 0x8
  9484                           
  9485                           
  9486                           ; 2 bytes @ 0x8
  9487  0028                     	ds	1
  9488  0029                     ??_HandlePacket:	
  9489                           
  9490                           ; 0 bytes @ 0x9
  9491  0029                     	ds	1
  9492  002A                     ??_RfSendSampleWeatherNode:	
  9493  002A                     HandlePacket@response:	
  9494                           ; 0 bytes @ 0xA
  9495                           
  9496  002A                     RfSendSampleWeatherNode@packet:	
  9497                           ; 1 bytes @ 0xA
  9498                           
  9499                           
  9500                           ; 1 bytes @ 0xA
  9501  002A                     	ds	1
  9502  002B                     HandlePacket@packet:	
  9503                           
  9504                           ; 1 bytes @ 0xB
  9505  002B                     	ds	1
  9506  002C                     ??_Mrf49xaTick:	
  9507                           
  9508                           ; 0 bytes @ 0xC
  9509  002C                     	ds	1
  9510  002D                     Mrf49xaTick@timeout:	
  9511                           
  9512                           ; 1 bytes @ 0xD
  9513  002D                     	ds	1
  9514  002E                     Mrf49xaTick@packet:	
  9515                           
  9516                           ; 1 bytes @ 0xE
  9517  002E                     	ds	1
  9518  002F                     ??_main:	
  9519  002F                     main@humidity:	
  9520                           ; 0 bytes @ 0xF
  9521                           
  9522                           
  9523                           ; 2 bytes @ 0xF
  9524  002F                     	ds	2
  9525  0031                     main@temperature:	
  9526                           
  9527                           ; 2 bytes @ 0x11
  9528  0031                     	ds	2
  9529                           
  9530                           	psect	text11
  9531  0000                     __ptext11:	
  9532 ;; *************** function _AdcGetResult *****************
  9533 ;; Defined at:
  9534 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  2    0[BANK0 ] unsigned int 
  9541 ;; Registers used:
  9542 ;;		wreg
  9543 ;; Tracked objects:
  9544 ;;		On entry : 1F/1
  9545 ;;		On exit  : 1F/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9548 ;;      Params:         0       2       0       0
  9549 ;;      Locals:         0       0       0       0
  9550 ;;      Temps:          0       0       0       0
  9551 ;;      Totals:         0       2       0       0
  9552 ;;Total ram usage:        2 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    5
  9555 ;; This function calls:
  9556 ;;		Nothing
  9557 ;; This function is called by:
  9558 ;;		_AdcSample
  9559 ;; This function uses a non-reentrant model
  9560 ;;
  9561                           
  9562  0000                     _AdcGetResult:	
  9563                           ;psect for function _AdcGetResult
  9564                           
  9565  0000                     __end_of_AdcGetResult:	
  9566                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _AdcGetResult: [wreg]
  9570                           
  9571                           
  9572                           	psect	text20
  9573  024F                     __ptext20:	
  9574 ;; *************** function _Mrf49xaModeSleep *****************
  9575 ;; Defined at:
  9576 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;		None
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;  k               1    3[BANK0 ] unsigned char 
  9581 ;; Return value:  Size  Location     Type
  9582 ;;		None               void
  9583 ;; Registers used:
  9584 ;;		wreg, status,2, status,0, pclath, cstack
  9585 ;; Tracked objects:
  9586 ;;		On entry : 1E/1
  9587 ;;		On exit  : 1F/1
  9588 ;;		Unchanged: 0/0
  9589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9590 ;;      Params:         0       0       0       0
  9591 ;;      Locals:         0       1       0       0
  9592 ;;      Temps:          0       0       0       0
  9593 ;;      Totals:         0       1       0       0
  9594 ;;Total ram usage:        1 bytes
  9595 ;; Hardware stack levels used:    1
  9596 ;; Hardware stack levels required when called:    7
  9597 ;; This function calls:
  9598 ;;		_Mrf49TxCmd
  9599 ;; This function is called by:
  9600 ;;		_Mrf49xaShutdown
  9601 ;; This function uses a non-reentrant model
  9602 ;;
  9603                           
  9604                           
  9605                           ;psect for function _Mrf49xaModeSleep
  9606  024F                     _Mrf49xaModeSleep:	
  9607  024F                     l2968:	
  9608                           ;incstack = 0
  9609                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  9610                           
  9611                           
  9612                           ;mrf49xa.c: 123: UI08_t k;
  9613                           ;mrf49xa.c: 124: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  9614  024F  0020               	movlb	0	; select bank0
  9615  0250  300D               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9616  0251  01A3               	clrf	Mrf49xaModeSleep@k
  9617  0252  3182               	movlp	high __stringtab
  9618  0253  000A               	callw
  9619  0254  3182               	pagesel	$	;select current page
  9620  0255  3800               	iorlw	0
  9621  0256  1903               	btfsc	3,2
  9622  0257  2A6C               	goto	l2980
  9623  0258                     l2974:	
  9624  0258  3523               	lslf	Mrf49xaModeSleep@k,w
  9625  0259  3E44               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  9626  025A  3182               	movlp	high __stringtab
  9627  025B  000A               	callw
  9628  025C  00A1               	movwf	Mrf49TxCmd@val
  9629  025D  3523               	lslf	Mrf49xaModeSleep@k,w
  9630  025E  3E43               	addlw	low (_mrfRegset_Sleep| (0+32768))
  9631  025F  3182               	movlp	high __stringtab
  9632  0260  000A               	callw
  9633  0261  318B  23E5  3182   	fcall	_Mrf49TxCmd
  9634  0264  300D               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9635  0265  0AA3               	incf	Mrf49xaModeSleep@k,f
  9636  0266  3182               	movlp	high __stringtab
  9637  0267  000A               	callw
  9638  0268  3182               	pagesel	$	;select current page
  9639  0269  0223               	subwf	Mrf49xaModeSleep@k,w
  9640  026A  1C03               	skipc
  9641  026B  2A58               	goto	l2974
  9642  026C                     l2980:	
  9643                           
  9644                           ;mrf49xa.c: 126: rfTrcvStatus.state = POWERED_OFF;
  9645  026C  0021               	movlb	1	; select bank1
  9646  026D  3080               	movlw	-128
  9647  026E  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  9648                           
  9649                           ;mrf49xa.c: 127: rfTrcvStatus.hwByte = 0;
  9650  026F  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
  9651  0270  0008               	return
  9652  0271                     __end_of_Mrf49xaModeSleep:	
  9653                           
  9654                           	psect	intentry
  9655  0004                     __pintentry:	
  9656 ;; *************** function _extInt *****************
  9657 ;; Defined at:
  9658 ;;		line 36 in file "../../../src/bsp/pic16/interrupt.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  ofw             1    7[COMMON] unsigned char 
  9663 ;; Return value:  Size  Location     Type
  9664 ;;		None               void
  9665 ;; Registers used:
  9666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 1F/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9672 ;;      Params:         0       0       0       0
  9673 ;;      Locals:         1       0       0       0
  9674 ;;      Temps:          1       0       0       0
  9675 ;;      Totals:         2       0       0       0
  9676 ;;Total ram usage:        2 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    4
  9679 ;; This function calls:
  9680 ;;		_ExtIntDeinit
  9681 ;;		i1_Mrf49xaNeedsReset
  9682 ;;		i1_Mrf49xaServe
  9683 ;; This function is called by:
  9684 ;;		Interrupt level 1
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688  0004                     _extInt:	
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9692  0004  3180               	pagesel	$
  9693  0005  0020               	movlb	0	; select bank0
  9694  0006  087F               	movf	127,w
  9695  0007  00F6               	movwf	??_extInt
  9696                           
  9697                           ;interrupt.c: 38: if (INTCONbits.INTF != 0)
  9698  0008  1C8B               	btfss	11,1	;volatile
  9699  0009  281C               	goto	i1l142
  9700                           
  9701                           ;interrupt.c: 39: {
  9702                           ;interrupt.c: 40: uint8_t ofw = 0;
  9703  000A  01F7               	clrf	extInt@ofw
  9704  000B                     i1l3598:	
  9705                           ;interrupt.c: 41: while (!Mrf49xaServe())
  9706                           
  9707  000B  3180  202E  3180   	fcall	i1_Mrf49xaServe
  9708  000E  3A00               	xorlw	0
  9709  000F  1D03               	btfss	3,2
  9710  0010  281B               	goto	i1l141
  9711                           
  9712                           ;interrupt.c: 42: {
  9713                           ;interrupt.c: 43: ofw++;
  9714  0011  0AF7               	incf	extInt@ofw,f
  9715                           
  9716                           ;interrupt.c: 44: if (ofw == 255)
  9717  0012  0877               	movf	extInt@ofw,w
  9718  0013  3AFF               	xorlw	255
  9719  0014  1D03               	skipz
  9720  0015  280B               	goto	i1l3598
  9721                           
  9722                           ;interrupt.c: 45: {
  9723                           ;interrupt.c: 46: ExtIntDeinit();
  9724  0016  3182  2277  3180   	fcall	_ExtIntDeinit
  9725                           
  9726                           ;interrupt.c: 47: Mrf49xaNeedsReset();
  9727  0019  3181  2142         	fcall	i1_Mrf49xaNeedsReset
  9728  001B                     i1l141:	
  9729                           ;interrupt.c: 48: break;
  9730                           
  9731                           
  9732                           ;interrupt.c: 49: }
  9733                           ;interrupt.c: 50: }
  9734                           ;interrupt.c: 51: INTCONbits.INTF = 0;
  9735  001B  108B               	bcf	11,1	;volatile
  9736  001C                     i1l142:	
  9737  001C  0876               	movf	??_extInt,w
  9738  001D  0020               	movlb	0	; select bank0
  9739  001E  00FF               	movwf	127
  9740  001F  0009               	retfie
  9741  0020                     __end_of_extInt:	
  9742                           
  9743                           	psect	text74
  9744  0022                     __ptext74:	
  9745 ;; *************** function i1_Mrf49RxCmd *****************
  9746 ;; Defined at:
  9747 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;  cmd             1    wreg     unsigned char 
  9750 ;; Auto vars:     Size  Location     Type
  9751 ;;  cmd             1    1[COMMON] unsigned char 
  9752 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  9753 ;; Return value:  Size  Location     Type
  9754 ;;                  1    wreg      unsigned char 
  9755 ;; Registers used:
  9756 ;;		wreg, status,2, status,0, pclath, cstack
  9757 ;; Tracked objects:
  9758 ;;		On entry : 1E/1
  9759 ;;		On exit  : 1F/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9762 ;;      Params:         0       0       0       0
  9763 ;;      Locals:         2       0       0       0
  9764 ;;      Temps:          0       0       0       0
  9765 ;;      Totals:         2       0       0       0
  9766 ;;Total ram usage:        2 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:    1
  9769 ;; This function calls:
  9770 ;;		i1_Mrf49SpiRx
  9771 ;;		i1_Mrf49SpiTx
  9772 ;; This function is called by:
  9773 ;;		i1_Mrf49RxByte
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           
  9778                           ;psect for function i1_Mrf49RxCmd
  9779  0022                     i1_Mrf49RxCmd:	
  9780                           
  9781                           ;incstack = 0
  9782                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  9783                           ;i1Mrf49RxCmd@cmd stored from wreg
  9784  0022  00F1               	movwf	i1Mrf49RxCmd@cmd
  9785                           
  9786                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  9787  0023  0020               	movlb	0	; select bank0
  9788  0024  130E               	bcf	14,6	;volatile
  9789                           
  9790                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  9791  0025  0871               	movf	i1Mrf49RxCmd@cmd,w
  9792  0026  214F  3180         	fcall	i1_Mrf49SpiTx
  9793                           
  9794                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  9795  0028  21BE               	fcall	i1_Mrf49SpiRx
  9796  0029  00F2               	movwf	i1Mrf49RxCmd@val
  9797                           
  9798                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  9799  002A  0020               	movlb	0	; select bank0
  9800  002B  170E               	bsf	14,6	;volatile
  9801                           
  9802                           ;mrf49xa_cmd.c: 27: return val;
  9803  002C  0872               	movf	i1Mrf49RxCmd@val,w
  9804  002D  0008               	return
  9805  002E                     __end_ofi1_Mrf49RxCmd:	
  9806  002E                     __ptext67:	
  9807 ;; *************** function i1_Mrf49xaServe *****************
  9808 ;; Defined at:
  9809 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;		None
  9812 ;; Auto vars:     Size  Location     Type
  9813 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  1    wreg      unsigned char 
  9816 ;; Registers used:
  9817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 1E/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9823 ;;      Params:         0       0       0       0
  9824 ;;      Locals:         1       0       0       0
  9825 ;;      Temps:          1       0       0       0
  9826 ;;      Totals:         2       0       0       0
  9827 ;;Total ram usage:        2 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; Hardware stack levels required when called:    3
  9830 ;; This function calls:
  9831 ;;		i1_Mrf49RxByte
  9832 ;;		i1_Mrf49RxSts
  9833 ;;		i1_Mrf49TxByte
  9834 ;;		i1_Mrf49xaModeRx
  9835 ;;		i1_Mrf49xaNeedsReset
  9836 ;; This function is called by:
  9837 ;;		_extInt
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           
  9842                           ;psect for function i1_Mrf49xaServe
  9843  002E                     i1_Mrf49xaServe:	
  9844                           
  9845                           ;mrf49xa_data.c: 10: uint8_t data;
  9846                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  9847                           
  9848                           ;incstack = 0
  9849                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9850  002E  0021               	movlb	1	; select bank1
  9851  002F  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
  9852  0030  1903               	btfsc	3,2
  9853                           
  9854                           ;mrf49xa_data.c: 13: return 0;
  9855  0031  3400               	retlw	0
  9856                           
  9857                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  9858  0032  1BEA               	btfsc	(_rfTrcvStatus^(0+128)+74),7
  9859  0033  3400               	retlw	0
  9860                           
  9861                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  9862  0034  21B1  3180         	fcall	i1_Mrf49RxSts
  9863                           
  9864                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  9865  0036  083D               	movf	_mrf49Status,w
  9866  0037  3AFF               	xorlw	255
  9867  0038  1D03               	skipz
  9868  0039  283E               	goto	i1l441
  9869  003A  083E               	movf	_mrf49Status+1,w
  9870  003B  3AFF               	xorlw	255
  9871  003C  1903               	btfsc	3,2
  9872  003D  3400               	retlw	0
  9873  003E                     i1l441:	
  9874                           ;mrf49xa_data.c: 26: {
  9875                           
  9876                           
  9877                           ;mrf49xa_data.c: 28: }
  9878                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  9879  003E  1ABD               	btfsc	_mrf49Status,5
  9880  003F  284D               	goto	i1l3500
  9881  0040  285C               	goto	i1l442
  9882  0041                     i1l3494:	
  9883                           
  9884                           ;mrf49xa_data.c: 36: case RECV_DATA:
  9885                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  9886  0041  211B  3180         	fcall	i1_Mrf49RxByte
  9887  0043  00F5               	movwf	i1Mrf49xaServe@data
  9888                           
  9889                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  9890  0044  211B  3180         	fcall	i1_Mrf49RxByte
  9891  0046  00F5               	movwf	i1Mrf49xaServe@data
  9892                           
  9893                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  9894  0047  211E  3180         	fcall	i1_Mrf49xaModeRx
  9895                           
  9896                           ;mrf49xa_data.c: 47: break;
  9897  0049  285C               	goto	i1l442
  9898  004A                     i1l3496:	
  9899                           
  9900                           ;mrf49xa_data.c: 50: Mrf49xaNeedsReset();
  9901  004A  2142  3180         	fcall	i1_Mrf49xaNeedsReset
  9902                           
  9903                           ;mrf49xa_data.c: 51: break;
  9904  004C  285C               	goto	i1l442
  9905  004D                     i1l3500:	
  9906  004D  0021               	movlb	1	; select bank1
  9907  004E  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  9908                           
  9909                           ; Switch size 1, requested type "space"
  9910                           ; Number of cases is 4, Range of values is 0 to 3
  9911                           ; switch strategies available:
  9912                           ; Name         Instructions Cycles
  9913                           ; simple_byte           13     7 (average)
  9914                           ; direct_byte           14     6 (fixed)
  9915                           ; jumptable            260     6 (fixed)
  9916                           ;	Chosen strategy is simple_byte
  9917  004F  3A00               	xorlw	0	; case 0
  9918  0050  1903               	skipnz
  9919  0051  284A               	goto	i1l3496
  9920  0052  3A01               	xorlw	1	; case 1
  9921  0053  1903               	skipnz
  9922  0054  2841               	goto	i1l3494
  9923  0055  3A03               	xorlw	3	; case 2
  9924  0056  1903               	skipnz
  9925  0057  2841               	goto	i1l3494
  9926  0058  3A01               	xorlw	1	; case 3
  9927  0059  1903               	skipnz
  9928  005A  285C               	goto	i1l442
  9929  005B  285C               	goto	i1l442
  9930  005C                     i1l442:	
  9931                           
  9932                           ;mrf49xa_data.c: 60: }
  9933                           ;mrf49xa_data.c: 69: if (mrf49Status.flags.msb.fifoTxRx == 1)
  9934  005C  0020               	movlb	0	; select bank0
  9935  005D  1BBD               	btfsc	_mrf49Status,7
  9936  005E  2902               	goto	i1l3582
  9937  005F  2911               	goto	i1l3584
  9938  0060                     i1l3504:	
  9939                           
  9940                           ;mrf49xa_data.c: 75: Mrf49xaNeedsReset();
  9941  0060  2142  3180         	fcall	i1_Mrf49xaNeedsReset
  9942                           
  9943                           ;mrf49xa_data.c: 76: break;
  9944  0062  2911               	goto	i1l3584
  9945  0063                     i1l3506:	
  9946                           
  9947                           ;mrf49xa_data.c: 79: data = Mrf49RxByte();
  9948  0063  211B  3180         	fcall	i1_Mrf49RxByte
  9949  0065  00F5               	movwf	i1Mrf49xaServe@data
  9950                           
  9951                           ;mrf49xa_data.c: 83: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9952  0066  1BBE               	btfsc	_mrf49Status+1,7
  9953  0067  286B               	goto	i1l3512
  9954  0068                     i1l3510:	
  9955                           
  9956                           ;mrf49xa_data.c: 84: {
  9957                           ;mrf49xa_data.c: 85: Mrf49xaModeRx();
  9958  0068  211E  3180         	fcall	i1_Mrf49xaModeRx
  9959                           
  9960                           ;mrf49xa_data.c: 86: break;
  9961  006A  2911               	goto	i1l3584
  9962  006B                     i1l3512:	
  9963                           
  9964                           ;mrf49xa_data.c: 87: }
  9965                           ;mrf49xa_data.c: 89: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  9966  006B  0021               	movlb	1	; select bank1
  9967  006C  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  9968  006D  1D03               	skipz
  9969  006E  2871               	goto	i1l3516
  9970  006F  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  9971  0070  2875               	goto	L5
  9972  0071                     i1l3516:	
  9973                           
  9974                           ;mrf49xa_data.c: 90: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  9975  0071  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  9976  0072  1D03               	skipz
  9977  0073  2868               	goto	i1l3510
  9978  0074  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  9979  0075                     L5:	
  9980  0075  00A0               	movwf	_rfTrcvStatus^(0+128)
  9981                           
  9982                           ;mrf49xa_data.c: 97: }
  9983                           ;mrf49xa_data.c: 98: rfTrcvStatus.hwRx->packet.size = data;
  9984  0076  0A20               	incf	_rfTrcvStatus^(0+128),w
  9985  0077  0086               	movwf	6
  9986  0078  0187               	clrf	7
  9987  0079  0875               	movf	i1Mrf49xaServe@data,w
  9988  007A  0081               	movwf	1
  9989                           
  9990                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->crc = 0;
  9991  007B  0820               	movf	_rfTrcvStatus^(0+128),w
  9992  007C  3E16               	addlw	22
  9993  007D  0086               	movwf	6
  9994  007E  0181               	clrf	1
  9995                           
  9996                           ;mrf49xa_data.c: 100: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  9997  007F  0820               	movf	_rfTrcvStatus^(0+128),w
  9998  0080  0086               	movwf	6
  9999  0081  3004               	movlw	4
 10000  0082  0081               	movwf	1
 10001                           
 10002                           ;mrf49xa_data.c: 102: rfTrcvStatus.state = RECV_DATA;
 10003  0083  3002               	movlw	2
 10004  0084  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
 10005                           
 10006                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwByte = 1;
 10007  0085  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10008  0086  3980               	andlw	-128
 10009  0087  3801               	iorlw	1
 10010  0088  28B2               	goto	L6
 10011  0089                     i1l3532:	
 10012                           ;mrf49xa_data.c: 105: break;
 10013                           
 10014                           
 10015                           ;mrf49xa_data.c: 109: data = Mrf49RxByte();
 10016  0089  211B  3180         	fcall	i1_Mrf49RxByte
 10017  008B  00F5               	movwf	i1Mrf49xaServe@data
 10018                           
 10019                           ;mrf49xa_data.c: 113: if (mrf49Status.flags.lsb.dataQualityOK == 0)
 10020  008C  1BBE               	btfsc	_mrf49Status+1,7
 10021  008D  2894               	goto	i1l3540
 10022                           
 10023                           ;mrf49xa_data.c: 114: {
 10024                           ;mrf49xa_data.c: 115: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
 10025  008E  0021               	movlb	1	; select bank1
 10026  008F  0820               	movf	_rfTrcvStatus^(0+128),w
 10027  0090  0086               	movwf	6
 10028  0091  3005               	movlw	5
 10029  0092  0187               	clrf	7
 10030  0093  28A5               	goto	L7
 10031  0094                     i1l3540:	
 10032                           
 10033                           ;mrf49xa_data.c: 118: }
 10034                           ;mrf49xa_data.c: 120: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
 10035  0094  0021               	movlb	1	; select bank1
 10036  0095  0A20               	incf	_rfTrcvStatus^(0+128),w
 10037  0096  0086               	movwf	6
 10038  0097  0187               	clrf	7
 10039  0098  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10040  0099  397F               	andlw	127
 10041  009A  0601               	xorwf	1,w
 10042  009B  1D03               	skipz
 10043  009C  28A7               	goto	i1l3546
 10044                           
 10045                           ;mrf49xa_data.c: 121: {
 10046                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->crc = data;
 10047  009D  0820               	movf	_rfTrcvStatus^(0+128),w
 10048  009E  3E16               	addlw	22
 10049  009F  0086               	movwf	6
 10050  00A0  0875               	movf	i1Mrf49xaServe@data,w
 10051  00A1  0081               	movwf	1
 10052                           
 10053                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
 10054  00A2  0820               	movf	_rfTrcvStatus^(0+128),w
 10055  00A3  0086               	movwf	6
 10056  00A4  3005               	movlw	5
 10057  00A5                     L7:	
 10058  00A5  0081               	movwf	1
 10059  00A6  2868               	goto	i1l3510
 10060  00A7                     i1l3546:	
 10061                           
 10062                           ;mrf49xa_data.c: 135: else
 10063                           ;mrf49xa_data.c: 136: {
 10064                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
 10065  00A7  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10066  00A8  397F               	andlw	127
 10067  00A9  0720               	addwf	_rfTrcvStatus^(0+128),w
 10068  00AA  00F4               	movwf	??i1_Mrf49xaServe
 10069  00AB  0A74               	incf	??i1_Mrf49xaServe,w
 10070  00AC  0086               	movwf	6
 10071  00AD  0187               	clrf	7
 10072  00AE  0875               	movf	i1Mrf49xaServe@data,w
 10073  00AF  0081               	movwf	1
 10074  00B0  2201  3180         	fcall	PL14	;call to abstracted procedure
 10075  00B2                     L6:	
 10076  00B2  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10077  00B3  2911               	goto	i1l3584
 10078  00B4                     i1l3550:	
 10079                           
 10080                           ;mrf49xa_data.c: 143: rfTrcvStatus.hwByte++;
 10081  00B4  2201  3180         	fcall	PL14	;call to abstracted procedure
 10082  00B6  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10083                           
 10084                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
 10085  00B7  397F               	andlw	127
 10086  00B8  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
 10087  00B9  1D03               	skipz
 10088  00BA  28F0               	goto	i1l3578
 10089                           
 10090                           ;mrf49xa_data.c: 146: rfTrcvStatus.hwByte = 49;
 10091  00BB  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10092  00BC  3980               	andlw	-128
 10093  00BD  3831               	iorlw	49
 10094  00BE  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10095  00BF  28F0               	goto	i1l3578
 10096  00C0                     i1l3554:	
 10097                           
 10098                           ;mrf49xa_data.c: 151: Mrf49TxByte(0x2D);
 10099  00C0  302D               	movlw	45
 10100  00C1  2116  3180         	fcall	i1_Mrf49TxByte
 10101                           
 10102                           ;mrf49xa_data.c: 152: break;
 10103  00C3  2911               	goto	i1l3584
 10104  00C4                     i1l3556:	
 10105                           
 10106                           ;mrf49xa_data.c: 155: Mrf49TxByte(0xD4);
 10107  00C4  30D4               	movlw	212
 10108  00C5  2116  3180         	fcall	i1_Mrf49TxByte
 10109                           
 10110                           ;mrf49xa_data.c: 156: rfTrcvStatus.hwByte = 0x7F;
 10111  00C7  307F               	movlw	127
 10112  00C8  0021               	movlb	1	; select bank1
 10113  00C9  04EA               	iorwf	(_rfTrcvStatus^(0+128)+74),f
 10114                           
 10115                           ;mrf49xa_data.c: 157: break;
 10116  00CA  2911               	goto	i1l3584
 10117  00CB                     i1l3560:	
 10118                           
 10119                           ;mrf49xa_data.c: 161: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
 10120  00CB  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10121  00CC  397F               	andlw	127
 10122  00CD  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
 10123  00CE  0086               	movwf	6
 10124  00CF  0187               	clrf	7
 10125  00D0  0801               	movf	1,w
 10126  00D1  2116  3180         	fcall	i1_Mrf49TxByte
 10127                           
 10128                           ;mrf49xa_data.c: 162: break;
 10129  00D3  2911               	goto	i1l3584
 10130  00D4                     i1l3562:	
 10131                           
 10132                           ;mrf49xa_data.c: 165: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
 10133  00D4  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
 10134  00D5  2116  3180         	fcall	i1_Mrf49TxByte
 10135                           
 10136                           ;mrf49xa_data.c: 166: break;
 10137  00D7  2911               	goto	i1l3584
 10138  00D8                     i1l3564:	
 10139                           
 10140                           ;mrf49xa_data.c: 169: Mrf49TxByte(0x00);
 10141  00D8  3000               	movlw	0
 10142  00D9  2116  3180         	fcall	i1_Mrf49TxByte
 10143                           
 10144                           ;mrf49xa_data.c: 170: break;
 10145  00DB  2911               	goto	i1l3584
 10146  00DC                     i1l3566:	
 10147                           
 10148                           ;mrf49xa_data.c: 173: Mrf49TxByte(0x00);
 10149  00DC  3000               	movlw	0
 10150  00DD  2116  3180         	fcall	i1_Mrf49TxByte
 10151                           
 10152                           ;mrf49xa_data.c: 174: Mrf49xaModeRx();
 10153  00DF  211E  3180         	fcall	i1_Mrf49xaModeRx
 10154                           
 10155                           ;mrf49xa_data.c: 176: rfTrcvStatus.txPacket.retry = 0;
 10156  00E1  30F0               	movlw	-16
 10157  00E2  0021               	movlb	1	; select bank1
 10158  00E3  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
 10159                           
 10160                           ;mrf49xa_data.c: 178: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
 10161  00E4  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
 10162  00E5  0C89               	rrf	9,f
 10163  00E6  0C89               	rrf	9,f
 10164  00E7  3903               	andlw	3
 10165  00E8  3A01               	xorlw	1
 10166  00E9  1D03               	skipz
 10167  00EA  28EE               	goto	i1l3574
 10168                           
 10169                           ;mrf49xa_data.c: 179: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
 10170  00EB  3003               	movlw	3
 10171  00EC  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
 10172  00ED  2911               	goto	i1l3584
 10173  00EE                     i1l3574:	
 10174                           
 10175                           ;mrf49xa_data.c: 180: else
 10176                           ;mrf49xa_data.c: 181: rfTrcvStatus.txPacket.state = PKT_FREE;
 10177  00EE  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
 10178  00EF  2911               	goto	i1l3584
 10179  00F0                     i1l3578:	
 10180  00F0  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10181  00F1  397F               	andlw	127
 10182                           
 10183                           ; Switch size 1, requested type "space"
 10184                           ; Number of cases is 5, Range of values is 49 to 101
 10185                           ; switch strategies available:
 10186                           ; Name         Instructions Cycles
 10187                           ; simple_byte           16     9 (average)
 10188                           ; direct_byte          115     9 (fixed)
 10189                           ; jumptable            263     9 (fixed)
 10190                           ;	Chosen strategy is simple_byte
 10191  00F2  3A31               	xorlw	49	; case 49
 10192  00F3  1903               	skipnz
 10193  00F4  28D4               	goto	i1l3562
 10194  00F5  3A03               	xorlw	3	; case 50
 10195  00F6  1903               	skipnz
 10196  00F7  28D8               	goto	i1l3564
 10197  00F8  3A01               	xorlw	1	; case 51
 10198  00F9  1903               	skipnz
 10199  00FA  28DC               	goto	i1l3566
 10200  00FB  3A57               	xorlw	87	; case 100
 10201  00FC  1903               	skipnz
 10202  00FD  28C0               	goto	i1l3554
 10203  00FE  3A01               	xorlw	1	; case 101
 10204  00FF  1903               	skipnz
 10205  0100  28C4               	goto	i1l3556
 10206  0101  28CB               	goto	i1l3560
 10207  0102                     i1l3582:	
 10208  0102  0021               	movlb	1	; select bank1
 10209  0103  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
 10210                           
 10211                           ; Switch size 1, requested type "space"
 10212                           ; Number of cases is 4, Range of values is 0 to 3
 10213                           ; switch strategies available:
 10214                           ; Name         Instructions Cycles
 10215                           ; simple_byte           13     7 (average)
 10216                           ; direct_byte           14     6 (fixed)
 10217                           ; jumptable            260     6 (fixed)
 10218                           ;	Chosen strategy is simple_byte
 10219  0104  3A00               	xorlw	0	; case 0
 10220  0105  1903               	skipnz
 10221  0106  2860               	goto	i1l3504
 10222  0107  3A01               	xorlw	1	; case 1
 10223  0108  1903               	skipnz
 10224  0109  2863               	goto	i1l3506
 10225  010A  3A03               	xorlw	3	; case 2
 10226  010B  1903               	skipnz
 10227  010C  2889               	goto	i1l3532
 10228  010D  3A01               	xorlw	1	; case 3
 10229  010E  1903               	skipnz
 10230  010F  28B4               	goto	i1l3550
 10231  0110  2911               	goto	i1l3584
 10232  0111                     i1l3584:	
 10233                           
 10234                           ;mrf49xa_data.c: 188: }
 10235                           ;mrf49xa_data.c: 202: return PORTAbits.RA2 == 1 ? 1 : 0;
 10236  0111  0020               	movlb	0	; select bank0
 10237  0112  0C0C               	rrf	12,w	;volatile
 10238  0113  0C89               	rrf	9,f
 10239  0114  3901               	andlw	1
 10240  0115  0008               	return
 10241  0116                     __end_ofi1_Mrf49xaServe:	
 10242  0116                     __ptext70:	
 10243 ;; *************** function i1_Mrf49TxByte *****************
 10244 ;; Defined at:
 10245 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;  byte            1    wreg     unsigned char 
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;  byte            1    3[COMMON] unsigned char 
 10250 ;; Return value:  Size  Location     Type
 10251 ;;		None               void
 10252 ;; Registers used:
 10253 ;;		wreg, status,2, status,0, pclath, cstack
 10254 ;; Tracked objects:
 10255 ;;		On entry : 1E/1
 10256 ;;		On exit  : 1F/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10259 ;;      Params:         0       0       0       0
 10260 ;;      Locals:         1       0       0       0
 10261 ;;      Temps:          0       0       0       0
 10262 ;;      Totals:         1       0       0       0
 10263 ;;Total ram usage:        1 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; Hardware stack levels required when called:    2
 10266 ;; This function calls:
 10267 ;;		i1_Mrf49TxCmd
 10268 ;; This function is called by:
 10269 ;;		i1_Mrf49xaServe
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           
 10274                           ;psect for function i1_Mrf49TxByte
 10275  0116                     i1_Mrf49TxByte:	
 10276                           
 10277                           ;incstack = 0
 10278                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
 10279                           ;i1Mrf49TxByte@byte stored from wreg
 10280  0116  00F3               	movwf	i1Mrf49TxByte@byte
 10281                           
 10282                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
 10283  0117  00F1               	movwf	i1Mrf49TxCmd@val
 10284  0118  30B8               	movlw	184
 10285  0119  2145               	fcall	i1_Mrf49TxCmd
 10286  011A  0008               	return
 10287  011B                     __end_ofi1_Mrf49TxByte:	
 10288  011B                     __ptext73:	
 10289 ;; *************** function i1_Mrf49RxByte *****************
 10290 ;; Defined at:
 10291 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;		None
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      unsigned char 
 10298 ;; Registers used:
 10299 ;;		wreg, status,2, status,0, pclath, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 1E/1
 10302 ;;		On exit  : 1F/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10305 ;;      Params:         0       0       0       0
 10306 ;;      Locals:         0       0       0       0
 10307 ;;      Temps:          0       0       0       0
 10308 ;;      Totals:         0       0       0       0
 10309 ;;Total ram usage:        0 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    2
 10312 ;; This function calls:
 10313 ;;		i1_Mrf49RxCmd
 10314 ;; This function is called by:
 10315 ;;		i1_Mrf49xaServe
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           
 10320                           ;psect for function i1_Mrf49RxByte
 10321  011B                     i1_Mrf49RxByte:	
 10322                           
 10323                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
 10324                           
 10325                           ;incstack = 0
 10326                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
 10327  011B  30B0               	movlw	176
 10328  011C  2022               	fcall	i1_Mrf49RxCmd
 10329  011D  0008               	return
 10330  011E                     __end_ofi1_Mrf49RxByte:	
 10331  011E                     __ptext69:	
 10332 ;; *************** function i1_Mrf49xaModeRx *****************
 10333 ;; Defined at:
 10334 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;		None
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
 10339 ;; Return value:  Size  Location     Type
 10340 ;;		None               void
 10341 ;; Registers used:
 10342 ;;		wreg, status,2, status,0, pclath, cstack
 10343 ;; Tracked objects:
 10344 ;;		On entry : 1E/0
 10345 ;;		On exit  : 1F/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10348 ;;      Params:         0       0       0       0
 10349 ;;      Locals:         1       0       0       0
 10350 ;;      Temps:          0       0       0       0
 10351 ;;      Totals:         1       0       0       0
 10352 ;;Total ram usage:        1 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    2
 10355 ;; This function calls:
 10356 ;;		i1_Mrf49TxCmd
 10357 ;; This function is called by:
 10358 ;;		i1_Mrf49xaServe
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function i1_Mrf49xaModeRx
 10364  011E                     i1_Mrf49xaModeRx:	
 10365  011E  300C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10366                           
 10367                           ;mrf49xa.c: 101: UI08_t k;
 10368                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
 10369                           
 10370                           ;incstack = 0
 10371                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
 10372  011F  01F3               	clrf	i1Mrf49xaModeRx@k
 10373  0120  3182               	movlp	high __stringtab
 10374  0121  000A               	callw
 10375  0122  3180               	pagesel	$	;select current page
 10376  0123  3800               	iorlw	0
 10377  0124  1903               	btfsc	3,2
 10378  0125  293A               	goto	i1l211
 10379  0126                     i1l3246:	
 10380  0126  3573               	lslf	i1Mrf49xaModeRx@k,w
 10381  0127  3E30               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
 10382  0128  3182               	movlp	high __stringtab
 10383  0129  000A               	callw
 10384  012A  00F1               	movwf	i1Mrf49TxCmd@val
 10385  012B  3573               	lslf	i1Mrf49xaModeRx@k,w
 10386  012C  3E2F               	addlw	low (_mrfRegset_Rx| (0+32768))
 10387  012D  3182               	movlp	high __stringtab
 10388  012E  000A               	callw
 10389  012F  3180               	pagesel	$	;select current page
 10390  0130  3181  2145         	fcall	i1_Mrf49TxCmd
 10391  0132  300C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10392  0133  0AF3               	incf	i1Mrf49xaModeRx@k,f
 10393  0134  3182               	movlp	high __stringtab
 10394  0135  000A               	callw
 10395  0136  3180               	pagesel	$	;select current page
 10396  0137  0273               	subwf	i1Mrf49xaModeRx@k,w
 10397  0138  1C03               	skipc
 10398  0139  2926               	goto	i1l3246
 10399  013A                     i1l211:	
 10400                           
 10401                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
 10402  013A  0021               	movlb	1	; select bank1
 10403  013B  3080               	movlw	-128
 10404  013C  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
 10405  013D  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
 10406                           
 10407                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
 10408  013E  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
 10409                           
 10410                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
 10411  013F  0020               	movlb	0	; select bank0
 10412  0140  13BD               	bcf	_mrf49Status,7
 10413  0141  0008               	return
 10414  0142                     __end_ofi1_Mrf49xaModeRx:	
 10415  0142                     __ptext68:	
 10416 ;; *************** function i1_Mrf49xaNeedsReset *****************
 10417 ;; Defined at:
 10418 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;		None
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;		None
 10423 ;; Return value:  Size  Location     Type
 10424 ;;		None               void
 10425 ;; Registers used:
 10426 ;;		None
 10427 ;; Tracked objects:
 10428 ;;		On entry : 1E/0
 10429 ;;		On exit  : 1F/1
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10432 ;;      Params:         0       0       0       0
 10433 ;;      Locals:         0       0       0       0
 10434 ;;      Temps:          0       0       0       0
 10435 ;;      Totals:         0       0       0       0
 10436 ;;Total ram usage:        0 bytes
 10437 ;; Hardware stack levels used:    1
 10438 ;; This function calls:
 10439 ;;		Nothing
 10440 ;; This function is called by:
 10441 ;;		_extInt
 10442 ;;		i1_Mrf49xaServe
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           
 10447                           ;psect for function i1_Mrf49xaNeedsReset
 10448  0142                     i1_Mrf49xaNeedsReset:	
 10449                           
 10450                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
 10451                           
 10452                           ;incstack = 0
 10453                           ; Regs used in i1_Mrf49xaNeedsReset: []
 10454  0142  0021               	movlb	1	; select bank1
 10455  0143  17EA               	bsf	(_rfTrcvStatus^(0+128)+74),7
 10456  0144  0008               	return
 10457  0145                     __end_ofi1_Mrf49xaNeedsReset:	
 10458  0145                     __ptext71:	
 10459 ;; *************** function i1_Mrf49TxCmd *****************
 10460 ;; Defined at:
 10461 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
 10462 ;; Parameters:    Size  Location     Type
 10463 ;;  cmd             1    wreg     unsigned char 
 10464 ;;  val             1    1[COMMON] unsigned char 
 10465 ;; Auto vars:     Size  Location     Type
 10466 ;;  cmd             1    2[COMMON] unsigned char 
 10467 ;; Return value:  Size  Location     Type
 10468 ;;		None               void
 10469 ;; Registers used:
 10470 ;;		wreg, status,2, status,0, pclath, cstack
 10471 ;; Tracked objects:
 10472 ;;		On entry : 1E/0
 10473 ;;		On exit  : 1F/0
 10474 ;;		Unchanged: 0/0
 10475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10476 ;;      Params:         1       0       0       0
 10477 ;;      Locals:         1       0       0       0
 10478 ;;      Temps:          0       0       0       0
 10479 ;;      Totals:         2       0       0       0
 10480 ;;Total ram usage:        2 bytes
 10481 ;; Hardware stack levels used:    1
 10482 ;; Hardware stack levels required when called:    1
 10483 ;; This function calls:
 10484 ;;		i1_Mrf49SpiTx
 10485 ;; This function is called by:
 10486 ;;		i1_Mrf49xaModeRx
 10487 ;;		i1_Mrf49TxByte
 10488 ;; This function uses a non-reentrant model
 10489 ;;
 10490                           
 10491                           
 10492                           ;psect for function i1_Mrf49TxCmd
 10493  0145                     i1_Mrf49TxCmd:	
 10494                           
 10495                           ;incstack = 0
 10496                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
 10497                           ;i1Mrf49TxCmd@cmd stored from wreg
 10498  0145  00F2               	movwf	i1Mrf49TxCmd@cmd
 10499                           
 10500                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
 10501  0146  0020               	movlb	0	; select bank0
 10502  0147  130E               	bcf	14,6	;volatile
 10503                           
 10504                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
 10505  0148  0872               	movf	i1Mrf49TxCmd@cmd,w
 10506  0149  214F  3180         	fcall	i1_Mrf49SpiTx
 10507                           
 10508                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
 10509  014B  0871               	movf	i1Mrf49TxCmd@val,w
 10510  014C  214F               	fcall	i1_Mrf49SpiTx
 10511                           
 10512                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
 10513  014D  170E               	bsf	14,6	;volatile
 10514  014E  0008               	return
 10515  014F                     __end_ofi1_Mrf49TxCmd:	
 10516  014F                     __ptext75:	
 10517 ;; *************** function i1_Mrf49SpiTx *****************
 10518 ;; Defined at:
 10519 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10520 ;; Parameters:    Size  Location     Type
 10521 ;;  byte            1    wreg     unsigned char 
 10522 ;; Auto vars:     Size  Location     Type
 10523 ;;  byte            1    0[COMMON] unsigned char 
 10524 ;; Return value:  Size  Location     Type
 10525 ;;		None               void
 10526 ;; Registers used:
 10527 ;;		wreg
 10528 ;; Tracked objects:
 10529 ;;		On entry : 1F/0
 10530 ;;		On exit  : 1F/0
 10531 ;;		Unchanged: 0/0
 10532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10533 ;;      Params:         0       0       0       0
 10534 ;;      Locals:         1       0       0       0
 10535 ;;      Temps:          0       0       0       0
 10536 ;;      Totals:         1       0       0       0
 10537 ;;Total ram usage:        1 bytes
 10538 ;; Hardware stack levels used:    1
 10539 ;; This function calls:
 10540 ;;		Nothing
 10541 ;; This function is called by:
 10542 ;;		i1_Mrf49TxCmd
 10543 ;;		i1_Mrf49RxCmd
 10544 ;; This function uses a non-reentrant model
 10545 ;;
 10546                           
 10547                           
 10548                           ;psect for function i1_Mrf49SpiTx
 10549  014F                     i1_Mrf49SpiTx:	
 10550                           
 10551                           ;incstack = 0
 10552                           ; Regs used in i1_Mrf49SpiTx: [wreg]
 10553                           ;i1Mrf49SpiTx@byte stored from wreg
 10554  014F  00F0               	movwf	i1Mrf49SpiTx@byte
 10555                           
 10556                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
 10557  0150  1FF0               	btfss	i1Mrf49SpiTx@byte,7
 10558  0151  2954               	goto	i1l255
 10559  0152  178D               	bsf	13,7	;volatile
 10560  0153  2955               	goto	i1l256
 10561  0154                     i1l255:	
 10562  0154  138D               	bcf	13,7	;volatile
 10563  0155                     i1l256:	
 10564  0155  0022               	movlb	2	; select bank2
 10565  0156  178E               	bsf	14,7	;volatile
 10566  0157  0000               	nop	;# 
 10567  0158  0022               	movlb	2	; select bank2
 10568  0159  138E               	bcf	14,7	;volatile
 10569  015A  1F70               	btfss	i1Mrf49SpiTx@byte,6
 10570  015B  295F               	goto	i1l259
 10571  015C  0020               	movlb	0	; select bank0
 10572  015D  178D               	bsf	13,7	;volatile
 10573  015E  2961               	goto	i1l260
 10574  015F                     i1l259:	
 10575  015F  0020               	movlb	0	; select bank0
 10576  0160  138D               	bcf	13,7	;volatile
 10577  0161                     i1l260:	
 10578  0161  0022               	movlb	2	; select bank2
 10579  0162  178E               	bsf	14,7	;volatile
 10580  0163  0000               	nop	;# 
 10581  0164  0022               	movlb	2	; select bank2
 10582  0165  138E               	bcf	14,7	;volatile
 10583  0166  1EF0               	btfss	i1Mrf49SpiTx@byte,5
 10584  0167  296B               	goto	i1l263
 10585  0168  0020               	movlb	0	; select bank0
 10586  0169  178D               	bsf	13,7	;volatile
 10587  016A  296D               	goto	i1l264
 10588  016B                     i1l263:	
 10589  016B  0020               	movlb	0	; select bank0
 10590  016C  138D               	bcf	13,7	;volatile
 10591  016D                     i1l264:	
 10592  016D  0022               	movlb	2	; select bank2
 10593  016E  178E               	bsf	14,7	;volatile
 10594  016F  0000               	nop	;# 
 10595  0170  0022               	movlb	2	; select bank2
 10596  0171  138E               	bcf	14,7	;volatile
 10597  0172  1E70               	btfss	i1Mrf49SpiTx@byte,4
 10598  0173  2977               	goto	i1l267
 10599  0174  0020               	movlb	0	; select bank0
 10600  0175  178D               	bsf	13,7	;volatile
 10601  0176  2979               	goto	i1l268
 10602  0177                     i1l267:	
 10603  0177  0020               	movlb	0	; select bank0
 10604  0178  138D               	bcf	13,7	;volatile
 10605  0179                     i1l268:	
 10606  0179  0022               	movlb	2	; select bank2
 10607  017A  178E               	bsf	14,7	;volatile
 10608  017B  0000               	nop	;# 
 10609  017C  0022               	movlb	2	; select bank2
 10610  017D  138E               	bcf	14,7	;volatile
 10611  017E  1DF0               	btfss	i1Mrf49SpiTx@byte,3
 10612  017F  2983               	goto	i1l271
 10613  0180  0020               	movlb	0	; select bank0
 10614  0181  178D               	bsf	13,7	;volatile
 10615  0182  2985               	goto	i1l272
 10616  0183                     i1l271:	
 10617  0183  0020               	movlb	0	; select bank0
 10618  0184  138D               	bcf	13,7	;volatile
 10619  0185                     i1l272:	
 10620  0185  0022               	movlb	2	; select bank2
 10621  0186  178E               	bsf	14,7	;volatile
 10622  0187  0000               	nop	;# 
 10623  0188  0022               	movlb	2	; select bank2
 10624  0189  138E               	bcf	14,7	;volatile
 10625  018A  1D70               	btfss	i1Mrf49SpiTx@byte,2
 10626  018B  298F               	goto	i1l275
 10627  018C  0020               	movlb	0	; select bank0
 10628  018D  178D               	bsf	13,7	;volatile
 10629  018E  2991               	goto	i1l276
 10630  018F                     i1l275:	
 10631  018F  0020               	movlb	0	; select bank0
 10632  0190  138D               	bcf	13,7	;volatile
 10633  0191                     i1l276:	
 10634  0191  0022               	movlb	2	; select bank2
 10635  0192  178E               	bsf	14,7	;volatile
 10636  0193  0000               	nop	;# 
 10637  0194  0022               	movlb	2	; select bank2
 10638  0195  138E               	bcf	14,7	;volatile
 10639  0196  1CF0               	btfss	i1Mrf49SpiTx@byte,1
 10640  0197  299B               	goto	i1l279
 10641  0198  0020               	movlb	0	; select bank0
 10642  0199  178D               	bsf	13,7	;volatile
 10643  019A  299D               	goto	i1l280
 10644  019B                     i1l279:	
 10645  019B  0020               	movlb	0	; select bank0
 10646  019C  138D               	bcf	13,7	;volatile
 10647  019D                     i1l280:	
 10648  019D  0022               	movlb	2	; select bank2
 10649  019E  178E               	bsf	14,7	;volatile
 10650  019F  0000               	nop	;# 
 10651  01A0  0022               	movlb	2	; select bank2
 10652  01A1  138E               	bcf	14,7	;volatile
 10653  01A2  1C70               	btfss	i1Mrf49SpiTx@byte,0
 10654  01A3  29A7               	goto	i1l283
 10655  01A4  0020               	movlb	0	; select bank0
 10656  01A5  178D               	bsf	13,7	;volatile
 10657  01A6  29A9               	goto	i1l284
 10658  01A7                     i1l283:	
 10659  01A7  0020               	movlb	0	; select bank0
 10660  01A8  138D               	bcf	13,7	;volatile
 10661  01A9                     i1l284:	
 10662  01A9  0022               	movlb	2	; select bank2
 10663  01AA  178E               	bsf	14,7	;volatile
 10664  01AB  0000               	nop	;# 
 10665  01AC  0022               	movlb	2	; select bank2
 10666  01AD  138E               	bcf	14,7	;volatile
 10667                           
 10668                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
 10669  01AE  0020               	movlb	0	; select bank0
 10670  01AF  138D               	bcf	13,7	;volatile
 10671  01B0  0008               	return
 10672  01B1                     __end_ofi1_Mrf49SpiTx:	
 10673  01B1                     __ptext72:	
 10674 ;; *************** function i1_Mrf49RxSts *****************
 10675 ;; Defined at:
 10676 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
 10677 ;; Parameters:    Size  Location     Type
 10678 ;;		None
 10679 ;; Auto vars:     Size  Location     Type
 10680 ;;		None
 10681 ;; Return value:  Size  Location     Type
 10682 ;;		None               void
 10683 ;; Registers used:
 10684 ;;		wreg, status,2, pclath, cstack
 10685 ;; Tracked objects:
 10686 ;;		On entry : 1F/1
 10687 ;;		On exit  : 1F/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10690 ;;      Params:         0       0       0       0
 10691 ;;      Locals:         0       0       0       0
 10692 ;;      Temps:          0       0       0       0
 10693 ;;      Totals:         0       0       0       0
 10694 ;;Total ram usage:        0 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:    1
 10697 ;; This function calls:
 10698 ;;		i1_Mrf49SpiRx
 10699 ;; This function is called by:
 10700 ;;		i1_Mrf49xaServe
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           
 10705                           ;psect for function i1_Mrf49RxSts
 10706  01B1                     i1_Mrf49RxSts:	
 10707                           
 10708                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
 10709                           
 10710                           ;incstack = 0
 10711                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
 10712  01B1  120B               	bcf	11,4	;volatile
 10713                           
 10714                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
 10715  01B2  0020               	movlb	0	; select bank0
 10716  01B3  130E               	bcf	14,6	;volatile
 10717                           
 10718                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
 10719  01B4  21BE  3180         	fcall	i1_Mrf49SpiRx
 10720  01B6  0020               	movlb	0	; select bank0
 10721  01B7  00BD               	movwf	_mrf49Status
 10722                           
 10723                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
 10724  01B8  21BE               	fcall	i1_Mrf49SpiRx
 10725  01B9  0020               	movlb	0	; select bank0
 10726  01BA  00BE               	movwf	_mrf49Status+1
 10727                           
 10728                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
 10729  01BB  170E               	bsf	14,6	;volatile
 10730                           
 10731                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
 10732  01BC  160B               	bsf	11,4	;volatile
 10733  01BD  0008               	return
 10734  01BE                     __end_ofi1_Mrf49RxSts:	
 10735  01BE                     __ptext76:	
 10736 ;; *************** function i1_Mrf49SpiRx *****************
 10737 ;; Defined at:
 10738 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10739 ;; Parameters:    Size  Location     Type
 10740 ;;		None
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
 10743 ;; Return value:  Size  Location     Type
 10744 ;;                  1    wreg      unsigned char 
 10745 ;; Registers used:
 10746 ;;		wreg, status,2
 10747 ;; Tracked objects:
 10748 ;;		On entry : 1F/0
 10749 ;;		On exit  : 1F/2
 10750 ;;		Unchanged: 0/0
 10751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10752 ;;      Params:         0       0       0       0
 10753 ;;      Locals:         1       0       0       0
 10754 ;;      Temps:          0       0       0       0
 10755 ;;      Totals:         1       0       0       0
 10756 ;;Total ram usage:        1 bytes
 10757 ;; Hardware stack levels used:    1
 10758 ;; This function calls:
 10759 ;;		Nothing
 10760 ;; This function is called by:
 10761 ;;		i1_Mrf49RxCmd
 10762 ;;		i1_Mrf49RxSts
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           
 10767                           ;psect for function i1_Mrf49SpiRx
 10768  01BE                     i1_Mrf49SpiRx:	
 10769                           
 10770                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
 10771                           
 10772                           ;incstack = 0
 10773                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
 10774  01BE  01F0               	clrf	i1Mrf49SpiRx@data
 10775                           
 10776                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
 10777  01BF  138D               	bcf	13,7	;volatile
 10778  01C0  1A8E               	btfsc	14,5	;volatile
 10779  01C1  17F0               	bsf	i1Mrf49SpiRx@data,7
 10780  01C2  0022               	movlb	2	; select bank2
 10781  01C3  178E               	bsf	14,7	;volatile
 10782  01C4  0000               	nop	;# 
 10783  01C5  0022               	movlb	2	; select bank2
 10784  01C6  138E               	bcf	14,7	;volatile
 10785                           
 10786                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10787  01C7  0020               	movlb	0	; select bank0
 10788  01C8  1A8E               	btfsc	14,5	;volatile
 10789  01C9  1770               	bsf	i1Mrf49SpiRx@data,6
 10790  01CA  0022               	movlb	2	; select bank2
 10791  01CB  178E               	bsf	14,7	;volatile
 10792  01CC  0000               	nop	;# 
 10793  01CD  0022               	movlb	2	; select bank2
 10794  01CE  138E               	bcf	14,7	;volatile
 10795                           
 10796                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10797  01CF  0020               	movlb	0	; select bank0
 10798  01D0  1A8E               	btfsc	14,5	;volatile
 10799  01D1  16F0               	bsf	i1Mrf49SpiRx@data,5
 10800  01D2  0022               	movlb	2	; select bank2
 10801  01D3  178E               	bsf	14,7	;volatile
 10802  01D4  0000               	nop	;# 
 10803  01D5  0022               	movlb	2	; select bank2
 10804  01D6  138E               	bcf	14,7	;volatile
 10805                           
 10806                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10807  01D7  0020               	movlb	0	; select bank0
 10808  01D8  1A8E               	btfsc	14,5	;volatile
 10809  01D9  1670               	bsf	i1Mrf49SpiRx@data,4
 10810  01DA  0022               	movlb	2	; select bank2
 10811  01DB  178E               	bsf	14,7	;volatile
 10812  01DC  0000               	nop	;# 
 10813  01DD  0022               	movlb	2	; select bank2
 10814  01DE  138E               	bcf	14,7	;volatile
 10815                           
 10816                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10817  01DF  0020               	movlb	0	; select bank0
 10818  01E0  1A8E               	btfsc	14,5	;volatile
 10819  01E1  15F0               	bsf	i1Mrf49SpiRx@data,3
 10820  01E2  0022               	movlb	2	; select bank2
 10821  01E3  178E               	bsf	14,7	;volatile
 10822  01E4  0000               	nop	;# 
 10823  01E5  0022               	movlb	2	; select bank2
 10824  01E6  138E               	bcf	14,7	;volatile
 10825                           
 10826                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10827  01E7  0020               	movlb	0	; select bank0
 10828  01E8  1A8E               	btfsc	14,5	;volatile
 10829  01E9  1570               	bsf	i1Mrf49SpiRx@data,2
 10830  01EA  0022               	movlb	2	; select bank2
 10831  01EB  178E               	bsf	14,7	;volatile
 10832  01EC  0000               	nop	;# 
 10833  01ED  0022               	movlb	2	; select bank2
 10834  01EE  138E               	bcf	14,7	;volatile
 10835                           
 10836                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10837  01EF  0020               	movlb	0	; select bank0
 10838  01F0  1A8E               	btfsc	14,5	;volatile
 10839  01F1  14F0               	bsf	i1Mrf49SpiRx@data,1
 10840  01F2  0022               	movlb	2	; select bank2
 10841  01F3  178E               	bsf	14,7	;volatile
 10842  01F4  0000               	nop	;# 
 10843  01F5  0022               	movlb	2	; select bank2
 10844  01F6  138E               	bcf	14,7	;volatile
 10845                           
 10846                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10847  01F7  0020               	movlb	0	; select bank0
 10848  01F8  1A8E               	btfsc	14,5	;volatile
 10849  01F9  1470               	bsf	i1Mrf49SpiRx@data,0
 10850  01FA  0022               	movlb	2	; select bank2
 10851  01FB  178E               	bsf	14,7	;volatile
 10852  01FC  0000               	nop	;# 
 10853  01FD  0022               	movlb	2	; select bank2
 10854  01FE  138E               	bcf	14,7	;volatile
 10855                           
 10856                           ;mrf49xa_spi_pic16.c: 40: return data;
 10857  01FF  0870               	movf	i1Mrf49SpiRx@data,w
 10858  0200  0008               	return
 10859  0201                     __end_ofi1_Mrf49SpiRx:	
 10860  0201                     PL14:	
 10861  0201  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10862  0202  397F               	andlw	127
 10863  0203  00F4               	movwf	??i1_Mrf49xaServe
 10864  0204  0AF4               	incf	??i1_Mrf49xaServe,f
 10865  0205  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10866  0206  0674               	xorwf	??i1_Mrf49xaServe,w
 10867  0207  3980               	andlw	-128
 10868  0208  0674               	xorwf	??i1_Mrf49xaServe,w
 10869  0209  0008               	return
 10870  020A                     __end_ofPL14:	
 10871                           
 10872                           	psect	text77
 10873  0277                     __ptext77:	
 10874 ;; *************** function _ExtIntDeinit *****************
 10875 ;; Defined at:
 10876 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
 10877 ;; Parameters:    Size  Location     Type
 10878 ;;		None
 10879 ;; Auto vars:     Size  Location     Type
 10880 ;;		None
 10881 ;; Return value:  Size  Location     Type
 10882 ;;		None               void
 10883 ;; Registers used:
 10884 ;;		None
 10885 ;; Tracked objects:
 10886 ;;		On entry : 1E/0
 10887 ;;		On exit  : 1E/0
 10888 ;;		Unchanged: 1E/0
 10889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10890 ;;      Params:         0       0       0       0
 10891 ;;      Locals:         0       0       0       0
 10892 ;;      Temps:          0       0       0       0
 10893 ;;      Totals:         0       0       0       0
 10894 ;;Total ram usage:        0 bytes
 10895 ;; Hardware stack levels used:    1
 10896 ;; This function calls:
 10897 ;;		Nothing
 10898 ;; This function is called by:
 10899 ;;		_extInt
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           
 10904                           ;psect for function _ExtIntDeinit
 10905  0277                     _ExtIntDeinit:	
 10906                           
 10907                           ;interrupt.c: 19: INTCONbits.INTE = 0;
 10908                           
 10909                           ;incstack = 0
 10910                           ; Regs used in _ExtIntDeinit: []
 10911  0277  120B               	bcf	11,4	;volatile
 10912  0278  0008               	return
 10913  0279                     __end_of_ExtIntDeinit:	
 10914  007E                     btemp	set	126	;btemp
 10915  007E                     wtemp	set	126
 10916  007E                     wtemp0	set	126
 10917  0080                     wtemp1	set	128
 10918  0082                     wtemp2	set	130
 10919  0084                     wtemp3	set	132
 10920  0086                     wtemp4	set	134
 10921  0088                     wtemp5	set	136
 10922  007F                     wtemp6	set	127
 10923  007E                     ttemp	set	126
 10924  007E                     ttemp0	set	126
 10925  0081                     ttemp1	set	129
 10926  0084                     ttemp2	set	132
 10927  0087                     ttemp3	set	135
 10928  007F                     ttemp4	set	127
 10929  007E                     ltemp	set	126
 10930  007E                     ltemp0	set	126
 10931  0082                     ltemp1	set	130
 10932  0086                     ltemp2	set	134
 10933  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    68
    Data        1
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     19      32
    BANK1            80      0      75
    BANK2            80      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s1	PTR const void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleCfgCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleCfgWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__memcpy	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    S1054CfgParameter_s$ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    parameters.ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    handleCfgRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 9
		 -> eepromTxByte@byte(COMMON[1]), cfgRam(BANK0[9]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), 
		 -> NULL(NULL[0]), cfgRam(BANK0[9]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    S333rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _RfSendPowerState->_AdcSample
    _RfSendPowerState->_Mrf49xaTxPacket
    _AdcSample->_AdcGetResult
    _Mrf49xaReboot->_Mrf49xaModeRx
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_handleCfgCmd
    _HandlePacket->_handleCfgRead
    _HandlePacket->_handleCfgWrite
    _HandlePacket->_handleFwCmd
    _handleFwCmd->_eepromRxBytes
    _handleCfgWrite->_memcpy
    _handleCfgRead->_memcpy
    _CfgSave->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _CfgLoad->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   28030
                                             15 BANK0      4     4      0
                          _AdcSample
                            _CfgLoad
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
                   _RfSendPowerState
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              5     1      4    1855
                                              6 BANK0      5     1      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     3     3      0    1546
                                              6 BANK0      3     3      0
                          _AdcSample
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
                        _PwrAdcSleep
                         _PwrAdcWake
 ---------------------------------------------------------------------------------
 (2) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (3) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (3) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (3) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0     831
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        0     0      0     831
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     831
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      0     0      0     831
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    5616
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          3     3      0   14757
                                             12 BANK0      3     3      0
                         _ExtIntInit
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          3     3      0    4670
                                              6 BANK0      1     1      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2     946
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         2     2      0    1947
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
                  _Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (4) _Mrf49xaNeedsReset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     763
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     741
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         3     3      0    8050
                                              9 BANK0      3     3      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                       _handleCfgCmd
                      _handleCfgRead
                     _handleCfgWrite
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1231
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleCfgWrite                                       3     3      0     772
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _handleCfgRead                                        3     3      0     882
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               6     3      3     602
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _CfgGetSizeByType                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _handleCfgCmd                                         1     1      0    1935
                                              8 BANK0      1     1      0
                            _CfgLoad
                            _CfgSave
 ---------------------------------------------------------------------------------
 (4) _CfgSave                                              0     0      0     682
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (5) _eepromTxBytes                                        4     0      4     682
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (4) _CfgLoad                                              0     0      0    1085
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1085
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1470
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1280
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               2     2      0    1033
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaServe                                       2     2      0    1009
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
                i1_Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaNeedsReset                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaModeRx                                     1     1      0     362
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxByte                                       1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxSts                                        0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxByte                                       0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _CfgLoad
     _eepromRxBytes
       _SoftI2cRepeatedStart
         _SoftI2cNop
       _SoftI2cRxByte
         _SoftI2cNop
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleCfgCmd
         _CfgLoad
           _eepromRxBytes
             _SoftI2cRepeatedStart
               _SoftI2cNop
             _SoftI2cRxByte
               _SoftI2cNop
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
         _CfgSave
           _eepromTxBytes
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
       _handleCfgRead
         _CfgGetSizeByType
         _memcpy
       _handleCfgWrite
         _CfgGetSizeByType
         _memcpy
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendPowerState
     _AdcSample
       _AdcChSelect
       _AdcGetResult
       _AdcGo
       _AdcIsBusy
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
     _PwrAdcSleep
       _AdcDeinit
     _PwrAdcWake
       _AdcInit
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaNeedsReset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      73       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     13      20       6       40.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4B       8       93.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      73      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sat Jul 05 15:28:11 2014

                Mrf49xaTxPacket@crc 0023                         __CFG_CP$OFF 0000  
                                PL8 0F8D                                  l32 0A48  
                                l42 0A9D                                  l34 0A54  
                                l35 0A56                                  l39 0A80  
                                l79 0008                                 PL10 0FA5  
                               PL20 0FCC                                 PL12 0FB3  
                               PL22 0FD2                                 PL14 0201  
                               PL24 0FD7                                 PL16 0FC0  
                               PL18 0FC6               Mrf49xaTxPacket@packet 0025  
                               l211 0BDA                                 l234 0946  
                               l260 0EE5                                 l271 0F05  
                               l263 0EEF                                 l255 0ED9  
                               l280 0F1C                                 l272 0F06  
                               l264 0EF0                                 l256 0EDA  
                               l441 0ADE                                 l417 0940  
                               l442 0AFC                                 l283 0F26  
                               l275 0F10                                 l267 0EFA  
                               l259 0EE4                                 l284 0F27  
                               l276 0F11                                 l268 0EFB  
                               l381 0D8C                                 l374 0D51  
                               l550 0DE8                                 l383 0D9A  
                               l535 0E80                                 l279 0F1B  
                               l562 0CFF                                 l555 0D25  
                               l564 0D33                                 l565 0D40  
                               l645 08B4                                 l566 0D3F  
                               l558 0CF6                     ??_PwrSensorInit 0020  
                   ??_PwrSensorWake 0020                        __CFG_BORV$LO 0000  
               handleCfgWrite@index 0027                                 wreg 0009  
                  i1Mrf49xaModeRx@k 0073                        __CFG_IESO$ON 0000  
            ??_SoftI2cRepeatedStart 0021                        __CFG_LVP$OFF 0000  
            Mrf49xaTxPacket@needAck 0021                                l3030 0DC3  
                              l3032 0DC4                                l3040 0DD8  
                              l3200 0CDC                                l3034 0DC5  
                              l3202 0CDF                                l3130 0984  
                              l3106 0948                                l2412 0AAB  
                              l3036 0DCC                                l3212 0CFC  
                              l3132 0990                                l3222 0D07  
                              l3126 0976                                l3310 08F1  
                              l3302 08E0                                l2512 0A9F  
                              l3216 0D03                                l3208 0CF8  
                              l3136 0998                                l3320 090E  
                              l3304 08E3                                l3072 0C5A  
                              l2610 09EB                                l3170 0F3F  
                              l2620 0A06                                l3148 099B  
                              l3092 0FF8                                l3308 08EF  
                              l3324 0916                                l3068 0C53  
                              l3078 0850                                l2702 0D7A  
                              l2606 0A32                                l3086 0FE4  
                              l2456 0ABF                                l2608 0A43  
                              l2632 0BBD                                l3336 0929  
                              l2618 09F8                                l3346 0932  
                              l3338 092A                                l3290 08C0  
                              l3186 0CCE                                l2732 0E1E  
                              l2724 0E1C                                l2742 0E20  
                              l3198 0CD6                                l2638 0BC6  
                              l2736 0E1F                                l2728 0E1D  
                              l2752 0E4C                                l2920 0B60  
                              l2912 0B45                                l2824 0F7B  
                              l2816 0F82                                l2690 0D6C  
                              l2754 0E89                                l2930 0B78  
                              l2922 0B64                                l2906 0B33  
                              l3298 08D7                                l2826 0000  
                              l3618 0869                                l2756 0E81  
                              l2940 0B8E                                l2932 0B7C  
                              l2916 0B54                                l2860 0AE1  
                              l3660 08A9                                l2678 0D5A  
                              l2598 0A20                                l2926 0B6B  
                              l2870 0B00                                l2950 0BB1  
                              l2862 0AEA                     Mrf49TxByte@byte 0023  
                              l2928 0B74                                l2944 0B90  
                              l2872 0B03                                l3656 08A4  
                              l3648 089B                                l2882 0B11  
                              l2866 0AED                                l2962 09BC  
                              l2876 0B08                                l2948 0BA2  
                              l2980 026C                                l2878 0B0B  
                              l2966 09A7                                l2974 0258  
                              l2968 024F                                l2898 0B28  
                              l2998 0E6A                                u2457 0C4E  
                              u2467 0AAE                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                _main 0856  
                   __end_of_AdcInit 0F8D                                fsr0h 0005  
                              fsr1h 0007                    ??_PwrSensorSleep 0020  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                     __end_of_CfgLoad 0E89  
                              ltemp 007E                     __end_of_CfgSave 0E90  
              handleCfgWrite@packet 0028                                start 0020  
                              ttemp 007E                                wtemp 007E  
              __end_of_HandlePacket 0D44             __end_ofi1_Mrf49xaModeRx 0142  
                     __CFG_MCLRE$ON 0000                 __end_of_Mrf49RxByte 0BBD  
                     ?_ExtIntDeinit 0070                 __end_of_Mrf49TxByte 0BBB  
                   ??_eepromRxBytes 0028                         _Mcp9800Read 09D6  
                   ??_eepromTxBytes 0028                    _RfSendPowerState 0C0B  
               __end_of_Mrf49xaInit 09A6                 __end_of_Mrf49xaTick 0946  
              _Mrf49xaPacketPending 0F2F                   ?_CfgGetSizeByType 0070  
                             ?_main 0070                               i1l211 013A  
                             i1l141 001B                               i1l142 001C  
                             i1l260 0161                               i1l271 0183  
                             i1l263 016B                               i1l255 0154  
                             i1l280 019D                               i1l272 0185  
                             i1l264 016D                               i1l256 0155  
                             i1l441 003E                               i1l442 005C  
                             i1l283 01A7                               i1l275 018F  
                             i1l267 0177                               i1l259 015F  
                             i1l284 01A9                               i1l276 0191  
                             i1l268 0179                               i1l279 019B  
                        _Mrf49RxCmd 0F6E                          _Mrf49TxCmd 0BE5  
                             _AdcGo 0C6C                          _Mrf49SpiRx 0E90  
                        _Mrf49SpiTx 0ED4                          _Mrf49RxSts 0BEE  
                ??_CfgGetSizeByType 0020          __end_of_Mrf49xaAllocPacket 0CD4  
             __end_of_SoftI2cRxByte 0AAB               __end_of_SoftI2cTxByte 0A72  
                      main@humidity 002F               __size_of_Mcp9800Start 0019  
                __size_of_AdcDeinit 0007             Mrf49xaTxPacket@response 0020  
                __size_of_AdcIsBusy 0004                  __size_of_AdcSample 0028  
                    __CFG_BOREN$OFF 0000                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
            Mcp9800Start@resolution 0024                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                 i1_Mrf49xaNeedsReset 0142  
                    ??_ExtIntDeinit 0070                     __initialization 0813  
                        _ExtIntInit 0850                __end_of_handleCfgCmd 0DE9  
                      __end_of_main 08BA  RfSendSampleWeatherNode@temperature 0026  
                    __CFG_LPBOR$OFF 0000               ?_Mrf49xaPacketPending 0070  
                      _Mcp9800Start 0A07                              ??_main 002F  
              ?i1_Mrf49xaNeedsReset 0070                              ?_AdcGo 0070  
              __size_of_handleFwCmd 0021                __end_of_Mrf49xaTxAck 0DC1  
              __end_of_Mrf49xaServe 0BB6                       ??_PwrI2cSleep 0020  
                            _ADCON0 009D                              _ADCON1 009E  
                            _ADCON2 009F                           ??_AdcInit 0020  
                            _ADRESH 009C                              _ADRESL 009B  
                            _ANSELA 018C                              _ANSELB 018D  
                            _ANSELC 018E                           ??_CfgLoad 0028  
                         ??_CfgSave 0028                  i1Mrf49xaServe@data 0075  
                            i1l3500 004D                              i1l3246 0126  
                            i1l3510 0068                              i1l3512 006B  
                            i1l3504 0060                              i1l3506 0063  
                            i1l3540 0094                              i1l3532 0089  
                            i1l3516 0071                              i1l3550 00B4  
                            i1l3560 00CB                              i1l3562 00D4  
                            i1l3554 00C0                              i1l3546 00A7  
                            i1l3564 00D8                              i1l3556 00C4  
                            i1l3574 00EE                              i1l3566 00DC  
                            i1l3582 0102                              i1l3494 0041  
                            i1l3584 0111                              i1l3496 004A  
                            i1l3578 00F0                              i1l3598 000B  
                            _FVRCON 0117                              _OSCCON 0099  
              CfgGetSizeByType@type 0020                          _PwrI2cInit 0F4F  
                AdcChSelect@channel 0020                          _PwrI2cWake 0C03  
                       _Mrf49RxByte 0BBB                         _Mrf49TxByte 0BB6  
                     ??_SoftI2cInit 0024                       ??_SoftI2cStop 0021  
         __size_of_Mrf49xaModeSleep 0022                      __CFG_PWRTE$OFF 0000  
                        _SoftI2cNop 0AAB                        ?_AdcChSelect 0070  
                  ?i1_Mrf49xaModeRx 0070                         _Mrf49xaInit 0946  
                            _Sleepy 09A6                         _Mrf49xaTick 08BA  
                        _PwrAdcInit 0F46                          _PwrAdcWake 0C7E  
                     ??_PwrAdcSleep 0020                              _cfgRam 0034  
                   _Mrf49xaRxPacket 0F38                   __end_of_AdcDeinit 0F82  
                    __CFG_STVREN$ON 0000                   __end_of_AdcIsBusy 0C72  
                   _Mrf49xaTxPacket 0D44                              _extInt 0004  
                            _memcpy 0E47                   __end_of_AdcSample 0C6C  
                   _Mrf49xaShutdown 0F78                          _PwrRfSleep 0F57  
             ??i1_Mrf49xaNeedsReset 0070                         ?_Mrf49RxCmd 0070  
                       ?_Mrf49TxCmd 0021                         ?_Mrf49SpiRx 0070  
                       ?_Mrf49SpiTx 0070                         ?_Mrf49RxSts 0070  
                __size_of_PwrRfInit 0021                  __size_of_PwrRfWake 000A  
             __size_of_HandlePacket 0070             __end_of__initialization 0825  
             __end_ofi1_Mrf49RxByte 011E                 __end_of_PwrI2cSleep 0BFB  
             __end_ofi1_Mrf49TxByte 011B                       __end_of_AdcGo 0C6E  
   RfSendSampleWeatherNode@humidity 0028                         ?_ExtIntInit 0070  
                    __pcstackCOMMON 0070                    SoftI2cRxByte@ack 0021  
                      __pidataBANK0 0000                  handleCfgCmd@packet 0028  
               __end_of_SoftI2cInit 082F               __end_of_handleCfgRead 0E1A  
               __end_of_SoftI2cStop 0ACE              ??_Mrf49xaPacketPending 0020  
           __size_ofi1_Mrf49xaServe 00E8                          __end_ofPL8 0FA5  
               __end_of_PwrAdcSleep 0C7E                             ??_AdcGo 0020  
                    _OPTION_REGbits 0095                        _HandlePacket 0CD4  
           Mrf49xaFreePacket@packet 0020             __size_of_handleCfgWrite 001B  
              __end_of_ExtIntDeinit 0279            __end_of_RfSendPowerState 0C44  
                        __pbssBANK0 0033                          __pbssBANK1 00A0  
                       ?_PwrI2cInit 0070                         ?_PwrI2cWake 0070  
                     ?_SoftI2cStart 0070               __size_of_handleCfgCmd 0028  
           __end_of_Mrf49xaRxPacket 0F46             __end_of_Mrf49xaTxPacket 0DA1  
             __end_of_Mrf49xaModeRx 0BE2               __end_of_Mrf49xaModeTx 1000  
                       ?_SoftI2cNop 0070               __end_of_Mrf49xaReboot 0F7B  
               __size_of_Mrf49RxCmd 000A                   __end_of_PwrRfInit 0850  
               __size_of_Mrf49TxCmd 0009                   __end_of_PwrRfWake 0F6E  
               __size_of_Mrf49SpiRx 0044                 __size_of_Mrf49SpiTx 005B  
               __size_of_Mrf49RxSts 000B                          __pmaintext 0856  
                           ?_Sleepy 0020             __end_of_Mrf49xaShutdown 0F7A  
                       ?_PwrAdcInit 0070                         ?_PwrAdcWake 0070  
          ?_RfSendSampleWeatherNode 0026                        ?_Mcp9800Read 0024  
                        __pintentry 0004                             ?_extInt 0070  
                           ?_memcpy 0020               __size_of_Mrf49xaTxAck 0020  
             __size_of_Mrf49xaServe 00E8                         ?_PwrRfSleep 0070  
              HandlePacket@response 002A                   handleFwCmd@packet 0028  
             __end_of_PwrSensorInit 0C08               __end_of_PwrSensorWake 0C0B  
                       _PwrI2cSleep 0BF9                        _handleCfgCmd 0DC1  
                           _AdcInit 0F82                 __size_of_ExtIntInit 0006  
     __size_of_SoftI2cRepeatedStart 0015                  handleCfgRead@index 0027  
                           _CfgLoad 0E81                          __stringtab 020A  
                           _CfgSave 0E89                      ??_SoftI2cStart 0021  
         __size_of_CfgGetSizeByType 0012                  _Mrf49xaAllocPacket 0CC7  
                  _Mrf49xaModeSleep 024F                         _SoftI2cInit 0827  
                     ?i1_Mrf49RxCmd 0070                       ?i1_Mrf49TxCmd 0071  
                     ?i1_Mrf49SpiRx 0070                       ?i1_Mrf49SpiTx 0070  
                       _SoftI2cStop 0ABF                       ?i1_Mrf49RxSts 0070  
                           Sleepy@b 0023                        _Mrf49xaTxAck 0DA1  
                      _Mrf49xaServe 0ACE                     __size_of_Sleepy 001B  
              eepromRxBytes@address 0024                         _PwrAdcSleep 0C79  
               ?_Mrf49xaAllocPacket 0070                __size_of_AdcChSelect 0007  
             __end_of_eepromRxBytes 0A44               __end_of_eepromTxBytes 0A07  
                   __size_of_extInt 001C                     __size_of_memcpy 0019  
                 _mrfRegset_InitCnt 020B                             __ptext1 0C83  
                           __ptext2 0C0B                             __ptext3 0C7E  
                           __ptext4 0F82                             __ptext5 0C79  
                           __ptext6 0F7B                             __ptext7 0CC7  
                           __ptext8 0C44                             __ptext9 0C6E  
               __size_of_PwrI2cInit 0008                 __size_of_PwrI2cWake 0001  
                        _parameters 0249                       ?_AdcGetResult 0020  
               __size_of_SoftI2cNop 0007                ??_Mrf49xaAllocPacket 0020  
               __size_of_PwrAdcInit 0009                 __size_of_PwrAdcWake 0005  
                           clrloop0 0272                end_of_initialization 0825  
                           memcpy@d 0023                             memcpy@n 0021  
                           memcpy@s 0024                        ?_Mrf49RxByte 0070  
                      ?_Mrf49TxByte 0070                      ??i1_Mrf49RxCmd 0071  
                    ??i1_Mrf49TxCmd 0072                      ??i1_Mrf49SpiRx 0070  
                    ??i1_Mrf49SpiTx 0070                      ??i1_Mrf49RxSts 0071  
                  ?_Mrf49xaRxPacket 0070                 __size_of_PwrRfSleep 000D  
   __end_of_RfSendSampleWeatherNode 0CC7                    ?_Mrf49xaTxPacket 0020  
                      ?_Mrf49xaInit 0070                __end_of_mrfRegset_Rx 023B  
              __end_of_mrfRegset_Tx 0243                        ?_Mrf49xaTick 0070  
                  ?_Mrf49xaShutdown 0070             handleCfgWrite@nrOfBytes 0026  
            __size_of_SoftI2cRxByte 0039              __size_of_SoftI2cTxByte 002E  
                    i1_Mrf49xaServe 002E           __end_of_mrfRegset_InitCnt 020C  
           __size_of_PwrSensorSleep 0003                   _powerStatusTicker 0033  
                     ??_handleFwCmd 0028                           _PORTAbits 000C  
                         _PORTBbits 000D                           _PORTCbits 000E  
                         _AdcDeinit 0F7B               __size_of_ExtIntDeinit 0002  
                         _AdcIsBusy 0C6E                        ??_Mrf49RxCmd 0021  
                      ??_Mrf49TxCmd 0022                        ??_Mrf49SpiRx 0020  
                      ??_Mrf49SpiTx 0020                        ??_Mrf49RxSts 0021  
                         _AdcSample 0C44                    __CFG_FOSC$INTOSC 0000  
                    ??_AdcGetResult 0022                      _handleCfgWrite 0E2C  
                         _TRISAbits 008C                           _TRISBbits 008D  
                         _TRISCbits 008E                         AdcSample@ch 0025  
                    Mrf49SpiRx@data 0020                      Mrf49SpiTx@byte 0020  
                __end_of_Mrf49RxCmd 0F78                  __end_of_Mrf49TxCmd 0BEE  
            __end_ofi1_Mrf49xaServe 0116                        ??_ExtIntInit 0020  
                __end_of_Mrf49SpiRx 0ED4                  __end_of_Mrf49SpiTx 0F2F  
                __end_of_Mrf49RxSts 0BF9                        _ExtIntDeinit 0277  
       __end_ofi1_Mrf49xaNeedsReset 0145                      __end_of_Sleepy 09C1  
                 SoftI2cRxByte@data 0022                __size_of_Mcp9800Read 0015  
                 eepromRxBytes@data 0026                __end_of_SoftI2cStart 0ABF  
          __size_ofi1_Mrf49xaModeRx 0024                          ?_AdcDeinit 0070  
                    __end_of_extInt 0020                      __end_of_memcpy 0E60  
                 eepromRxBytes@size 0027              __end_of_handleCfgWrite 0E47  
                        ?_AdcIsBusy 0070          __end_of_mrfRegset_SleepCnt 020E  
                        ?_AdcSample 0022                         __end_ofPL10 0FB3  
                       __end_ofPL20 0FD2                         __end_ofPL12 0FC0  
                       __end_ofPL22 0FD7                         __end_ofPL14 020A  
                       __end_ofPL24 0FDC                         __end_ofPL16 0FC6  
                       __end_ofPL18 0FCC                 start_initialization 0813  
                     _SoftI2cRxByte 0A72                 __end_of_handleFwCmd 0E81  
                     _SoftI2cTxByte 0A44                  __end_of_ExtIntInit 0856  
                 SoftI2cTxByte@data 0022                   ?_RfSendPowerState 0070  
                  _CfgGetSizeByType 0E1A                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 002B  
                ??_RfSendPowerState 0026                        ??_SoftI2cNop 0020  
                          ??_Sleepy 0022                        ??_PwrAdcInit 0020  
                      ??_PwrAdcWake 0020                     ?i1_Mrf49xaServe 0070  
                   _mrfRegset_RxCnt 020C                     _mrfRegset_TxCnt 020E  
                   _mrfRegset_Sleep 0243                           _PwrRfInit 082F  
                         _PwrRfWake 0F64                         __pdataBANK0 003F  
                          ??_extInt 0076                            ??_memcpy 0023  
     __size_of_Mrf49xaPacketPending 0009                   eepromTxBytes@data 0026  
                      ??_PwrRfSleep 0024                   eepromTxBytes@size 0027  
                   ?_handleCfgWrite 0070                   RfSendPowerState@s 0026  
            __size_ofi1_Mrf49RxByte 0003              __size_ofi1_Mrf49TxByte 0005  
          __end_of_Mrf49xaModeSleep 0271                  __end_of_PwrI2cInit 0F57  
              __end_ofi1_Mrf49RxCmd 002E                __end_ofi1_Mrf49TxCmd 014F  
                __end_of_PwrI2cWake 0C04                __end_ofi1_Mrf49SpiRx 0201  
              __end_ofi1_Mrf49SpiTx 01B1                __end_ofi1_Mrf49RxSts 01BE  
                         ___latbits 0001                       __pcstackBANK0 0020  
                    ?_SoftI2cRxByte 0070    __size_of_RfSendSampleWeatherNode 0044  
                    ?_SoftI2cTxByte 0070                   i1Mrf49TxByte@byte 0073  
                      ?_PwrI2cSleep 0070                  __end_of_SoftI2cNop 0AB2  
                          ?_AdcInit 0070                  __end_of_PwrAdcInit 0F4F  
                          ?_CfgLoad 0070                  __end_of_PwrAdcWake 0C83  
                          ?_CfgSave 0070              __size_of_handleCfgRead 0031  
                      _rfTrcvStatus 00A0                        ?_SoftI2cInit 0070  
                      ?_SoftI2cStop 0070                __size_of_Mrf49RxByte 0002  
                __end_of_PwrRfSleep 0F64                __size_of_Mrf49TxByte 0005  
              __end_of_AdcGetResult 0000        __end_of_SoftI2cRepeatedStart 09D6  
                      ?_PwrAdcSleep 0070                __size_of_Mrf49xaInit 0060  
              __size_of_Mrf49xaTick 008C                          ?_PwrRfInit 0070  
                        ?_PwrRfWake 0070                      _PwrSensorSleep 0BFB  
                     ?_Mcp9800Start 0070                           __pstrings 020A  
                       ??_AdcDeinit 0020                         ??_AdcIsBusy 0020  
                       _handleFwCmd 0E60                         ??_AdcSample 0024  
                    __size_of_AdcGo 0002              __size_of_Mrf49xaModeRx 0025  
            __size_of_Mrf49xaModeTx 0024                        _mrfRegset_Rx 022F  
                      _mrfRegset_Tx 023B              __size_of_Mrf49xaReboot 0001  
                 ??i1_Mrf49xaModeRx 0073                    __CFG_WDTE$SWDTEN 0000  
                          _LATAbits 010C                            _LATBbits 010D  
                          _LATCbits 010E                       i1_Mrf49RxByte 011B  
           __end_of_mrfRegset_RxCnt 020D                       i1_Mrf49TxByte 0116  
           __end_of_mrfRegset_TxCnt 020F             __end_of_mrfRegset_Sleep 0249  
                         clear_ram0 0271                       ??_AdcChSelect 0020  
                       _mrf49Status 003D                   _Mrf49xaFreePacket 0BFE  
                    Mrf49xaModeRx@k 0023                      Mrf49xaModeTx@k 0023  
            __end_of_PwrSensorSleep 0BFE               __size_of_SoftI2cStart 000D  
            __size_of_PwrSensorInit 0004              __size_of_PwrSensorWake 0003  
                     Mrf49RxCmd@cmd 0021                  ?_Mrf49xaFreePacket 0070  
                     Mrf49RxCmd@val 0022                      ??_Mcp9800Start 0024  
                     _handleCfgRead 0DE9                       Mrf49TxCmd@cmd 0022  
                     Mrf49TxCmd@val 0021                 handleCfgRead@packet 0028  
               ??_Mrf49xaFreePacket 0020                     ??_SoftI2cRxByte 0021  
                 _Mrf49xaNeedsReset 0BE2                     ??_SoftI2cTxByte 0021  
                          _WPUAbits 020C                  ?_Mrf49xaNeedsReset 0070  
       __size_of_Mrf49xaAllocPacket 000D                    __size_of_AdcInit 000B  
                  __size_of_CfgLoad 0008                    __size_of_CfgSave 0007  
               ??_Mrf49xaNeedsReset 0020              __size_of_eepromRxBytes 0024  
                    ?i1_Mrf49RxByte 0070              __size_of_eepromTxBytes 001C  
                      _SoftI2cStart 0AB2                      ?i1_Mrf49TxByte 0070  
         __end_of_Mrf49xaFreePacket 0C03                           extInt@ofw 0077  
                          Sleepy@ms 0020                       _Mrf49xaModeRx 0BBD  
                     _Mrf49xaModeTx 0FDC                       _Mrf49xaReboot 0F7A  
                    _mrfRegset_Init 020F                     ?_PwrSensorSleep 0070  
                       ??_PwrRfInit 0027                      ?_handleCfgRead 0070  
                       ??_PwrRfWake 0024            __size_of_Mrf49xaRxPacket 000E  
             __size_ofi1_Mrf49RxCmd 000C               __size_ofi1_Mrf49TxCmd 000A  
             __size_ofi1_Mrf49SpiRx 0043               __size_ofi1_Mrf49SpiTx 0062  
                  i1Mrf49SpiRx@data 0070               __size_ofi1_Mrf49RxSts 000D  
               __end_of_AdcChSelect 0C79            __size_of_Mrf49xaTxPacket 005D  
          __end_of_CfgGetSizeByType 0E2C                    i1Mrf49SpiTx@byte 0070  
                    SoftI2cRxByte@i 0023           __end_of_Mrf49xaNeedsReset 0BE5  
                __end_of__stringtab 020B            __size_of_Mrf49xaShutdown 0002  
                    SoftI2cTxByte@i 0023                          _ANSELCbits 018E  
           _RfSendSampleWeatherNode 0C83                       ?_HandlePacket 0070  
                          _coldBoot 003F                            __ptext10 0C6C  
                          __ptext11 0000                            __ptext20 024F  
                          __ptext12 0C72                            __ptext21 082F  
                          __ptext13 0C08                            __ptext30 0FDC  
                          __ptext22 0C03                            __ptext14 0BFB  
                          __ptext31 0946                            __ptext23 0BF9  
                          __ptext15 0C04                            __ptext40 0F6E  
                          __ptext32 09A6                            __ptext24 0F4F  
                          __ptext16 0F64                            __ptext41 0ED4  
                          __ptext33 0ACE                            __ptext25 0827  
                          __ptext17 0F7A                            __ptext50 0E89  
                          __ptext42 0E90                            __ptext34 0BE2  
                          __ptext26 0F46                            __ptext18 0F57  
                          __ptext51 09EB                            __ptext43 0CD4  
                          __ptext35 0BBD                            __ptext27 08BA  
                          __ptext19 0F78                            __ptext60 09D6  
                          __ptext52 0E81                            __ptext44 0E60  
                          __ptext36 0BB6                            __ptext28 0F38  
                          __ptext61 0A44                            __ptext53 0A20  
                          __ptext45 0E2C                            __ptext37 0BE5  
                          __ptext29 0F2F                            __ptext70 0116  
                          __ptext62 0ABF                            __ptext54 09C1  
                          __ptext46 0DE9                            __ptext38 0BEE  
                          __ptext71 0145                            __ptext63 0AB2  
                          __ptext55 0DA1                            __ptext47 0E47  
                          __ptext39 0BBB                            __ptext72 01B1  
                          __ptext64 0A72                            __ptext56 0D44  
                          __ptext48 0E1A                            __ptext73 011B  
                          __ptext65 0AAB                            __ptext57 0BFE  
                          __ptext49 0DC1                       _PwrSensorInit 0C04  
                          __ptext74 0022                            __ptext58 0850  
                          __ptext75 014F                            __ptext67 002E  
                          __ptext59 0A07                            __ptext76 01BE  
                          __ptext68 0142                            __ptext77 0277  
                          __ptext69 011E                       _PwrSensorWake 0C08  
              _SoftI2cRepeatedStart 09C1                __size_of_PwrI2cSleep 0002  
             __size_of_AdcGetResult 0000                  _mrfRegset_SleepCnt 020D  
                  Mcp9800Read@tempH 0026                    Mcp9800Read@tempL 0027  
                  ??i1_Mrf49xaServe 0074                       __size_of_main 0064  
                      i1_Mrf49RxCmd 0022              __end_of_mrfRegset_Init 022F  
                Mrf49xaTxAck@packet 0026                        i1_Mrf49TxCmd 0145  
                      i1_Mrf49SpiRx 01BE                        i1_Mrf49SpiTx 014F  
                    ?_Mrf49xaModeRx 0070                      ?_Mrf49xaModeTx 0070  
                      i1_Mrf49RxSts 01B1                      ?_Mrf49xaReboot 0070  
                __end_of_parameters 024F                __size_of_SoftI2cInit 0008  
              __size_of_SoftI2cStop 000F                       ??_Mcp9800Read 0026  
                  ??_handleCfgWrite 0026           __size_of_RfSendPowerState 0039  
              __size_of_PwrAdcSleep 0005                       _eepromRxBytes 0A20  
                 Mrf49xaModeSleep@k 0023                       _eepromTxBytes 09EB  
                   i1Mrf49RxCmd@cmd 0071                     main@temperature 0031  
                   i1Mrf49RxCmd@val 0072                      ??_HandlePacket 0029  
      __size_ofi1_Mrf49xaNeedsReset 0003                  Mrf49xaTick@timeout 002D  
                        _INTCONbits 000B                   ?_Mrf49xaModeSleep 0070  
                   i1Mrf49TxCmd@cmd 0072                     i1Mrf49TxCmd@val 0071  
                          memcpy@d1 0025                            memcpy@s1 0020  
                    ?_PwrSensorInit 0070                        _AdcGetResult 0000  
                    ?_PwrSensorWake 0070                  ??_Mrf49xaModeSleep 0023  
                     ?_handleCfgCmd 0070               ?_SoftI2cRepeatedStart 0070  
                   ??i1_Mrf49RxByte 0073                            intlevel1 0000  
                   ??i1_Mrf49TxByte 0073        __end_of_Mrf49xaPacketPending 0F38  
              __end_of_Mcp9800Start 0A20       RfSendSampleWeatherNode@packet 002A  
                 __CFG_CLKOUTEN$OFF 0000          __size_of_Mrf49xaFreePacket 0005  
            RfSendPowerState@packet 0028                       ?_Mrf49xaTxAck 0070  
                       _AdcChSelect 0C72                        Mrf49xaInit@k 0026  
                     ?_Mrf49xaServe 0070                     ??_handleCfgRead 0026  
                 Mrf49xaTick@packet 002E                      ?_eepromRxBytes 0024  
              eepromTxBytes@address 0024                     i1_Mrf49xaModeRx 011E  
                    ?_eepromTxBytes 0024           ??_RfSendSampleWeatherNode 002A  
        __size_of_Mrf49xaNeedsReset 0003                        ?_handleFwCmd 0070  
               __end_of_Mcp9800Read 09EB                   ??_Mrf49xaRxPacket 0020  
                 ??_Mrf49xaTxPacket 0022                      ??_handleCfgCmd 0028  
                        _WDTCONbits 0097                   ??_Mrf49xaShutdown 0024  
                     ??_Mrf49RxByte 0023                       ??_Mrf49TxByte 0023  
                   ??_Mrf49xaModeRx 0023                     ??_Mrf49xaModeTx 0023  
                   ??_Mrf49xaReboot 0024                      ??_Mrf49xaTxAck 0026  
                  Mrf49xaServe@data 0025                      ??_Mrf49xaServe 0024  
                     ??_Mrf49xaInit 0026                       ??_Mrf49xaTick 002C  
            handleCfgRead@nrOfBytes 0026                    Mrf49xaTxPacket@i 0024  

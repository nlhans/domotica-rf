

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Sat May 17 17:45:57 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text43,local,class=CODE,merge=1,delta=2
    15                           	psect	pa_nodes,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0006                     	;# 
    24  0007                     	;# 
    25  0008                     	;# 
    26  0009                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000D                     	;# 
    31  000E                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0013                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001B                     	;# 
    43  001C                     	;# 
    44  008C                     	;# 
    45  008D                     	;# 
    46  008E                     	;# 
    47  0091                     	;# 
    48  0092                     	;# 
    49  0093                     	;# 
    50  0095                     	;# 
    51  0096                     	;# 
    52  0097                     	;# 
    53  0099                     	;# 
    54  009A                     	;# 
    55  009B                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009E                     	;# 
    60  009F                     	;# 
    61  010C                     	;# 
    62  010D                     	;# 
    63  010E                     	;# 
    64  0111                     	;# 
    65  0112                     	;# 
    66  0113                     	;# 
    67  0114                     	;# 
    68  0115                     	;# 
    69  0116                     	;# 
    70  0117                     	;# 
    71  0118                     	;# 
    72  0119                     	;# 
    73  011D                     	;# 
    74  018C                     	;# 
    75  018D                     	;# 
    76  018E                     	;# 
    77  0191                     	;# 
    78  0191                     	;# 
    79  0192                     	;# 
    80  0193                     	;# 
    81  0193                     	;# 
    82  0194                     	;# 
    83  0195                     	;# 
    84  0196                     	;# 
    85  0199                     	;# 
    86  019A                     	;# 
    87  019B                     	;# 
    88  019B                     	;# 
    89  019C                     	;# 
    90  019D                     	;# 
    91  019E                     	;# 
    92  019F                     	;# 
    93  020C                     	;# 
    94  020D                     	;# 
    95  0211                     	;# 
    96  0211                     	;# 
    97  0212                     	;# 
    98  0212                     	;# 
    99  0213                     	;# 
   100  0213                     	;# 
   101  0214                     	;# 
   102  0214                     	;# 
   103  0215                     	;# 
   104  0215                     	;# 
   105  0215                     	;# 
   106  0216                     	;# 
   107  0216                     	;# 
   108  0217                     	;# 
   109  0217                     	;# 
   110  0391                     	;# 
   111  0392                     	;# 
   112  0393                     	;# 
   113  0394                     	;# 
   114  0395                     	;# 
   115  0396                     	;# 
   116  0498                     	;# 
   117  0498                     	;# 
   118  0499                     	;# 
   119  049A                     	;# 
   120  049B                     	;# 
   121  049B                     	;# 
   122  049C                     	;# 
   123  049E                     	;# 
   124  049F                     	;# 
   125  0611                     	;# 
   126  0612                     	;# 
   127  0613                     	;# 
   128  0613                     	;# 
   129  0614                     	;# 
   130  0615                     	;# 
   131  0616                     	;# 
   132  0616                     	;# 
   133  0617                     	;# 
   134  0618                     	;# 
   135  0619                     	;# 
   136  0619                     	;# 
   137  061A                     	;# 
   138  061B                     	;# 
   139  061C                     	;# 
   140  061C                     	;# 
   141  0691                     	;# 
   142  0692                     	;# 
   143  0693                     	;# 
   144  0694                     	;# 
   145  0695                     	;# 
   146  0F0F                     	;# 
   147  0F10                     	;# 
   148  0F11                     	;# 
   149  0F12                     	;# 
   150  0F13                     	;# 
   151  0F14                     	;# 
   152  0F15                     	;# 
   153  0F16                     	;# 
   154  0F17                     	;# 
   155  0F18                     	;# 
   156  0F19                     	;# 
   157  0F1A                     	;# 
   158  0F1B                     	;# 
   159  0F1C                     	;# 
   160  0F1D                     	;# 
   161  0F1E                     	;# 
   162  0F1F                     	;# 
   163  0F20                     	;# 
   164  0F21                     	;# 
   165  0F22                     	;# 
   166  0F23                     	;# 
   167  0F24                     	;# 
   168  0F25                     	;# 
   169  0F26                     	;# 
   170  0F27                     	;# 
   171  0F28                     	;# 
   172  0F29                     	;# 
   173  0F2A                     	;# 
   174  0F2B                     	;# 
   175  0F2C                     	;# 
   176  0F2D                     	;# 
   177  0F2E                     	;# 
   178  0F2F                     	;# 
   179  0F8C                     	;# 
   180  0F8D                     	;# 
   181  0F91                     	;# 
   182  0F95                     	;# 
   183  0F96                     	;# 
   184  0F97                     	;# 
   185  0F9C                     	;# 
   186  0F9D                     	;# 
   187  0F9E                     	;# 
   188  0FE3                     	;# 
   189  0FE4                     	;# 
   190  0FE5                     	;# 
   191  0FE6                     	;# 
   192  0FE7                     	;# 
   193  0FE8                     	;# 
   194  0FE9                     	;# 
   195  0FEA                     	;# 
   196  0FEB                     	;# 
   197  0FED                     	;# 
   198  0FEE                     	;# 
   199  0FEF                     	;# 
   200  0000                     	;# 
   201  0001                     	;# 
   202  0002                     	;# 
   203  0003                     	;# 
   204  0004                     	;# 
   205  0005                     	;# 
   206  0006                     	;# 
   207  0007                     	;# 
   208  0008                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  000E                     	;# 
   215  0011                     	;# 
   216  0012                     	;# 
   217  0013                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001C                     	;# 
   227  008C                     	;# 
   228  008D                     	;# 
   229  008E                     	;# 
   230  0091                     	;# 
   231  0092                     	;# 
   232  0093                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0099                     	;# 
   237  009A                     	;# 
   238  009B                     	;# 
   239  009B                     	;# 
   240  009C                     	;# 
   241  009D                     	;# 
   242  009E                     	;# 
   243  009F                     	;# 
   244  010C                     	;# 
   245  010D                     	;# 
   246  010E                     	;# 
   247  0111                     	;# 
   248  0112                     	;# 
   249  0113                     	;# 
   250  0114                     	;# 
   251  0115                     	;# 
   252  0116                     	;# 
   253  0117                     	;# 
   254  0118                     	;# 
   255  0119                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  018E                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0194                     	;# 
   266  0195                     	;# 
   267  0196                     	;# 
   268  0199                     	;# 
   269  019A                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019D                     	;# 
   274  019E                     	;# 
   275  019F                     	;# 
   276  020C                     	;# 
   277  020D                     	;# 
   278  0211                     	;# 
   279  0211                     	;# 
   280  0212                     	;# 
   281  0212                     	;# 
   282  0213                     	;# 
   283  0213                     	;# 
   284  0214                     	;# 
   285  0214                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0216                     	;# 
   290  0216                     	;# 
   291  0217                     	;# 
   292  0217                     	;# 
   293  0391                     	;# 
   294  0392                     	;# 
   295  0393                     	;# 
   296  0394                     	;# 
   297  0395                     	;# 
   298  0396                     	;# 
   299  0498                     	;# 
   300  0498                     	;# 
   301  0499                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049B                     	;# 
   305  049C                     	;# 
   306  049E                     	;# 
   307  049F                     	;# 
   308  0611                     	;# 
   309  0612                     	;# 
   310  0613                     	;# 
   311  0613                     	;# 
   312  0614                     	;# 
   313  0615                     	;# 
   314  0616                     	;# 
   315  0616                     	;# 
   316  0617                     	;# 
   317  0618                     	;# 
   318  0619                     	;# 
   319  0619                     	;# 
   320  061A                     	;# 
   321  061B                     	;# 
   322  061C                     	;# 
   323  061C                     	;# 
   324  0691                     	;# 
   325  0692                     	;# 
   326  0693                     	;# 
   327  0694                     	;# 
   328  0695                     	;# 
   329  0F0F                     	;# 
   330  0F10                     	;# 
   331  0F11                     	;# 
   332  0F12                     	;# 
   333  0F13                     	;# 
   334  0F14                     	;# 
   335  0F15                     	;# 
   336  0F16                     	;# 
   337  0F17                     	;# 
   338  0F18                     	;# 
   339  0F19                     	;# 
   340  0F1A                     	;# 
   341  0F1B                     	;# 
   342  0F1C                     	;# 
   343  0F1D                     	;# 
   344  0F1E                     	;# 
   345  0F1F                     	;# 
   346  0F20                     	;# 
   347  0F21                     	;# 
   348  0F22                     	;# 
   349  0F23                     	;# 
   350  0F24                     	;# 
   351  0F25                     	;# 
   352  0F26                     	;# 
   353  0F27                     	;# 
   354  0F28                     	;# 
   355  0F29                     	;# 
   356  0F2A                     	;# 
   357  0F2B                     	;# 
   358  0F2C                     	;# 
   359  0F2D                     	;# 
   360  0F2E                     	;# 
   361  0F2F                     	;# 
   362  0F8C                     	;# 
   363  0F8D                     	;# 
   364  0F91                     	;# 
   365  0F95                     	;# 
   366  0F96                     	;# 
   367  0F97                     	;# 
   368  0F9C                     	;# 
   369  0F9D                     	;# 
   370  0F9E                     	;# 
   371  0FE3                     	;# 
   372  0FE4                     	;# 
   373  0FE5                     	;# 
   374  0FE6                     	;# 
   375  0FE7                     	;# 
   376  0FE8                     	;# 
   377  0FE9                     	;# 
   378  0FEA                     	;# 
   379  0FEB                     	;# 
   380  0FED                     	;# 
   381  0FEE                     	;# 
   382  0FEF                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0015                     	;# 
   402  0016                     	;# 
   403  0016                     	;# 
   404  0017                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  001B                     	;# 
   409  001C                     	;# 
   410  008C                     	;# 
   411  008D                     	;# 
   412  008E                     	;# 
   413  0091                     	;# 
   414  0092                     	;# 
   415  0093                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009B                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  010C                     	;# 
   428  010D                     	;# 
   429  010E                     	;# 
   430  0111                     	;# 
   431  0112                     	;# 
   432  0113                     	;# 
   433  0114                     	;# 
   434  0115                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  0118                     	;# 
   438  0119                     	;# 
   439  011D                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  018E                     	;# 
   443  0191                     	;# 
   444  0191                     	;# 
   445  0192                     	;# 
   446  0193                     	;# 
   447  0193                     	;# 
   448  0194                     	;# 
   449  0195                     	;# 
   450  0196                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020C                     	;# 
   460  020D                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0391                     	;# 
   477  0392                     	;# 
   478  0393                     	;# 
   479  0394                     	;# 
   480  0395                     	;# 
   481  0396                     	;# 
   482  0498                     	;# 
   483  0498                     	;# 
   484  0499                     	;# 
   485  049A                     	;# 
   486  049B                     	;# 
   487  049B                     	;# 
   488  049C                     	;# 
   489  049E                     	;# 
   490  049F                     	;# 
   491  0611                     	;# 
   492  0612                     	;# 
   493  0613                     	;# 
   494  0613                     	;# 
   495  0614                     	;# 
   496  0615                     	;# 
   497  0616                     	;# 
   498  0616                     	;# 
   499  0617                     	;# 
   500  0618                     	;# 
   501  0619                     	;# 
   502  0619                     	;# 
   503  061A                     	;# 
   504  061B                     	;# 
   505  061C                     	;# 
   506  061C                     	;# 
   507  0691                     	;# 
   508  0692                     	;# 
   509  0693                     	;# 
   510  0694                     	;# 
   511  0695                     	;# 
   512  0F0F                     	;# 
   513  0F10                     	;# 
   514  0F11                     	;# 
   515  0F12                     	;# 
   516  0F13                     	;# 
   517  0F14                     	;# 
   518  0F15                     	;# 
   519  0F16                     	;# 
   520  0F17                     	;# 
   521  0F18                     	;# 
   522  0F19                     	;# 
   523  0F1A                     	;# 
   524  0F1B                     	;# 
   525  0F1C                     	;# 
   526  0F1D                     	;# 
   527  0F1E                     	;# 
   528  0F1F                     	;# 
   529  0F20                     	;# 
   530  0F21                     	;# 
   531  0F22                     	;# 
   532  0F23                     	;# 
   533  0F24                     	;# 
   534  0F25                     	;# 
   535  0F26                     	;# 
   536  0F27                     	;# 
   537  0F28                     	;# 
   538  0F29                     	;# 
   539  0F2A                     	;# 
   540  0F2B                     	;# 
   541  0F2C                     	;# 
   542  0F2D                     	;# 
   543  0F2E                     	;# 
   544  0F2F                     	;# 
   545  0F8C                     	;# 
   546  0F8D                     	;# 
   547  0F91                     	;# 
   548  0F95                     	;# 
   549  0F96                     	;# 
   550  0F97                     	;# 
   551  0F9C                     	;# 
   552  0F9D                     	;# 
   553  0F9E                     	;# 
   554  0FE3                     	;# 
   555  0FE4                     	;# 
   556  0FE5                     	;# 
   557  0FE6                     	;# 
   558  0FE7                     	;# 
   559  0FE8                     	;# 
   560  0FE9                     	;# 
   561  0FEA                     	;# 
   562  0FEB                     	;# 
   563  0FED                     	;# 
   564  0FEE                     	;# 
   565  0FEF                     	;# 
   566  0000                     	;# 
   567  0001                     	;# 
   568  0002                     	;# 
   569  0003                     	;# 
   570  0004                     	;# 
   571  0005                     	;# 
   572  0006                     	;# 
   573  0007                     	;# 
   574  0008                     	;# 
   575  0009                     	;# 
   576  000A                     	;# 
   577  000B                     	;# 
   578  000C                     	;# 
   579  000D                     	;# 
   580  000E                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  0091                     	;# 
   597  0092                     	;# 
   598  0093                     	;# 
   599  0095                     	;# 
   600  0096                     	;# 
   601  0097                     	;# 
   602  0099                     	;# 
   603  009A                     	;# 
   604  009B                     	;# 
   605  009B                     	;# 
   606  009C                     	;# 
   607  009D                     	;# 
   608  009E                     	;# 
   609  009F                     	;# 
   610  010C                     	;# 
   611  010D                     	;# 
   612  010E                     	;# 
   613  0111                     	;# 
   614  0112                     	;# 
   615  0113                     	;# 
   616  0114                     	;# 
   617  0115                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  0118                     	;# 
   621  0119                     	;# 
   622  011D                     	;# 
   623  018C                     	;# 
   624  018D                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0199                     	;# 
   635  019A                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020D                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0391                     	;# 
   660  0392                     	;# 
   661  0393                     	;# 
   662  0394                     	;# 
   663  0395                     	;# 
   664  0396                     	;# 
   665  0498                     	;# 
   666  0498                     	;# 
   667  0499                     	;# 
   668  049A                     	;# 
   669  049B                     	;# 
   670  049B                     	;# 
   671  049C                     	;# 
   672  049E                     	;# 
   673  049F                     	;# 
   674  0611                     	;# 
   675  0612                     	;# 
   676  0613                     	;# 
   677  0613                     	;# 
   678  0614                     	;# 
   679  0615                     	;# 
   680  0616                     	;# 
   681  0616                     	;# 
   682  0617                     	;# 
   683  0618                     	;# 
   684  0619                     	;# 
   685  0619                     	;# 
   686  061A                     	;# 
   687  061B                     	;# 
   688  061C                     	;# 
   689  061C                     	;# 
   690  0691                     	;# 
   691  0692                     	;# 
   692  0693                     	;# 
   693  0694                     	;# 
   694  0695                     	;# 
   695  0F0F                     	;# 
   696  0F10                     	;# 
   697  0F11                     	;# 
   698  0F12                     	;# 
   699  0F13                     	;# 
   700  0F14                     	;# 
   701  0F15                     	;# 
   702  0F16                     	;# 
   703  0F17                     	;# 
   704  0F18                     	;# 
   705  0F19                     	;# 
   706  0F1A                     	;# 
   707  0F1B                     	;# 
   708  0F1C                     	;# 
   709  0F1D                     	;# 
   710  0F1E                     	;# 
   711  0F1F                     	;# 
   712  0F20                     	;# 
   713  0F21                     	;# 
   714  0F22                     	;# 
   715  0F23                     	;# 
   716  0F24                     	;# 
   717  0F25                     	;# 
   718  0F26                     	;# 
   719  0F27                     	;# 
   720  0F28                     	;# 
   721  0F29                     	;# 
   722  0F2A                     	;# 
   723  0F2B                     	;# 
   724  0F2C                     	;# 
   725  0F2D                     	;# 
   726  0F2E                     	;# 
   727  0F2F                     	;# 
   728  0F8C                     	;# 
   729  0F8D                     	;# 
   730  0F91                     	;# 
   731  0F95                     	;# 
   732  0F96                     	;# 
   733  0F97                     	;# 
   734  0F9C                     	;# 
   735  0F9D                     	;# 
   736  0F9E                     	;# 
   737  0FE3                     	;# 
   738  0FE4                     	;# 
   739  0FE5                     	;# 
   740  0FE6                     	;# 
   741  0FE7                     	;# 
   742  0FE8                     	;# 
   743  0FE9                     	;# 
   744  0FEA                     	;# 
   745  0FEB                     	;# 
   746  0FED                     	;# 
   747  0FEE                     	;# 
   748  0FEF                     	;# 
   749  0000                     	;# 
   750  0001                     	;# 
   751  0002                     	;# 
   752  0003                     	;# 
   753  0004                     	;# 
   754  0005                     	;# 
   755  0006                     	;# 
   756  0007                     	;# 
   757  0008                     	;# 
   758  0009                     	;# 
   759  000A                     	;# 
   760  000B                     	;# 
   761  000C                     	;# 
   762  000D                     	;# 
   763  000E                     	;# 
   764  0011                     	;# 
   765  0012                     	;# 
   766  0013                     	;# 
   767  0015                     	;# 
   768  0016                     	;# 
   769  0016                     	;# 
   770  0017                     	;# 
   771  0018                     	;# 
   772  0019                     	;# 
   773  001A                     	;# 
   774  001B                     	;# 
   775  001C                     	;# 
   776  008C                     	;# 
   777  008D                     	;# 
   778  008E                     	;# 
   779  0091                     	;# 
   780  0092                     	;# 
   781  0093                     	;# 
   782  0095                     	;# 
   783  0096                     	;# 
   784  0097                     	;# 
   785  0099                     	;# 
   786  009A                     	;# 
   787  009B                     	;# 
   788  009B                     	;# 
   789  009C                     	;# 
   790  009D                     	;# 
   791  009E                     	;# 
   792  009F                     	;# 
   793  010C                     	;# 
   794  010D                     	;# 
   795  010E                     	;# 
   796  0111                     	;# 
   797  0112                     	;# 
   798  0113                     	;# 
   799  0114                     	;# 
   800  0115                     	;# 
   801  0116                     	;# 
   802  0117                     	;# 
   803  0118                     	;# 
   804  0119                     	;# 
   805  011D                     	;# 
   806  018C                     	;# 
   807  018D                     	;# 
   808  018E                     	;# 
   809  0191                     	;# 
   810  0191                     	;# 
   811  0192                     	;# 
   812  0193                     	;# 
   813  0193                     	;# 
   814  0194                     	;# 
   815  0195                     	;# 
   816  0196                     	;# 
   817  0199                     	;# 
   818  019A                     	;# 
   819  019B                     	;# 
   820  019B                     	;# 
   821  019C                     	;# 
   822  019D                     	;# 
   823  019E                     	;# 
   824  019F                     	;# 
   825  020C                     	;# 
   826  020D                     	;# 
   827  0211                     	;# 
   828  0211                     	;# 
   829  0212                     	;# 
   830  0212                     	;# 
   831  0213                     	;# 
   832  0213                     	;# 
   833  0214                     	;# 
   834  0214                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0215                     	;# 
   838  0216                     	;# 
   839  0216                     	;# 
   840  0217                     	;# 
   841  0217                     	;# 
   842  0391                     	;# 
   843  0392                     	;# 
   844  0393                     	;# 
   845  0394                     	;# 
   846  0395                     	;# 
   847  0396                     	;# 
   848  0498                     	;# 
   849  0498                     	;# 
   850  0499                     	;# 
   851  049A                     	;# 
   852  049B                     	;# 
   853  049B                     	;# 
   854  049C                     	;# 
   855  049E                     	;# 
   856  049F                     	;# 
   857  0611                     	;# 
   858  0612                     	;# 
   859  0613                     	;# 
   860  0613                     	;# 
   861  0614                     	;# 
   862  0615                     	;# 
   863  0616                     	;# 
   864  0616                     	;# 
   865  0617                     	;# 
   866  0618                     	;# 
   867  0619                     	;# 
   868  0619                     	;# 
   869  061A                     	;# 
   870  061B                     	;# 
   871  061C                     	;# 
   872  061C                     	;# 
   873  0691                     	;# 
   874  0692                     	;# 
   875  0693                     	;# 
   876  0694                     	;# 
   877  0695                     	;# 
   878  0F0F                     	;# 
   879  0F10                     	;# 
   880  0F11                     	;# 
   881  0F12                     	;# 
   882  0F13                     	;# 
   883  0F14                     	;# 
   884  0F15                     	;# 
   885  0F16                     	;# 
   886  0F17                     	;# 
   887  0F18                     	;# 
   888  0F19                     	;# 
   889  0F1A                     	;# 
   890  0F1B                     	;# 
   891  0F1C                     	;# 
   892  0F1D                     	;# 
   893  0F1E                     	;# 
   894  0F1F                     	;# 
   895  0F20                     	;# 
   896  0F21                     	;# 
   897  0F22                     	;# 
   898  0F23                     	;# 
   899  0F24                     	;# 
   900  0F25                     	;# 
   901  0F26                     	;# 
   902  0F27                     	;# 
   903  0F28                     	;# 
   904  0F29                     	;# 
   905  0F2A                     	;# 
   906  0F2B                     	;# 
   907  0F2C                     	;# 
   908  0F2D                     	;# 
   909  0F2E                     	;# 
   910  0F2F                     	;# 
   911  0F8C                     	;# 
   912  0F8D                     	;# 
   913  0F91                     	;# 
   914  0F95                     	;# 
   915  0F96                     	;# 
   916  0F97                     	;# 
   917  0F9C                     	;# 
   918  0F9D                     	;# 
   919  0F9E                     	;# 
   920  0FE3                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0013                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0093                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  009F                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0111                     	;# 
   980  0112                     	;# 
   981  0113                     	;# 
   982  0114                     	;# 
   983  0115                     	;# 
   984  0116                     	;# 
   985  0117                     	;# 
   986  0118                     	;# 
   987  0119                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020C                     	;# 
  1009  020D                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0391                     	;# 
  1026  0392                     	;# 
  1027  0393                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0498                     	;# 
  1032  0498                     	;# 
  1033  0499                     	;# 
  1034  049A                     	;# 
  1035  049B                     	;# 
  1036  049B                     	;# 
  1037  049C                     	;# 
  1038  049E                     	;# 
  1039  049F                     	;# 
  1040  0611                     	;# 
  1041  0612                     	;# 
  1042  0613                     	;# 
  1043  0613                     	;# 
  1044  0614                     	;# 
  1045  0615                     	;# 
  1046  0616                     	;# 
  1047  0616                     	;# 
  1048  0617                     	;# 
  1049  0618                     	;# 
  1050  0619                     	;# 
  1051  0619                     	;# 
  1052  061A                     	;# 
  1053  061B                     	;# 
  1054  061C                     	;# 
  1055  061C                     	;# 
  1056  0691                     	;# 
  1057  0692                     	;# 
  1058  0693                     	;# 
  1059  0694                     	;# 
  1060  0695                     	;# 
  1061  0F0F                     	;# 
  1062  0F10                     	;# 
  1063  0F11                     	;# 
  1064  0F12                     	;# 
  1065  0F13                     	;# 
  1066  0F14                     	;# 
  1067  0F15                     	;# 
  1068  0F16                     	;# 
  1069  0F17                     	;# 
  1070  0F18                     	;# 
  1071  0F19                     	;# 
  1072  0F1A                     	;# 
  1073  0F1B                     	;# 
  1074  0F1C                     	;# 
  1075  0F1D                     	;# 
  1076  0F1E                     	;# 
  1077  0F1F                     	;# 
  1078  0F20                     	;# 
  1079  0F21                     	;# 
  1080  0F22                     	;# 
  1081  0F23                     	;# 
  1082  0F24                     	;# 
  1083  0F25                     	;# 
  1084  0F26                     	;# 
  1085  0F27                     	;# 
  1086  0F28                     	;# 
  1087  0F29                     	;# 
  1088  0F2A                     	;# 
  1089  0F2B                     	;# 
  1090  0F2C                     	;# 
  1091  0F2D                     	;# 
  1092  0F2E                     	;# 
  1093  0F2F                     	;# 
  1094  0F8C                     	;# 
  1095  0F8D                     	;# 
  1096  0F91                     	;# 
  1097  0F95                     	;# 
  1098  0F96                     	;# 
  1099  0F97                     	;# 
  1100  0F9C                     	;# 
  1101  0F9D                     	;# 
  1102  0F9E                     	;# 
  1103  0FE3                     	;# 
  1104  0FE4                     	;# 
  1105  0FE5                     	;# 
  1106  0FE6                     	;# 
  1107  0FE7                     	;# 
  1108  0FE8                     	;# 
  1109  0FE9                     	;# 
  1110  0FEA                     	;# 
  1111  0FEB                     	;# 
  1112  0FED                     	;# 
  1113  0FEE                     	;# 
  1114  0FEF                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0008                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0015                     	;# 
  1134  0016                     	;# 
  1135  0016                     	;# 
  1136  0017                     	;# 
  1137  0018                     	;# 
  1138  0019                     	;# 
  1139  001A                     	;# 
  1140  001B                     	;# 
  1141  001C                     	;# 
  1142  008C                     	;# 
  1143  008D                     	;# 
  1144  008E                     	;# 
  1145  0091                     	;# 
  1146  0092                     	;# 
  1147  0093                     	;# 
  1148  0095                     	;# 
  1149  0096                     	;# 
  1150  0097                     	;# 
  1151  0099                     	;# 
  1152  009A                     	;# 
  1153  009B                     	;# 
  1154  009B                     	;# 
  1155  009C                     	;# 
  1156  009D                     	;# 
  1157  009E                     	;# 
  1158  009F                     	;# 
  1159  010C                     	;# 
  1160  010D                     	;# 
  1161  010E                     	;# 
  1162  0111                     	;# 
  1163  0112                     	;# 
  1164  0113                     	;# 
  1165  0114                     	;# 
  1166  0115                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  0118                     	;# 
  1170  0119                     	;# 
  1171  011D                     	;# 
  1172  018C                     	;# 
  1173  018D                     	;# 
  1174  018E                     	;# 
  1175  0191                     	;# 
  1176  0191                     	;# 
  1177  0192                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0194                     	;# 
  1181  0195                     	;# 
  1182  0196                     	;# 
  1183  0199                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019F                     	;# 
  1191  020C                     	;# 
  1192  020D                     	;# 
  1193  0211                     	;# 
  1194  0211                     	;# 
  1195  0212                     	;# 
  1196  0212                     	;# 
  1197  0213                     	;# 
  1198  0213                     	;# 
  1199  0214                     	;# 
  1200  0214                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0216                     	;# 
  1205  0216                     	;# 
  1206  0217                     	;# 
  1207  0217                     	;# 
  1208  0391                     	;# 
  1209  0392                     	;# 
  1210  0393                     	;# 
  1211  0394                     	;# 
  1212  0395                     	;# 
  1213  0396                     	;# 
  1214  0498                     	;# 
  1215  0498                     	;# 
  1216  0499                     	;# 
  1217  049A                     	;# 
  1218  049B                     	;# 
  1219  049B                     	;# 
  1220  049C                     	;# 
  1221  049E                     	;# 
  1222  049F                     	;# 
  1223  0611                     	;# 
  1224  0612                     	;# 
  1225  0613                     	;# 
  1226  0613                     	;# 
  1227  0614                     	;# 
  1228  0615                     	;# 
  1229  0616                     	;# 
  1230  0616                     	;# 
  1231  0617                     	;# 
  1232  0618                     	;# 
  1233  0619                     	;# 
  1234  0619                     	;# 
  1235  061A                     	;# 
  1236  061B                     	;# 
  1237  061C                     	;# 
  1238  061C                     	;# 
  1239  0691                     	;# 
  1240  0692                     	;# 
  1241  0693                     	;# 
  1242  0694                     	;# 
  1243  0695                     	;# 
  1244  0F0F                     	;# 
  1245  0F10                     	;# 
  1246  0F11                     	;# 
  1247  0F12                     	;# 
  1248  0F13                     	;# 
  1249  0F14                     	;# 
  1250  0F15                     	;# 
  1251  0F16                     	;# 
  1252  0F17                     	;# 
  1253  0F18                     	;# 
  1254  0F19                     	;# 
  1255  0F1A                     	;# 
  1256  0F1B                     	;# 
  1257  0F1C                     	;# 
  1258  0F1D                     	;# 
  1259  0F1E                     	;# 
  1260  0F1F                     	;# 
  1261  0F20                     	;# 
  1262  0F21                     	;# 
  1263  0F22                     	;# 
  1264  0F23                     	;# 
  1265  0F24                     	;# 
  1266  0F25                     	;# 
  1267  0F26                     	;# 
  1268  0F27                     	;# 
  1269  0F28                     	;# 
  1270  0F29                     	;# 
  1271  0F2A                     	;# 
  1272  0F2B                     	;# 
  1273  0F2C                     	;# 
  1274  0F2D                     	;# 
  1275  0F2E                     	;# 
  1276  0F2F                     	;# 
  1277  0F8C                     	;# 
  1278  0F8D                     	;# 
  1279  0F91                     	;# 
  1280  0F95                     	;# 
  1281  0F96                     	;# 
  1282  0F97                     	;# 
  1283  0F9C                     	;# 
  1284  0F9D                     	;# 
  1285  0F9E                     	;# 
  1286  0FE3                     	;# 
  1287  0FE4                     	;# 
  1288  0FE5                     	;# 
  1289  0FE6                     	;# 
  1290  0FE7                     	;# 
  1291  0FE8                     	;# 
  1292  0FE9                     	;# 
  1293  0FEA                     	;# 
  1294  0FEB                     	;# 
  1295  0FED                     	;# 
  1296  0FEE                     	;# 
  1297  0FEF                     	;# 
  1298  0000                     	;# 
  1299  0001                     	;# 
  1300  0002                     	;# 
  1301  0003                     	;# 
  1302  0004                     	;# 
  1303  0005                     	;# 
  1304  0006                     	;# 
  1305  0007                     	;# 
  1306  0008                     	;# 
  1307  0009                     	;# 
  1308  000A                     	;# 
  1309  000B                     	;# 
  1310  000C                     	;# 
  1311  000D                     	;# 
  1312  000E                     	;# 
  1313  0011                     	;# 
  1314  0012                     	;# 
  1315  0013                     	;# 
  1316  0015                     	;# 
  1317  0016                     	;# 
  1318  0016                     	;# 
  1319  0017                     	;# 
  1320  0018                     	;# 
  1321  0019                     	;# 
  1322  001A                     	;# 
  1323  001B                     	;# 
  1324  001C                     	;# 
  1325  008C                     	;# 
  1326  008D                     	;# 
  1327  008E                     	;# 
  1328  0091                     	;# 
  1329  0092                     	;# 
  1330  0093                     	;# 
  1331  0095                     	;# 
  1332  0096                     	;# 
  1333  0097                     	;# 
  1334  0099                     	;# 
  1335  009A                     	;# 
  1336  009B                     	;# 
  1337  009B                     	;# 
  1338  009C                     	;# 
  1339  009D                     	;# 
  1340  009E                     	;# 
  1341  009F                     	;# 
  1342  010C                     	;# 
  1343  010D                     	;# 
  1344  010E                     	;# 
  1345  0111                     	;# 
  1346  0112                     	;# 
  1347  0113                     	;# 
  1348  0114                     	;# 
  1349  0115                     	;# 
  1350  0116                     	;# 
  1351  0117                     	;# 
  1352  0118                     	;# 
  1353  0119                     	;# 
  1354  011D                     	;# 
  1355  018C                     	;# 
  1356  018D                     	;# 
  1357  018E                     	;# 
  1358  0191                     	;# 
  1359  0191                     	;# 
  1360  0192                     	;# 
  1361  0193                     	;# 
  1362  0193                     	;# 
  1363  0194                     	;# 
  1364  0195                     	;# 
  1365  0196                     	;# 
  1366  0199                     	;# 
  1367  019A                     	;# 
  1368  019B                     	;# 
  1369  019B                     	;# 
  1370  019C                     	;# 
  1371  019D                     	;# 
  1372  019E                     	;# 
  1373  019F                     	;# 
  1374  020C                     	;# 
  1375  020D                     	;# 
  1376  0211                     	;# 
  1377  0211                     	;# 
  1378  0212                     	;# 
  1379  0212                     	;# 
  1380  0213                     	;# 
  1381  0213                     	;# 
  1382  0214                     	;# 
  1383  0214                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0215                     	;# 
  1387  0216                     	;# 
  1388  0216                     	;# 
  1389  0217                     	;# 
  1390  0217                     	;# 
  1391  0391                     	;# 
  1392  0392                     	;# 
  1393  0393                     	;# 
  1394  0394                     	;# 
  1395  0395                     	;# 
  1396  0396                     	;# 
  1397  0498                     	;# 
  1398  0498                     	;# 
  1399  0499                     	;# 
  1400  049A                     	;# 
  1401  049B                     	;# 
  1402  049B                     	;# 
  1403  049C                     	;# 
  1404  049E                     	;# 
  1405  049F                     	;# 
  1406  0611                     	;# 
  1407  0612                     	;# 
  1408  0613                     	;# 
  1409  0613                     	;# 
  1410  0614                     	;# 
  1411  0615                     	;# 
  1412  0616                     	;# 
  1413  0616                     	;# 
  1414  0617                     	;# 
  1415  0618                     	;# 
  1416  0619                     	;# 
  1417  0619                     	;# 
  1418  061A                     	;# 
  1419  061B                     	;# 
  1420  061C                     	;# 
  1421  061C                     	;# 
  1422  0691                     	;# 
  1423  0692                     	;# 
  1424  0693                     	;# 
  1425  0694                     	;# 
  1426  0695                     	;# 
  1427  0F0F                     	;# 
  1428  0F10                     	;# 
  1429  0F11                     	;# 
  1430  0F12                     	;# 
  1431  0F13                     	;# 
  1432  0F14                     	;# 
  1433  0F15                     	;# 
  1434  0F16                     	;# 
  1435  0F17                     	;# 
  1436  0F18                     	;# 
  1437  0F19                     	;# 
  1438  0F1A                     	;# 
  1439  0F1B                     	;# 
  1440  0F1C                     	;# 
  1441  0F1D                     	;# 
  1442  0F1E                     	;# 
  1443  0F1F                     	;# 
  1444  0F20                     	;# 
  1445  0F21                     	;# 
  1446  0F22                     	;# 
  1447  0F23                     	;# 
  1448  0F24                     	;# 
  1449  0F25                     	;# 
  1450  0F26                     	;# 
  1451  0F27                     	;# 
  1452  0F28                     	;# 
  1453  0F29                     	;# 
  1454  0F2A                     	;# 
  1455  0F2B                     	;# 
  1456  0F2C                     	;# 
  1457  0F2D                     	;# 
  1458  0F2E                     	;# 
  1459  0F2F                     	;# 
  1460  0F8C                     	;# 
  1461  0F8D                     	;# 
  1462  0F91                     	;# 
  1463  0F95                     	;# 
  1464  0F96                     	;# 
  1465  0F97                     	;# 
  1466  0F9C                     	;# 
  1467  0F9D                     	;# 
  1468  0F9E                     	;# 
  1469  0FE3                     	;# 
  1470  0FE4                     	;# 
  1471  0FE5                     	;# 
  1472  0FE6                     	;# 
  1473  0FE7                     	;# 
  1474  0FE8                     	;# 
  1475  0FE9                     	;# 
  1476  0FEA                     	;# 
  1477  0FEB                     	;# 
  1478  0FED                     	;# 
  1479  0FEE                     	;# 
  1480  0FEF                     	;# 
  1481  0000                     	;# 
  1482  0001                     	;# 
  1483  0002                     	;# 
  1484  0003                     	;# 
  1485  0004                     	;# 
  1486  0005                     	;# 
  1487  0006                     	;# 
  1488  0007                     	;# 
  1489  0008                     	;# 
  1490  0009                     	;# 
  1491  000A                     	;# 
  1492  000B                     	;# 
  1493  000C                     	;# 
  1494  000D                     	;# 
  1495  000E                     	;# 
  1496  0011                     	;# 
  1497  0012                     	;# 
  1498  0013                     	;# 
  1499  0015                     	;# 
  1500  0016                     	;# 
  1501  0016                     	;# 
  1502  0017                     	;# 
  1503  0018                     	;# 
  1504  0019                     	;# 
  1505  001A                     	;# 
  1506  001B                     	;# 
  1507  001C                     	;# 
  1508  008C                     	;# 
  1509  008D                     	;# 
  1510  008E                     	;# 
  1511  0091                     	;# 
  1512  0092                     	;# 
  1513  0093                     	;# 
  1514  0095                     	;# 
  1515  0096                     	;# 
  1516  0097                     	;# 
  1517  0099                     	;# 
  1518  009A                     	;# 
  1519  009B                     	;# 
  1520  009B                     	;# 
  1521  009C                     	;# 
  1522  009D                     	;# 
  1523  009E                     	;# 
  1524  009F                     	;# 
  1525  010C                     	;# 
  1526  010D                     	;# 
  1527  010E                     	;# 
  1528  0111                     	;# 
  1529  0112                     	;# 
  1530  0113                     	;# 
  1531  0114                     	;# 
  1532  0115                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  0118                     	;# 
  1536  0119                     	;# 
  1537  011D                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020C                     	;# 
  1558  020D                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0391                     	;# 
  1575  0392                     	;# 
  1576  0393                     	;# 
  1577  0394                     	;# 
  1578  0395                     	;# 
  1579  0396                     	;# 
  1580  0498                     	;# 
  1581  0498                     	;# 
  1582  0499                     	;# 
  1583  049A                     	;# 
  1584  049B                     	;# 
  1585  049B                     	;# 
  1586  049C                     	;# 
  1587  049E                     	;# 
  1588  049F                     	;# 
  1589  0611                     	;# 
  1590  0612                     	;# 
  1591  0613                     	;# 
  1592  0613                     	;# 
  1593  0614                     	;# 
  1594  0615                     	;# 
  1595  0616                     	;# 
  1596  0616                     	;# 
  1597  0617                     	;# 
  1598  0618                     	;# 
  1599  0619                     	;# 
  1600  0619                     	;# 
  1601  061A                     	;# 
  1602  061B                     	;# 
  1603  061C                     	;# 
  1604  061C                     	;# 
  1605  0691                     	;# 
  1606  0692                     	;# 
  1607  0693                     	;# 
  1608  0694                     	;# 
  1609  0695                     	;# 
  1610  0F0F                     	;# 
  1611  0F10                     	;# 
  1612  0F11                     	;# 
  1613  0F12                     	;# 
  1614  0F13                     	;# 
  1615  0F14                     	;# 
  1616  0F15                     	;# 
  1617  0F16                     	;# 
  1618  0F17                     	;# 
  1619  0F18                     	;# 
  1620  0F19                     	;# 
  1621  0F1A                     	;# 
  1622  0F1B                     	;# 
  1623  0F1C                     	;# 
  1624  0F1D                     	;# 
  1625  0F1E                     	;# 
  1626  0F1F                     	;# 
  1627  0F20                     	;# 
  1628  0F21                     	;# 
  1629  0F22                     	;# 
  1630  0F23                     	;# 
  1631  0F24                     	;# 
  1632  0F25                     	;# 
  1633  0F26                     	;# 
  1634  0F27                     	;# 
  1635  0F28                     	;# 
  1636  0F29                     	;# 
  1637  0F2A                     	;# 
  1638  0F2B                     	;# 
  1639  0F2C                     	;# 
  1640  0F2D                     	;# 
  1641  0F2E                     	;# 
  1642  0F2F                     	;# 
  1643  0F8C                     	;# 
  1644  0F8D                     	;# 
  1645  0F91                     	;# 
  1646  0F95                     	;# 
  1647  0F96                     	;# 
  1648  0F97                     	;# 
  1649  0F9C                     	;# 
  1650  0F9D                     	;# 
  1651  0F9E                     	;# 
  1652  0FE3                     	;# 
  1653  0FE4                     	;# 
  1654  0FE5                     	;# 
  1655  0FE6                     	;# 
  1656  0FE7                     	;# 
  1657  0FE8                     	;# 
  1658  0FE9                     	;# 
  1659  0FEA                     	;# 
  1660  0FEB                     	;# 
  1661  0FED                     	;# 
  1662  0FEE                     	;# 
  1663  0FEF                     	;# 
  1664  0000                     	;# 
  1665  0001                     	;# 
  1666  0002                     	;# 
  1667  0003                     	;# 
  1668  0004                     	;# 
  1669  0005                     	;# 
  1670  0006                     	;# 
  1671  0007                     	;# 
  1672  0008                     	;# 
  1673  0009                     	;# 
  1674  000A                     	;# 
  1675  000B                     	;# 
  1676  000C                     	;# 
  1677  000D                     	;# 
  1678  000E                     	;# 
  1679  0011                     	;# 
  1680  0012                     	;# 
  1681  0013                     	;# 
  1682  0015                     	;# 
  1683  0016                     	;# 
  1684  0016                     	;# 
  1685  0017                     	;# 
  1686  0018                     	;# 
  1687  0019                     	;# 
  1688  001A                     	;# 
  1689  001B                     	;# 
  1690  001C                     	;# 
  1691  008C                     	;# 
  1692  008D                     	;# 
  1693  008E                     	;# 
  1694  0091                     	;# 
  1695  0092                     	;# 
  1696  0093                     	;# 
  1697  0095                     	;# 
  1698  0096                     	;# 
  1699  0097                     	;# 
  1700  0099                     	;# 
  1701  009A                     	;# 
  1702  009B                     	;# 
  1703  009B                     	;# 
  1704  009C                     	;# 
  1705  009D                     	;# 
  1706  009E                     	;# 
  1707  009F                     	;# 
  1708  010C                     	;# 
  1709  010D                     	;# 
  1710  010E                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0113                     	;# 
  1714  0114                     	;# 
  1715  0115                     	;# 
  1716  0116                     	;# 
  1717  0117                     	;# 
  1718  0118                     	;# 
  1719  0119                     	;# 
  1720  011D                     	;# 
  1721  018C                     	;# 
  1722  018D                     	;# 
  1723  018E                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0194                     	;# 
  1730  0195                     	;# 
  1731  0196                     	;# 
  1732  0199                     	;# 
  1733  019A                     	;# 
  1734  019B                     	;# 
  1735  019B                     	;# 
  1736  019C                     	;# 
  1737  019D                     	;# 
  1738  019E                     	;# 
  1739  019F                     	;# 
  1740  020C                     	;# 
  1741  020D                     	;# 
  1742  0211                     	;# 
  1743  0211                     	;# 
  1744  0212                     	;# 
  1745  0212                     	;# 
  1746  0213                     	;# 
  1747  0213                     	;# 
  1748  0214                     	;# 
  1749  0214                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  0391                     	;# 
  1758  0392                     	;# 
  1759  0393                     	;# 
  1760  0394                     	;# 
  1761  0395                     	;# 
  1762  0396                     	;# 
  1763  0498                     	;# 
  1764  0498                     	;# 
  1765  0499                     	;# 
  1766  049A                     	;# 
  1767  049B                     	;# 
  1768  049B                     	;# 
  1769  049C                     	;# 
  1770  049E                     	;# 
  1771  049F                     	;# 
  1772  0611                     	;# 
  1773  0612                     	;# 
  1774  0613                     	;# 
  1775  0613                     	;# 
  1776  0614                     	;# 
  1777  0615                     	;# 
  1778  0616                     	;# 
  1779  0616                     	;# 
  1780  0617                     	;# 
  1781  0618                     	;# 
  1782  0619                     	;# 
  1783  0619                     	;# 
  1784  061A                     	;# 
  1785  061B                     	;# 
  1786  061C                     	;# 
  1787  061C                     	;# 
  1788  0691                     	;# 
  1789  0692                     	;# 
  1790  0693                     	;# 
  1791  0694                     	;# 
  1792  0695                     	;# 
  1793  0F0F                     	;# 
  1794  0F10                     	;# 
  1795  0F11                     	;# 
  1796  0F12                     	;# 
  1797  0F13                     	;# 
  1798  0F14                     	;# 
  1799  0F15                     	;# 
  1800  0F16                     	;# 
  1801  0F17                     	;# 
  1802  0F18                     	;# 
  1803  0F19                     	;# 
  1804  0F1A                     	;# 
  1805  0F1B                     	;# 
  1806  0F1C                     	;# 
  1807  0F1D                     	;# 
  1808  0F1E                     	;# 
  1809  0F1F                     	;# 
  1810  0F20                     	;# 
  1811  0F21                     	;# 
  1812  0F22                     	;# 
  1813  0F23                     	;# 
  1814  0F24                     	;# 
  1815  0F25                     	;# 
  1816  0F26                     	;# 
  1817  0F27                     	;# 
  1818  0F28                     	;# 
  1819  0F29                     	;# 
  1820  0F2A                     	;# 
  1821  0F2B                     	;# 
  1822  0F2C                     	;# 
  1823  0F2D                     	;# 
  1824  0F2E                     	;# 
  1825  0F2F                     	;# 
  1826  0F8C                     	;# 
  1827  0F8D                     	;# 
  1828  0F91                     	;# 
  1829  0F95                     	;# 
  1830  0F96                     	;# 
  1831  0F97                     	;# 
  1832  0F9C                     	;# 
  1833  0F9D                     	;# 
  1834  0F9E                     	;# 
  1835  0FE3                     	;# 
  1836  0FE4                     	;# 
  1837  0FE5                     	;# 
  1838  0FE6                     	;# 
  1839  0FE7                     	;# 
  1840  0FE8                     	;# 
  1841  0FE9                     	;# 
  1842  0FEA                     	;# 
  1843  0FEB                     	;# 
  1844  0FED                     	;# 
  1845  0FEE                     	;# 
  1846  0FEF                     	;# 
  1847  0000                     	;# 
  1848  0001                     	;# 
  1849  0002                     	;# 
  1850  0003                     	;# 
  1851  0004                     	;# 
  1852  0005                     	;# 
  1853  0006                     	;# 
  1854  0007                     	;# 
  1855  0008                     	;# 
  1856  0009                     	;# 
  1857  000A                     	;# 
  1858  000B                     	;# 
  1859  000C                     	;# 
  1860  000D                     	;# 
  1861  000E                     	;# 
  1862  0011                     	;# 
  1863  0012                     	;# 
  1864  0013                     	;# 
  1865  0015                     	;# 
  1866  0016                     	;# 
  1867  0016                     	;# 
  1868  0017                     	;# 
  1869  0018                     	;# 
  1870  0019                     	;# 
  1871  001A                     	;# 
  1872  001B                     	;# 
  1873  001C                     	;# 
  1874  008C                     	;# 
  1875  008D                     	;# 
  1876  008E                     	;# 
  1877  0091                     	;# 
  1878  0092                     	;# 
  1879  0093                     	;# 
  1880  0095                     	;# 
  1881  0096                     	;# 
  1882  0097                     	;# 
  1883  0099                     	;# 
  1884  009A                     	;# 
  1885  009B                     	;# 
  1886  009B                     	;# 
  1887  009C                     	;# 
  1888  009D                     	;# 
  1889  009E                     	;# 
  1890  009F                     	;# 
  1891  010C                     	;# 
  1892  010D                     	;# 
  1893  010E                     	;# 
  1894  0111                     	;# 
  1895  0112                     	;# 
  1896  0113                     	;# 
  1897  0114                     	;# 
  1898  0115                     	;# 
  1899  0116                     	;# 
  1900  0117                     	;# 
  1901  0118                     	;# 
  1902  0119                     	;# 
  1903  011D                     	;# 
  1904  018C                     	;# 
  1905  018D                     	;# 
  1906  018E                     	;# 
  1907  0191                     	;# 
  1908  0191                     	;# 
  1909  0192                     	;# 
  1910  0193                     	;# 
  1911  0193                     	;# 
  1912  0194                     	;# 
  1913  0195                     	;# 
  1914  0196                     	;# 
  1915  0199                     	;# 
  1916  019A                     	;# 
  1917  019B                     	;# 
  1918  019B                     	;# 
  1919  019C                     	;# 
  1920  019D                     	;# 
  1921  019E                     	;# 
  1922  019F                     	;# 
  1923  020C                     	;# 
  1924  020D                     	;# 
  1925  0211                     	;# 
  1926  0211                     	;# 
  1927  0212                     	;# 
  1928  0212                     	;# 
  1929  0213                     	;# 
  1930  0213                     	;# 
  1931  0214                     	;# 
  1932  0214                     	;# 
  1933  0215                     	;# 
  1934  0215                     	;# 
  1935  0215                     	;# 
  1936  0216                     	;# 
  1937  0216                     	;# 
  1938  0217                     	;# 
  1939  0217                     	;# 
  1940  0391                     	;# 
  1941  0392                     	;# 
  1942  0393                     	;# 
  1943  0394                     	;# 
  1944  0395                     	;# 
  1945  0396                     	;# 
  1946  0498                     	;# 
  1947  0498                     	;# 
  1948  0499                     	;# 
  1949  049A                     	;# 
  1950  049B                     	;# 
  1951  049B                     	;# 
  1952  049C                     	;# 
  1953  049E                     	;# 
  1954  049F                     	;# 
  1955  0611                     	;# 
  1956  0612                     	;# 
  1957  0613                     	;# 
  1958  0613                     	;# 
  1959  0614                     	;# 
  1960  0615                     	;# 
  1961  0616                     	;# 
  1962  0616                     	;# 
  1963  0617                     	;# 
  1964  0618                     	;# 
  1965  0619                     	;# 
  1966  0619                     	;# 
  1967  061A                     	;# 
  1968  061B                     	;# 
  1969  061C                     	;# 
  1970  061C                     	;# 
  1971  0691                     	;# 
  1972  0692                     	;# 
  1973  0693                     	;# 
  1974  0694                     	;# 
  1975  0695                     	;# 
  1976  0F0F                     	;# 
  1977  0F10                     	;# 
  1978  0F11                     	;# 
  1979  0F12                     	;# 
  1980  0F13                     	;# 
  1981  0F14                     	;# 
  1982  0F15                     	;# 
  1983  0F16                     	;# 
  1984  0F17                     	;# 
  1985  0F18                     	;# 
  1986  0F19                     	;# 
  1987  0F1A                     	;# 
  1988  0F1B                     	;# 
  1989  0F1C                     	;# 
  1990  0F1D                     	;# 
  1991  0F1E                     	;# 
  1992  0F1F                     	;# 
  1993  0F20                     	;# 
  1994  0F21                     	;# 
  1995  0F22                     	;# 
  1996  0F23                     	;# 
  1997  0F24                     	;# 
  1998  0F25                     	;# 
  1999  0F26                     	;# 
  2000  0F27                     	;# 
  2001  0F28                     	;# 
  2002  0F29                     	;# 
  2003  0F2A                     	;# 
  2004  0F2B                     	;# 
  2005  0F2C                     	;# 
  2006  0F2D                     	;# 
  2007  0F2E                     	;# 
  2008  0F2F                     	;# 
  2009  0F8C                     	;# 
  2010  0F8D                     	;# 
  2011  0F91                     	;# 
  2012  0F95                     	;# 
  2013  0F96                     	;# 
  2014  0F97                     	;# 
  2015  0F9C                     	;# 
  2016  0F9D                     	;# 
  2017  0F9E                     	;# 
  2018  0FE3                     	;# 
  2019  0FE4                     	;# 
  2020  0FE5                     	;# 
  2021  0FE6                     	;# 
  2022  0FE7                     	;# 
  2023  0FE8                     	;# 
  2024  0FE9                     	;# 
  2025  0FEA                     	;# 
  2026  0FEB                     	;# 
  2027  0FED                     	;# 
  2028  0FEE                     	;# 
  2029  0FEF                     	;# 
  2030  0000                     	;# 
  2031  0001                     	;# 
  2032  0002                     	;# 
  2033  0003                     	;# 
  2034  0004                     	;# 
  2035  0005                     	;# 
  2036  0006                     	;# 
  2037  0007                     	;# 
  2038  0008                     	;# 
  2039  0009                     	;# 
  2040  000A                     	;# 
  2041  000B                     	;# 
  2042  000C                     	;# 
  2043  000D                     	;# 
  2044  000E                     	;# 
  2045  0011                     	;# 
  2046  0012                     	;# 
  2047  0013                     	;# 
  2048  0015                     	;# 
  2049  0016                     	;# 
  2050  0016                     	;# 
  2051  0017                     	;# 
  2052  0018                     	;# 
  2053  0019                     	;# 
  2054  001A                     	;# 
  2055  001B                     	;# 
  2056  001C                     	;# 
  2057  008C                     	;# 
  2058  008D                     	;# 
  2059  008E                     	;# 
  2060  0091                     	;# 
  2061  0092                     	;# 
  2062  0093                     	;# 
  2063  0095                     	;# 
  2064  0096                     	;# 
  2065  0097                     	;# 
  2066  0099                     	;# 
  2067  009A                     	;# 
  2068  009B                     	;# 
  2069  009B                     	;# 
  2070  009C                     	;# 
  2071  009D                     	;# 
  2072  009E                     	;# 
  2073  009F                     	;# 
  2074  010C                     	;# 
  2075  010D                     	;# 
  2076  010E                     	;# 
  2077  0111                     	;# 
  2078  0112                     	;# 
  2079  0113                     	;# 
  2080  0114                     	;# 
  2081  0115                     	;# 
  2082  0116                     	;# 
  2083  0117                     	;# 
  2084  0118                     	;# 
  2085  0119                     	;# 
  2086  011D                     	;# 
  2087  018C                     	;# 
  2088  018D                     	;# 
  2089  018E                     	;# 
  2090  0191                     	;# 
  2091  0191                     	;# 
  2092  0192                     	;# 
  2093  0193                     	;# 
  2094  0193                     	;# 
  2095  0194                     	;# 
  2096  0195                     	;# 
  2097  0196                     	;# 
  2098  0199                     	;# 
  2099  019A                     	;# 
  2100  019B                     	;# 
  2101  019B                     	;# 
  2102  019C                     	;# 
  2103  019D                     	;# 
  2104  019E                     	;# 
  2105  019F                     	;# 
  2106  020C                     	;# 
  2107  020D                     	;# 
  2108  0211                     	;# 
  2109  0211                     	;# 
  2110  0212                     	;# 
  2111  0212                     	;# 
  2112  0213                     	;# 
  2113  0213                     	;# 
  2114  0214                     	;# 
  2115  0214                     	;# 
  2116  0215                     	;# 
  2117  0215                     	;# 
  2118  0215                     	;# 
  2119  0216                     	;# 
  2120  0216                     	;# 
  2121  0217                     	;# 
  2122  0217                     	;# 
  2123  0391                     	;# 
  2124  0392                     	;# 
  2125  0393                     	;# 
  2126  0394                     	;# 
  2127  0395                     	;# 
  2128  0396                     	;# 
  2129  0498                     	;# 
  2130  0498                     	;# 
  2131  0499                     	;# 
  2132  049A                     	;# 
  2133  049B                     	;# 
  2134  049B                     	;# 
  2135  049C                     	;# 
  2136  049E                     	;# 
  2137  049F                     	;# 
  2138  0611                     	;# 
  2139  0612                     	;# 
  2140  0613                     	;# 
  2141  0613                     	;# 
  2142  0614                     	;# 
  2143  0615                     	;# 
  2144  0616                     	;# 
  2145  0616                     	;# 
  2146  0617                     	;# 
  2147  0618                     	;# 
  2148  0619                     	;# 
  2149  0619                     	;# 
  2150  061A                     	;# 
  2151  061B                     	;# 
  2152  061C                     	;# 
  2153  061C                     	;# 
  2154  0691                     	;# 
  2155  0692                     	;# 
  2156  0693                     	;# 
  2157  0694                     	;# 
  2158  0695                     	;# 
  2159  0F0F                     	;# 
  2160  0F10                     	;# 
  2161  0F11                     	;# 
  2162  0F12                     	;# 
  2163  0F13                     	;# 
  2164  0F14                     	;# 
  2165  0F15                     	;# 
  2166  0F16                     	;# 
  2167  0F17                     	;# 
  2168  0F18                     	;# 
  2169  0F19                     	;# 
  2170  0F1A                     	;# 
  2171  0F1B                     	;# 
  2172  0F1C                     	;# 
  2173  0F1D                     	;# 
  2174  0F1E                     	;# 
  2175  0F1F                     	;# 
  2176  0F20                     	;# 
  2177  0F21                     	;# 
  2178  0F22                     	;# 
  2179  0F23                     	;# 
  2180  0F24                     	;# 
  2181  0F25                     	;# 
  2182  0F26                     	;# 
  2183  0F27                     	;# 
  2184  0F28                     	;# 
  2185  0F29                     	;# 
  2186  0F2A                     	;# 
  2187  0F2B                     	;# 
  2188  0F2C                     	;# 
  2189  0F2D                     	;# 
  2190  0F2E                     	;# 
  2191  0F2F                     	;# 
  2192  0F8C                     	;# 
  2193  0F8D                     	;# 
  2194  0F91                     	;# 
  2195  0F95                     	;# 
  2196  0F96                     	;# 
  2197  0F97                     	;# 
  2198  0F9C                     	;# 
  2199  0F9D                     	;# 
  2200  0F9E                     	;# 
  2201  0FE3                     	;# 
  2202  0FE4                     	;# 
  2203  0FE5                     	;# 
  2204  0FE6                     	;# 
  2205  0FE7                     	;# 
  2206  0FE8                     	;# 
  2207  0FE9                     	;# 
  2208  0FEA                     	;# 
  2209  0FEB                     	;# 
  2210  0FED                     	;# 
  2211  0FEE                     	;# 
  2212  0FEF                     	;# 
  2213  0000                     	;# 
  2214  0001                     	;# 
  2215  0002                     	;# 
  2216  0003                     	;# 
  2217  0004                     	;# 
  2218  0005                     	;# 
  2219  0006                     	;# 
  2220  0007                     	;# 
  2221  0008                     	;# 
  2222  0009                     	;# 
  2223  000A                     	;# 
  2224  000B                     	;# 
  2225  000C                     	;# 
  2226  000D                     	;# 
  2227  000E                     	;# 
  2228  0011                     	;# 
  2229  0012                     	;# 
  2230  0013                     	;# 
  2231  0015                     	;# 
  2232  0016                     	;# 
  2233  0016                     	;# 
  2234  0017                     	;# 
  2235  0018                     	;# 
  2236  0019                     	;# 
  2237  001A                     	;# 
  2238  001B                     	;# 
  2239  001C                     	;# 
  2240  008C                     	;# 
  2241  008D                     	;# 
  2242  008E                     	;# 
  2243  0091                     	;# 
  2244  0092                     	;# 
  2245  0093                     	;# 
  2246  0095                     	;# 
  2247  0096                     	;# 
  2248  0097                     	;# 
  2249  0099                     	;# 
  2250  009A                     	;# 
  2251  009B                     	;# 
  2252  009B                     	;# 
  2253  009C                     	;# 
  2254  009D                     	;# 
  2255  009E                     	;# 
  2256  009F                     	;# 
  2257  010C                     	;# 
  2258  010D                     	;# 
  2259  010E                     	;# 
  2260  0111                     	;# 
  2261  0112                     	;# 
  2262  0113                     	;# 
  2263  0114                     	;# 
  2264  0115                     	;# 
  2265  0116                     	;# 
  2266  0117                     	;# 
  2267  0118                     	;# 
  2268  0119                     	;# 
  2269  011D                     	;# 
  2270  018C                     	;# 
  2271  018D                     	;# 
  2272  018E                     	;# 
  2273  0191                     	;# 
  2274  0191                     	;# 
  2275  0192                     	;# 
  2276  0193                     	;# 
  2277  0193                     	;# 
  2278  0194                     	;# 
  2279  0195                     	;# 
  2280  0196                     	;# 
  2281  0199                     	;# 
  2282  019A                     	;# 
  2283  019B                     	;# 
  2284  019B                     	;# 
  2285  019C                     	;# 
  2286  019D                     	;# 
  2287  019E                     	;# 
  2288  019F                     	;# 
  2289  020C                     	;# 
  2290  020D                     	;# 
  2291  0211                     	;# 
  2292  0211                     	;# 
  2293  0212                     	;# 
  2294  0212                     	;# 
  2295  0213                     	;# 
  2296  0213                     	;# 
  2297  0214                     	;# 
  2298  0214                     	;# 
  2299  0215                     	;# 
  2300  0215                     	;# 
  2301  0215                     	;# 
  2302  0216                     	;# 
  2303  0216                     	;# 
  2304  0217                     	;# 
  2305  0217                     	;# 
  2306  0391                     	;# 
  2307  0392                     	;# 
  2308  0393                     	;# 
  2309  0394                     	;# 
  2310  0395                     	;# 
  2311  0396                     	;# 
  2312  0498                     	;# 
  2313  0498                     	;# 
  2314  0499                     	;# 
  2315  049A                     	;# 
  2316  049B                     	;# 
  2317  049B                     	;# 
  2318  049C                     	;# 
  2319  049E                     	;# 
  2320  049F                     	;# 
  2321  0611                     	;# 
  2322  0612                     	;# 
  2323  0613                     	;# 
  2324  0613                     	;# 
  2325  0614                     	;# 
  2326  0615                     	;# 
  2327  0616                     	;# 
  2328  0616                     	;# 
  2329  0617                     	;# 
  2330  0618                     	;# 
  2331  0619                     	;# 
  2332  0619                     	;# 
  2333  061A                     	;# 
  2334  061B                     	;# 
  2335  061C                     	;# 
  2336  061C                     	;# 
  2337  0691                     	;# 
  2338  0692                     	;# 
  2339  0693                     	;# 
  2340  0694                     	;# 
  2341  0695                     	;# 
  2342  0F0F                     	;# 
  2343  0F10                     	;# 
  2344  0F11                     	;# 
  2345  0F12                     	;# 
  2346  0F13                     	;# 
  2347  0F14                     	;# 
  2348  0F15                     	;# 
  2349  0F16                     	;# 
  2350  0F17                     	;# 
  2351  0F18                     	;# 
  2352  0F19                     	;# 
  2353  0F1A                     	;# 
  2354  0F1B                     	;# 
  2355  0F1C                     	;# 
  2356  0F1D                     	;# 
  2357  0F1E                     	;# 
  2358  0F1F                     	;# 
  2359  0F20                     	;# 
  2360  0F21                     	;# 
  2361  0F22                     	;# 
  2362  0F23                     	;# 
  2363  0F24                     	;# 
  2364  0F25                     	;# 
  2365  0F26                     	;# 
  2366  0F27                     	;# 
  2367  0F28                     	;# 
  2368  0F29                     	;# 
  2369  0F2A                     	;# 
  2370  0F2B                     	;# 
  2371  0F2C                     	;# 
  2372  0F2D                     	;# 
  2373  0F2E                     	;# 
  2374  0F2F                     	;# 
  2375  0F8C                     	;# 
  2376  0F8D                     	;# 
  2377  0F91                     	;# 
  2378  0F95                     	;# 
  2379  0F96                     	;# 
  2380  0F97                     	;# 
  2381  0F9C                     	;# 
  2382  0F9D                     	;# 
  2383  0F9E                     	;# 
  2384  0FE3                     	;# 
  2385  0FE4                     	;# 
  2386  0FE5                     	;# 
  2387  0FE6                     	;# 
  2388  0FE7                     	;# 
  2389  0FE8                     	;# 
  2390  0FE9                     	;# 
  2391  0FEA                     	;# 
  2392  0FEB                     	;# 
  2393  0FED                     	;# 
  2394  0FEE                     	;# 
  2395  0FEF                     	;# 
  2396                           
  2397                           	psect	strings
  2398  076B                     __pstrings:	
  2399  076B                     __stringtab:	
  2400  076B  3400               	retlw	0
  2401  076C                     __end_of__stringtab:	
  2402  076C                     _mrfRegset_InitCnt:	
  2403  076C  3410               	retlw	16
  2404  076D                     __end_of_mrfRegset_InitCnt:	
  2405  076D                     _mrfRegset_RxCnt:	
  2406  076D  3406               	retlw	6
  2407  076E                     __end_of_mrfRegset_RxCnt:	
  2408  076E                     _mrfRegset_TxCnt:	
  2409  076E  3404               	retlw	4
  2410  076F                     __end_of_mrfRegset_TxCnt:	
  2411  076F                     _mrfRegset_Init:	
  2412  076F  34CA               	retlw	202
  2413  0770  3471               	retlw	113
  2414  0771  34CA               	retlw	202
  2415  0772  3473               	retlw	115
  2416  0773  3480               	retlw	128
  2417  0774  3428               	retlw	40
  2418  0775  34C4               	retlw	196
  2419  0776  34E7               	retlw	231
  2420  0777  34A8               	retlw	168
  2421  0778  3460               	retlw	96
  2422  0779  34C6               	retlw	198
  2423  077A  3405               	retlw	5
  2424  077B  3482               	retlw	130
  2425  077C  3400               	retlw	0
  2426  077D  3490               	retlw	144
  2427  077E  3462               	retlw	98
  2428  077F  3498               	retlw	152
  2429  0780  3490               	retlw	144
  2430  0781  34C2               	retlw	194
  2431  0782  34AC               	retlw	172
  2432  0783  3482               	retlw	130
  2433  0784  3420               	retlw	32
  2434  0785  3455               	retlw	85
  2435  0786  3400               	retlw	0
  2436  0787  3482               	retlw	130
  2437  0788  3480               	retlw	128
  2438  0789  3480               	retlw	128
  2439  078A  3468               	retlw	104
  2440  078B  34CA               	retlw	202
  2441  078C  3471               	retlw	113
  2442  078D  34CA               	retlw	202
  2443  078E  3473               	retlw	115
  2444  078F                     __end_of_mrfRegset_Init:	
  2445  078F                     _mrfRegset_Rx:	
  2446  078F  3482               	retlw	130
  2447  0790  3400               	retlw	0
  2448  0791  34CA               	retlw	202
  2449  0792  3471               	retlw	113
  2450  0793  3480               	retlw	128
  2451  0794  3428               	retlw	40
  2452  0795  3482               	retlw	130
  2453  0796  3480               	retlw	128
  2454  0797  3480               	retlw	128
  2455  0798  3468               	retlw	104
  2456  0799  34CA               	retlw	202
  2457  079A  3473               	retlw	115
  2458  079B                     __end_of_mrfRegset_Rx:	
  2459  079B                     _mrfRegset_Tx:	
  2460  079B  3482               	retlw	130
  2461  079C  3400               	retlw	0
  2462  079D  34CA               	retlw	202
  2463  079E  3471               	retlw	113
  2464  079F  3480               	retlw	128
  2465  07A0  34A8               	retlw	168
  2466  07A1  3482               	retlw	130
  2467  07A2  3420               	retlw	32
  2468  07A3                     __end_of_mrfRegset_Tx:	
  2469  000B                     _INTCONbits	set	11
  2470  000C                     _PORTAbits	set	12
  2471  000D                     _PORTBbits	set	13
  2472  000E                     _PORTCbits	set	14
  2473  009D                     _ADCON0	set	157
  2474  009E                     _ADCON1	set	158
  2475  009F                     _ADCON2	set	159
  2476  0095                     _OPTION_REGbits	set	149
  2477  0099                     _OSCCON	set	153
  2478  008C                     _TRISAbits	set	140
  2479  008D                     _TRISBbits	set	141
  2480  008E                     _TRISCbits	set	142
  2481  0117                     _FVRCON	set	279
  2482  010C                     _LATAbits	set	268
  2483  010D                     _LATBbits	set	269
  2484  010E                     _LATCbits	set	270
  2485  018C                     _ANSELA	set	396
  2486  018D                     _ANSELB	set	397
  2487  018E                     _ANSELC	set	398
  2488  020C                     _WPUAbits	set	524
  2489                           
  2490                           ; #config settings
  2491  0000                     
  2492                           	psect	cinit
  2493  0016                     start_initialization:	
  2494  0016                     __initialization:	
  2495  0016  30A0               	movlw	low __pbssBANK1
  2496                           
  2497                           ; Clear objects allocated to BANK0
  2498  0017  01CB               	clrf	__pbssBANK0& (0+127)
  2499  0018  01CC               	clrf	(__pbssBANK0+1)& (0+127)
  2500                           
  2501                           ; Clear objects allocated to BANK1
  2502  0019  0084               	movwf	4
  2503  001A  3000               	movlw	high __pbssBANK1
  2504  001B  0085               	movwf	5
  2505  001C  304F               	movlw	79
  2506  001D  3187  27B3  3180   	fcall	clear_ram0
  2507  0020                     end_of_initialization:	
  2508                           ;End of C runtime variable initialization code
  2509                           
  2510  0020                     __end_of__initialization:	
  2511  0020  0020               	movlb	0
  2512  0021  287A               	ljmp	_main	;jump to C main() function
  2513  0022                     __ptext2:	
  2514 ;; *************** function _SoftI2cInit *****************
  2515 ;; Defined at:
  2516 ;;		line 12 in file "../../../src/bsp/softI2c.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;		None
  2521 ;; Return value:  Size  Location     Type
  2522 ;;		None               void
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0, pclath, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 17F/2
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2530 ;;      Params:         0       0       0       0
  2531 ;;      Locals:         0       0       0       0
  2532 ;;      Temps:          0       0       0       0
  2533 ;;      Totals:         0       0       0       0
  2534 ;;Total ram usage:        0 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    8
  2537 ;; This function calls:
  2538 ;;		_SoftI2cStart
  2539 ;;		_SoftI2cStop
  2540 ;;		_SoftI2cTxByte
  2541 ;; This function is called by:
  2542 ;;		_main
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           
  2547                           ;psect for function _SoftI2cInit
  2548  0022                     _SoftI2cInit:	
  2549                           
  2550                           ;softI2c.c: 15: LATBbits.LATB6 = 1;
  2551                           
  2552                           ;incstack = 0
  2553                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  2554  0022  170D               	bsf	13,6	;volatile
  2555                           
  2556                           ;softI2c.c: 16: LATBbits.LATB4 = 1;
  2557  0023  160D               	bsf	13,4	;volatile
  2558                           
  2559                           ;softI2c.c: 19: TRISBbits.TRISB6 = 0;
  2560  0024  0021               	movlb	1	; select bank1
  2561  0025  130D               	bcf	13,6	;volatile
  2562                           
  2563                           ;softI2c.c: 20: TRISBbits.TRISB4 = 0;
  2564  0026  120D               	bcf	13,4	;volatile
  2565                           
  2566                           ;softI2c.c: 29: SoftI2cStart();
  2567  0027  2198  3180         	fcall	_SoftI2cStart
  2568                           
  2569                           ;softI2c.c: 30: SoftI2cTxByte(0x00);
  2570  0029  3000               	movlw	0
  2571  002A  212C  3180         	fcall	_SoftI2cTxByte
  2572                           
  2573                           ;softI2c.c: 31: SoftI2cStop();
  2574  002C  28C8               	ljmp	l1973
  2575  002D                     __end_of_SoftI2cInit:	
  2576  002D                     __ptext8:	
  2577 ;; *************** function _handleFwWrite *****************
  2578 ;; Defined at:
  2579 ;;		line 66 in file "../../../src/rfstack/client.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  2582 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  packet          1   15[BANK0 ] PTR struct rfTrcvPacket_
  2585 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  2586 ;;  i               1   12[BANK0 ] unsigned char 
  2587 ;;  address         2   13[BANK0 ] unsigned int 
  2588 ;;  packetData      1   11[BANK0 ] PTR unsigned int 
  2589 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), NULL(0), 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;		None               void
  2592 ;; Registers used:
  2593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 1F/0
  2596 ;;		On exit  : 1F/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2599 ;;      Params:         0       0       0       0
  2600 ;;      Locals:         0       5       0       0
  2601 ;;      Temps:          0       3       0       0
  2602 ;;      Totals:         0       8       0       0
  2603 ;;Total ram usage:        8 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    9
  2606 ;; This function calls:
  2607 ;;		_eepromRxBytes
  2608 ;;		_eepromTxBytes
  2609 ;; This function is called by:
  2610 ;;		_HandlePacket
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _handleFwWrite
  2616  002D                     _handleFwWrite:	
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in _handleFwWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2620                           ;handleFwWrite@packet stored from wreg
  2621  002D  00AF               	movwf	handleFwWrite@packet
  2622                           
  2623                           ;client.c: 68: UI16_t address = (packet->packet.data[2] << 8) | packet->packet.data[3];
  2624  002E  3E09               	addlw	9
  2625  002F  0086               	movwf	6
  2626  0030  0187               	clrf	7
  2627  0031  082F               	movf	handleFwWrite@packet,w
  2628  0032  3E08               	addlw	8
  2629  0033  0084               	movwf	4
  2630  0034  0185               	clrf	5
  2631  0035  0800               	movf	0,w
  2632  0036  00AE               	movwf	handleFwWrite@address+1
  2633  0037  0801               	movf	1,w
  2634  0038  00AD               	movwf	handleFwWrite@address
  2635                           
  2636                           ;client.c: 69: UI16_t* packetData = (UI16_t*) &(packet->packet.data[8]);
  2637  0039  082F               	movf	handleFwWrite@packet,w
  2638  003A  3E0E               	addlw	14
  2639  003B  00AB               	movwf	handleFwWrite@packetData
  2640                           
  2641                           ;client.c: 72: eepromTxBytes(address, packet->packet.data+8, 8);
  2642  003C  082E               	movf	handleFwWrite@address+1,w
  2643  003D  00A5               	movwf	eepromTxBytes@address+1
  2644  003E  082D               	movf	handleFwWrite@address,w
  2645  003F  00A4               	movwf	eepromTxBytes@address
  2646  0040  082F               	movf	handleFwWrite@packet,w
  2647  0041  3E0E               	addlw	14
  2648  0042  00A6               	movwf	eepromTxBytes@data
  2649  0043  3008               	movlw	8
  2650  0044  00A7               	movwf	eepromTxBytes@size
  2651  0045  20EC  3180         	fcall	_eepromTxBytes
  2652                           
  2653                           ;client.c: 74: eepromRxBytes(address, packet->packet.data+8, 8);
  2654  0047  0020               	movlb	0	; select bank0
  2655  0048  082E               	movf	handleFwWrite@address+1,w
  2656  0049  00A5               	movwf	eepromRxBytes@address+1
  2657  004A  082D               	movf	handleFwWrite@address,w
  2658  004B  00A4               	movwf	eepromRxBytes@address
  2659  004C  082F               	movf	handleFwWrite@packet,w
  2660  004D  3E0E               	addlw	14
  2661  004E  00A6               	movwf	eepromRxBytes@data
  2662  004F  3008               	movlw	8
  2663  0050  00A7               	movwf	eepromRxBytes@size
  2664  0051  2108  3180         	fcall	_eepromRxBytes
  2665                           
  2666                           ;client.c: 77: address = 0xCAFE;
  2667  0053  30FE               	movlw	254
  2668  0054  0020               	movlb	0	; select bank0
  2669  0055  00AD               	movwf	handleFwWrite@address
  2670  0056  30CA               	movlw	202
  2671  0057  00AE               	movwf	handleFwWrite@address+1
  2672                           
  2673                           ;client.c: 79: for (uint8_t i = 0; i < 4; i++)
  2674  0058  01AC               	clrf	handleFwWrite@i
  2675  0059                     l2321:	
  2676                           
  2677                           ;client.c: 80: {
  2678                           ;client.c: 81: address = address ^ packetData[i];
  2679  0059  352C               	lslf	handleFwWrite@i,w
  2680  005A  072B               	addwf	handleFwWrite@packetData,w
  2681  005B  00A8               	movwf	??_handleFwWrite
  2682  005C  0086               	movwf	6
  2683  005D  0187               	clrf	7
  2684  005E  3F40               	moviw [0]fsr1
  2685  005F  00A9               	movwf	??_handleFwWrite+1
  2686  0060  3F41               	moviw [1]fsr1
  2687  0061  00AA               	movwf	??_handleFwWrite+2
  2688  0062  0829               	movf	??_handleFwWrite+1,w
  2689  0063  06AD               	xorwf	handleFwWrite@address,f
  2690  0064  082A               	movf	??_handleFwWrite+2,w
  2691  0065  06AE               	xorwf	handleFwWrite@address+1,f
  2692  0066  3004               	movlw	4
  2693  0067  0AAC               	incf	handleFwWrite@i,f
  2694  0068  022C               	subwf	handleFwWrite@i,w
  2695  0069  1C03               	skipc
  2696  006A  2859               	goto	l2321
  2697                           
  2698                           ;client.c: 82: }
  2699                           ;client.c: 84: packet->packet.data[8] = address >> 8;
  2700  006B  082F               	movf	handleFwWrite@packet,w
  2701  006C  3E0E               	addlw	14
  2702  006D  0086               	movwf	6
  2703  006E  082E               	movf	handleFwWrite@address+1,w
  2704  006F  0081               	movwf	1
  2705                           
  2706                           ;client.c: 85: packet->packet.data[9] = address & 0xFF;
  2707  0070  082F               	movf	handleFwWrite@packet,w
  2708  0071  3E0F               	addlw	15
  2709  0072  0086               	movwf	6
  2710  0073  082D               	movf	handleFwWrite@address,w
  2711  0074  0081               	movwf	1
  2712                           
  2713                           ;client.c: 87: packet->packet.size = 10;
  2714  0075  0A2F               	incf	handleFwWrite@packet,w
  2715  0076  0086               	movwf	6
  2716  0077  300A               	movlw	10
  2717  0078  0081               	movwf	1
  2718  0079  0008               	return
  2719  007A                     __end_of_handleFwWrite:	
  2720  007A                     __pmaintext:	
  2721 ;;
  2722 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2723 ;;
  2724 ;; *************** function _main *****************
  2725 ;; Defined at:
  2726 ;;		line 41 in file "../../../src/node/main.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;  bf             16   26[BANK0 ] unsigned char [16]
  2731 ;;  i               1   42[BANK0 ] unsigned char 
  2732 ;; Return value:  Size  Location     Type
  2733 ;;		None               void
  2734 ;; Registers used:
  2735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 17F/0
  2738 ;;		On exit  : 1F/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2741 ;;      Params:         0       0       0       0
  2742 ;;      Locals:         0      17       0       0
  2743 ;;      Temps:          0       2       0       0
  2744 ;;      Totals:         0      19       0       0
  2745 ;;Total ram usage:       19 bytes
  2746 ;; Hardware stack levels required when called:   12
  2747 ;; This function calls:
  2748 ;;		_AdcInit
  2749 ;;		_ExtIntInit
  2750 ;;		_Mrf49xaInit
  2751 ;;		_Mrf49xaTick
  2752 ;;		_SoftI2cInit
  2753 ;;		_SysInitGpio
  2754 ;;		_eepromRxBytes
  2755 ;;		_eepromTxBytes
  2756 ;; This function is called by:
  2757 ;;		Startup code after reset
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           
  2762                           ;psect for function _main
  2763  007A                     _main:	
  2764                           
  2765                           ;main.c: 44: OSCCON = 0b01111000;
  2766                           
  2767                           ;incstack = 0
  2768                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2769  007A  3078               	movlw	120
  2770  007B  0021               	movlb	1	; select bank1
  2771  007C  0099               	movwf	25	;volatile
  2772                           
  2773                           ;main.c: 45: WPUAbits.WPUA2 = 1;
  2774  007D  0024               	movlb	4	; select bank4
  2775  007E  150C               	bsf	12,2	;volatile
  2776                           
  2777                           ;main.c: 47: SysInitGpio();
  2778  007F  21B9  3180         	fcall	_SysInitGpio
  2779                           
  2780                           ;main.c: 48: SoftI2cInit();
  2781  0081  2022  3180         	fcall	_SoftI2cInit
  2782                           
  2783                           ;main.c: 49: AdcInit();
  2784  0083  21A5  3180         	fcall	_AdcInit
  2785                           
  2786                           ;main.c: 50: ExtIntInit();
  2787  0085  21B4  3180         	fcall	_ExtIntInit
  2788                           
  2789                           ;main.c: 56: for(i=0;i<16;i++)
  2790  0087  0020               	movlb	0	; select bank0
  2791  0088  01CA               	clrf	main@i
  2792  0089                     l2793:	
  2793                           
  2794                           ;main.c: 57: bf[i] = 0x55-i;
  2795  0089  084A               	movf	main@i,w
  2796  008A  3E3A               	addlw	main@bf& (0+255)
  2797  008B  0086               	movwf	6
  2798  008C  0187               	clrf	7
  2799  008D  084A               	movf	main@i,w
  2800  008E  3C55               	sublw	85
  2801  008F  0081               	movwf	1
  2802  0090  3010               	movlw	16
  2803  0091  0ACA               	incf	main@i,f
  2804  0092  024A               	subwf	main@i,w
  2805  0093  1C03               	skipc
  2806  0094  2889               	goto	l2793
  2807  0095  303A               	movlw	main@bf& (0+255)
  2808                           
  2809                           ;main.c: 58: eepromTxBytes(0, bf, 16);
  2810  0096  01A4               	clrf	eepromTxBytes@address
  2811  0097  01A5               	clrf	eepromTxBytes@address+1
  2812  0098  00A6               	movwf	eepromTxBytes@data
  2813  0099  3010               	movlw	16
  2814  009A  00A7               	movwf	eepromTxBytes@size
  2815  009B  20EC  3180         	fcall	_eepromTxBytes
  2816                           
  2817                           ;main.c: 59: for(i=0;i<16;i++)
  2818  009D  0020               	movlb	0	; select bank0
  2819  009E  01CA               	clrf	main@i
  2820  009F                     l2807:	
  2821                           
  2822                           ;main.c: 60: bf[i] = 0;
  2823  009F  084A               	movf	main@i,w
  2824  00A0  3E3A               	addlw	main@bf& (0+255)
  2825  00A1  0086               	movwf	6
  2826  00A2  3010               	movlw	16
  2827  00A3  0187               	clrf	7
  2828  00A4  0181               	clrf	1
  2829  00A5  0ACA               	incf	main@i,f
  2830  00A6  024A               	subwf	main@i,w
  2831  00A7  1C03               	skipc
  2832  00A8  289F               	goto	l2807
  2833  00A9  303A               	movlw	main@bf& (0+255)
  2834                           
  2835                           ;main.c: 61: eepromRxBytes(0, bf, 16);
  2836  00AA  01A4               	clrf	eepromRxBytes@address
  2837  00AB  01A5               	clrf	eepromRxBytes@address+1
  2838  00AC  00A6               	movwf	eepromRxBytes@data
  2839  00AD  3010               	movlw	16
  2840  00AE  00A7               	movwf	eepromRxBytes@size
  2841  00AF  2108  3180         	fcall	_eepromRxBytes
  2842                           
  2843                           ;main.c: 63: for(i=0;i<16;i++)
  2844  00B1  0020               	movlb	0	; select bank0
  2845  00B2  01CA               	clrf	main@i
  2846  00B3                     l2821:	
  2847                           
  2848                           ;main.c: 64: if ((0x55-i) != bf[i])
  2849  00B3  01B9               	clrf	??_main+1
  2850  00B4  084A               	movf	main@i,w
  2851  00B5  3C55               	sublw	85
  2852  00B6  00B8               	movwf	??_main
  2853  00B7  1C03               	skipc
  2854  00B8  03B9               	decf	??_main+1,f
  2855  00B9  084A               	movf	main@i,w
  2856  00BA  3E3A               	addlw	main@bf& (0+255)
  2857  00BB  0086               	movwf	6
  2858  00BC  0187               	clrf	7
  2859  00BD  0801               	movf	1,w
  2860  00BE  0638               	xorwf	??_main,w
  2861  00BF  0439               	iorwf	??_main+1,w
  2862  00C0  1D03               	btfss	3,2
  2863  00C1                     l546:	
  2864                           ;main.c: 65: while(1);
  2865                           
  2866  00C1  28C1               	goto	l546
  2867  00C2  3010               	movlw	16
  2868  00C3  0ACA               	incf	main@i,f
  2869  00C4  024A               	subwf	main@i,w
  2870  00C5  1C03               	skipc
  2871  00C6  28B3               	goto	l2821
  2872  00C7                     l548:	
  2873                           ;main.c: 67: while(1);
  2874                           
  2875  00C7  28C7               	goto	l548
  2876  00C8                     __end_of_main:	
  2877  00C8                     __ptext14:	
  2878 ;; *************** function _SoftI2cStop *****************
  2879 ;; Defined at:
  2880 ;;		line 70 in file "../../../src/bsp/softI2c.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;		None
  2885 ;; Return value:  Size  Location     Type
  2886 ;;		None               void
  2887 ;; Registers used:
  2888 ;;		wreg, status,2, status,0, pclath, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/1
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2894 ;;      Params:         0       0       0       0
  2895 ;;      Locals:         0       0       0       0
  2896 ;;      Temps:          0       0       0       0
  2897 ;;      Totals:         0       0       0       0
  2898 ;;Total ram usage:        0 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    7
  2901 ;; This function calls:
  2902 ;;		_SoftI2cNop
  2903 ;; This function is called by:
  2904 ;;		_SoftI2cInit
  2905 ;;		_eepromRxBytes
  2906 ;;		_eepromTxBytes
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           
  2911                           ;psect for function _SoftI2cStop
  2912  00C8                     _SoftI2cStop:	
  2913  00C8                     l1973:	
  2914                           ;incstack = 0
  2915                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  2916                           
  2917                           
  2918                           ;softI2c.c: 72: TRISBbits.TRISB4 = 0;
  2919  00C8  0021               	movlb	1	; select bank1
  2920  00C9  120D               	bcf	13,4	;volatile
  2921                           
  2922                           ;softI2c.c: 74: LATBbits.LATB4 = 0;
  2923  00CA  0022               	movlb	2	; select bank2
  2924  00CB  120D               	bcf	13,4	;volatile
  2925                           
  2926                           ;softI2c.c: 75: SoftI2cNop();
  2927  00CC  2192  3180         	fcall	_SoftI2cNop
  2928                           
  2929                           ;softI2c.c: 77: LATBbits.LATB6 = 1;
  2930  00CE  0022               	movlb	2	; select bank2
  2931  00CF  170D               	bsf	13,6	;volatile
  2932                           
  2933                           ;softI2c.c: 78: SoftI2cNop();
  2934  00D0  2192  3180         	fcall	_SoftI2cNop
  2935                           
  2936                           ;softI2c.c: 79: LATBbits.LATB4 = 1;
  2937  00D2  0022               	movlb	2	; select bank2
  2938  00D3  160D               	bsf	13,4	;volatile
  2939                           
  2940                           ;softI2c.c: 80: SoftI2cNop();
  2941  00D4  2192  3180         	fcall	_SoftI2cNop
  2942                           
  2943                           ;softI2c.c: 81: SoftI2cNop();
  2944  00D6  2992               	ljmp	l1897
  2945  00D7                     __end_of_SoftI2cStop:	
  2946  00D7                     __ptext17:	
  2947 ;; *************** function _SoftI2cRepeatedStart *****************
  2948 ;; Defined at:
  2949 ;;		line 49 in file "../../../src/bsp/softI2c.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;		None               void
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0, pclath, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2963 ;;      Params:         0       0       0       0
  2964 ;;      Locals:         0       0       0       0
  2965 ;;      Temps:          0       0       0       0
  2966 ;;      Totals:         0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    7
  2970 ;; This function calls:
  2971 ;;		_SoftI2cNop
  2972 ;; This function is called by:
  2973 ;;		_eepromRxBytes
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           
  2978                           ;psect for function _SoftI2cRepeatedStart
  2979  00D7                     _SoftI2cRepeatedStart:	
  2980                           
  2981                           ;softI2c.c: 51: TRISBbits.TRISB4 = 0;
  2982                           
  2983                           ;incstack = 0
  2984                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  2985  00D7  0021               	movlb	1	; select bank1
  2986  00D8  120D               	bcf	13,4	;volatile
  2987                           
  2988                           ;softI2c.c: 53: LATBbits.LATB6 = 0;
  2989  00D9  0022               	movlb	2	; select bank2
  2990  00DA  130D               	bcf	13,6	;volatile
  2991                           
  2992                           ;softI2c.c: 54: SoftI2cNop();
  2993  00DB  2192  3180         	fcall	_SoftI2cNop
  2994                           
  2995                           ;softI2c.c: 56: LATBbits.LATB4 = 1;
  2996  00DD  0022               	movlb	2	; select bank2
  2997  00DE  160D               	bsf	13,4	;volatile
  2998                           
  2999                           ;softI2c.c: 57: SoftI2cNop();
  3000  00DF  2192  3180         	fcall	_SoftI2cNop
  3001                           
  3002                           ;softI2c.c: 59: LATBbits.LATB6 = 1;
  3003  00E1  0022               	movlb	2	; select bank2
  3004  00E2  170D               	bsf	13,6	;volatile
  3005                           
  3006                           ;softI2c.c: 60: SoftI2cNop();
  3007  00E3  2192  3180         	fcall	_SoftI2cNop
  3008                           
  3009                           ;softI2c.c: 62: LATBbits.LATB4 = 0;
  3010  00E5  0022               	movlb	2	; select bank2
  3011  00E6  120D               	bcf	13,4	;volatile
  3012                           
  3013                           ;softI2c.c: 63: SoftI2cNop();
  3014  00E7  2192  3180         	fcall	_SoftI2cNop
  3015                           
  3016                           ;softI2c.c: 65: LATBbits.LATB6 = 0;
  3017  00E9  0022               	movlb	2	; select bank2
  3018  00EA  130D               	bcf	13,6	;volatile
  3019                           
  3020                           ;softI2c.c: 66: SoftI2cNop();
  3021  00EB  2992               	ljmp	l1897
  3022  00EC                     __end_of_SoftI2cRepeatedStart:	
  3023  00EC                     __ptext9:	
  3024 ;; *************** function _eepromTxBytes *****************
  3025 ;; Defined at:
  3026 ;;		line 25 in file "../../../src/devices/24aa64.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  address         2    4[BANK0 ] unsigned int 
  3029 ;;  data            1    6[BANK0 ] PTR unsigned char 
  3030 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), main@bf(16), handleFwWrite@packet..(21), 
  3031 ;;		 -> eepromTxByte@byte(1), NULL(0), 
  3032 ;;  size            1    7[BANK0 ] unsigned char 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;		None
  3035 ;; Return value:  Size  Location     Type
  3036 ;;		None               void
  3037 ;; Registers used:
  3038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 1F/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3044 ;;      Params:         0       4       0       0
  3045 ;;      Locals:         0       0       0       0
  3046 ;;      Temps:          0       0       0       0
  3047 ;;      Totals:         0       4       0       0
  3048 ;;Total ram usage:        4 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    8
  3051 ;; This function calls:
  3052 ;;		_SoftI2cStart
  3053 ;;		_SoftI2cStop
  3054 ;;		_SoftI2cTxByte
  3055 ;; This function is called by:
  3056 ;;		_handleFwWrite
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           
  3062                           ;psect for function _eepromTxBytes
  3063  00EC                     _eepromTxBytes:	
  3064                           
  3065                           ;24aa64.c: 28: SoftI2cStart();
  3066                           
  3067                           ;incstack = 0
  3068                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3069  00EC  2198  3180         	fcall	_SoftI2cStart
  3070                           
  3071                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  3072  00EE  30A0               	movlw	160
  3073  00EF  212C  3180         	fcall	_SoftI2cTxByte
  3074                           
  3075                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  3076  00F1  0020               	movlb	0	; select bank0
  3077  00F2  0825               	movf	eepromTxBytes@address+1,w
  3078  00F3  212C  3180         	fcall	_SoftI2cTxByte
  3079                           
  3080                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  3081  00F5  0020               	movlb	0	; select bank0
  3082  00F6  0824               	movf	eepromTxBytes@address,w
  3083  00F7  212C  3180         	fcall	_SoftI2cTxByte
  3084  00F9                     l2217:	
  3085                           ;24aa64.c: 33: while (size != 0)
  3086                           
  3087  00F9  0020               	movlb	0	; select bank0
  3088  00FA  08A7               	movf	eepromTxBytes@size,f
  3089  00FB  1903               	btfsc	3,2
  3090  00FC  2907               	goto	l2219
  3091                           
  3092                           ;24aa64.c: 34: {
  3093                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  3094  00FD  0826               	movf	eepromTxBytes@data,w
  3095  00FE  0086               	movwf	6
  3096  00FF  0187               	clrf	7
  3097  0100  0801               	movf	1,w
  3098  0101  212C  3180         	fcall	_SoftI2cTxByte
  3099                           
  3100                           ;24aa64.c: 37: data++;
  3101  0103  0020               	movlb	0	; select bank0
  3102  0104  0AA6               	incf	eepromTxBytes@data,f
  3103                           
  3104                           ;24aa64.c: 38: size--;
  3105  0105  03A7               	decf	eepromTxBytes@size,f
  3106  0106  28F9               	goto	l2217
  3107  0107                     l2219:	
  3108                           
  3109                           ;24aa64.c: 39: }
  3110                           ;24aa64.c: 40: SoftI2cStop();
  3111  0107  28C8               	ljmp	l1973
  3112  0108                     __end_of_eepromTxBytes:	
  3113  0108                     __ptext12:	
  3114 ;; *************** function _eepromRxBytes *****************
  3115 ;; Defined at:
  3116 ;;		line 4 in file "../../../src/devices/24aa64.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  address         2    4[BANK0 ] unsigned int 
  3119 ;;  data            1    6[BANK0 ] PTR unsigned char 
  3120 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), main@bf(16), handleFwRead@packet..(21), 
  3121 ;;		 -> handleFwWrite@packet..(21), handleFwCmd@packet..(21), eepromRxByte@dat(1), NULL(0), 
  3122 ;;  size            1    7[BANK0 ] unsigned char 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;		None               void
  3127 ;; Registers used:
  3128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 1F/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3134 ;;      Params:         0       4       0       0
  3135 ;;      Locals:         0       0       0       0
  3136 ;;      Temps:          0       0       0       0
  3137 ;;      Totals:         0       4       0       0
  3138 ;;Total ram usage:        4 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    8
  3141 ;; This function calls:
  3142 ;;		_SoftI2cRepeatedStart
  3143 ;;		_SoftI2cRxByte
  3144 ;;		_SoftI2cStart
  3145 ;;		_SoftI2cStop
  3146 ;;		_SoftI2cTxByte
  3147 ;; This function is called by:
  3148 ;;		_handleFwCmd
  3149 ;;		_handleFwWrite
  3150 ;;		_handleFwRead
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           
  3156                           ;psect for function _eepromRxBytes
  3157  0108                     _eepromRxBytes:	
  3158  0108                     l2197:	
  3159                           ;incstack = 0
  3160                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3161                           
  3162                           
  3163                           ;24aa64.c: 7: SoftI2cStart();
  3164  0108  2198  3180         	fcall	_SoftI2cStart
  3165                           
  3166                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  3167  010A  30A0               	movlw	160
  3168  010B  212C  3180         	fcall	_SoftI2cTxByte
  3169                           
  3170                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  3171  010D  0020               	movlb	0	; select bank0
  3172  010E  0825               	movf	eepromRxBytes@address+1,w
  3173  010F  212C  3180         	fcall	_SoftI2cTxByte
  3174                           
  3175                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  3176  0111  0020               	movlb	0	; select bank0
  3177  0112  0824               	movf	eepromRxBytes@address,w
  3178  0113  212C  3180         	fcall	_SoftI2cTxByte
  3179                           
  3180                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  3181  0115  20D7  3180         	fcall	_SoftI2cRepeatedStart
  3182                           
  3183                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  3184  0117  30A1               	movlw	161
  3185  0118  212C  3180         	fcall	_SoftI2cTxByte
  3186  011A                     l2205:	
  3187                           ;24aa64.c: 15: while (size != 0)
  3188                           
  3189  011A  0020               	movlb	0	; select bank0
  3190  011B  08A7               	movf	eepromRxBytes@size,f
  3191  011C  1903               	btfsc	3,2
  3192  011D  292B               	goto	l2207
  3193                           
  3194                           ;24aa64.c: 16: {
  3195                           ;24aa64.c: 17: size--;
  3196  011E  03A7               	decf	eepromRxBytes@size,f
  3197                           
  3198                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  3199  011F  0826               	movf	eepromRxBytes@data,w
  3200  0120  0086               	movwf	6
  3201  0121  3000               	movlw	0
  3202  0122  0187               	clrf	7
  3203  0123  08A7               	movf	eepromRxBytes@size,f
  3204  0124  1D03               	skipz
  3205  0125  3001               	movlw	1
  3206  0126  215A  3180         	fcall	_SoftI2cRxByte
  3207  0128  0081               	movwf	1
  3208                           
  3209                           ;24aa64.c: 21: data++;
  3210  0129  0AA6               	incf	eepromRxBytes@data,f
  3211  012A  291A               	goto	l2205
  3212  012B                     l2207:	
  3213                           
  3214                           ;24aa64.c: 22: }
  3215                           ;24aa64.c: 23: SoftI2cStop();
  3216  012B  28C8               	ljmp	l1973
  3217  012C                     __end_of_eepromRxBytes:	
  3218  012C                     __ptext13:	
  3219 ;; *************** function _SoftI2cTxByte *****************
  3220 ;; Defined at:
  3221 ;;		line 84 in file "../../../src/bsp/softI2c.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  data            1    wreg     unsigned char 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  data            1    2[BANK0 ] unsigned char 
  3226 ;;  i               1    3[BANK0 ] unsigned char 
  3227 ;;  ack             1    0        unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      unsigned char 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, status,0, pclath, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/1
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3237 ;;      Params:         0       0       0       0
  3238 ;;      Locals:         0       3       0       0
  3239 ;;      Temps:          0       0       0       0
  3240 ;;      Totals:         0       3       0       0
  3241 ;;Total ram usage:        3 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    7
  3244 ;; This function calls:
  3245 ;;		_SoftI2cNop
  3246 ;; This function is called by:
  3247 ;;		_SoftI2cInit
  3248 ;;		_eepromRxBytes
  3249 ;;		_eepromTxBytes
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           
  3254                           ;psect for function _SoftI2cTxByte
  3255  012C                     _SoftI2cTxByte:	
  3256                           
  3257                           ;incstack = 0
  3258                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  3259                           ;SoftI2cTxByte@data stored from wreg
  3260  012C  0020               	movlb	0	; select bank0
  3261  012D  00A2               	movwf	SoftI2cTxByte@data
  3262                           
  3263                           ;softI2c.c: 86: UI08_t i;
  3264                           ;softI2c.c: 88: for(i = 0x80; i != 0; i >>= 1)
  3265  012E  3080               	movlw	128
  3266  012F  00A3               	movwf	SoftI2cTxByte@i
  3267  0130                     l32:	
  3268                           
  3269                           ;softI2c.c: 89: {
  3270                           ;softI2c.c: 90: LATBbits.LATB6 = 0;
  3271  0130  0022               	movlb	2	; select bank2
  3272  0131  130D               	bcf	13,6	;volatile
  3273                           
  3274                           ;softI2c.c: 91: SoftI2cNop();
  3275  0132  2192  3180         	fcall	_SoftI2cNop
  3276                           
  3277                           ;softI2c.c: 93: if(data & i)
  3278  0134  0020               	movlb	0	; select bank0
  3279  0135  0822               	movf	SoftI2cTxByte@data,w
  3280  0136  0523               	andwf	SoftI2cTxByte@i,w
  3281  0137  1903               	btfsc	3,2
  3282  0138  293C               	goto	l34
  3283                           
  3284                           ;softI2c.c: 94: LATBbits.LATB4 = 1;
  3285  0139  0022               	movlb	2	; select bank2
  3286  013A  160D               	bsf	13,4	;volatile
  3287  013B  293E               	goto	l35
  3288  013C                     l34:	
  3289                           
  3290                           ;softI2c.c: 95: else
  3291                           ;softI2c.c: 96: LATBbits.LATB4 = 0;
  3292  013C  0022               	movlb	2	; select bank2
  3293  013D  120D               	bcf	13,4	;volatile
  3294  013E                     l35:	
  3295                           
  3296                           ;softI2c.c: 97: TRISBbits.TRISB4 = 0;
  3297  013E  0021               	movlb	1	; select bank1
  3298  013F  120D               	bcf	13,4	;volatile
  3299                           
  3300                           ;softI2c.c: 99: SoftI2cNop();
  3301  0140  2192  3180         	fcall	_SoftI2cNop
  3302                           
  3303                           ;softI2c.c: 101: LATBbits.LATB6 = 1;
  3304  0142  0022               	movlb	2	; select bank2
  3305  0143  170D               	bsf	13,6	;volatile
  3306                           
  3307                           ;softI2c.c: 102: SoftI2cNop();
  3308  0144  2192  3180         	fcall	_SoftI2cNop
  3309  0146  0020               	movlb	0	; select bank0
  3310  0147  36A3               	lsrf	SoftI2cTxByte@i,f
  3311  0148  08A3               	movf	SoftI2cTxByte@i,f
  3312  0149  1D03               	skipz
  3313  014A  2930               	goto	l32
  3314                           
  3315                           ;softI2c.c: 106: }
  3316                           ;softI2c.c: 109: LATBbits.LATB6 = 0;
  3317  014B  0022               	movlb	2	; select bank2
  3318  014C  130D               	bcf	13,6	;volatile
  3319                           
  3320                           ;softI2c.c: 110: SoftI2cNop();
  3321  014D  2192  3180         	fcall	_SoftI2cNop
  3322                           
  3323                           ;softI2c.c: 112: TRISBbits.TRISB4 = 1;
  3324  014F  0021               	movlb	1	; select bank1
  3325  0150  160D               	bsf	13,4	;volatile
  3326                           
  3327                           ;softI2c.c: 114: LATBbits.LATB6 = 1;
  3328  0151  0022               	movlb	2	; select bank2
  3329  0152  170D               	bsf	13,6	;volatile
  3330                           
  3331                           ;softI2c.c: 115: SoftI2cNop();
  3332  0153  2192  3180         	fcall	_SoftI2cNop
  3333  0155  0020               	movlb	0	; select bank0
  3334  0156  080D               	movf	13,w	;volatile
  3335                           
  3336                           ;softI2c.c: 119: LATBbits.LATB6 = 0;
  3337  0157  0022               	movlb	2	; select bank2
  3338  0158  130D               	bcf	13,6	;volatile
  3339                           
  3340                           ;softI2c.c: 120: SoftI2cNop();
  3341  0159  2992               	ljmp	l1897
  3342  015A                     __end_of_SoftI2cTxByte:	
  3343  015A                     __ptext16:	
  3344 ;; *************** function _SoftI2cRxByte *****************
  3345 ;; Defined at:
  3346 ;;		line 126 in file "../../../src/bsp/softI2c.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  ack             1    wreg     unsigned char 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  ack             1    1[BANK0 ] unsigned char 
  3351 ;;  i               1    3[BANK0 ] unsigned char 
  3352 ;;  data            1    2[BANK0 ] unsigned char 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;                  1    wreg      unsigned char 
  3355 ;; Registers used:
  3356 ;;		wreg, status,2, status,0, pclath, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 1F/0
  3359 ;;		On exit  : 1F/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3362 ;;      Params:         0       0       0       0
  3363 ;;      Locals:         0       3       0       0
  3364 ;;      Temps:          0       0       0       0
  3365 ;;      Totals:         0       3       0       0
  3366 ;;Total ram usage:        3 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    7
  3369 ;; This function calls:
  3370 ;;		_SoftI2cNop
  3371 ;; This function is called by:
  3372 ;;		_eepromRxBytes
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           
  3377                           ;psect for function _SoftI2cRxByte
  3378  015A                     _SoftI2cRxByte:	
  3379                           
  3380                           ;incstack = 0
  3381                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  3382                           ;SoftI2cRxByte@ack stored from wreg
  3383  015A  00A1               	movwf	SoftI2cRxByte@ack
  3384                           
  3385                           ;softI2c.c: 128: UI08_t data=0x00;
  3386  015B  01A2               	clrf	SoftI2cRxByte@data
  3387                           
  3388                           ;softI2c.c: 129: UI08_t i;
  3389                           ;softI2c.c: 131: LATBbits.LATB6 = 0;
  3390  015C  0022               	movlb	2	; select bank2
  3391  015D  130D               	bcf	13,6	;volatile
  3392                           
  3393                           ;softI2c.c: 132: SoftI2cNop();
  3394  015E  2192  3180         	fcall	_SoftI2cNop
  3395                           
  3396                           ;softI2c.c: 133: TRISBbits.TRISB4 = 1;
  3397  0160  0021               	movlb	1	; select bank1
  3398  0161  160D               	bsf	13,4	;volatile
  3399                           
  3400                           ;softI2c.c: 134: LATBbits.LATB4 = 1;
  3401  0162  0022               	movlb	2	; select bank2
  3402  0163  160D               	bsf	13,4	;volatile
  3403                           
  3404                           ;softI2c.c: 136: for (i = 0x80; i != 0; i >>= 1)
  3405  0164  3080               	movlw	128
  3406  0165  0020               	movlb	0	; select bank0
  3407  0166  00A3               	movwf	SoftI2cRxByte@i
  3408  0167                     l39:	
  3409                           
  3410                           ;softI2c.c: 137: {
  3411                           ;softI2c.c: 138: LATBbits.LATB6 = 0;
  3412  0167  0022               	movlb	2	; select bank2
  3413  0168  130D               	bcf	13,6	;volatile
  3414                           
  3415                           ;softI2c.c: 139: SoftI2cNop();
  3416  0169  2192  3180         	fcall	_SoftI2cNop
  3417                           
  3418                           ;softI2c.c: 140: LATBbits.LATB6 = 1;
  3419  016B  0022               	movlb	2	; select bank2
  3420  016C  170D               	bsf	13,6	;volatile
  3421                           
  3422                           ;softI2c.c: 141: SoftI2cNop();
  3423  016D  2192  3180         	fcall	_SoftI2cNop
  3424                           
  3425                           ;softI2c.c: 146: if(PORTBbits.RB4 != 0)
  3426  016F  0020               	movlb	0	; select bank0
  3427                           
  3428                           ;softI2c.c: 147: data |= i;
  3429  0170  0823               	movf	SoftI2cRxByte@i,w
  3430  0171  1A0D               	btfsc	13,4	;volatile
  3431  0172  04A2               	iorwf	SoftI2cRxByte@data,f
  3432  0173  36A3               	lsrf	SoftI2cRxByte@i,f
  3433  0174  08A3               	movf	SoftI2cRxByte@i,f
  3434  0175  1D03               	skipz
  3435  0176  2967               	goto	l39
  3436                           
  3437                           ;softI2c.c: 149: }
  3438                           ;softI2c.c: 151: LATBbits.LATB6 = 0;
  3439  0177  0022               	movlb	2	; select bank2
  3440  0178  130D               	bcf	13,6	;volatile
  3441                           
  3442                           ;softI2c.c: 152: SoftI2cNop();
  3443  0179  2192  3180         	fcall	_SoftI2cNop
  3444                           
  3445                           ;softI2c.c: 154: TRISBbits.TRISB4 = 0;
  3446  017B  0021               	movlb	1	; select bank1
  3447  017C  120D               	bcf	13,4	;volatile
  3448                           
  3449                           ;softI2c.c: 155: if(ack)
  3450  017D  0020               	movlb	0	; select bank0
  3451  017E  0821               	movf	SoftI2cRxByte@ack,w
  3452  017F  1903               	btfsc	3,2
  3453  0180  2984               	goto	l42
  3454                           
  3455                           ;softI2c.c: 156: {
  3456                           ;softI2c.c: 157: LATBbits.LATB4 = 0;
  3457  0181  0022               	movlb	2	; select bank2
  3458  0182  120D               	bcf	13,4	;volatile
  3459                           
  3460                           ;softI2c.c: 158: }
  3461  0183  2986               	goto	l2029
  3462  0184                     l42:	
  3463                           
  3464                           ;softI2c.c: 159: else
  3465                           ;softI2c.c: 160: {
  3466                           ;softI2c.c: 161: LATBbits.LATB4 = 1;
  3467  0184  0022               	movlb	2	; select bank2
  3468  0185  160D               	bsf	13,4	;volatile
  3469  0186                     l2029:	
  3470                           
  3471                           ;softI2c.c: 162: }
  3472                           ;softI2c.c: 163: SoftI2cNop();
  3473  0186  2192  3180         	fcall	_SoftI2cNop
  3474                           
  3475                           ;softI2c.c: 165: LATBbits.LATB6 = 1;
  3476  0188  0022               	movlb	2	; select bank2
  3477  0189  170D               	bsf	13,6	;volatile
  3478                           
  3479                           ;softI2c.c: 166: SoftI2cNop();
  3480  018A  2192  3180         	fcall	_SoftI2cNop
  3481                           
  3482                           ;softI2c.c: 168: LATBbits.LATB6 = 0;
  3483  018C  0022               	movlb	2	; select bank2
  3484  018D  130D               	bcf	13,6	;volatile
  3485                           
  3486                           ;softI2c.c: 169: SoftI2cNop();
  3487  018E  2192               	fcall	_SoftI2cNop
  3488                           
  3489                           ;softI2c.c: 171: return data;
  3490  018F  0020               	movlb	0	; select bank0
  3491  0190  0822               	movf	SoftI2cRxByte@data,w
  3492  0191  0008               	return
  3493  0192                     __end_of_SoftI2cRxByte:	
  3494  0192                     __ptext18:	
  3495 ;; *************** function _SoftI2cNop *****************
  3496 ;; Defined at:
  3497 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;		None
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;		None
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/2
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3511 ;;      Params:         0       0       0       0
  3512 ;;      Locals:         0       0       0       0
  3513 ;;      Temps:          0       1       0       0
  3514 ;;      Totals:         0       1       0       0
  3515 ;;Total ram usage:        1 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    6
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_SoftI2cStart
  3522 ;;		_SoftI2cRepeatedStart
  3523 ;;		_SoftI2cStop
  3524 ;;		_SoftI2cTxByte
  3525 ;;		_SoftI2cRxByte
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           
  3530                           ;psect for function _SoftI2cNop
  3531  0192                     _SoftI2cNop:	
  3532  0192                     l1897:	
  3533                           ;incstack = 0
  3534                           ; Regs used in _SoftI2cNop: [wreg]
  3535                           
  3536                           
  3537                           ;softI2c.c: 9: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3538  0192  300D               	movlw	13
  3539  0193  0020               	movlb	0	; select bank0
  3540  0194  00A0               	movwf	??_SoftI2cNop
  3541  0195                     u2037:	
  3542  0195  0BA0               	decfsz	??_SoftI2cNop,f
  3543  0196  2995               	goto	u2037
  3544  0197  0008               	return
  3545  0198                     __end_of_SoftI2cNop:	
  3546  0198                     __ptext15:	
  3547 ;; *************** function _SoftI2cStart *****************
  3548 ;; Defined at:
  3549 ;;		line 35 in file "../../../src/bsp/softI2c.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;		None               void
  3556 ;; Registers used:
  3557 ;;		wreg, status,2, status,0, pclath, cstack
  3558 ;; Tracked objects:
  3559 ;;		On entry : 1E/1
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3563 ;;      Params:         0       0       0       0
  3564 ;;      Locals:         0       0       0       0
  3565 ;;      Temps:          0       0       0       0
  3566 ;;      Totals:         0       0       0       0
  3567 ;;Total ram usage:        0 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    7
  3570 ;; This function calls:
  3571 ;;		_SoftI2cNop
  3572 ;; This function is called by:
  3573 ;;		_SoftI2cInit
  3574 ;;		_eepromRxBytes
  3575 ;;		_eepromTxBytes
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           
  3580                           ;psect for function _SoftI2cStart
  3581  0198                     _SoftI2cStart:	
  3582                           
  3583                           ;softI2c.c: 37: TRISBbits.TRISB4 = 0;
  3584                           
  3585                           ;incstack = 0
  3586                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  3587  0198  0021               	movlb	1	; select bank1
  3588  0199  120D               	bcf	13,4	;volatile
  3589                           
  3590                           ;softI2c.c: 39: LATBbits.LATB6 = 1;
  3591  019A  0022               	movlb	2	; select bank2
  3592  019B  170D               	bsf	13,6	;volatile
  3593                           
  3594                           ;softI2c.c: 40: SoftI2cNop();
  3595  019C  2192  3180         	fcall	_SoftI2cNop
  3596                           
  3597                           ;softI2c.c: 42: LATBbits.LATB4 = 0;
  3598  019E  0022               	movlb	2	; select bank2
  3599  019F  120D               	bcf	13,4	;volatile
  3600                           
  3601                           ;softI2c.c: 43: SoftI2cNop();
  3602  01A0  2192  3180         	fcall	_SoftI2cNop
  3603                           
  3604                           ;softI2c.c: 44: LATBbits.LATB6 = 0;
  3605  01A2  0022               	movlb	2	; select bank2
  3606  01A3  130D               	bcf	13,6	;volatile
  3607                           
  3608                           ;softI2c.c: 45: SoftI2cNop();
  3609  01A4  2992               	ljmp	l1897
  3610  01A5                     __end_of_SoftI2cStart:	
  3611  01A5                     __ptext34:	
  3612 ;; *************** function _AdcInit *****************
  3613 ;; Defined at:
  3614 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;		None               void
  3621 ;; Registers used:
  3622 ;;		wreg, status,2
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/2
  3625 ;;		On exit  : 1F/1
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3628 ;;      Params:         0       0       0       0
  3629 ;;      Locals:         0       0       0       0
  3630 ;;      Temps:          0       0       0       0
  3631 ;;      Totals:         0       0       0       0
  3632 ;;Total ram usage:        0 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    6
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_main
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _AdcInit
  3644  01A5                     _AdcInit:	
  3645                           
  3646                           ;adc16.c: 6: ANSELA = 0;
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _AdcInit: [wreg+status,2]
  3650  01A5  0023               	movlb	3	; select bank3
  3651  01A6  018C               	clrf	12	;volatile
  3652                           
  3653                           ;adc16.c: 7: ANSELB = 0;
  3654  01A7  018D               	clrf	13	;volatile
  3655                           
  3656                           ;adc16.c: 8: ANSELC = 0;
  3657  01A8  018E               	clrf	14	;volatile
  3658                           
  3659                           ;adc16.c: 10: FVRCON = 0b11100001;
  3660  01A9  30E1               	movlw	225
  3661  01AA  0022               	movlb	2	; select bank2
  3662  01AB  0097               	movwf	23	;volatile
  3663                           
  3664                           ;adc16.c: 12: ADCON2 = 0b00000000;
  3665  01AC  0021               	movlb	1	; select bank1
  3666  01AD  019F               	clrf	31	;volatile
  3667                           
  3668                           ;adc16.c: 13: ADCON1 = 0b11110000;
  3669  01AE  30F0               	movlw	240
  3670  01AF  009E               	movwf	30	;volatile
  3671                           
  3672                           ;adc16.c: 14: ADCON0 = 0b00000000;
  3673  01B0  019D               	clrf	29	;volatile
  3674                           
  3675                           ;adc16.c: 16: ADCON0 = 0b00010011;
  3676  01B1  3013               	movlw	19
  3677  01B2  009D               	movwf	29	;volatile
  3678  01B3  0008               	return
  3679  01B4                     __end_of_AdcInit:	
  3680  01B4                     __ptext33:	
  3681 ;; *************** function _ExtIntInit *****************
  3682 ;; Defined at:
  3683 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;		None
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;		None
  3688 ;; Return value:  Size  Location     Type
  3689 ;;		None               void
  3690 ;; Registers used:
  3691 ;;		None
  3692 ;; Tracked objects:
  3693 ;;		On entry : 1F/1
  3694 ;;		On exit  : 1F/1
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3697 ;;      Params:         0       0       0       0
  3698 ;;      Locals:         0       0       0       0
  3699 ;;      Temps:          0       0       0       0
  3700 ;;      Totals:         0       0       0       0
  3701 ;;Total ram usage:        0 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; Hardware stack levels required when called:    6
  3704 ;; This function calls:
  3705 ;;		Nothing
  3706 ;; This function is called by:
  3707 ;;		_main
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           
  3712                           ;psect for function _ExtIntInit
  3713  01B4                     _ExtIntInit:	
  3714                           
  3715                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3716                           
  3717                           ;incstack = 0
  3718                           ; Regs used in _ExtIntInit: []
  3719  01B4  1315               	bcf	21,6	;volatile
  3720                           
  3721                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3722  01B5  108B               	bcf	11,1	;volatile
  3723                           
  3724                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3725  01B6  160B               	bsf	11,4	;volatile
  3726                           
  3727                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3728  01B7  178B               	bsf	11,7	;volatile
  3729  01B8  0008               	return
  3730  01B9                     __end_of_ExtIntInit:	
  3731  01B9                     __ptext1:	
  3732 ;; *************** function _SysInitGpio *****************
  3733 ;; Defined at:
  3734 ;;		line 28 in file "../../../src/node/main.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;		None
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;		None
  3739 ;; Return value:  Size  Location     Type
  3740 ;;		None               void
  3741 ;; Registers used:
  3742 ;;		None
  3743 ;; Tracked objects:
  3744 ;;		On entry : 17F/4
  3745 ;;		On exit  : 17F/2
  3746 ;;		Unchanged: 160/0
  3747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3748 ;;      Params:         0       0       0       0
  3749 ;;      Locals:         0       0       0       0
  3750 ;;      Temps:          0       0       0       0
  3751 ;;      Totals:         0       0       0       0
  3752 ;;Total ram usage:        0 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    6
  3755 ;; This function calls:
  3756 ;;		Nothing
  3757 ;; This function is called by:
  3758 ;;		_main
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           
  3763                           ;psect for function _SysInitGpio
  3764  01B9                     _SysInitGpio:	
  3765                           
  3766                           ;incstack = 0
  3767                           ; Regs used in _SysInitGpio: []
  3768                           ;main.c: 30: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  3769  01B9  0021               	movlb	1	; select bank1
  3770  01BA  150C               	bsf	12,2	;volatile
  3771  01BB  120C               	bcf	12,4	;volatile
  3772  01BC  128C               	bcf	12,5	;volatile
  3773  01BD  0022               	movlb	2	; select bank2
  3774  01BE  120C               	bcf	12,4	;volatile
  3775  01BF  128C               	bcf	12,5	;volatile
  3776                           
  3777                           ;main.c: 31: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  3778  01C0  0021               	movlb	1	; select bank1
  3779  01C1  120D               	bcf	13,4	;volatile
  3780  01C2  130D               	bcf	13,6	;volatile
  3781  01C3  138D               	bcf	13,7	;volatile
  3782  01C4  168D               	bsf	13,5	;volatile
  3783                           
  3784                           ;main.c: 32: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; PORTCbits
  3785  01C5  108E               	bcf	14,1	;volatile
  3786  01C6  110E               	bcf	14,2	;volatile
  3787  01C7  120E               	bcf	14,4	;volatile
  3788  01C8  130E               	bcf	14,6	;volatile
  3789  01C9  138E               	bcf	14,7	;volatile
  3790  01CA  140E               	bsf	14,0	;volatile
  3791  01CB  158E               	bsf	14,3	;volatile
  3792  01CC  168E               	bsf	14,5	;volatile
  3793  01CD  0022               	movlb	2	; select bank2
  3794  01CE  108E               	bcf	14,1	;volatile
  3795  01CF  110E               	bcf	14,2	;volatile
  3796  01D0  120E               	bcf	14,4	;volatile
  3797  01D1  0020               	movlb	0	; select bank0
  3798  01D2  170E               	bsf	14,6	;volatile
  3799  01D3  138E               	bcf	14,7	;volatile
  3800                           
  3801                           ;main.c: 34: LATCbits.LATC1 = 0;
  3802  01D4  0022               	movlb	2	; select bank2
  3803  01D5  108E               	bcf	14,1	;volatile
  3804                           
  3805                           ;main.c: 35: LATCbits.LATC2 = 0;
  3806  01D6  110E               	bcf	14,2	;volatile
  3807  01D7  0008               	return
  3808  01D8                     __end_of_SysInitGpio:	
  3809                           
  3810                           	psect	bssBANK0
  3811  004B                     __pbssBANK0:	
  3812  004B                     _mrf49Status:	
  3813  004B                     	ds	2
  3814                           
  3815                           	psect	bssBANK1
  3816  00A0                     __pbssBANK1:	
  3817  00A0                     _rfTrcvStatus:	
  3818  00A0                     	ds	79
  3819                           
  3820                           	psect	clrtext
  3821  07B3                     clear_ram0:	
  3822                           ;	Called with FSR0 containing the base address, and
  3823                           ;	WREG with the size to clear
  3824                           
  3825  07B3  0064               	clrwdt	;clear the watchdog before getting into this loop
  3826  07B4                     clrloop0:	
  3827  07B4  0180               	clrf	0	;clear RAM location pointed to by FSR
  3828  07B5  3101               	addfsr 0,1
  3829  07B6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3830  07B7  2FB4               	goto	clrloop0	;have we reached the end yet?
  3831  07B8  3400               	retlw	0	;all done for this memory range, return
  3832                           
  3833                           	psect	cstackCOMMON
  3834  0070                     __pcstackCOMMON:	
  3835  0070                     ?_SoftI2cStart:	
  3836  0070                     ?_SoftI2cStop:	
  3837                           ; 0 bytes @ 0x0
  3838                           
  3839  0070                     ?_HandlePacket:	
  3840                           ; 0 bytes @ 0x0
  3841                           
  3842  0070                     ?_SoftI2cNop:	
  3843                           ; 0 bytes @ 0x0
  3844                           
  3845  0070                     ?_SoftI2cInit:	
  3846                           ; 0 bytes @ 0x0
  3847                           
  3848  0070                     ?_SoftI2cRepeatedStart:	
  3849                           ; 0 bytes @ 0x0
  3850                           
  3851  0070                     ?_AdcInit:	
  3852                           ; 0 bytes @ 0x0
  3853                           
  3854  0070                     ?_ExtIntInit:	
  3855                           ; 0 bytes @ 0x0
  3856                           
  3857  0070                     ?_extInt:	
  3858                           ; 0 bytes @ 0x0
  3859                           
  3860  0070                     ?_Mrf49xaModeRx:	
  3861                           ; 0 bytes @ 0x0
  3862                           
  3863  0070                     ?_Mrf49xaModeTx:	
  3864                           ; 0 bytes @ 0x0
  3865                           
  3866  0070                     ?_Mrf49xaInit:	
  3867                           ; 0 bytes @ 0x0
  3868                           
  3869  0070                     ?_Mrf49SpiTx:	
  3870                           ; 0 bytes @ 0x0
  3871                           
  3872  0070                     ?_Mrf49RxSts:	
  3873                           ; 0 bytes @ 0x0
  3874                           
  3875  0070                     ?_Mrf49TxByte:	
  3876                           ; 0 bytes @ 0x0
  3877                           
  3878  0070                     ?_Mrf49xaTxAck:	
  3879                           ; 0 bytes @ 0x0
  3880                           
  3881  0070                     ?_Mrf49xaFreePacket:	
  3882                           ; 0 bytes @ 0x0
  3883                           
  3884  0070                     ?_Mrf49xaTick:	
  3885                           ; 0 bytes @ 0x0
  3886                           
  3887  0070                     ?_handleFwCmd:	
  3888                           ; 0 bytes @ 0x0
  3889                           
  3890  0070                     ?_handleFwWrite:	
  3891                           ; 0 bytes @ 0x0
  3892                           
  3893  0070                     ?_handleFwRead:	
  3894                           ; 0 bytes @ 0x0
  3895                           
  3896  0070                     ?_SysInitGpio:	
  3897                           ; 0 bytes @ 0x0
  3898                           
  3899  0070                     ?_main:	
  3900                           ; 0 bytes @ 0x0
  3901                           
  3902  0070                     ?i1_Mrf49xaModeRx:	
  3903                           ; 0 bytes @ 0x0
  3904                           
  3905  0070                     ?i1_Mrf49SpiTx:	
  3906                           ; 0 bytes @ 0x0
  3907                           
  3908  0070                     ??i1_Mrf49SpiTx:	
  3909                           ; 0 bytes @ 0x0
  3910                           
  3911  0070                     ??i1_Mrf49SpiRx:	
  3912                           ; 0 bytes @ 0x0
  3913                           
  3914  0070                     ?i1_Mrf49RxSts:	
  3915                           ; 0 bytes @ 0x0
  3916                           
  3917  0070                     ?i1_Mrf49TxByte:	
  3918                           ; 0 bytes @ 0x0
  3919                           
  3920  0070                     ?_SoftI2cTxByte:	
  3921                           ; 0 bytes @ 0x0
  3922                           
  3923  0070                     ?_Mrf49xaServe:	
  3924                           ; 1 bytes @ 0x0
  3925                           
  3926  0070                     ?_SoftI2cRxByte:	
  3927                           ; 1 bytes @ 0x0
  3928                           
  3929  0070                     ?_Mrf49SpiRx:	
  3930                           ; 1 bytes @ 0x0
  3931                           
  3932  0070                     ?_Mrf49RxCmd:	
  3933                           ; 1 bytes @ 0x0
  3934                           
  3935  0070                     ?_Mrf49RxByte:	
  3936                           ; 1 bytes @ 0x0
  3937                           
  3938  0070                     ?_Mrf49xaPacketPending:	
  3939                           ; 1 bytes @ 0x0
  3940                           
  3941  0070                     ?_Mrf49xaRxPacket:	
  3942                           ; 1 bytes @ 0x0
  3943                           
  3944  0070                     ?i1_Mrf49SpiRx:	
  3945                           ; 1 bytes @ 0x0
  3946                           
  3947  0070                     ?i1_Mrf49RxCmd:	
  3948                           ; 1 bytes @ 0x0
  3949                           
  3950  0070                     ?i1_Mrf49RxByte:	
  3951                           ; 1 bytes @ 0x0
  3952                           
  3953  0070                     ?i1_Mrf49xaServe:	
  3954                           ; 1 bytes @ 0x0
  3955                           
  3956  0070                     i1Mrf49SpiTx@byte:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959  0070                     i1Mrf49SpiRx@data:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962                           
  3963                           ; 1 bytes @ 0x0
  3964  0070                     	ds	1
  3965  0071                     ?i1_Mrf49TxCmd:	
  3966  0071                     ??i1_Mrf49RxCmd:	
  3967                           ; 0 bytes @ 0x1
  3968                           
  3969  0071                     ??i1_Mrf49RxSts:	
  3970                           ; 0 bytes @ 0x1
  3971                           
  3972  0071                     i1Mrf49TxCmd@val:	
  3973                           ; 0 bytes @ 0x1
  3974                           
  3975  0071                     i1Mrf49RxCmd@cmd:	
  3976                           ; 1 bytes @ 0x1
  3977                           
  3978                           
  3979                           ; 1 bytes @ 0x1
  3980  0071                     	ds	1
  3981  0072                     ??i1_Mrf49TxCmd:	
  3982  0072                     i1Mrf49TxCmd@cmd:	
  3983                           ; 0 bytes @ 0x2
  3984                           
  3985  0072                     i1Mrf49RxCmd@val:	
  3986                           ; 1 bytes @ 0x2
  3987                           
  3988                           
  3989                           ; 1 bytes @ 0x2
  3990  0072                     	ds	1
  3991  0073                     ?i1_mrf49xaCfg:	
  3992  0073                     ??i1_Mrf49RxByte:	
  3993                           ; 0 bytes @ 0x3
  3994                           
  3995  0073                     ??i1_Mrf49TxByte:	
  3996                           ; 0 bytes @ 0x3
  3997                           
  3998  0073                     i1mrf49xaCfg@count:	
  3999                           ; 0 bytes @ 0x3
  4000                           
  4001  0073                     i1Mrf49TxByte@byte:	
  4002                           ; 1 bytes @ 0x3
  4003                           
  4004                           
  4005                           ; 1 bytes @ 0x3
  4006  0073                     	ds	1
  4007  0074                     ??i1_mrf49xaCfg:	
  4008                           
  4009                           ; 0 bytes @ 0x4
  4010  0074                     	ds	2
  4011  0076                     i1mrf49xaCfg@regs:	
  4012                           
  4013                           ; 1 bytes @ 0x6
  4014  0076                     	ds	1
  4015  0077                     i1mrf49xaCfg@k:	
  4016                           
  4017                           ; 1 bytes @ 0x7
  4018  0077                     	ds	1
  4019  0078                     ??i1_Mrf49xaModeRx:	
  4020  0078                     ??i1_Mrf49xaServe:	
  4021                           ; 0 bytes @ 0x8
  4022                           
  4023                           
  4024                           ; 0 bytes @ 0x8
  4025  0078                     	ds	1
  4026  0079                     i1Mrf49xaServe@data:	
  4027                           
  4028                           ; 1 bytes @ 0x9
  4029  0079                     	ds	1
  4030  007A                     ??_extInt:	
  4031                           
  4032                           ; 0 bytes @ 0xA
  4033  007A                     	ds	1
  4034                           
  4035                           	psect	cstackBANK0
  4036  0020                     __pcstackBANK0:	
  4037  0020                     ??_SoftI2cNop:	
  4038  0020                     ??_AdcInit:	
  4039                           ; 0 bytes @ 0x0
  4040                           
  4041  0020                     ??_ExtIntInit:	
  4042                           ; 0 bytes @ 0x0
  4043                           
  4044  0020                     ??_Mrf49SpiTx:	
  4045                           ; 0 bytes @ 0x0
  4046                           
  4047  0020                     ??_Mrf49SpiRx:	
  4048                           ; 0 bytes @ 0x0
  4049                           
  4050  0020                     ??_Mrf49xaPacketPending:	
  4051                           ; 0 bytes @ 0x0
  4052                           
  4053  0020                     ??_Mrf49xaFreePacket:	
  4054                           ; 0 bytes @ 0x0
  4055                           
  4056  0020                     ??_Mrf49xaRxPacket:	
  4057                           ; 0 bytes @ 0x0
  4058                           
  4059  0020                     ??_SysInitGpio:	
  4060                           ; 0 bytes @ 0x0
  4061                           
  4062  0020                     ?_Mrf49xaTxPacket:	
  4063                           ; 0 bytes @ 0x0
  4064                           
  4065  0020                     Mrf49SpiTx@byte:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0020                     Mrf49SpiRx@data:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0020                     Mrf49xaTxPacket@response:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0020                     Mrf49xaFreePacket@packet:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077                           
  4078                           ; 1 bytes @ 0x0
  4079  0020                     	ds	1
  4080  0021                     ??_SoftI2cStart:	
  4081  0021                     ??_SoftI2cTxByte:	
  4082                           ; 0 bytes @ 0x1
  4083                           
  4084  0021                     ??_SoftI2cStop:	
  4085                           ; 0 bytes @ 0x1
  4086                           
  4087  0021                     ?_Mrf49TxCmd:	
  4088                           ; 0 bytes @ 0x1
  4089                           
  4090  0021                     ??_SoftI2cRepeatedStart:	
  4091                           ; 0 bytes @ 0x1
  4092                           
  4093  0021                     ??_SoftI2cRxByte:	
  4094                           ; 0 bytes @ 0x1
  4095                           
  4096  0021                     ??_Mrf49RxCmd:	
  4097                           ; 0 bytes @ 0x1
  4098                           
  4099  0021                     ??_Mrf49RxSts:	
  4100                           ; 0 bytes @ 0x1
  4101                           
  4102  0021                     SoftI2cRxByte@ack:	
  4103                           ; 0 bytes @ 0x1
  4104                           
  4105  0021                     Mrf49TxCmd@val:	
  4106                           ; 1 bytes @ 0x1
  4107                           
  4108  0021                     Mrf49RxCmd@cmd:	
  4109                           ; 1 bytes @ 0x1
  4110                           
  4111  0021                     Mrf49xaTxPacket@needAck:	
  4112                           ; 1 bytes @ 0x1
  4113                           
  4114                           
  4115                           ; 1 bytes @ 0x1
  4116  0021                     	ds	1
  4117  0022                     ??_Mrf49TxCmd:	
  4118  0022                     ??_Mrf49xaTxPacket:	
  4119                           ; 0 bytes @ 0x2
  4120                           
  4121  0022                     SoftI2cTxByte@data:	
  4122                           ; 0 bytes @ 0x2
  4123                           
  4124  0022                     SoftI2cRxByte@data:	
  4125                           ; 1 bytes @ 0x2
  4126                           
  4127  0022                     Mrf49TxCmd@cmd:	
  4128                           ; 1 bytes @ 0x2
  4129                           
  4130  0022                     Mrf49RxCmd@val:	
  4131                           ; 1 bytes @ 0x2
  4132                           
  4133                           
  4134                           ; 1 bytes @ 0x2
  4135  0022                     	ds	1
  4136  0023                     ?_mrf49xaCfg:	
  4137  0023                     ??_Mrf49RxByte:	
  4138                           ; 0 bytes @ 0x3
  4139                           
  4140  0023                     ??_Mrf49TxByte:	
  4141                           ; 0 bytes @ 0x3
  4142                           
  4143  0023                     SoftI2cTxByte@i:	
  4144                           ; 0 bytes @ 0x3
  4145                           
  4146  0023                     SoftI2cRxByte@i:	
  4147                           ; 1 bytes @ 0x3
  4148                           
  4149  0023                     mrf49xaCfg@count:	
  4150                           ; 1 bytes @ 0x3
  4151                           
  4152  0023                     Mrf49TxByte@byte:	
  4153                           ; 1 bytes @ 0x3
  4154                           
  4155  0023                     Mrf49xaTxPacket@crc:	
  4156                           ; 1 bytes @ 0x3
  4157                           
  4158                           
  4159                           ; 1 bytes @ 0x3
  4160  0023                     	ds	1
  4161  0024                     ??_SoftI2cInit:	
  4162  0024                     ??_mrf49xaCfg:	
  4163                           ; 0 bytes @ 0x4
  4164                           
  4165  0024                     ?_eepromRxBytes:	
  4166                           ; 0 bytes @ 0x4
  4167                           
  4168  0024                     ?_eepromTxBytes:	
  4169                           ; 0 bytes @ 0x4
  4170                           
  4171  0024                     Mrf49xaTxPacket@i:	
  4172                           ; 0 bytes @ 0x4
  4173                           
  4174  0024                     eepromRxBytes@address:	
  4175                           ; 1 bytes @ 0x4
  4176                           
  4177  0024                     eepromTxBytes@address:	
  4178                           ; 2 bytes @ 0x4
  4179                           
  4180                           
  4181                           ; 2 bytes @ 0x4
  4182  0024                     	ds	1
  4183  0025                     Mrf49xaTxPacket@packet:	
  4184                           
  4185                           ; 1 bytes @ 0x5
  4186  0025                     	ds	1
  4187  0026                     ??_Mrf49xaTxAck:	
  4188  0026                     mrf49xaCfg@regs:	
  4189                           ; 0 bytes @ 0x6
  4190                           
  4191  0026                     Mrf49xaTxAck@packet:	
  4192                           ; 1 bytes @ 0x6
  4193                           
  4194  0026                     eepromRxBytes@data:	
  4195                           ; 1 bytes @ 0x6
  4196                           
  4197  0026                     eepromTxBytes@data:	
  4198                           ; 1 bytes @ 0x6
  4199                           
  4200                           
  4201                           ; 1 bytes @ 0x6
  4202  0026                     	ds	1
  4203  0027                     mrf49xaCfg@k:	
  4204  0027                     eepromRxBytes@size:	
  4205                           ; 1 bytes @ 0x7
  4206                           
  4207  0027                     eepromTxBytes@size:	
  4208                           ; 1 bytes @ 0x7
  4209                           
  4210                           
  4211                           ; 1 bytes @ 0x7
  4212  0027                     	ds	1
  4213  0028                     ??_Mrf49xaServe:	
  4214  0028                     ??_Mrf49xaModeRx:	
  4215                           ; 0 bytes @ 0x8
  4216                           
  4217  0028                     ??_Mrf49xaModeTx:	
  4218                           ; 0 bytes @ 0x8
  4219                           
  4220  0028                     ??_eepromRxBytes:	
  4221                           ; 0 bytes @ 0x8
  4222                           
  4223  0028                     ??_eepromTxBytes:	
  4224                           ; 0 bytes @ 0x8
  4225                           
  4226  0028                     ??_handleFwCmd:	
  4227                           ; 0 bytes @ 0x8
  4228                           
  4229  0028                     ??_handleFwWrite:	
  4230                           ; 0 bytes @ 0x8
  4231                           
  4232  0028                     ??_handleFwRead:	
  4233                           ; 0 bytes @ 0x8
  4234                           
  4235  0028                     handleFwCmd@packet:	
  4236                           ; 0 bytes @ 0x8
  4237                           
  4238  0028                     handleFwRead@address:	
  4239                           ; 1 bytes @ 0x8
  4240                           
  4241                           
  4242                           ; 2 bytes @ 0x8
  4243  0028                     	ds	1
  4244  0029                     Mrf49xaServe@data:	
  4245                           
  4246                           ; 1 bytes @ 0x9
  4247  0029                     	ds	1
  4248  002A                     ??_Mrf49xaInit:	
  4249  002A                     handleFwRead@packet:	
  4250                           ; 0 bytes @ 0xA
  4251                           
  4252                           
  4253                           ; 1 bytes @ 0xA
  4254  002A                     	ds	1
  4255  002B                     handleFwWrite@packetData:	
  4256                           
  4257                           ; 1 bytes @ 0xB
  4258  002B                     	ds	1
  4259  002C                     handleFwWrite@i:	
  4260                           
  4261                           ; 1 bytes @ 0xC
  4262  002C                     	ds	1
  4263  002D                     handleFwWrite@address:	
  4264                           
  4265                           ; 2 bytes @ 0xD
  4266  002D                     	ds	2
  4267  002F                     handleFwWrite@packet:	
  4268                           
  4269                           ; 1 bytes @ 0xF
  4270  002F                     	ds	1
  4271  0030                     ??_HandlePacket:	
  4272                           
  4273                           ; 0 bytes @ 0x10
  4274  0030                     	ds	1
  4275  0031                     HandlePacket@sendAck:	
  4276                           
  4277                           ; 1 bytes @ 0x11
  4278  0031                     	ds	1
  4279  0032                     HandlePacket@sendMsg:	
  4280                           
  4281                           ; 1 bytes @ 0x12
  4282  0032                     	ds	1
  4283  0033                     HandlePacket@packet:	
  4284                           
  4285                           ; 1 bytes @ 0x13
  4286  0033                     	ds	1
  4287  0034                     ??_Mrf49xaTick:	
  4288                           
  4289                           ; 0 bytes @ 0x14
  4290  0034                     	ds	2
  4291  0036                     Mrf49xaTick@timeout:	
  4292                           
  4293                           ; 1 bytes @ 0x16
  4294  0036                     	ds	1
  4295  0037                     Mrf49xaTick@packet:	
  4296                           
  4297                           ; 1 bytes @ 0x17
  4298  0037                     	ds	1
  4299  0038                     ??_main:	
  4300                           
  4301                           ; 0 bytes @ 0x18
  4302  0038                     	ds	2
  4303  003A                     main@bf:	
  4304                           
  4305                           ; 16 bytes @ 0x1A
  4306  003A                     	ds	16
  4307  004A                     main@i:	
  4308                           
  4309                           ; 1 bytes @ 0x2A
  4310  004A                     	ds	1
  4311                           
  4312                           	psect	text3
  4313  01D8                     __ptext3:	
  4314 ;; *************** function _Mrf49xaTick *****************
  4315 ;; Defined at:
  4316 ;;		line 123 in file "../../../src/devices/mrf49xa_packet.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  timeout         1   22[BANK0 ] unsigned char 
  4321 ;;  packet          1   23[BANK0 ] PTR struct rfTrcvPacket_
  4322 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;		None               void
  4325 ;; Registers used:
  4326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 1F/1
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4332 ;;      Params:         0       0       0       0
  4333 ;;      Locals:         0       2       0       0
  4334 ;;      Temps:          0       2       0       0
  4335 ;;      Totals:         0       4       0       0
  4336 ;;Total ram usage:        4 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:   11
  4339 ;; This function calls:
  4340 ;;		_HandlePacket
  4341 ;;		_Mrf49RxSts
  4342 ;;		_Mrf49xaFreePacket
  4343 ;;		_Mrf49xaModeTx
  4344 ;;		_Mrf49xaPacketPending
  4345 ;;		_Mrf49xaRxPacket
  4346 ;; This function is called by:
  4347 ;;		_main
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _Mrf49xaTick
  4353  01D8                     _Mrf49xaTick:	
  4354                           
  4355                           ;mrf49xa_packet.c: 125: if (Mrf49xaPacketPending())
  4356                           
  4357                           ;incstack = 0
  4358                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4359  01D8  24FA  3181         	fcall	_Mrf49xaPacketPending
  4360  01DA  3A00               	xorlw	0
  4361  01DB  1903               	skipnz
  4362  01DC  29FE               	goto	l2609
  4363                           
  4364                           ;mrf49xa_packet.c: 126: {
  4365                           ;mrf49xa_packet.c: 127: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  4366  01DD  2504  3181         	fcall	_Mrf49xaRxPacket
  4367  01DF  0020               	movlb	0	; select bank0
  4368  01E0  00B7               	movwf	Mrf49xaTick@packet
  4369                           
  4370                           ;mrf49xa_packet.c: 135: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSt
      +                          atus.src)
  4371  01E1  3E03               	addlw	3
  4372  01E2  0086               	movwf	6
  4373  01E3  0187               	clrf	7
  4374  01E4  0801               	movf	1,w
  4375  01E5  3AFF               	xorlw	255
  4376  01E6  1903               	skipnz
  4377  01E7  29F0               	goto	l2603
  4378  01E8  0837               	movf	Mrf49xaTick@packet,w
  4379  01E9  3E03               	addlw	3
  4380  01EA  0086               	movwf	6
  4381  01EB  0801               	movf	1,w
  4382  01EC  0021               	movlb	1	; select bank1
  4383  01ED  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  4384  01EE  1D03               	skipz
  4385  01EF  29FA               	goto	l2607
  4386  01F0                     l2603:	
  4387                           
  4388                           ;mrf49xa_packet.c: 136: {
  4389                           ;mrf49xa_packet.c: 137: packet->packet.size -= 5;
  4390  01F0  0020               	movlb	0	; select bank0
  4391  01F1  0A37               	incf	Mrf49xaTick@packet,w
  4392  01F2  0086               	movwf	6
  4393  01F3  3005               	movlw	5
  4394  01F4  0187               	clrf	7
  4395  01F5  0281               	subwf	1,f
  4396                           
  4397                           ;mrf49xa_packet.c: 140: HandlePacket(packet);
  4398  01F6  0837               	movf	Mrf49xaTick@packet,w
  4399  01F7  244C  3181         	fcall	_HandlePacket
  4400                           
  4401                           ;mrf49xa_packet.c: 142: }
  4402  01F9  29FE               	goto	l2609
  4403  01FA                     l2607:	
  4404                           
  4405                           ;mrf49xa_packet.c: 143: else
  4406                           ;mrf49xa_packet.c: 144: {
  4407                           ;mrf49xa_packet.c: 145: Mrf49xaFreePacket(packet);
  4408  01FA  0020               	movlb	0	; select bank0
  4409  01FB  0837               	movf	Mrf49xaTick@packet,w
  4410  01FC  2447  3181         	fcall	_Mrf49xaFreePacket
  4411  01FE                     l2609:	
  4412                           
  4413                           ;mrf49xa_packet.c: 146: }
  4414                           ;mrf49xa_packet.c: 150: }
  4415                           ;mrf49xa_packet.c: 152: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  4416  01FE  0021               	movlb	1	; select bank1
  4417  01FF  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4418  0200  3A02               	xorlw	2
  4419  0201  1D03               	skipz
  4420  0202  2A32               	goto	l2629
  4421                           
  4422                           ;mrf49xa_packet.c: 153: {
  4423                           ;mrf49xa_packet.c: 154: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  4424  0203  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4425  0204  3A02               	xorlw	2
  4426  0205  1D03               	skipz
  4427  0206  2A09               	goto	l2615
  4428  0207                     l2613:	
  4429                           
  4430                           ;mrf49xa_packet.c: 155: {
  4431                           ;mrf49xa_packet.c: 156: rfTrcvStatus.txPacket.state = PKT_FREE;
  4432  0207  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  4433                           
  4434                           ;mrf49xa_packet.c: 157: }
  4435  0208  2A32               	goto	l2629
  4436  0209                     l2615:	
  4437                           
  4438                           ;mrf49xa_packet.c: 158: else if (rfTrcvStatus.txPacket.retry == 10)
  4439  0209  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4440  020A  390F               	andlw	15
  4441  020B  3A0A               	xorlw	10
  4442  020C  1D03               	skipz
  4443  020D  2A26               	goto	l2625
  4444                           
  4445                           ;mrf49xa_packet.c: 159: {
  4446                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.retransmit == 3)
  4447  020E  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  4448  020F  3903               	andlw	3
  4449  0210  3A03               	xorlw	3
  4450  0211  1903               	btfsc	3,2
  4451  0212  2A07               	goto	l2613
  4452                           
  4453                           ;mrf49xa_packet.c: 166: else
  4454                           ;mrf49xa_packet.c: 167: {
  4455                           ;mrf49xa_packet.c: 169: rfTrcvStatus.txPacket.retry = 0;
  4456  0213  30F0               	movlw	-16
  4457  0214  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  4458                           
  4459                           ;mrf49xa_packet.c: 170: rfTrcvStatus.txPacket.retransmit++;
  4460  0215  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  4461  0216  3903               	andlw	3
  4462  0217  0020               	movlb	0	; select bank0
  4463  0218  00B4               	movwf	??_Mrf49xaTick
  4464  0219  0AB4               	incf	??_Mrf49xaTick,f
  4465  021A  0EB4               	swapf	??_Mrf49xaTick,f
  4466  021B  0021               	movlb	1	; select bank1
  4467  021C  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4468  021D  0020               	movlb	0	; select bank0
  4469  021E  0634               	xorwf	??_Mrf49xaTick,w
  4470  021F  39CF               	andlw	-49
  4471  0220  0634               	xorwf	??_Mrf49xaTick,w
  4472  0221  0021               	movlb	1	; select bank1
  4473  0222  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  4474                           
  4475                           ;mrf49xa_packet.c: 171: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4476  0223  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  4477  0224  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  4478  0225  2A32               	goto	l2629
  4479  0226                     l2625:	
  4480                           
  4481                           ;mrf49xa_packet.c: 174: else
  4482                           ;mrf49xa_packet.c: 175: {
  4483                           ;mrf49xa_packet.c: 176: rfTrcvStatus.txPacket.retry++;
  4484  0226  2593  3181         	fcall	PL4	;call to abstracted procedure
  4485                           
  4486                           ;mrf49xa_packet.c: 177: _delay(40000);
  4487  0228  3034               	movlw	52
  4488  0229  0020               	movlb	0	; select bank0
  4489  022A  00B5               	movwf	??_Mrf49xaTick+1
  4490  022B  30F1               	movlw	241
  4491  022C  00B4               	movwf	??_Mrf49xaTick
  4492  022D                     u2017:	
  4493  022D  0BB4               	decfsz	??_Mrf49xaTick,f
  4494  022E  2A2D               	goto	u2017
  4495  022F  0BB5               	decfsz	??_Mrf49xaTick+1,f
  4496  0230  2A2D               	goto	u2017
  4497  0231  3200               	nop2
  4498  0232                     l2629:	
  4499                           
  4500                           ;mrf49xa_packet.c: 178: }
  4501                           ;mrf49xa_packet.c: 179: }
  4502                           ;mrf49xa_packet.c: 181: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  4503                           ;mrf49xa_packet.c: 182: rfTrcvStatus.state == RECV_IDLE)
  4504  0232  0021               	movlb	1	; select bank1
  4505  0233  0B53               	decfsz	(_rfTrcvStatus^(0+128)+51),w
  4506  0234  0008               	return
  4507  0235  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  4508  0236  1D03               	skipz
  4509  0237  0008               	return
  4510                           
  4511                           ;mrf49xa_packet.c: 183: {
  4512                           ;mrf49xa_packet.c: 188: if (rfTrcvStatus.txPacket.retry >= 10)
  4513  0238  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4514  0239  390F               	andlw	15
  4515  023A  0020               	movlb	0	; select bank0
  4516  023B  00B4               	movwf	??_Mrf49xaTick
  4517  023C  300A               	movlw	10
  4518  023D  0234               	subwf	??_Mrf49xaTick,w
  4519  023E  1C03               	skipc
  4520  023F  2A46               	goto	l2641
  4521                           
  4522                           ;mrf49xa_packet.c: 189: {
  4523                           ;mrf49xa_packet.c: 191: rfTrcvStatus.txPacket.retry = 0;
  4524  0240  30F0               	movlw	-16
  4525  0241  0021               	movlb	1	; select bank1
  4526  0242  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  4527                           
  4528                           ;mrf49xa_packet.c: 192: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  4529  0243  3002               	movlw	2
  4530  0244  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  4531  0245  0008               	return
  4532  0246                     l2641:	
  4533                           
  4534                           ;mrf49xa_packet.c: 194: }
  4535                           ;mrf49xa_packet.c: 198: uint8_t timeout = 0;
  4536  0246  01B6               	clrf	Mrf49xaTick@timeout
  4537  0247                     l2643:	
  4538                           
  4539                           ;mrf49xa_packet.c: 200: {
  4540                           ;mrf49xa_packet.c: 201: Mrf49RxSts();
  4541  0247  2408  3181         	fcall	_Mrf49RxSts
  4542                           
  4543                           ;mrf49xa_packet.c: 203: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  4544  0249  0021               	movlb	1	; select bank1
  4545  024A  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  4546  024B  1D03               	skipz
  4547  024C  2A50               	goto	l2651
  4548  024D  0020               	movlb	0	; select bank0
  4549  024E  1C4B               	btfss	_mrf49Status,0
  4550  024F  2A63               	goto	l356
  4551  0250                     l2651:	
  4552                           
  4553                           ;mrf49xa_packet.c: 207: }
  4554                           ;mrf49xa_packet.c: 209: _delay(40000);
  4555  0250  3034               	movlw	52
  4556  0251  0020               	movlb	0	; select bank0
  4557  0252  00B5               	movwf	??_Mrf49xaTick+1
  4558  0253  30F1               	movlw	241
  4559  0254  00B4               	movwf	??_Mrf49xaTick
  4560  0255                     u2027:	
  4561  0255  0BB4               	decfsz	??_Mrf49xaTick,f
  4562  0256  2A55               	goto	u2027
  4563  0257  0BB5               	decfsz	??_Mrf49xaTick+1,f
  4564  0258  2A55               	goto	u2027
  4565  0259  3200               	nop2
  4566                           
  4567                           ;mrf49xa_packet.c: 210: timeout++;
  4568  025A  0020               	movlb	0	; select bank0
  4569  025B  300B               	movlw	11
  4570  025C  0AB6               	incf	Mrf49xaTick@timeout,f
  4571                           
  4572                           ;mrf49xa_packet.c: 212: if (timeout > 10)
  4573  025D  0236               	subwf	Mrf49xaTick@timeout,w
  4574  025E  1C03               	skipc
  4575  025F  2A47               	goto	l2643
  4576                           
  4577                           ;mrf49xa_packet.c: 213: {
  4578                           ;mrf49xa_packet.c: 214: rfTrcvStatus.txPacket.retry++;
  4579  0260  0021               	movlb	1	; select bank1
  4580  0261  2593               	fcall	PL4	;call to abstracted procedure
  4581  0262  0008               	return
  4582  0263                     l356:	
  4583                           
  4584                           ;mrf49xa_packet.c: 225: INTCONbits.INTE = 0;;
  4585  0263  120B               	bcf	11,4	;volatile
  4586                           
  4587                           ;mrf49xa_packet.c: 226: Mrf49xaModeTx();
  4588  0264  25B1               	fcall	_Mrf49xaModeTx
  4589                           
  4590                           ;mrf49xa_packet.c: 227: INTCONbits.INTE = 1;;
  4591  0265  160B               	bsf	11,4	;volatile
  4592  0266  0008               	return
  4593  0267                     __end_of_Mrf49xaTick:	
  4594  0267                     __ptext30:	
  4595 ;; *************** function _Mrf49RxCmd *****************
  4596 ;; Defined at:
  4597 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;  cmd             1    wreg     unsigned char 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  cmd             1    1[BANK0 ] unsigned char 
  4602 ;;  val             1    2[BANK0 ] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      unsigned char 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0, pclath, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 1E/1
  4609 ;;		On exit  : 1F/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4612 ;;      Params:         0       0       0       0
  4613 ;;      Locals:         0       2       0       0
  4614 ;;      Temps:          0       0       0       0
  4615 ;;      Totals:         0       2       0       0
  4616 ;;Total ram usage:        2 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    7
  4619 ;; This function calls:
  4620 ;;		_Mrf49SpiRx
  4621 ;;		_Mrf49SpiTx
  4622 ;; This function is called by:
  4623 ;;		_Mrf49RxByte
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           
  4628                           ;psect for function _Mrf49RxCmd
  4629  0267                     _Mrf49RxCmd:	
  4630                           
  4631                           ;incstack = 0
  4632                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  4633                           ;Mrf49RxCmd@cmd stored from wreg
  4634  0267  0020               	movlb	0	; select bank0
  4635  0268  00A1               	movwf	Mrf49RxCmd@cmd
  4636                           
  4637                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  4638  0269  130E               	bcf	14,6	;volatile
  4639                           
  4640                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  4641  026A  0821               	movf	Mrf49RxCmd@cmd,w
  4642  026B  23BD  3181         	fcall	_Mrf49SpiTx
  4643                           
  4644                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  4645  026D  2413               	fcall	_Mrf49SpiRx
  4646  026E  00A2               	movwf	Mrf49RxCmd@val
  4647                           
  4648                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  4649  026F  170E               	bsf	14,6	;volatile
  4650                           
  4651                           ;mrf49xa_cmd.c: 27: return val;
  4652  0270  0008               	return
  4653  0271                     __end_of_Mrf49RxCmd:	
  4654  0271                     __ptext22:	
  4655 ;; *************** function _Mrf49xaInit *****************
  4656 ;; Defined at:
  4657 ;;		line 122 in file "../../../src/devices/mrf49xa.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;		None
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  j               1    0        unsigned char 
  4662 ;;  i               1    0        unsigned char 
  4663 ;;  k               1    0        unsigned char 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;		None               void
  4666 ;; Registers used:
  4667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 1F/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4673 ;;      Params:         0       0       0       0
  4674 ;;      Locals:         0       0       0       0
  4675 ;;      Temps:          0       3       0       0
  4676 ;;      Totals:         0       3       0       0
  4677 ;;Total ram usage:        3 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:   11
  4680 ;; This function calls:
  4681 ;;		_Mrf49xaModeRx
  4682 ;;		_Mrf49xaServe
  4683 ;;		_mrf49xaCfg
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           
  4690                           ;psect for function _Mrf49xaInit
  4691  0271                     _Mrf49xaInit:	
  4692                           
  4693                           ;mrf49xa.c: 124: UI08_t k;
  4694                           ;mrf49xa.c: 126: UI08_t i, j;
  4695                           ;mrf49xa.c: 130: LATAbits.LATA4 = 0;
  4696                           
  4697                           ;incstack = 0
  4698                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4699  0271  0022               	movlb	2	; select bank2
  4700  0272  120C               	bcf	12,4	;volatile
  4701                           
  4702                           ;mrf49xa.c: 131: LATCbits.LATC1 = 1;
  4703  0273  148E               	bsf	14,1	;volatile
  4704                           
  4705                           ;mrf49xa.c: 132: _delay(400000);
  4706  0274  3003               	movlw	3
  4707  0275  0020               	movlb	0	; select bank0
  4708  0276  00AC               	movwf	??_Mrf49xaInit+2
  4709  0277  3008               	movlw	8
  4710  0278  00AB               	movwf	??_Mrf49xaInit+1
  4711  0279  3078               	movlw	120
  4712  027A  00AA               	movwf	??_Mrf49xaInit
  4713  027B                     u2047:	
  4714  027B  0BAA               	decfsz	??_Mrf49xaInit,f
  4715  027C  2A7B               	goto	u2047
  4716  027D  0BAB               	decfsz	??_Mrf49xaInit+1,f
  4717  027E  2A7B               	goto	u2047
  4718  027F  0BAC               	decfsz	??_Mrf49xaInit+2,f
  4719  0280  2A7B               	goto	u2047
  4720                           
  4721                           ;mrf49xa.c: 133: LATAbits.LATA4 = 1;
  4722  0281  0022               	movlb	2	; select bank2
  4723  0282  160C               	bsf	12,4	;volatile
  4724                           
  4725                           ;mrf49xa.c: 134: _delay(400000);
  4726  0283  3003               	movlw	3
  4727  0284  0020               	movlb	0	; select bank0
  4728  0285  00AC               	movwf	??_Mrf49xaInit+2
  4729  0286  3008               	movlw	8
  4730  0287  00AB               	movwf	??_Mrf49xaInit+1
  4731  0288  3078               	movlw	120
  4732  0289  00AA               	movwf	??_Mrf49xaInit
  4733  028A                     u2057:	
  4734  028A  0BAA               	decfsz	??_Mrf49xaInit,f
  4735  028B  2A8A               	goto	u2057
  4736  028C  0BAB               	decfsz	??_Mrf49xaInit+1,f
  4737  028D  2A8A               	goto	u2057
  4738  028E  0BAC               	decfsz	??_Mrf49xaInit+2,f
  4739  028F  2A8A               	goto	u2057
  4740                           
  4741                           ;mrf49xa.c: 135: LATCbits.LATC4 = 1;
  4742  0290  0022               	movlb	2	; select bank2
  4743  0291  160E               	bsf	14,4	;volatile
  4744                           
  4745                           ;mrf49xa.c: 137: LATAbits.LATA5 = 1;
  4746  0292  168C               	bsf	12,5	;volatile
  4747                           
  4748                           ;mrf49xa.c: 141: mrf49xaCfg(mrfRegset_Init, mrfRegset_InitCnt);
  4749  0293  306C               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  4750  0294  3187               	movlp	high __stringtab
  4751  0295  000A               	callw
  4752  0296  3181               	pagesel	$	;select current page
  4753  0297  0020               	movlb	0	; select bank0
  4754  0298  00A3               	movwf	mrf49xaCfg@count
  4755  0299  306F               	movlw	(_mrfRegset_Init| (0+32768))& (0+255)
  4756  029A  2381  3181         	fcall	_mrf49xaCfg
  4757                           
  4758                           ;mrf49xa.c: 143: Mrf49xaModeRx();
  4759  029C  2375  3181         	fcall	_Mrf49xaModeRx
  4760  029E                     l2593:	
  4761                           ;mrf49xa.c: 150: while(PORTAbits.RA2 == 0)
  4762                           
  4763  029E  0020               	movlb	0	; select bank0
  4764  029F  190C               	btfsc	12,2	;volatile
  4765  02A0  0008               	return
  4766                           
  4767                           ;mrf49xa.c: 151: Mrf49xaServe();
  4768  02A1  22A4  3181         	fcall	_Mrf49xaServe
  4769  02A3  2A9E               	goto	l2593
  4770  02A4                     __end_of_Mrf49xaInit:	
  4771  02A4                     __ptext23:	
  4772 ;; *************** function _Mrf49xaServe *****************
  4773 ;; Defined at:
  4774 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;  data            1    9[BANK0 ] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      unsigned char 
  4781 ;; Registers used:
  4782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 1F/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4788 ;;      Params:         0       0       0       0
  4789 ;;      Locals:         0       1       0       0
  4790 ;;      Temps:          0       1       0       0
  4791 ;;      Totals:         0       2       0       0
  4792 ;;Total ram usage:        2 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:   10
  4795 ;; This function calls:
  4796 ;;		_Mrf49RxByte
  4797 ;;		_Mrf49RxSts
  4798 ;;		_Mrf49TxByte
  4799 ;;		_Mrf49xaModeRx
  4800 ;; This function is called by:
  4801 ;;		_Mrf49xaInit
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           
  4806                           ;psect for function _Mrf49xaServe
  4807  02A4                     _Mrf49xaServe:	
  4808                           
  4809                           ;mrf49xa_data.c: 10: uint8_t data;
  4810                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4814  02A4  2408  3181         	fcall	_Mrf49RxSts
  4815                           
  4816                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  4817  02A6  084B               	movf	_mrf49Status,w
  4818  02A7  3AFF               	xorlw	255
  4819  02A8  1D03               	skipz
  4820  02A9  2AAE               	goto	l378
  4821  02AA  084C               	movf	_mrf49Status+1,w
  4822  02AB  3AFF               	xorlw	255
  4823  02AC  1903               	btfsc	3,2
  4824                           
  4825                           ;mrf49xa_data.c: 19: return 0;
  4826  02AD  3400               	retlw	0
  4827  02AE                     l378:	
  4828                           ;mrf49xa_data.c: 23: {
  4829                           
  4830                           
  4831                           ;mrf49xa_data.c: 25: }
  4832                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  4833  02AE  1ACB               	btfsc	_mrf49Status,5
  4834  02AF  2ABA               	goto	l2375
  4835  02B0  2AC6               	goto	l379
  4836  02B1                     l2371:	
  4837                           
  4838                           ;mrf49xa_data.c: 33: case RECV_DATA:
  4839                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  4840  02B1  2373  3181         	fcall	_Mrf49RxByte
  4841  02B3  00A9               	movwf	Mrf49xaServe@data
  4842                           
  4843                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  4844  02B4  2373  3181         	fcall	_Mrf49RxByte
  4845  02B6  00A9               	movwf	Mrf49xaServe@data
  4846                           
  4847                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  4848  02B7  2375  3181         	fcall	_Mrf49xaModeRx
  4849                           
  4850                           ;mrf49xa_data.c: 44: break;
  4851  02B9  2AC6               	goto	l379
  4852  02BA                     l2375:	
  4853  02BA  0021               	movlb	1	; select bank1
  4854  02BB  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  4855                           
  4856                           ; Switch size 1, requested type "space"
  4857                           ; Number of cases is 3, Range of values is 0 to 2
  4858                           ; switch strategies available:
  4859                           ; Name         Instructions Cycles
  4860                           ; simple_byte           10     6 (average)
  4861                           ; direct_byte           12     6 (fixed)
  4862                           ; jumptable            260     6 (fixed)
  4863                           ;	Chosen strategy is simple_byte
  4864  02BC  3A00               	xorlw	0	; case 0
  4865  02BD  1903               	skipnz
  4866  02BE  2AB1               	goto	l2371
  4867  02BF  3A01               	xorlw	1	; case 1
  4868  02C0  1903               	skipnz
  4869  02C1  2AB1               	goto	l2371
  4870  02C2  3A03               	xorlw	3	; case 2
  4871  02C3  1903               	skipnz
  4872  02C4  2AC6               	goto	l379
  4873  02C5  2AC6               	goto	l379
  4874  02C6                     l379:	
  4875                           
  4876                           ;mrf49xa_data.c: 52: }
  4877                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  4878  02C6  0020               	movlb	0	; select bank0
  4879  02C7  1BCB               	btfsc	_mrf49Status,7
  4880  02C8  2B5D               	goto	l2461
  4881  02C9  2B69               	goto	l2463
  4882  02CA                     l2379:	
  4883                           
  4884                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  4885  02CA  2373  3181         	fcall	_Mrf49RxByte
  4886  02CC  00A9               	movwf	Mrf49xaServe@data
  4887                           
  4888                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4889  02CD  1BCC               	btfsc	_mrf49Status+1,7
  4890  02CE  2AD2               	goto	l2385
  4891  02CF                     l2383:	
  4892                           
  4893                           ;mrf49xa_data.c: 72: {
  4894                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  4895  02CF  2375  3181         	fcall	_Mrf49xaModeRx
  4896                           
  4897                           ;mrf49xa_data.c: 74: break;
  4898  02D1  2B69               	goto	l2463
  4899  02D2                     l2385:	
  4900                           
  4901                           ;mrf49xa_data.c: 75: }
  4902                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  4903  02D2  0021               	movlb	1	; select bank1
  4904  02D3  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  4905  02D4  1D03               	skipz
  4906  02D5  2AD8               	goto	l2389
  4907  02D6  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  4908  02D7  2ADC               	goto	L1
  4909  02D8                     l2389:	
  4910                           
  4911                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  4912  02D8  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  4913  02D9  1D03               	skipz
  4914  02DA  2ACF               	goto	l2383
  4915  02DB  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  4916  02DC                     L1:	
  4917  02DC  00A0               	movwf	_rfTrcvStatus^(0+128)
  4918                           
  4919                           ;mrf49xa_data.c: 85: }
  4920                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  4921  02DD  0A20               	incf	_rfTrcvStatus^(0+128),w
  4922  02DE  0086               	movwf	6
  4923  02DF  0187               	clrf	7
  4924                           
  4925                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  4926  02E0  25AB  3181         	fcall	PL8	;call to abstracted procedure
  4927  02E2  3E16               	addlw	22
  4928  02E3  0086               	movwf	6
  4929  02E4  0181               	clrf	1
  4930                           
  4931                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  4932  02E5  0820               	movf	_rfTrcvStatus^(0+128),w
  4933  02E6  0086               	movwf	6
  4934  02E7  3003               	movlw	3
  4935  02E8  0081               	movwf	1
  4936                           
  4937                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  4938  02E9  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  4939  02EA  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  4940                           
  4941                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  4942  02EB  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  4943  02EC  2B19               	goto	L2
  4944  02ED                     l2405:	
  4945                           ;mrf49xa_data.c: 93: break;
  4946                           
  4947                           
  4948                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  4949  02ED  2373  3181         	fcall	_Mrf49RxByte
  4950  02EF  00A9               	movwf	Mrf49xaServe@data
  4951                           
  4952                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4953  02F0  1BCC               	btfsc	_mrf49Status+1,7
  4954  02F1  2AF9               	goto	l2413
  4955                           
  4956                           ;mrf49xa_data.c: 102: {
  4957                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  4958  02F2  0021               	movlb	1	; select bank1
  4959  02F3  0820               	movf	_rfTrcvStatus^(0+128),w
  4960  02F4  0086               	movwf	6
  4961  02F5  3004               	movlw	4
  4962  02F6  0187               	clrf	7
  4963  02F7  0081               	movwf	1
  4964  02F8  2ACF               	goto	l2383
  4965  02F9                     l2413:	
  4966                           
  4967                           ;mrf49xa_data.c: 106: }
  4968                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  4969  02F9  0021               	movlb	1	; select bank1
  4970  02FA  0A20               	incf	_rfTrcvStatus^(0+128),w
  4971  02FB  0086               	movwf	6
  4972  02FC  0187               	clrf	7
  4973  02FD  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  4974  02FE  0601               	xorwf	1,w
  4975  02FF  1D03               	skipz
  4976  0300  2B0F               	goto	l2423
  4977                           
  4978                           ;mrf49xa_data.c: 109: {
  4979                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  4980  0301  0820               	movf	_rfTrcvStatus^(0+128),w
  4981  0302  3E16               	addlw	22
  4982  0303  0086               	movwf	6
  4983                           
  4984                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  4985  0304  25AB  3181         	fcall	PL8	;call to abstracted procedure
  4986  0306  0086               	movwf	6
  4987  0307  3004               	movlw	4
  4988  0308  0081               	movwf	1
  4989                           
  4990                           ;mrf49xa_data.c: 117: Mrf49xaModeRx();
  4991  0309  2375  3181         	fcall	_Mrf49xaModeRx
  4992                           
  4993                           ;mrf49xa_data.c: 120: LATCbits.LATC2 = 1;
  4994  030B  0022               	movlb	2	; select bank2
  4995  030C  150E               	bsf	14,2	;volatile
  4996                           
  4997                           ;mrf49xa_data.c: 121: LATCbits.LATC2 = 0;
  4998  030D  110E               	bcf	14,2	;volatile
  4999                           
  5000                           ;mrf49xa_data.c: 123: }
  5001  030E  2B69               	goto	l2463
  5002  030F                     l2423:	
  5003                           
  5004                           ;mrf49xa_data.c: 124: else
  5005                           ;mrf49xa_data.c: 125: {
  5006                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  5007  030F  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5008  0310  0720               	addwf	_rfTrcvStatus^(0+128),w
  5009  0311  0020               	movlb	0	; select bank0
  5010  0312  00A8               	movwf	??_Mrf49xaServe
  5011  0313  0A28               	incf	??_Mrf49xaServe,w
  5012  0314  0086               	movwf	6
  5013  0315  0187               	clrf	7
  5014  0316  0829               	movf	Mrf49xaServe@data,w
  5015  0317  0081               	movwf	1
  5016  0318  0021               	movlb	1	; select bank1
  5017  0319                     L2:	
  5018  0319  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  5019  031A  2B69               	goto	l2463
  5020  031B                     l2427:	
  5021                           
  5022                           ;mrf49xa_data.c: 132: rfTrcvStatus.hwByte++;
  5023  031B  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  5024                           
  5025                           ;mrf49xa_data.c: 134: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  5026  031C  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5027  031D  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  5028  031E  1D03               	skipz
  5029  031F  2B4C               	goto	l2457
  5030                           
  5031                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte = 49;
  5032  0320  3031               	movlw	49
  5033  0321  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  5034  0322  2B4C               	goto	l2457
  5035  0323                     l2433:	
  5036                           
  5037                           ;mrf49xa_data.c: 140: Mrf49TxByte(0x2D);
  5038  0323  302D               	movlw	45
  5039  0324  236E  3181         	fcall	_Mrf49TxByte
  5040                           
  5041                           ;mrf49xa_data.c: 141: break;
  5042  0326  2B69               	goto	l2463
  5043  0327                     l2435:	
  5044                           
  5045                           ;mrf49xa_data.c: 144: Mrf49TxByte(0xD4);
  5046  0327  30D4               	movlw	212
  5047  0328  236E  3181         	fcall	_Mrf49TxByte
  5048                           
  5049                           ;mrf49xa_data.c: 145: rfTrcvStatus.hwByte = 0xFF;
  5050  032A  30FF               	movlw	255
  5051  032B  0021               	movlb	1	; select bank1
  5052  032C  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  5053                           
  5054                           ;mrf49xa_data.c: 146: break;
  5055  032D  2B69               	goto	l2463
  5056  032E                     l2439:	
  5057                           
  5058                           ;mrf49xa_data.c: 150: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  5059  032E  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5060  032F  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  5061  0330  0086               	movwf	6
  5062  0331  0187               	clrf	7
  5063  0332  0801               	movf	1,w
  5064  0333  236E  3181         	fcall	_Mrf49TxByte
  5065                           
  5066                           ;mrf49xa_data.c: 151: break;
  5067  0335  2B69               	goto	l2463
  5068  0336                     l2441:	
  5069                           
  5070                           ;mrf49xa_data.c: 154: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  5071  0336  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  5072  0337  236E  3181         	fcall	_Mrf49TxByte
  5073                           
  5074                           ;mrf49xa_data.c: 155: break;
  5075  0339  2B69               	goto	l2463
  5076  033A                     l2443:	
  5077                           
  5078                           ;mrf49xa_data.c: 158: Mrf49TxByte(0x00);
  5079  033A  3000               	movlw	0
  5080  033B  236E  3181         	fcall	_Mrf49TxByte
  5081                           
  5082                           ;mrf49xa_data.c: 159: break;
  5083  033D  2B69               	goto	l2463
  5084  033E                     l2445:	
  5085                           
  5086                           ;mrf49xa_data.c: 162: Mrf49TxByte(0x00);
  5087  033E  3000               	movlw	0
  5088  033F  236E  3181         	fcall	_Mrf49TxByte
  5089                           
  5090                           ;mrf49xa_data.c: 163: Mrf49xaModeRx();
  5091  0341  2375  3181         	fcall	_Mrf49xaModeRx
  5092                           
  5093                           ;mrf49xa_data.c: 165: rfTrcvStatus.txPacket.retry = 0;
  5094  0343  30F0               	movlw	-16
  5095  0344  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  5096                           
  5097                           ;mrf49xa_data.c: 167: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  5098  0345  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  5099  0346  2B4A               	goto	l2453
  5100                           
  5101                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  5102  0347  3002               	movlw	2
  5103  0348  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  5104  0349  2B69               	goto	l2463
  5105  034A                     l2453:	
  5106                           
  5107                           ;mrf49xa_data.c: 169: else
  5108                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_FREE;
  5109  034A  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  5110  034B  2B69               	goto	l2463
  5111  034C                     l2457:	
  5112  034C  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5113                           
  5114                           ; Switch size 1, requested type "space"
  5115                           ; Number of cases is 5, Range of values is 49 to 101
  5116                           ; switch strategies available:
  5117                           ; Name         Instructions Cycles
  5118                           ; simple_byte           16     9 (average)
  5119                           ; direct_byte          115     9 (fixed)
  5120                           ; jumptable            263     9 (fixed)
  5121                           ;	Chosen strategy is simple_byte
  5122  034D  3A31               	xorlw	49	; case 49
  5123  034E  1903               	skipnz
  5124  034F  2B36               	goto	l2441
  5125  0350  3A03               	xorlw	3	; case 50
  5126  0351  1903               	skipnz
  5127  0352  2B3A               	goto	l2443
  5128  0353  3A01               	xorlw	1	; case 51
  5129  0354  1903               	skipnz
  5130  0355  2B3E               	goto	l2445
  5131  0356  3A57               	xorlw	87	; case 100
  5132  0357  1903               	skipnz
  5133  0358  2B23               	goto	l2433
  5134  0359  3A01               	xorlw	1	; case 101
  5135  035A  1903               	skipnz
  5136  035B  2B27               	goto	l2435
  5137  035C  2B2E               	goto	l2439
  5138  035D                     l2461:	
  5139  035D  0021               	movlb	1	; select bank1
  5140  035E  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  5141                           
  5142                           ; Switch size 1, requested type "space"
  5143                           ; Number of cases is 3, Range of values is 0 to 2
  5144                           ; switch strategies available:
  5145                           ; Name         Instructions Cycles
  5146                           ; simple_byte           10     6 (average)
  5147                           ; direct_byte           12     6 (fixed)
  5148                           ; jumptable            260     6 (fixed)
  5149                           ;	Chosen strategy is simple_byte
  5150  035F  3A00               	xorlw	0	; case 0
  5151  0360  1903               	skipnz
  5152  0361  2ACA               	goto	l2379
  5153  0362  3A01               	xorlw	1	; case 1
  5154  0363  1903               	skipnz
  5155  0364  2AED               	goto	l2405
  5156  0365  3A03               	xorlw	3	; case 2
  5157  0366  1903               	skipnz
  5158  0367  2B1B               	goto	l2427
  5159  0368  2B69               	goto	l2463
  5160  0369                     l2463:	
  5161                           
  5162                           ;mrf49xa_data.c: 177: }
  5163                           ;mrf49xa_data.c: 191: return PORTAbits.RA2 == 1 ? 1 : 0;
  5164  0369  0020               	movlb	0	; select bank0
  5165  036A  0C0C               	rrf	12,w	;volatile
  5166  036B  0C89               	rrf	9,f
  5167  036C  3901               	andlw	1
  5168  036D  0008               	return
  5169  036E                     __end_of_Mrf49xaServe:	
  5170  036E                     __ptext26:	
  5171 ;; *************** function _Mrf49TxByte *****************
  5172 ;; Defined at:
  5173 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  byte            1    wreg     unsigned char 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  byte            1    3[BANK0 ] unsigned char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;		None               void
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, pclath, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 1E/1
  5184 ;;		On exit  : 1F/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5187 ;;      Params:         0       0       0       0
  5188 ;;      Locals:         0       1       0       0
  5189 ;;      Temps:          0       0       0       0
  5190 ;;      Totals:         0       1       0       0
  5191 ;;Total ram usage:        1 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    8
  5194 ;; This function calls:
  5195 ;;		_Mrf49TxCmd
  5196 ;; This function is called by:
  5197 ;;		_Mrf49xaServe
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           
  5202                           ;psect for function _Mrf49TxByte
  5203  036E                     _Mrf49TxByte:	
  5204                           
  5205                           ;incstack = 0
  5206                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  5207                           ;Mrf49TxByte@byte stored from wreg
  5208  036E  0020               	movlb	0	; select bank0
  5209  036F  00A3               	movwf	Mrf49TxByte@byte
  5210                           
  5211                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  5212  0370  00A1               	movwf	Mrf49TxCmd@val
  5213  0371  30B8               	movlw	184
  5214  0372  2BB4               	ljmp	_Mrf49TxCmd
  5215  0373                     __end_of_Mrf49TxByte:	
  5216  0373                     __ptext29:	
  5217 ;; *************** function _Mrf49RxByte *****************
  5218 ;; Defined at:
  5219 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;		None
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      unsigned char 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0, pclath, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 1E/1
  5230 ;;		On exit  : 1F/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5233 ;;      Params:         0       0       0       0
  5234 ;;      Locals:         0       0       0       0
  5235 ;;      Temps:          0       0       0       0
  5236 ;;      Totals:         0       0       0       0
  5237 ;;Total ram usage:        0 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    8
  5240 ;; This function calls:
  5241 ;;		_Mrf49RxCmd
  5242 ;; This function is called by:
  5243 ;;		_Mrf49xaServe
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           
  5248                           ;psect for function _Mrf49RxByte
  5249  0373                     _Mrf49RxByte:	
  5250                           
  5251                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  5252                           
  5253                           ;incstack = 0
  5254                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  5255  0373  30B0               	movlw	176
  5256  0374  2A67               	ljmp	_Mrf49RxCmd
  5257  0375                     __end_of_Mrf49RxByte:	
  5258  0375                     __ptext24:	
  5259 ;; *************** function _Mrf49xaModeRx *****************
  5260 ;; Defined at:
  5261 ;;		line 77 in file "../../../src/devices/mrf49xa.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  k               1    0        unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;		None               void
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 1E/0
  5272 ;;		On exit  : 1F/1
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5275 ;;      Params:         0       0       0       0
  5276 ;;      Locals:         0       0       0       0
  5277 ;;      Temps:          0       0       0       0
  5278 ;;      Totals:         0       0       0       0
  5279 ;;Total ram usage:        0 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    9
  5282 ;; This function calls:
  5283 ;;		_mrf49xaCfg
  5284 ;; This function is called by:
  5285 ;;		_Mrf49xaInit
  5286 ;;		_Mrf49xaServe
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           
  5291                           ;psect for function _Mrf49xaModeRx
  5292  0375                     _Mrf49xaModeRx:	
  5293                           
  5294                           ;mrf49xa.c: 79: UI08_t k;
  5295                           ;mrf49xa.c: 81: mrf49xaCfg(mrfRegset_Rx, mrfRegset_RxCnt);
  5296                           
  5297                           ;incstack = 0
  5298                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  5299  0375  306D               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5300  0376  3187               	movlp	high __stringtab
  5301  0377  000A               	callw
  5302  0378  3181               	pagesel	$	;select current page
  5303  0379  0020               	movlb	0	; select bank0
  5304  037A  00A3               	movwf	mrf49xaCfg@count
  5305  037B  308F               	movlw	(_mrfRegset_Rx| (0+32768))& (0+255)
  5306  037C  2381               	fcall	_mrf49xaCfg
  5307                           
  5308                           ;mrf49xa.c: 83: rfTrcvStatus.state = RECV_IDLE;
  5309  037D  0021               	movlb	1	; select bank1
  5310  037E  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  5311                           
  5312                           ;mrf49xa.c: 84: rfTrcvStatus.hwByte = 0;
  5313  037F  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  5314  0380  0008               	return
  5315  0381                     __end_of_Mrf49xaModeRx:	
  5316  0381                     __ptext25:	
  5317 ;; *************** function _mrf49xaCfg *****************
  5318 ;; Defined at:
  5319 ;;		line 71 in file "../../../src/devices/mrf49xa.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  regs            1    wreg     PTR struct Mrf49InitReg_
  5322 ;;		 -> mrfRegset_Tx(8), mrfRegset_Rx(12), mrfRegset_Init(32), 
  5323 ;;  count           1    3[BANK0 ] unsigned char 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  regs            1    6[BANK0 ] PTR struct Mrf49InitReg_
  5326 ;;		 -> mrfRegset_Tx(8), mrfRegset_Rx(12), mrfRegset_Init(32), 
  5327 ;;  k               1    7[BANK0 ] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;		None               void
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0, pclath, cstack
  5332 ;; Tracked objects:
  5333 ;;		On entry : 1F/0
  5334 ;;		On exit  : 1F/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5337 ;;      Params:         0       1       0       0
  5338 ;;      Locals:         0       2       0       0
  5339 ;;      Temps:          0       2       0       0
  5340 ;;      Totals:         0       5       0       0
  5341 ;;Total ram usage:        5 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    8
  5344 ;; This function calls:
  5345 ;;		_Mrf49TxCmd
  5346 ;; This function is called by:
  5347 ;;		_Mrf49xaModeRx
  5348 ;;		_Mrf49xaModeTx
  5349 ;;		_Mrf49xaInit
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           
  5354                           ;psect for function _mrf49xaCfg
  5355  0381                     _mrf49xaCfg:	
  5356                           
  5357                           ;incstack = 0
  5358                           ; Regs used in _mrf49xaCfg: [wreg+status,2+status,0+pclath+cstack]
  5359                           ;mrf49xaCfg@regs stored from wreg
  5360  0381  00A6               	movwf	mrf49xaCfg@regs
  5361                           
  5362                           ;mrf49xa.c: 73: uint8_t k = 0;
  5363  0382  01A7               	clrf	mrf49xaCfg@k
  5364                           
  5365                           ;mrf49xa.c: 74: for (k = 0; k < count; k++) { if (regs[k].reg == 0x55) { _delay(40000); 
      +                          } else { Mrf49TxCmd(regs[k].reg, regs[k].val); } };
  5366  0383  01A7               	clrf	mrf49xaCfg@k
  5367  0384                     l2113:	
  5368  0384  0823               	movf	mrf49xaCfg@count,w
  5369  0385  0227               	subwf	mrf49xaCfg@k,w
  5370  0386  1803               	btfsc	3,0
  5371  0387  0008               	return
  5372  0388  0827               	movf	mrf49xaCfg@k,w
  5373  0389  00A4               	movwf	??_mrf49xaCfg
  5374  038A  35A4               	lslf	??_mrf49xaCfg,f
  5375  038B  0826               	movf	mrf49xaCfg@regs,w
  5376  038C  0724               	addwf	??_mrf49xaCfg,w
  5377  038D  3187               	movlp	high __stringtab
  5378  038E  000A               	callw
  5379  038F  3181               	pagesel	$	;select current page
  5380  0390  3A55               	xorlw	85
  5381  0391  1D03               	skipz
  5382  0392  2B9D               	goto	l2109
  5383  0393  3034               	movlw	52
  5384  0394  00A5               	movwf	??_mrf49xaCfg+1
  5385  0395  30F1               	movlw	241
  5386  0396  00A4               	movwf	??_mrf49xaCfg
  5387  0397                     u2067:	
  5388  0397  0BA4               	decfsz	??_mrf49xaCfg,f
  5389  0398  2B97               	goto	u2067
  5390  0399  0BA5               	decfsz	??_mrf49xaCfg+1,f
  5391  039A  2B97               	goto	u2067
  5392  039B  3200               	nop2
  5393  039C  2BB1               	goto	l2111
  5394  039D                     l2109:	
  5395  039D  0827               	movf	mrf49xaCfg@k,w
  5396  039E  00A4               	movwf	??_mrf49xaCfg
  5397  039F  35A4               	lslf	??_mrf49xaCfg,f
  5398  03A0  0826               	movf	mrf49xaCfg@regs,w
  5399  03A1  0724               	addwf	??_mrf49xaCfg,w
  5400  03A2  3E01               	addlw	1
  5401  03A3  3187               	movlp	high __stringtab
  5402  03A4  000A               	callw
  5403  03A5  00A1               	movwf	Mrf49TxCmd@val
  5404  03A6  0827               	movf	mrf49xaCfg@k,w
  5405  03A7  00A5               	movwf	??_mrf49xaCfg+1
  5406  03A8  35A5               	lslf	??_mrf49xaCfg+1,f
  5407  03A9  0826               	movf	mrf49xaCfg@regs,w
  5408  03AA  0725               	addwf	??_mrf49xaCfg+1,w
  5409  03AB  3187               	movlp	high __stringtab
  5410  03AC  000A               	callw
  5411  03AD  3181               	pagesel	$	;select current page
  5412  03AE  3183  23B4  3181   	fcall	_Mrf49TxCmd
  5413  03B1                     l2111:	
  5414  03B1  0020               	movlb	0	; select bank0
  5415  03B2  0AA7               	incf	mrf49xaCfg@k,f
  5416  03B3  2B84               	goto	l2113
  5417  03B4                     __end_of_mrf49xaCfg:	
  5418  03B4                     __ptext27:	
  5419 ;; *************** function _Mrf49TxCmd *****************
  5420 ;; Defined at:
  5421 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  cmd             1    wreg     unsigned char 
  5424 ;;  val             1    1[BANK0 ] unsigned char 
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;  cmd             1    2[BANK0 ] unsigned char 
  5427 ;; Return value:  Size  Location     Type
  5428 ;;		None               void
  5429 ;; Registers used:
  5430 ;;		wreg, status,2, status,0, pclath, cstack
  5431 ;; Tracked objects:
  5432 ;;		On entry : 1F/0
  5433 ;;		On exit  : 1F/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5436 ;;      Params:         0       1       0       0
  5437 ;;      Locals:         0       1       0       0
  5438 ;;      Temps:          0       0       0       0
  5439 ;;      Totals:         0       2       0       0
  5440 ;;Total ram usage:        2 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    7
  5443 ;; This function calls:
  5444 ;;		_Mrf49SpiTx
  5445 ;; This function is called by:
  5446 ;;		_mrf49xaCfg
  5447 ;;		_Mrf49TxByte
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           
  5452                           ;psect for function _Mrf49TxCmd
  5453  03B4                     _Mrf49TxCmd:	
  5454                           
  5455                           ;incstack = 0
  5456                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  5457                           ;Mrf49TxCmd@cmd stored from wreg
  5458  03B4  00A2               	movwf	Mrf49TxCmd@cmd
  5459                           
  5460                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  5461  03B5  130E               	bcf	14,6	;volatile
  5462                           
  5463                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  5464  03B6  0822               	movf	Mrf49TxCmd@cmd,w
  5465  03B7  23BD  3181         	fcall	_Mrf49SpiTx
  5466                           
  5467                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  5468  03B9  0821               	movf	Mrf49TxCmd@val,w
  5469  03BA  23BD               	fcall	_Mrf49SpiTx
  5470                           
  5471                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  5472  03BB  170E               	bsf	14,6	;volatile
  5473  03BC  0008               	return
  5474  03BD                     __end_of_Mrf49TxCmd:	
  5475  03BD                     __ptext31:	
  5476 ;; *************** function _Mrf49SpiTx *****************
  5477 ;; Defined at:
  5478 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  byte            1    wreg     unsigned char 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  byte            1    0[BANK0 ] unsigned char 
  5483 ;; Return value:  Size  Location     Type
  5484 ;;		None               void
  5485 ;; Registers used:
  5486 ;;		wreg
  5487 ;; Tracked objects:
  5488 ;;		On entry : 1F/0
  5489 ;;		On exit  : 1F/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5492 ;;      Params:         0       0       0       0
  5493 ;;      Locals:         0       1       0       0
  5494 ;;      Temps:          0       0       0       0
  5495 ;;      Totals:         0       1       0       0
  5496 ;;Total ram usage:        1 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    6
  5499 ;; This function calls:
  5500 ;;		Nothing
  5501 ;; This function is called by:
  5502 ;;		_Mrf49TxCmd
  5503 ;;		_Mrf49RxCmd
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _Mrf49SpiTx
  5509  03BD                     _Mrf49SpiTx:	
  5510                           
  5511                           ;incstack = 0
  5512                           ; Regs used in _Mrf49SpiTx: [wreg]
  5513                           ;Mrf49SpiTx@byte stored from wreg
  5514  03BD  00A0               	movwf	Mrf49SpiTx@byte
  5515                           
  5516                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; PORTCbits.RC7 = 1; asm("nop");; PORTCbits.RC7 = 0; } while (0);;
  5517  03BE  1FA0               	btfss	Mrf49SpiTx@byte,7
  5518  03BF  2BC2               	goto	l201
  5519  03C0  178D               	bsf	13,7	;volatile
  5520  03C1  2BC3               	goto	l202
  5521  03C2                     l201:	
  5522  03C2  138D               	bcf	13,7	;volatile
  5523  03C3                     l202:	
  5524  03C3  178E               	bsf	14,7	;volatile
  5525  03C4  0000               	nop	;# 
  5526  03C5  0020               	movlb	0	; select bank0
  5527  03C6  138E               	bcf	14,7	;volatile
  5528  03C7  1F20               	btfss	Mrf49SpiTx@byte,6
  5529  03C8  2BCB               	goto	l205
  5530  03C9  178D               	bsf	13,7	;volatile
  5531  03CA  2BCC               	goto	l206
  5532  03CB                     l205:	
  5533  03CB  138D               	bcf	13,7	;volatile
  5534  03CC                     l206:	
  5535  03CC  178E               	bsf	14,7	;volatile
  5536  03CD  0000               	nop	;# 
  5537  03CE  0020               	movlb	0	; select bank0
  5538  03CF  138E               	bcf	14,7	;volatile
  5539  03D0  1EA0               	btfss	Mrf49SpiTx@byte,5
  5540  03D1  2BD4               	goto	l209
  5541  03D2  178D               	bsf	13,7	;volatile
  5542  03D3  2BD5               	goto	l210
  5543  03D4                     l209:	
  5544  03D4  138D               	bcf	13,7	;volatile
  5545  03D5                     l210:	
  5546  03D5  178E               	bsf	14,7	;volatile
  5547  03D6  0000               	nop	;# 
  5548  03D7  0020               	movlb	0	; select bank0
  5549  03D8  138E               	bcf	14,7	;volatile
  5550  03D9  1E20               	btfss	Mrf49SpiTx@byte,4
  5551  03DA  2BDD               	goto	l213
  5552  03DB  178D               	bsf	13,7	;volatile
  5553  03DC  2BDE               	goto	l214
  5554  03DD                     l213:	
  5555  03DD  138D               	bcf	13,7	;volatile
  5556  03DE                     l214:	
  5557  03DE  178E               	bsf	14,7	;volatile
  5558  03DF  0000               	nop	;# 
  5559  03E0  0020               	movlb	0	; select bank0
  5560  03E1  138E               	bcf	14,7	;volatile
  5561  03E2  1DA0               	btfss	Mrf49SpiTx@byte,3
  5562  03E3  2BE6               	goto	l217
  5563  03E4  178D               	bsf	13,7	;volatile
  5564  03E5  2BE7               	goto	l218
  5565  03E6                     l217:	
  5566  03E6  138D               	bcf	13,7	;volatile
  5567  03E7                     l218:	
  5568  03E7  178E               	bsf	14,7	;volatile
  5569  03E8  0000               	nop	;# 
  5570  03E9  0020               	movlb	0	; select bank0
  5571  03EA  138E               	bcf	14,7	;volatile
  5572  03EB  1D20               	btfss	Mrf49SpiTx@byte,2
  5573  03EC  2BEF               	goto	l221
  5574  03ED  178D               	bsf	13,7	;volatile
  5575  03EE  2BF0               	goto	l222
  5576  03EF                     l221:	
  5577  03EF  138D               	bcf	13,7	;volatile
  5578  03F0                     l222:	
  5579  03F0  178E               	bsf	14,7	;volatile
  5580  03F1  0000               	nop	;# 
  5581  03F2  0020               	movlb	0	; select bank0
  5582  03F3  138E               	bcf	14,7	;volatile
  5583  03F4  1CA0               	btfss	Mrf49SpiTx@byte,1
  5584  03F5  2BF8               	goto	l225
  5585  03F6  178D               	bsf	13,7	;volatile
  5586  03F7  2BF9               	goto	l226
  5587  03F8                     l225:	
  5588  03F8  138D               	bcf	13,7	;volatile
  5589  03F9                     l226:	
  5590  03F9  178E               	bsf	14,7	;volatile
  5591  03FA  0000               	nop	;# 
  5592  03FB  0020               	movlb	0	; select bank0
  5593  03FC  138E               	bcf	14,7	;volatile
  5594  03FD  1C20               	btfss	Mrf49SpiTx@byte,0
  5595  03FE  2C01               	goto	l229
  5596  03FF  178D               	bsf	13,7	;volatile
  5597  0400  2C02               	goto	l230
  5598  0401                     l229:	
  5599  0401  138D               	bcf	13,7	;volatile
  5600  0402                     l230:	
  5601  0402  178E               	bsf	14,7	;volatile
  5602  0403  0000               	nop	;# 
  5603  0404  0020               	movlb	0	; select bank0
  5604  0405  138E               	bcf	14,7	;volatile
  5605                           
  5606                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  5607  0406  138D               	bcf	13,7	;volatile
  5608  0407  0008               	return
  5609  0408                     __end_of_Mrf49SpiTx:	
  5610  0408                     __ptext28:	
  5611 ;; *************** function _Mrf49RxSts *****************
  5612 ;; Defined at:
  5613 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;		None
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;		None
  5618 ;; Return value:  Size  Location     Type
  5619 ;;		None               void
  5620 ;; Registers used:
  5621 ;;		wreg, status,2, pclath, cstack
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 1F/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5627 ;;      Params:         0       0       0       0
  5628 ;;      Locals:         0       0       0       0
  5629 ;;      Temps:          0       0       0       0
  5630 ;;      Totals:         0       0       0       0
  5631 ;;Total ram usage:        0 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    7
  5634 ;; This function calls:
  5635 ;;		_Mrf49SpiRx
  5636 ;; This function is called by:
  5637 ;;		_Mrf49xaTick
  5638 ;;		_Mrf49xaServe
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           
  5643                           ;psect for function _Mrf49RxSts
  5644  0408                     _Mrf49RxSts:	
  5645                           
  5646                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  5647                           
  5648                           ;incstack = 0
  5649                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  5650  0408  120B               	bcf	11,4	;volatile
  5651                           
  5652                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  5653  0409  0020               	movlb	0	; select bank0
  5654  040A  130E               	bcf	14,6	;volatile
  5655                           
  5656                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  5657  040B  2413  3181         	fcall	_Mrf49SpiRx
  5658  040D  00CB               	movwf	_mrf49Status
  5659                           
  5660                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  5661  040E  2413               	fcall	_Mrf49SpiRx
  5662  040F  00CC               	movwf	_mrf49Status+1
  5663                           
  5664                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  5665  0410  170E               	bsf	14,6	;volatile
  5666                           
  5667                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  5668  0411  160B               	bsf	11,4	;volatile
  5669  0412  0008               	return
  5670  0413                     __end_of_Mrf49RxSts:	
  5671  0413                     __ptext32:	
  5672 ;; *************** function _Mrf49SpiRx *****************
  5673 ;; Defined at:
  5674 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;  data            1    0[BANK0 ] unsigned char 
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      unsigned char 
  5681 ;; Registers used:
  5682 ;;		wreg, status,2
  5683 ;; Tracked objects:
  5684 ;;		On entry : 1F/0
  5685 ;;		On exit  : 1F/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5688 ;;      Params:         0       0       0       0
  5689 ;;      Locals:         0       1       0       0
  5690 ;;      Temps:          0       0       0       0
  5691 ;;      Totals:         0       1       0       0
  5692 ;;Total ram usage:        1 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    6
  5695 ;; This function calls:
  5696 ;;		Nothing
  5697 ;; This function is called by:
  5698 ;;		_Mrf49RxCmd
  5699 ;;		_Mrf49RxSts
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           
  5704                           ;psect for function _Mrf49SpiRx
  5705  0413                     _Mrf49SpiRx:	
  5706                           
  5707                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  5708                           
  5709                           ;incstack = 0
  5710                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  5711  0413  01A0               	clrf	Mrf49SpiRx@data
  5712                           
  5713                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  5714  0414  138D               	bcf	13,7	;volatile
  5715  0415  1A8E               	btfsc	14,5	;volatile
  5716  0416  17A0               	bsf	Mrf49SpiRx@data,7
  5717  0417  178E               	bsf	14,7	;volatile
  5718  0418  0000               	nop	;# 
  5719  0419  0020               	movlb	0	; select bank0
  5720  041A  138E               	bcf	14,7	;volatile
  5721                           
  5722                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  5723  041B  1A8E               	btfsc	14,5	;volatile
  5724  041C  1720               	bsf	Mrf49SpiRx@data,6
  5725  041D  178E               	bsf	14,7	;volatile
  5726  041E  0000               	nop	;# 
  5727  041F  0020               	movlb	0	; select bank0
  5728  0420  138E               	bcf	14,7	;volatile
  5729                           
  5730                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  5731  0421  1A8E               	btfsc	14,5	;volatile
  5732  0422  16A0               	bsf	Mrf49SpiRx@data,5
  5733  0423  178E               	bsf	14,7	;volatile
  5734  0424  0000               	nop	;# 
  5735  0425  0020               	movlb	0	; select bank0
  5736  0426  138E               	bcf	14,7	;volatile
  5737                           
  5738                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  5739  0427  1A8E               	btfsc	14,5	;volatile
  5740  0428  1620               	bsf	Mrf49SpiRx@data,4
  5741  0429  178E               	bsf	14,7	;volatile
  5742  042A  0000               	nop	;# 
  5743  042B  0020               	movlb	0	; select bank0
  5744  042C  138E               	bcf	14,7	;volatile
  5745                           
  5746                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  5747  042D  1A8E               	btfsc	14,5	;volatile
  5748  042E  15A0               	bsf	Mrf49SpiRx@data,3
  5749  042F  178E               	bsf	14,7	;volatile
  5750  0430  0000               	nop	;# 
  5751  0431  0020               	movlb	0	; select bank0
  5752  0432  138E               	bcf	14,7	;volatile
  5753                           
  5754                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  5755  0433  1A8E               	btfsc	14,5	;volatile
  5756  0434  1520               	bsf	Mrf49SpiRx@data,2
  5757  0435  178E               	bsf	14,7	;volatile
  5758  0436  0000               	nop	;# 
  5759  0437  0020               	movlb	0	; select bank0
  5760  0438  138E               	bcf	14,7	;volatile
  5761                           
  5762                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  5763  0439  1A8E               	btfsc	14,5	;volatile
  5764  043A  14A0               	bsf	Mrf49SpiRx@data,1
  5765  043B  178E               	bsf	14,7	;volatile
  5766  043C  0000               	nop	;# 
  5767  043D  0020               	movlb	0	; select bank0
  5768  043E  138E               	bcf	14,7	;volatile
  5769                           
  5770                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  5771  043F  1A8E               	btfsc	14,5	;volatile
  5772  0440  1420               	bsf	Mrf49SpiRx@data,0
  5773  0441  178E               	bsf	14,7	;volatile
  5774  0442  0000               	nop	;# 
  5775  0443  0020               	movlb	0	; select bank0
  5776  0444  138E               	bcf	14,7	;volatile
  5777                           
  5778                           ;mrf49xa_spi_pic16.c: 40: return data;
  5779  0445  0820               	movf	Mrf49SpiRx@data,w
  5780  0446  0008               	return
  5781  0447                     __end_of_Mrf49SpiRx:	
  5782  0447                     __ptext21:	
  5783 ;; *************** function _Mrf49xaFreePacket *****************
  5784 ;; Defined at:
  5785 ;;		line 84 in file "../../../src/devices/mrf49xa_packet.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5788 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5791 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;		None               void
  5794 ;; Registers used:
  5795 ;;		wreg, fsr1l, fsr1h, status,2
  5796 ;; Tracked objects:
  5797 ;;		On entry : 1F/0
  5798 ;;		On exit  : 1F/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5801 ;;      Params:         0       0       0       0
  5802 ;;      Locals:         0       1       0       0
  5803 ;;      Temps:          0       0       0       0
  5804 ;;      Totals:         0       1       0       0
  5805 ;;Total ram usage:        1 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    6
  5808 ;; This function calls:
  5809 ;;		Nothing
  5810 ;; This function is called by:
  5811 ;;		_Mrf49xaTick
  5812 ;;		_HandlePacket
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _Mrf49xaFreePacket
  5818  0447                     _Mrf49xaFreePacket:	
  5819                           
  5820                           ;incstack = 0
  5821                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  5822                           ;Mrf49xaFreePacket@packet stored from wreg
  5823  0447  00A0               	movwf	Mrf49xaFreePacket@packet
  5824                           
  5825                           ;mrf49xa_packet.c: 86: packet->state = PKT_FREE;
  5826  0448  0086               	movwf	6
  5827  0449  0187               	clrf	7
  5828  044A  0181               	clrf	1
  5829  044B  0008               	return
  5830  044C                     __end_of_Mrf49xaFreePacket:	
  5831  044C                     __ptext7:	
  5832 ;; *************** function _HandlePacket *****************
  5833 ;; Defined at:
  5834 ;;		line 100 in file "../../../src/rfstack/client.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5837 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  packet          1   19[BANK0 ] PTR struct rfTrcvPacket_
  5840 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5841 ;;  sendMsg         1   18[BANK0 ] unsigned char 
  5842 ;;  sendAck         1   17[BANK0 ] unsigned char 
  5843 ;;  needAck         1    0        unsigned char 
  5844 ;; Return value:  Size  Location     Type
  5845 ;;		None               void
  5846 ;; Registers used:
  5847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 1F/0
  5850 ;;		On exit  : 1E/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5853 ;;      Params:         0       0       0       0
  5854 ;;      Locals:         0       4       0       0
  5855 ;;      Temps:          0       0       0       0
  5856 ;;      Totals:         0       4       0       0
  5857 ;;Total ram usage:        4 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:   10
  5860 ;; This function calls:
  5861 ;;		_Mrf49xaFreePacket
  5862 ;;		_Mrf49xaTxAck
  5863 ;;		_Mrf49xaTxPacket
  5864 ;;		_handleFwCmd
  5865 ;;		_handleFwRead
  5866 ;;		_handleFwWrite
  5867 ;; This function is called by:
  5868 ;;		_Mrf49xaTick
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           
  5873                           ;psect for function _HandlePacket
  5874  044C                     _HandlePacket:	
  5875                           
  5876                           ;incstack = 0
  5877                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5878                           ;HandlePacket@packet stored from wreg
  5879  044C  00B3               	movwf	HandlePacket@packet
  5880                           
  5881                           ;client.c: 102: bool_t sendMsg = 0;
  5882  044D  01B2               	clrf	HandlePacket@sendMsg
  5883                           
  5884                           ;client.c: 103: bool_t sendAck = 0;
  5885  044E  01B1               	clrf	HandlePacket@sendAck
  5886                           
  5887                           ;client.c: 107: switch (packet->packet.id)
  5888  044F  2C7F               	goto	l2529
  5889  0450                     l2505:	
  5890                           
  5891                           ;client.c: 110: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  5892                           ;client.c: 111: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  5893  0450  0833               	movf	HandlePacket@packet,w
  5894  0451  3E07               	addlw	7
  5895  0452  0086               	movwf	6
  5896  0453  0187               	clrf	7
  5897  0454  0021               	movlb	1	; select bank1
  5898  0455  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  5899  0456  0601               	xorwf	1,w
  5900  0457  1D03               	skipz
  5901  0458  2C9A               	goto	l2531
  5902  0459  0020               	movlb	0	; select bank0
  5903  045A  0833               	movf	HandlePacket@packet,w
  5904  045B  3E06               	addlw	6
  5905  045C  0086               	movwf	6
  5906  045D  0021               	movlb	1	; select bank1
  5907  045E  0857               	movf	(_rfTrcvStatus^(0+128)+55),w
  5908  045F  0601               	xorwf	1,w
  5909  0460  1D03               	skipz
  5910  0461  2C9A               	goto	l2531
  5911                           
  5912                           ;client.c: 112: {
  5913                           ;client.c: 113: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  5914  0462  3002               	movlw	2
  5915  0463  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5916  0464  2C9A               	goto	l2531
  5917  0465                     l2511:	
  5918                           
  5919                           ;client.c: 118: packet->packet.data[0] = 2;
  5920  0465  0833               	movf	HandlePacket@packet,w
  5921  0466  3E06               	addlw	6
  5922  0467  0086               	movwf	6
  5923  0468  3002               	movlw	2
  5924  0469  0187               	clrf	7
  5925  046A  0081               	movwf	1
  5926  046B                     l2513:	
  5927                           
  5928                           ;client.c: 119: sendMsg = 1;
  5929  046B  0020               	movlb	0	; select bank0
  5930  046C  01B2               	clrf	HandlePacket@sendMsg
  5931  046D  0AB2               	incf	HandlePacket@sendMsg,f
  5932                           
  5933                           ;client.c: 120: break;
  5934  046E  2C9A               	goto	l2531
  5935  046F                     l485:	
  5936                           ;client.c: 123: syncedTime = *((uint32_t*) packet->packet.data);
  5937                           
  5938                           
  5939                           ;client.c: 124: sendAck = 1;
  5940  046F  01B1               	clrf	HandlePacket@sendAck
  5941  0470  0AB1               	incf	HandlePacket@sendAck,f
  5942                           
  5943                           ;client.c: 125: break;
  5944  0471  2C9A               	goto	l2531
  5945  0472                     l2515:	
  5946                           
  5947                           ;client.c: 132: handleFwCmd(packet);
  5948  0472  0833               	movf	HandlePacket@packet,w
  5949  0473  24AA  3181         	fcall	_handleFwCmd
  5950  0475  2C6B               	goto	l2513
  5951  0476                     l2519:	
  5952                           
  5953                           ;client.c: 137: handleFwWrite(packet);
  5954  0476  0833               	movf	HandlePacket@packet,w
  5955  0477  3180  202D  3181   	fcall	_handleFwWrite
  5956  047A  2C6B               	goto	l2513
  5957  047B                     l2523:	
  5958                           
  5959                           ;client.c: 142: handleFwRead(packet);
  5960  047B  0833               	movf	HandlePacket@packet,w
  5961  047C  24DE  3181         	fcall	_handleFwRead
  5962  047E  2C6B               	goto	l2513
  5963  047F                     l2529:	
  5964  047F  0833               	movf	HandlePacket@packet,w
  5965  0480  3E04               	addlw	4
  5966  0481  0086               	movwf	6
  5967  0482  0187               	clrf	7
  5968  0483  0801               	movf	1,w
  5969                           
  5970                           ; Switch size 1, requested type "space"
  5971                           ; Number of cases is 7, Range of values is 160 to 194
  5972                           ; switch strategies available:
  5973                           ; Name         Instructions Cycles
  5974                           ; simple_byte           22    12 (average)
  5975                           ; direct_byte           79     9 (fixed)
  5976                           ; jumptable            263     9 (fixed)
  5977                           ;	Chosen strategy is simple_byte
  5978  0484  3AA0               	xorlw	160	; case 160
  5979  0485  1903               	skipnz
  5980  0486  2C65               	goto	l2511
  5981  0487  3A01               	xorlw	1	; case 161
  5982  0488  1903               	skipnz
  5983  0489  2C50               	goto	l2505
  5984  048A  3A03               	xorlw	3	; case 162
  5985  048B  1903               	skipnz
  5986  048C  2C6F               	goto	l485
  5987  048D  3A01               	xorlw	1	; case 163
  5988  048E  1903               	skipnz
  5989  048F  2C9A               	goto	l2531
  5990  0490  3A63               	xorlw	99	; case 192
  5991  0491  1903               	skipnz
  5992  0492  2C72               	goto	l2515
  5993  0493  3A01               	xorlw	1	; case 193
  5994  0494  1903               	skipnz
  5995  0495  2C76               	goto	l2519
  5996  0496  3A03               	xorlw	3	; case 194
  5997  0497  1903               	skipnz
  5998  0498  2C7B               	goto	l2523
  5999  0499  2C9A               	goto	l2531
  6000  049A                     l2531:	
  6001                           
  6002                           ;client.c: 148: if (sendMsg)
  6003  049A  0020               	movlb	0	; select bank0
  6004  049B  0832               	movf	HandlePacket@sendMsg,w
  6005  049C  1903               	btfsc	3,2
  6006  049D  2CA3               	goto	l2535
  6007                           
  6008                           ;client.c: 149: Mrf49xaTxPacket(packet, 1, needAck);
  6009  049E  01A0               	clrf	Mrf49xaTxPacket@response
  6010  049F  0AA0               	incf	Mrf49xaTxPacket@response,f
  6011  04A0  01A1               	clrf	Mrf49xaTxPacket@needAck
  6012  04A1  0833               	movf	HandlePacket@packet,w
  6013  04A2  2D12               	ljmp	_Mrf49xaTxPacket
  6014  04A3                     l2535:	
  6015                           
  6016                           ;client.c: 150: else if (sendAck)
  6017  04A3  0831               	movf	HandlePacket@sendAck,w
  6018  04A4  1903               	btfsc	3,2
  6019  04A5  2CA8               	goto	l2539
  6020                           
  6021                           ;client.c: 151: Mrf49xaTxAck(packet);
  6022  04A6  0833               	movf	HandlePacket@packet,w
  6023  04A7  2D58               	ljmp	_Mrf49xaTxAck
  6024  04A8                     l2539:	
  6025                           
  6026                           ;client.c: 152: else
  6027                           ;client.c: 153: Mrf49xaFreePacket(packet);
  6028  04A8  0833               	movf	HandlePacket@packet,w
  6029  04A9  2C47               	ljmp	_Mrf49xaFreePacket
  6030  04AA                     __end_of_HandlePacket:	
  6031  04AA                     __ptext11:	
  6032 ;; *************** function _handleFwCmd *****************
  6033 ;; Defined at:
  6034 ;;		line 19 in file "../../../src/rfstack/client.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6037 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  6040 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;		None               void
  6043 ;; Registers used:
  6044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6045 ;; Tracked objects:
  6046 ;;		On entry : 1F/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6050 ;;      Params:         0       0       0       0
  6051 ;;      Locals:         0       1       0       0
  6052 ;;      Temps:          0       0       0       0
  6053 ;;      Totals:         0       1       0       0
  6054 ;;Total ram usage:        1 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    9
  6057 ;; This function calls:
  6058 ;;		_eepromRxBytes
  6059 ;; This function is called by:
  6060 ;;		_HandlePacket
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           
  6065                           ;psect for function _handleFwCmd
  6066  04AA                     _handleFwCmd:	
  6067                           
  6068                           ;incstack = 0
  6069                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6070                           ;handleFwCmd@packet stored from wreg
  6071  04AA  00A8               	movwf	handleFwCmd@packet
  6072                           
  6073                           ;client.c: 41: break;
  6074                           
  6075                           ;client.c: 21: switch(packet->packet.data[0])
  6076  04AB  3E06               	addlw	6
  6077  04AC  0086               	movwf	6
  6078  04AD  0187               	clrf	7
  6079  04AE  0801               	movf	1,w
  6080                           
  6081                           ; Switch size 1, requested type "space"
  6082                           ; Number of cases is 8, Range of values is 0 to 7
  6083                           ; switch strategies available:
  6084                           ; Name         Instructions Cycles
  6085                           ; direct_byte           22     6 (fixed)
  6086                           ; simple_byte           25    13 (average)
  6087                           ; jumptable            260     6 (fixed)
  6088                           ;	Chosen strategy is direct_byte
  6089  04AF  0084               	movwf	4
  6090  04B0  3008               	movlw	8
  6091  04B1  0204               	subwf	4,w
  6092  04B2  1803               	skipnc
  6093  04B3  0008               	return
  6094  04B4  3187               	movlp	high S2849
  6095  04B5  3504               	lslf	4,w
  6096  04B6  3EA3               	addlw	low S2849
  6097  04B7  0082               	movwf	2
  6098  04B8                     l469:	
  6099  04B8  0008               	return
  6100  04B9                     l2285:	
  6101                           
  6102                           ;client.c: 28: packet->packet.size = 5;
  6103  04B9  0A28               	incf	handleFwCmd@packet,w
  6104  04BA  0086               	movwf	6
  6105  04BB  3005               	movlw	5
  6106  04BC  0187               	clrf	7
  6107  04BD  0081               	movwf	1
  6108                           
  6109                           ;client.c: 29: packet->packet.data[1] = 0;
  6110  04BE  0828               	movf	handleFwCmd@packet,w
  6111  04BF  3E07               	addlw	7
  6112  04C0  0086               	movwf	6
  6113  04C1  0181               	clrf	1
  6114                           
  6115                           ;client.c: 30: packet->packet.data[2] = 1;
  6116  04C2  0828               	movf	handleFwCmd@packet,w
  6117  04C3  3E08               	addlw	8
  6118  04C4  0086               	movwf	6
  6119  04C5  0181               	clrf	1
  6120  04C6  0A81               	incf	1,f
  6121                           
  6122                           ;client.c: 32: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  6123  04C7  01A4               	clrf	eepromRxBytes@address
  6124  04C8  01A5               	clrf	eepromRxBytes@address+1
  6125  04C9  0828               	movf	handleFwCmd@packet,w
  6126  04CA  3E09               	addlw	9
  6127  04CB  00A6               	movwf	eepromRxBytes@data
  6128  04CC  3002               	movlw	2
  6129  04CD  00A7               	movwf	eepromRxBytes@size
  6130  04CE  3181  2908         	ljmp	l2197
  6131  04D0                     l2293:	
  6132                           ;client.c: 34: break;
  6133                           
  6134                           
  6135                           ;client.c: 37: packet->packet.size = 2;
  6136  04D0  0A28               	incf	handleFwCmd@packet,w
  6137  04D1  0086               	movwf	6
  6138  04D2  3002               	movlw	2
  6139  04D3  0187               	clrf	7
  6140  04D4  0081               	movwf	1
  6141                           
  6142                           ;client.c: 38: eepromRxBytes(0x2, &(packet->packet.data[1]), 1);
  6143  04D5  00A4               	movwf	eepromRxBytes@address
  6144  04D6  01A5               	clrf	eepromRxBytes@address+1
  6145  04D7  0828               	movf	handleFwCmd@packet,w
  6146  04D8  3E07               	addlw	7
  6147  04D9  00A6               	movwf	eepromRxBytes@data
  6148  04DA  01A7               	clrf	eepromRxBytes@size
  6149  04DB  0AA7               	incf	eepromRxBytes@size,f
  6150  04DC  3181  2908         	ljmp	l2197
  6151  04DE                     __end_of_handleFwCmd:	
  6152  04DE                     __ptext10:	
  6153 ;; *************** function _handleFwRead *****************
  6154 ;; Defined at:
  6155 ;;		line 91 in file "../../../src/rfstack/client.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6158 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  6161 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6162 ;;  address         2    8[BANK0 ] unsigned int 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;		None               void
  6165 ;; Registers used:
  6166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6167 ;; Tracked objects:
  6168 ;;		On entry : 1F/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6172 ;;      Params:         0       0       0       0
  6173 ;;      Locals:         0       3       0       0
  6174 ;;      Temps:          0       0       0       0
  6175 ;;      Totals:         0       3       0       0
  6176 ;;Total ram usage:        3 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:    9
  6179 ;; This function calls:
  6180 ;;		_eepromRxBytes
  6181 ;; This function is called by:
  6182 ;;		_HandlePacket
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           
  6187                           ;psect for function _handleFwRead
  6188  04DE                     _handleFwRead:	
  6189                           
  6190                           ;incstack = 0
  6191                           ; Regs used in _handleFwRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6192                           ;handleFwRead@packet stored from wreg
  6193  04DE  00AA               	movwf	handleFwRead@packet
  6194                           
  6195                           ;client.c: 93: packet->packet.size = 16;
  6196  04DF  0A2A               	incf	handleFwRead@packet,w
  6197  04E0  0086               	movwf	6
  6198  04E1  3010               	movlw	16
  6199  04E2  0187               	clrf	7
  6200  04E3  0081               	movwf	1
  6201                           
  6202                           ;client.c: 94: UI16_t address = (packet->packet.data[2] << 8) | packet->packet.data[3];
  6203  04E4  082A               	movf	handleFwRead@packet,w
  6204  04E5  3E09               	addlw	9
  6205  04E6  0086               	movwf	6
  6206  04E7  082A               	movf	handleFwRead@packet,w
  6207  04E8  3E08               	addlw	8
  6208  04E9  0084               	movwf	4
  6209  04EA  0185               	clrf	5
  6210  04EB  0800               	movf	0,w
  6211  04EC  00A9               	movwf	handleFwRead@address+1
  6212  04ED  0801               	movf	1,w
  6213  04EE  00A8               	movwf	handleFwRead@address
  6214                           
  6215                           ;client.c: 96: eepromRxBytes(address, packet->packet.data+8, 8);
  6216  04EF  0829               	movf	handleFwRead@address+1,w
  6217  04F0  00A5               	movwf	eepromRxBytes@address+1
  6218  04F1  0828               	movf	handleFwRead@address,w
  6219  04F2  00A4               	movwf	eepromRxBytes@address
  6220  04F3  082A               	movf	handleFwRead@packet,w
  6221  04F4  3E0E               	addlw	14
  6222  04F5  00A6               	movwf	eepromRxBytes@data
  6223  04F6  3008               	movlw	8
  6224  04F7  00A7               	movwf	eepromRxBytes@size
  6225  04F8  3181  2908         	ljmp	l2197
  6226  04FA                     __end_of_handleFwRead:	
  6227  04FA                     __ptext5:	
  6228 ;; *************** function _Mrf49xaPacketPending *****************
  6229 ;; Defined at:
  6230 ;;		line 5 in file "../../../src/devices/mrf49xa_packet.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;		None
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  1    wreg      unsigned char 
  6237 ;; Registers used:
  6238 ;;		wreg
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 1F/1
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6244 ;;      Params:         0       0       0       0
  6245 ;;      Locals:         0       0       0       0
  6246 ;;      Temps:          0       0       0       0
  6247 ;;      Totals:         0       0       0       0
  6248 ;;Total ram usage:        0 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    6
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_Mrf49xaTick
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           
  6259                           ;psect for function _Mrf49xaPacketPending
  6260  04FA                     _Mrf49xaPacketPending:	
  6261                           
  6262                           ;mrf49xa_packet.c: 7: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  6263                           ;mrf49xa_packet.c: 8: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  6264                           
  6265                           ;incstack = 0
  6266                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  6267  04FA  0021               	movlb	1	; select bank1
  6268  04FB  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  6269  04FC  3A04               	xorlw	4
  6270  04FD  1903               	skipnz
  6271  04FE  3401               	retlw	1
  6272  04FF  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  6273  0500  3A04               	xorlw	4
  6274  0501  1903               	btfsc	3,2
  6275                           
  6276                           ;mrf49xa_packet.c: 9: return 1;
  6277  0502  3401               	retlw	1
  6278                           
  6279                           ;mrf49xa_packet.c: 10: else
  6280                           ;mrf49xa_packet.c: 11: return 0;
  6281  0503  3400               	retlw	0
  6282  0504                     __end_of_Mrf49xaPacketPending:	
  6283  0504                     __ptext4:	
  6284 ;; *************** function _Mrf49xaRxPacket *****************
  6285 ;; Defined at:
  6286 ;;		line 89 in file "../../../src/devices/mrf49xa_packet.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      PTR struct rfTrcvPacket_
  6293 ;; Registers used:
  6294 ;;		wreg
  6295 ;; Tracked objects:
  6296 ;;		On entry : 1F/1
  6297 ;;		On exit  : 1F/1
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6300 ;;      Params:         0       0       0       0
  6301 ;;      Locals:         0       0       0       0
  6302 ;;      Temps:          0       0       0       0
  6303 ;;      Totals:         0       0       0       0
  6304 ;;Total ram usage:        0 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    6
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_Mrf49xaTick
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function _Mrf49xaRxPacket
  6316  0504                     _Mrf49xaRxPacket:	
  6317                           
  6318                           ;mrf49xa_packet.c: 91: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  6319                           
  6320                           ;incstack = 0
  6321                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  6322  0504  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  6323  0505  3A04               	xorlw	4
  6324  0506  1D03               	skipz
  6325  0507  2D0B               	goto	l2493
  6326                           
  6327                           ;mrf49xa_packet.c: 92: {
  6328                           ;mrf49xa_packet.c: 93: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  6329  0508  3005               	movlw	5
  6330  0509  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  6331                           
  6332                           ;mrf49xa_packet.c: 94: return &(rfTrcvStatus.rxPacket[0]);
  6333  050A  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  6334  050B                     l2493:	
  6335                           
  6336                           ;mrf49xa_packet.c: 95: }
  6337                           ;mrf49xa_packet.c: 97: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  6338  050B  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  6339  050C  3A04               	xorlw	4
  6340  050D  1D03               	skipz
  6341  050E  3400               	retlw	0
  6342                           
  6343                           ;mrf49xa_packet.c: 98: {
  6344                           ;mrf49xa_packet.c: 99: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  6345  050F  3005               	movlw	5
  6346  0510  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  6347                           
  6348                           ;mrf49xa_packet.c: 100: return &(rfTrcvStatus.rxPacket[1]);
  6349  0511  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  6350  0512                     __end_of_Mrf49xaRxPacket:	
  6351                           ;mrf49xa_packet.c: 101: }
  6352                           ;mrf49xa_packet.c: 103: return (0);
  6353                           
  6354  0512                     __ptext20:	
  6355 ;; *************** function _Mrf49xaTxPacket *****************
  6356 ;; Defined at:
  6357 ;;		line 26 in file "../../../src/devices/mrf49xa_packet.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6360 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6361 ;;  response        1    0[BANK0 ] unsigned char 
  6362 ;;  needAck         1    1[BANK0 ] unsigned char 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  6365 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6366 ;;  i               1    4[BANK0 ] unsigned char 
  6367 ;;  crc             1    3[BANK0 ] unsigned char 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      unsigned char 
  6370 ;; Registers used:
  6371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6372 ;; Tracked objects:
  6373 ;;		On entry : 1F/0
  6374 ;;		On exit  : 1F/1
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6377 ;;      Params:         0       2       0       0
  6378 ;;      Locals:         0       3       0       0
  6379 ;;      Temps:          0       1       0       0
  6380 ;;      Totals:         0       6       0       0
  6381 ;;Total ram usage:        6 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    6
  6384 ;; This function calls:
  6385 ;;		Nothing
  6386 ;; This function is called by:
  6387 ;;		_Mrf49xaTxAck
  6388 ;;		_HandlePacket
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           
  6393                           ;psect for function _Mrf49xaTxPacket
  6394  0512                     _Mrf49xaTxPacket:	
  6395                           
  6396                           ;incstack = 0
  6397                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  6398                           ;Mrf49xaTxPacket@packet stored from wreg
  6399  0512  00A5               	movwf	Mrf49xaTxPacket@packet
  6400  0513  3033               	movlw	51
  6401                           
  6402                           ;mrf49xa_packet.c: 28: uint8_t i, crc = 0;
  6403  0514  01A3               	clrf	Mrf49xaTxPacket@crc
  6404                           
  6405                           ;mrf49xa_packet.c: 30: if (&(rfTrcvStatus.txPacket) == packet)
  6406  0515  3EA0               	addlw	_rfTrcvStatus& (0+255)
  6407  0516  0625               	xorwf	Mrf49xaTxPacket@packet,w
  6408  0517  1D03               	skipz
  6409  0518  2D22               	goto	l2151
  6410                           
  6411                           ;mrf49xa_packet.c: 31: {
  6412                           ;mrf49xa_packet.c: 32: if (response)
  6413  0519  0820               	movf	Mrf49xaTxPacket@response,w
  6414  051A  1903               	btfsc	3,2
  6415  051B  2D1F               	goto	l2135
  6416                           
  6417                           ;mrf49xa_packet.c: 33: {
  6418                           ;mrf49xa_packet.c: 34: packet->packet.dst = packet->packet.src;
  6419  051C  0825               	movf	Mrf49xaTxPacket@packet,w
  6420  051D  25A1  3181         	fcall	PL6	;call to abstracted procedure
  6421  051F                     l2135:	
  6422                           
  6423                           ;mrf49xa_packet.c: 35: }
  6424                           ;mrf49xa_packet.c: 36: packet->packet.src = rfTrcvStatus.src;
  6425                           
  6426                           ;mrf49xa_packet.c: 37: packet->packet.size += 5;
  6427                           
  6428                           ;mrf49xa_packet.c: 39: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6429                           
  6430                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.retry = 0;
  6431                           
  6432                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retransmit = 0;
  6433                           
  6434                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6435  051F  2578               	fcall	PL2	;call to abstracted procedure
  6436                           
  6437                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.crc = 0;
  6438  0520  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  6439  0521  0008               	return
  6440  0522                     l2151:	
  6441                           
  6442                           ;mrf49xa_packet.c: 45: }
  6443                           ;mrf49xa_packet.c: 48: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  6444  0522  0021               	movlb	1	; select bank1
  6445  0523  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  6446  0524  1D03               	skipz
  6447  0525  0008               	return
  6448                           
  6449                           ;mrf49xa_packet.c: 53: else
  6450                           ;mrf49xa_packet.c: 54: {
  6451                           ;mrf49xa_packet.c: 55: if (response)
  6452  0526  0020               	movlb	0	; select bank0
  6453  0527  0820               	movf	Mrf49xaTxPacket@response,w
  6454  0528  1903               	btfsc	3,2
  6455  0529  2D2D               	goto	l2161
  6456                           
  6457                           ;mrf49xa_packet.c: 56: {
  6458                           ;mrf49xa_packet.c: 57: packet->packet.dst = packet->packet.src;
  6459  052A  0825               	movf	Mrf49xaTxPacket@packet,w
  6460  052B  25A1  3181         	fcall	PL6	;call to abstracted procedure
  6461  052D                     l2161:	
  6462                           
  6463                           ;mrf49xa_packet.c: 58: }
  6464                           ;mrf49xa_packet.c: 59: packet->packet.src = rfTrcvStatus.src;
  6465                           
  6466                           ;mrf49xa_packet.c: 60: packet->packet.size += 5;
  6467                           
  6468                           ;mrf49xa_packet.c: 62: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6469                           
  6470                           ;mrf49xa_packet.c: 63: rfTrcvStatus.txPacket.retry = 0;
  6471                           
  6472                           ;mrf49xa_packet.c: 64: rfTrcvStatus.txPacket.retransmit = 0;
  6473                           
  6474                           ;mrf49xa_packet.c: 65: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6475  052D  2578  3181         	fcall	PL2	;call to abstracted procedure
  6476                           
  6477                           ;mrf49xa_packet.c: 67: packet->state = PKT_FREE;
  6478  052F  0020               	movlb	0	; select bank0
  6479  0530  0825               	movf	Mrf49xaTxPacket@packet,w
  6480  0531  0086               	movwf	6
  6481  0532  0181               	clrf	1
  6482                           
  6483                           ;mrf49xa_packet.c: 70: for (i = 0; i < (16 + 5); i++)
  6484  0533  01A4               	clrf	Mrf49xaTxPacket@i
  6485  0534                     l2181:	
  6486                           
  6487                           ;mrf49xa_packet.c: 71: {
  6488                           ;mrf49xa_packet.c: 72: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  6489  0534  0824               	movf	Mrf49xaTxPacket@i,w
  6490  0535  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6491  0536  0086               	movwf	6
  6492  0537  0187               	clrf	7
  6493  0538  0824               	movf	Mrf49xaTxPacket@i,w
  6494  0539  0725               	addwf	Mrf49xaTxPacket@packet,w
  6495  053A  00A2               	movwf	??_Mrf49xaTxPacket
  6496  053B  0A22               	incf	??_Mrf49xaTxPacket,w
  6497  053C  0084               	movwf	4
  6498  053D  0185               	clrf	5
  6499  053E  0800               	movf	0,w
  6500  053F  0081               	movwf	1
  6501  0540  3015               	movlw	21
  6502  0541  0AA4               	incf	Mrf49xaTxPacket@i,f
  6503  0542  0224               	subwf	Mrf49xaTxPacket@i,w
  6504  0543  1C03               	skipc
  6505  0544  2D34               	goto	l2181
  6506                           
  6507                           ;mrf49xa_packet.c: 73: }
  6508                           ;mrf49xa_packet.c: 74: for (i = 0; i < packet->packet.size; i++)
  6509  0545  01A4               	clrf	Mrf49xaTxPacket@i
  6510  0546                     l321:	
  6511  0546  0A25               	incf	Mrf49xaTxPacket@packet,w
  6512  0547  0086               	movwf	6
  6513  0548  0187               	clrf	7
  6514  0549  0801               	movf	1,w
  6515  054A  0224               	subwf	Mrf49xaTxPacket@i,w
  6516  054B  1803               	btfsc	3,0
  6517  054C  2D54               	goto	l2193
  6518                           
  6519                           ;mrf49xa_packet.c: 75: {
  6520                           ;mrf49xa_packet.c: 76: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  6521  054D  0824               	movf	Mrf49xaTxPacket@i,w
  6522  054E  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6523  054F  0086               	movwf	6
  6524  0550  0801               	movf	1,w
  6525  0551  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  6526  0552  0AA4               	incf	Mrf49xaTxPacket@i,f
  6527  0553  2D46               	goto	l321
  6528  0554                     l2193:	
  6529                           
  6530                           ;mrf49xa_packet.c: 77: }
  6531                           ;mrf49xa_packet.c: 79: rfTrcvStatus.txPacket.crc = crc;
  6532  0554  0823               	movf	Mrf49xaTxPacket@crc,w
  6533  0555  0021               	movlb	1	; select bank1
  6534  0556  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  6535  0557  0008               	return
  6536  0558                     __end_of_Mrf49xaTxPacket:	
  6537  0558                     __ptext19:	
  6538 ;; *************** function _Mrf49xaTxAck *****************
  6539 ;; Defined at:
  6540 ;;		line 14 in file "../../../src/devices/mrf49xa_packet.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6543 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  6546 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;		None               void
  6549 ;; Registers used:
  6550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 1F/0
  6553 ;;		On exit  : 1F/1
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6556 ;;      Params:         0       0       0       0
  6557 ;;      Locals:         0       1       0       0
  6558 ;;      Temps:          0       0       0       0
  6559 ;;      Totals:         0       1       0       0
  6560 ;;Total ram usage:        1 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    7
  6563 ;; This function calls:
  6564 ;;		_Mrf49xaTxPacket
  6565 ;; This function is called by:
  6566 ;;		_HandlePacket
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           
  6571                           ;psect for function _Mrf49xaTxAck
  6572  0558                     _Mrf49xaTxAck:	
  6573                           
  6574                           ;incstack = 0
  6575                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6576                           ;Mrf49xaTxAck@packet stored from wreg
  6577  0558  00A6               	movwf	Mrf49xaTxAck@packet
  6578                           
  6579                           ;mrf49xa_packet.c: 16: packet->packet.data[0] = packet->packet.id;
  6580  0559  3E06               	addlw	6
  6581  055A  0086               	movwf	6
  6582  055B  0187               	clrf	7
  6583  055C  0826               	movf	Mrf49xaTxAck@packet,w
  6584  055D  3E04               	addlw	4
  6585  055E  0084               	movwf	4
  6586  055F  0185               	clrf	5
  6587  0560  0800               	movf	0,w
  6588  0561  0081               	movwf	1
  6589                           
  6590                           ;mrf49xa_packet.c: 17: packet->packet.data[1] = packet->crc;
  6591  0562  0826               	movf	Mrf49xaTxAck@packet,w
  6592  0563  3E07               	addlw	7
  6593  0564  0086               	movwf	6
  6594  0565  0826               	movf	Mrf49xaTxAck@packet,w
  6595  0566  3E16               	addlw	22
  6596  0567  0084               	movwf	4
  6597  0568  0800               	movf	0,w
  6598  0569  0081               	movwf	1
  6599                           
  6600                           ;mrf49xa_packet.c: 20: packet->packet.id = RF_ACK;
  6601  056A  0826               	movf	Mrf49xaTxAck@packet,w
  6602  056B  3E04               	addlw	4
  6603  056C  0086               	movwf	6
  6604  056D  30A1               	movlw	161
  6605  056E  0081               	movwf	1
  6606                           
  6607                           ;mrf49xa_packet.c: 21: packet->packet.size = 2;
  6608  056F  0A26               	incf	Mrf49xaTxAck@packet,w
  6609  0570  0086               	movwf	6
  6610  0571  3002               	movlw	2
  6611  0572  0081               	movwf	1
  6612                           
  6613                           ;mrf49xa_packet.c: 23: Mrf49xaTxPacket(packet, 1, 0);
  6614  0573  01A0               	clrf	Mrf49xaTxPacket@response
  6615  0574  0AA0               	incf	Mrf49xaTxPacket@response,f
  6616  0575  01A1               	clrf	Mrf49xaTxPacket@needAck
  6617  0576  0826               	movf	Mrf49xaTxAck@packet,w
  6618  0577  2D12               	ljmp	_Mrf49xaTxPacket
  6619  0578                     __end_of_Mrf49xaTxAck:	
  6620  0578                     PL2:	
  6621  0578  0825               	movf	Mrf49xaTxPacket@packet,w
  6622  0579  3E02               	addlw	2
  6623  057A  0086               	movwf	6
  6624  057B  0187               	clrf	7
  6625  057C  0021               	movlb	1	; select bank1
  6626  057D  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  6627  057E  0081               	movwf	1
  6628  057F  0020               	movlb	0	; select bank0
  6629  0580  0A25               	incf	Mrf49xaTxPacket@packet,w
  6630  0581  0086               	movwf	6
  6631  0582  3005               	movlw	5
  6632  0583  0781               	addwf	1,f
  6633  0584  0021               	movlb	1	; select bank1
  6634  0585  30F0               	movlw	-16
  6635  0586  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  6636  0587  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  6637  0588  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6638  0589  30CF               	movlw	-49
  6639  058A  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6640  058B  0020               	movlb	0	; select bank0
  6641  058C  0321               	decf	Mrf49xaTxPacket@needAck,w
  6642  058D  3000               	movlw	0
  6643  058E  1903               	skipnz
  6644  058F  3001               	movlw	1
  6645  0590  0021               	movlb	1	; select bank1
  6646  0591  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  6647  0592  0008               	return
  6648  0593                     __end_ofPL2:	
  6649  0593                     PL4:	
  6650  0593  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6651  0594  390F               	andlw	15
  6652  0595  0020               	movlb	0	; select bank0
  6653  0596  00B4               	movwf	??_Mrf49xaTick
  6654  0597  0AB4               	incf	??_Mrf49xaTick,f
  6655  0598  0021               	movlb	1	; select bank1
  6656  0599  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6657  059A  0020               	movlb	0	; select bank0
  6658  059B  0634               	xorwf	??_Mrf49xaTick,w
  6659  059C  39F0               	andlw	-16
  6660  059D  0634               	xorwf	??_Mrf49xaTick,w
  6661  059E  0021               	movlb	1	; select bank1
  6662  059F  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  6663  05A0  0008               	return
  6664  05A1                     __end_ofPL4:	
  6665  05A1                     PL6:	
  6666  05A1  3E03               	addlw	3
  6667  05A2  0086               	movwf	6
  6668  05A3  0187               	clrf	7
  6669  05A4  0825               	movf	Mrf49xaTxPacket@packet,w
  6670  05A5  3E02               	addlw	2
  6671  05A6  0084               	movwf	4
  6672  05A7  0185               	clrf	5
  6673  05A8  0800               	movf	0,w
  6674  05A9  0081               	movwf	1
  6675  05AA  0008               	return
  6676  05AB                     __end_ofPL6:	
  6677  05AB                     PL8:	
  6678  05AB  0020               	movlb	0	; select bank0
  6679  05AC  0829               	movf	Mrf49xaServe@data,w
  6680  05AD  0081               	movwf	1
  6681  05AE  0021               	movlb	1	; select bank1
  6682  05AF  0820               	movf	_rfTrcvStatus^(0+128),w
  6683  05B0  0008               	return
  6684  05B1                     __end_ofPL8:	
  6685  05B1                     __ptext6:	
  6686 ;; *************** function _Mrf49xaModeTx *****************
  6687 ;; Defined at:
  6688 ;;		line 87 in file "../../../src/devices/mrf49xa.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  k               1    0        unsigned char 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;		None               void
  6695 ;; Registers used:
  6696 ;;		wreg, status,2, status,0, pclath, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 1F/0
  6699 ;;		On exit  : 1F/1
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6702 ;;      Params:         0       0       0       0
  6703 ;;      Locals:         0       0       0       0
  6704 ;;      Temps:          0       0       0       0
  6705 ;;      Totals:         0       0       0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    9
  6709 ;; This function calls:
  6710 ;;		_mrf49xaCfg
  6711 ;; This function is called by:
  6712 ;;		_Mrf49xaTick
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           
  6717                           ;psect for function _Mrf49xaModeTx
  6718  05B1                     _Mrf49xaModeTx:	
  6719                           
  6720                           ;mrf49xa.c: 89: UI08_t k;
  6721                           ;mrf49xa.c: 91: mrf49xaCfg(mrfRegset_Tx, mrfRegset_TxCnt);
  6722                           
  6723                           ;incstack = 0
  6724                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  6725  05B1  306E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  6726  05B2  3187               	movlp	high __stringtab
  6727  05B3  000A               	callw
  6728  05B4  3181               	pagesel	$	;select current page
  6729  05B5  00A3               	movwf	mrf49xaCfg@count
  6730  05B6  309B               	movlw	(_mrfRegset_Tx| (0+32768))& (0+255)
  6731  05B7  2381               	fcall	_mrf49xaCfg
  6732                           
  6733                           ;mrf49xa.c: 93: rfTrcvStatus.state = TX_PACKET;
  6734  05B8  3002               	movlw	2
  6735  05B9  0021               	movlb	1	; select bank1
  6736  05BA  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  6737                           
  6738                           ;mrf49xa.c: 94: rfTrcvStatus.hwByte = 99;
  6739  05BB  3063               	movlw	99
  6740  05BC  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6741  05BD  0008               	return
  6742  05BE                     __end_of_Mrf49xaModeTx:	
  6743                           
  6744                           	psect	swtext1
  6745  07A3                     __pswtext1:	
  6746  07A3                     S2849:	
  6747  07A3  3184  2CB8         	ljmp	l469
  6748  07A5  3184  2CB9         	ljmp	l2285
  6749  07A7  3184  2CD0         	ljmp	l2293
  6750  07A9  3184  2CB8         	ljmp	l469
  6751  07AB  3184  2CB8         	ljmp	l469
  6752  07AD  3184  2CB8         	ljmp	l469
  6753  07AF  3184  2CB8         	ljmp	l469
  6754  07B1  3184  2CB8         	ljmp	l469
  6755                           
  6756                           	psect	intentry
  6757  0004                     __pintentry:	
  6758 ;; *************** function _extInt *****************
  6759 ;; Defined at:
  6760 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;		None
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;		None
  6765 ;; Return value:  Size  Location     Type
  6766 ;;		None               void
  6767 ;; Registers used:
  6768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 1F/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6774 ;;      Params:         0       0       0       0
  6775 ;;      Locals:         0       0       0       0
  6776 ;;      Temps:          1       0       0       0
  6777 ;;      Totals:         1       0       0       0
  6778 ;;Total ram usage:        1 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    5
  6781 ;; This function calls:
  6782 ;;		i1_Mrf49xaServe
  6783 ;; This function is called by:
  6784 ;;		Interrupt level 1
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788  0004                     _extInt:	
  6789                           
  6790                           ;incstack = 0
  6791                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6792  0004  3180               	pagesel	$
  6793  0005  0020               	movlb	0	; select bank0
  6794  0006  087F               	movf	127,w
  6795  0007  00FA               	movwf	??_extInt
  6796                           
  6797                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  6798  0008  1C8B               	btfss	11,1	;volatile
  6799  0009  2811               	goto	i1l131
  6800                           
  6801                           ;interrupt.c: 34: {
  6802                           ;interrupt.c: 35: if (Mrf49xaServe())
  6803  000A  3185  25C8  3180   	fcall	i1_Mrf49xaServe
  6804  000D  3A00               	xorlw	0
  6805  000E  1903               	skipnz
  6806  000F  2811               	goto	i1l131
  6807                           
  6808                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  6809  0010  108B               	bcf	11,1	;volatile
  6810  0011                     i1l131:	
  6811  0011  087A               	movf	??_extInt,w
  6812  0012  00FF               	movwf	127
  6813  0013  0009               	retfie
  6814  0014                     __end_of_extInt:	
  6815                           
  6816                           	psect	text43
  6817  05BE                     __ptext43:	
  6818 ;; *************** function i1_Mrf49RxCmd *****************
  6819 ;; Defined at:
  6820 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  cmd             1    wreg     unsigned char 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  cmd             1    1[COMMON] unsigned char 
  6825 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  1    wreg      unsigned char 
  6828 ;; Registers used:
  6829 ;;		wreg, status,2, status,0, pclath, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 1E/1
  6832 ;;		On exit  : 1F/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6835 ;;      Params:         0       0       0       0
  6836 ;;      Locals:         2       0       0       0
  6837 ;;      Temps:          0       0       0       0
  6838 ;;      Totals:         2       0       0       0
  6839 ;;Total ram usage:        2 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    1
  6842 ;; This function calls:
  6843 ;;		i1_Mrf49SpiRx
  6844 ;;		i1_Mrf49SpiTx
  6845 ;; This function is called by:
  6846 ;;		i1_Mrf49RxByte
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           
  6851                           ;psect for function i1_Mrf49RxCmd
  6852  05BE                     i1_Mrf49RxCmd:	
  6853                           
  6854                           ;incstack = 0
  6855                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  6856                           ;i1Mrf49RxCmd@cmd stored from wreg
  6857  05BE  00F1               	movwf	i1Mrf49RxCmd@cmd
  6858                           
  6859                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  6860  05BF  0020               	movlb	0	; select bank0
  6861  05C0  130E               	bcf	14,6	;volatile
  6862                           
  6863                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  6864  05C1  0871               	movf	i1Mrf49RxCmd@cmd,w
  6865  05C2  2720  3185         	fcall	i1_Mrf49SpiTx
  6866                           
  6867                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  6868  05C4  26B0               	fcall	i1_Mrf49SpiRx
  6869  05C5  00F2               	movwf	i1Mrf49RxCmd@val
  6870                           
  6871                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  6872  05C6  170E               	bsf	14,6	;volatile
  6873                           
  6874                           ;mrf49xa_cmd.c: 27: return val;
  6875  05C7  0008               	return
  6876  05C8                     __end_ofi1_Mrf49RxCmd:	
  6877  05C8                     __ptext36:	
  6878 ;; *************** function i1_Mrf49xaServe *****************
  6879 ;; Defined at:
  6880 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;		None
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  Mrf49xaServe    1    9[COMMON] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      unsigned char 
  6887 ;; Registers used:
  6888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 1F/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6894 ;;      Params:         0       0       0       0
  6895 ;;      Locals:         1       0       0       0
  6896 ;;      Temps:          1       0       0       0
  6897 ;;      Totals:         2       0       0       0
  6898 ;;Total ram usage:        2 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    4
  6901 ;; This function calls:
  6902 ;;		i1_Mrf49RxByte
  6903 ;;		i1_Mrf49RxSts
  6904 ;;		i1_Mrf49TxByte
  6905 ;;		i1_Mrf49xaModeRx
  6906 ;; This function is called by:
  6907 ;;		_extInt
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           
  6912                           ;psect for function i1_Mrf49xaServe
  6913  05C8                     i1_Mrf49xaServe:	
  6914                           
  6915                           ;mrf49xa_data.c: 10: uint8_t data;
  6916                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  6917                           
  6918                           ;incstack = 0
  6919                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6920  05C8  26A5  3185         	fcall	i1_Mrf49RxSts
  6921                           
  6922                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  6923  05CA  084B               	movf	_mrf49Status,w
  6924  05CB  3AFF               	xorlw	255
  6925  05CC  1D03               	skipz
  6926  05CD  2DD2               	goto	i1l378
  6927  05CE  084C               	movf	_mrf49Status+1,w
  6928  05CF  3AFF               	xorlw	255
  6929  05D0  1903               	btfsc	3,2
  6930                           
  6931                           ;mrf49xa_data.c: 19: return 0;
  6932  05D1  3400               	retlw	0
  6933  05D2                     i1l378:	
  6934                           ;mrf49xa_data.c: 23: {
  6935                           
  6936                           
  6937                           ;mrf49xa_data.c: 25: }
  6938                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  6939  05D2  1ACB               	btfsc	_mrf49Status,5
  6940  05D3  2DDE               	goto	i1l2681
  6941  05D4  2DEA               	goto	i1l379
  6942  05D5                     i1l2677:	
  6943                           
  6944                           ;mrf49xa_data.c: 33: case RECV_DATA:
  6945                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  6946  05D5  2697  3185         	fcall	i1_Mrf49RxByte
  6947  05D7  00F9               	movwf	i1Mrf49xaServe@data
  6948                           
  6949                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  6950  05D8  2697  3185         	fcall	i1_Mrf49RxByte
  6951  05DA  00F9               	movwf	i1Mrf49xaServe@data
  6952                           
  6953                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  6954  05DB  269A  3185         	fcall	i1_Mrf49xaModeRx
  6955                           
  6956                           ;mrf49xa_data.c: 44: break;
  6957  05DD  2DEA               	goto	i1l379
  6958  05DE                     i1l2681:	
  6959  05DE  0021               	movlb	1	; select bank1
  6960  05DF  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  6961                           
  6962                           ; Switch size 1, requested type "space"
  6963                           ; Number of cases is 3, Range of values is 0 to 2
  6964                           ; switch strategies available:
  6965                           ; Name         Instructions Cycles
  6966                           ; simple_byte           10     6 (average)
  6967                           ; direct_byte           12     6 (fixed)
  6968                           ; jumptable            260     6 (fixed)
  6969                           ;	Chosen strategy is simple_byte
  6970  05E0  3A00               	xorlw	0	; case 0
  6971  05E1  1903               	skipnz
  6972  05E2  2DD5               	goto	i1l2677
  6973  05E3  3A01               	xorlw	1	; case 1
  6974  05E4  1903               	skipnz
  6975  05E5  2DD5               	goto	i1l2677
  6976  05E6  3A03               	xorlw	3	; case 2
  6977  05E7  1903               	skipnz
  6978  05E8  2DEA               	goto	i1l379
  6979  05E9  2DEA               	goto	i1l379
  6980  05EA                     i1l379:	
  6981                           
  6982                           ;mrf49xa_data.c: 52: }
  6983                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  6984  05EA  0020               	movlb	0	; select bank0
  6985  05EB  1BCB               	btfsc	_mrf49Status,7
  6986  05EC  2E81               	goto	i1l2767
  6987  05ED  2E8D               	goto	i1l2769
  6988  05EE                     i1l2685:	
  6989                           
  6990                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  6991  05EE  2697  3185         	fcall	i1_Mrf49RxByte
  6992  05F0  00F9               	movwf	i1Mrf49xaServe@data
  6993                           
  6994                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6995  05F1  1BCC               	btfsc	_mrf49Status+1,7
  6996  05F2  2DF6               	goto	i1l2691
  6997  05F3                     i1l2689:	
  6998                           
  6999                           ;mrf49xa_data.c: 72: {
  7000                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  7001  05F3  269A  3185         	fcall	i1_Mrf49xaModeRx
  7002                           
  7003                           ;mrf49xa_data.c: 74: break;
  7004  05F5  2E8D               	goto	i1l2769
  7005  05F6                     i1l2691:	
  7006                           
  7007                           ;mrf49xa_data.c: 75: }
  7008                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  7009  05F6  0021               	movlb	1	; select bank1
  7010  05F7  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  7011  05F8  1D03               	skipz
  7012  05F9  2DFC               	goto	i1l2695
  7013  05FA  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  7014  05FB  2E00               	goto	L3
  7015  05FC                     i1l2695:	
  7016                           
  7017                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  7018  05FC  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  7019  05FD  1D03               	skipz
  7020  05FE  2DF3               	goto	i1l2689
  7021  05FF  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  7022  0600                     L3:	
  7023  0600  00A0               	movwf	_rfTrcvStatus^(0+128)
  7024                           
  7025                           ;mrf49xa_data.c: 85: }
  7026                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  7027  0601  0A20               	incf	_rfTrcvStatus^(0+128),w
  7028  0602  0086               	movwf	6
  7029  0603  0187               	clrf	7
  7030  0604  0879               	movf	i1Mrf49xaServe@data,w
  7031  0605  0081               	movwf	1
  7032                           
  7033                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  7034  0606  0820               	movf	_rfTrcvStatus^(0+128),w
  7035  0607  3E16               	addlw	22
  7036  0608  0086               	movwf	6
  7037  0609  0181               	clrf	1
  7038                           
  7039                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  7040  060A  0820               	movf	_rfTrcvStatus^(0+128),w
  7041  060B  0086               	movwf	6
  7042  060C  3003               	movlw	3
  7043  060D  0081               	movwf	1
  7044                           
  7045                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  7046  060E  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  7047  060F  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  7048                           
  7049                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  7050  0610  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  7051  0611  2E3D               	goto	i1l2731
  7052  0612                     i1l2711:	
  7053                           ;mrf49xa_data.c: 93: break;
  7054                           
  7055                           
  7056                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  7057  0612  2697  3185         	fcall	i1_Mrf49RxByte
  7058  0614  00F9               	movwf	i1Mrf49xaServe@data
  7059                           
  7060                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  7061  0615  1BCC               	btfsc	_mrf49Status+1,7
  7062  0616  2E1E               	goto	i1l2719
  7063                           
  7064                           ;mrf49xa_data.c: 102: {
  7065                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  7066  0617  0021               	movlb	1	; select bank1
  7067  0618  0820               	movf	_rfTrcvStatus^(0+128),w
  7068  0619  0086               	movwf	6
  7069  061A  3004               	movlw	4
  7070  061B  0187               	clrf	7
  7071  061C  0081               	movwf	1
  7072  061D  2DF3               	goto	i1l2689
  7073  061E                     i1l2719:	
  7074                           
  7075                           ;mrf49xa_data.c: 106: }
  7076                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  7077  061E  0021               	movlb	1	; select bank1
  7078  061F  0A20               	incf	_rfTrcvStatus^(0+128),w
  7079  0620  0086               	movwf	6
  7080  0621  0187               	clrf	7
  7081  0622  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7082  0623  0601               	xorwf	1,w
  7083  0624  1D03               	skipz
  7084  0625  2E35               	goto	i1l2729
  7085                           
  7086                           ;mrf49xa_data.c: 109: {
  7087                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  7088  0626  0820               	movf	_rfTrcvStatus^(0+128),w
  7089  0627  3E16               	addlw	22
  7090  0628  0086               	movwf	6
  7091  0629  0879               	movf	i1Mrf49xaServe@data,w
  7092  062A  0081               	movwf	1
  7093                           
  7094                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  7095  062B  0820               	movf	_rfTrcvStatus^(0+128),w
  7096  062C  0086               	movwf	6
  7097  062D  3004               	movlw	4
  7098  062E  0081               	movwf	1
  7099                           
  7100                           ;mrf49xa_data.c: 117: Mrf49xaModeRx();
  7101  062F  269A  3185         	fcall	i1_Mrf49xaModeRx
  7102                           
  7103                           ;mrf49xa_data.c: 120: LATCbits.LATC2 = 1;
  7104  0631  0022               	movlb	2	; select bank2
  7105  0632  150E               	bsf	14,2	;volatile
  7106                           
  7107                           ;mrf49xa_data.c: 121: LATCbits.LATC2 = 0;
  7108  0633  110E               	bcf	14,2	;volatile
  7109                           
  7110                           ;mrf49xa_data.c: 123: }
  7111  0634  2E8D               	goto	i1l2769
  7112  0635                     i1l2729:	
  7113                           
  7114                           ;mrf49xa_data.c: 124: else
  7115                           ;mrf49xa_data.c: 125: {
  7116                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  7117  0635  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7118  0636  0720               	addwf	_rfTrcvStatus^(0+128),w
  7119  0637  00F8               	movwf	??i1_Mrf49xaServe
  7120  0638  0A78               	incf	??i1_Mrf49xaServe,w
  7121  0639  0086               	movwf	6
  7122  063A  0187               	clrf	7
  7123  063B  0879               	movf	i1Mrf49xaServe@data,w
  7124  063C  0081               	movwf	1
  7125  063D                     i1l2731:	
  7126  063D  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  7127  063E  2E8D               	goto	i1l2769
  7128  063F                     i1l2733:	
  7129                           
  7130                           ;mrf49xa_data.c: 132: rfTrcvStatus.hwByte++;
  7131  063F  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  7132                           
  7133                           ;mrf49xa_data.c: 134: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  7134  0640  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7135  0641  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  7136  0642  1D03               	skipz
  7137  0643  2E70               	goto	i1l2763
  7138                           
  7139                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte = 49;
  7140  0644  3031               	movlw	49
  7141  0645  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  7142  0646  2E70               	goto	i1l2763
  7143  0647                     i1l2739:	
  7144                           
  7145                           ;mrf49xa_data.c: 140: Mrf49TxByte(0x2D);
  7146  0647  302D               	movlw	45
  7147  0648  2692  3185         	fcall	i1_Mrf49TxByte
  7148                           
  7149                           ;mrf49xa_data.c: 141: break;
  7150  064A  2E8D               	goto	i1l2769
  7151  064B                     i1l2741:	
  7152                           
  7153                           ;mrf49xa_data.c: 144: Mrf49TxByte(0xD4);
  7154  064B  30D4               	movlw	212
  7155  064C  2692  3185         	fcall	i1_Mrf49TxByte
  7156                           
  7157                           ;mrf49xa_data.c: 145: rfTrcvStatus.hwByte = 0xFF;
  7158  064E  30FF               	movlw	255
  7159  064F  0021               	movlb	1	; select bank1
  7160  0650  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  7161                           
  7162                           ;mrf49xa_data.c: 146: break;
  7163  0651  2E8D               	goto	i1l2769
  7164  0652                     i1l2745:	
  7165                           
  7166                           ;mrf49xa_data.c: 150: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  7167  0652  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7168  0653  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  7169  0654  0086               	movwf	6
  7170  0655  0187               	clrf	7
  7171  0656  0801               	movf	1,w
  7172  0657  2692  3185         	fcall	i1_Mrf49TxByte
  7173                           
  7174                           ;mrf49xa_data.c: 151: break;
  7175  0659  2E8D               	goto	i1l2769
  7176  065A                     i1l2747:	
  7177                           
  7178                           ;mrf49xa_data.c: 154: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  7179  065A  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  7180  065B  2692  3185         	fcall	i1_Mrf49TxByte
  7181                           
  7182                           ;mrf49xa_data.c: 155: break;
  7183  065D  2E8D               	goto	i1l2769
  7184  065E                     i1l2749:	
  7185                           
  7186                           ;mrf49xa_data.c: 158: Mrf49TxByte(0x00);
  7187  065E  3000               	movlw	0
  7188  065F  2692  3185         	fcall	i1_Mrf49TxByte
  7189                           
  7190                           ;mrf49xa_data.c: 159: break;
  7191  0661  2E8D               	goto	i1l2769
  7192  0662                     i1l2751:	
  7193                           
  7194                           ;mrf49xa_data.c: 162: Mrf49TxByte(0x00);
  7195  0662  3000               	movlw	0
  7196  0663  2692  3185         	fcall	i1_Mrf49TxByte
  7197                           
  7198                           ;mrf49xa_data.c: 163: Mrf49xaModeRx();
  7199  0665  269A  3185         	fcall	i1_Mrf49xaModeRx
  7200                           
  7201                           ;mrf49xa_data.c: 165: rfTrcvStatus.txPacket.retry = 0;
  7202  0667  30F0               	movlw	-16
  7203  0668  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  7204                           
  7205                           ;mrf49xa_data.c: 167: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  7206  0669  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  7207  066A  2E6E               	goto	i1l2759
  7208                           
  7209                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  7210  066B  3002               	movlw	2
  7211  066C  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  7212  066D  2E8D               	goto	i1l2769
  7213  066E                     i1l2759:	
  7214                           
  7215                           ;mrf49xa_data.c: 169: else
  7216                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_FREE;
  7217  066E  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  7218  066F  2E8D               	goto	i1l2769
  7219  0670                     i1l2763:	
  7220  0670  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7221                           
  7222                           ; Switch size 1, requested type "space"
  7223                           ; Number of cases is 5, Range of values is 49 to 101
  7224                           ; switch strategies available:
  7225                           ; Name         Instructions Cycles
  7226                           ; simple_byte           16     9 (average)
  7227                           ; direct_byte          115     9 (fixed)
  7228                           ; jumptable            263     9 (fixed)
  7229                           ;	Chosen strategy is simple_byte
  7230  0671  3A31               	xorlw	49	; case 49
  7231  0672  1903               	skipnz
  7232  0673  2E5A               	goto	i1l2747
  7233  0674  3A03               	xorlw	3	; case 50
  7234  0675  1903               	skipnz
  7235  0676  2E5E               	goto	i1l2749
  7236  0677  3A01               	xorlw	1	; case 51
  7237  0678  1903               	skipnz
  7238  0679  2E62               	goto	i1l2751
  7239  067A  3A57               	xorlw	87	; case 100
  7240  067B  1903               	skipnz
  7241  067C  2E47               	goto	i1l2739
  7242  067D  3A01               	xorlw	1	; case 101
  7243  067E  1903               	skipnz
  7244  067F  2E4B               	goto	i1l2741
  7245  0680  2E52               	goto	i1l2745
  7246  0681                     i1l2767:	
  7247  0681  0021               	movlb	1	; select bank1
  7248  0682  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  7249                           
  7250                           ; Switch size 1, requested type "space"
  7251                           ; Number of cases is 3, Range of values is 0 to 2
  7252                           ; switch strategies available:
  7253                           ; Name         Instructions Cycles
  7254                           ; simple_byte           10     6 (average)
  7255                           ; direct_byte           12     6 (fixed)
  7256                           ; jumptable            260     6 (fixed)
  7257                           ;	Chosen strategy is simple_byte
  7258  0683  3A00               	xorlw	0	; case 0
  7259  0684  1903               	skipnz
  7260  0685  2DEE               	goto	i1l2685
  7261  0686  3A01               	xorlw	1	; case 1
  7262  0687  1903               	skipnz
  7263  0688  2E12               	goto	i1l2711
  7264  0689  3A03               	xorlw	3	; case 2
  7265  068A  1903               	skipnz
  7266  068B  2E3F               	goto	i1l2733
  7267  068C  2E8D               	goto	i1l2769
  7268  068D                     i1l2769:	
  7269                           
  7270                           ;mrf49xa_data.c: 177: }
  7271                           ;mrf49xa_data.c: 191: return PORTAbits.RA2 == 1 ? 1 : 0;
  7272  068D  0020               	movlb	0	; select bank0
  7273  068E  0C0C               	rrf	12,w	;volatile
  7274  068F  0C89               	rrf	9,f
  7275  0690  3901               	andlw	1
  7276  0691  0008               	return
  7277  0692                     __end_ofi1_Mrf49xaServe:	
  7278  0692                     __ptext39:	
  7279 ;; *************** function i1_Mrf49TxByte *****************
  7280 ;; Defined at:
  7281 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  byte            1    wreg     unsigned char 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  byte            1    3[COMMON] unsigned char 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;		None               void
  7288 ;; Registers used:
  7289 ;;		wreg, status,2, status,0, pclath, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 1E/1
  7292 ;;		On exit  : 1F/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7295 ;;      Params:         0       0       0       0
  7296 ;;      Locals:         1       0       0       0
  7297 ;;      Temps:          0       0       0       0
  7298 ;;      Totals:         1       0       0       0
  7299 ;;Total ram usage:        1 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    2
  7302 ;; This function calls:
  7303 ;;		i1_Mrf49TxCmd
  7304 ;; This function is called by:
  7305 ;;		i1_Mrf49xaServe
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           
  7310                           ;psect for function i1_Mrf49TxByte
  7311  0692                     i1_Mrf49TxByte:	
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  7315                           ;i1Mrf49TxByte@byte stored from wreg
  7316  0692  00F3               	movwf	i1Mrf49TxByte@byte
  7317                           
  7318                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  7319  0693  00F1               	movwf	i1Mrf49TxCmd@val
  7320  0694  30B8               	movlw	184
  7321  0695  2716               	fcall	i1_Mrf49TxCmd
  7322  0696  0008               	return
  7323  0697                     __end_ofi1_Mrf49TxByte:	
  7324  0697                     __ptext42:	
  7325 ;; *************** function i1_Mrf49RxByte *****************
  7326 ;; Defined at:
  7327 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;		None
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      unsigned char 
  7334 ;; Registers used:
  7335 ;;		wreg, status,2, status,0, pclath, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 1E/1
  7338 ;;		On exit  : 1F/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7341 ;;      Params:         0       0       0       0
  7342 ;;      Locals:         0       0       0       0
  7343 ;;      Temps:          0       0       0       0
  7344 ;;      Totals:         0       0       0       0
  7345 ;;Total ram usage:        0 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    2
  7348 ;; This function calls:
  7349 ;;		i1_Mrf49RxCmd
  7350 ;; This function is called by:
  7351 ;;		i1_Mrf49xaServe
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           
  7356                           ;psect for function i1_Mrf49RxByte
  7357  0697                     i1_Mrf49RxByte:	
  7358                           
  7359                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  7360                           
  7361                           ;incstack = 0
  7362                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  7363  0697  30B0               	movlw	176
  7364  0698  25BE               	fcall	i1_Mrf49RxCmd
  7365  0699  0008               	return
  7366  069A                     __end_ofi1_Mrf49RxByte:	
  7367  069A                     __ptext37:	
  7368 ;; *************** function i1_Mrf49xaModeRx *****************
  7369 ;; Defined at:
  7370 ;;		line 77 in file "../../../src/devices/mrf49xa.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;		None
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  Mrf49xaModeR    1    0        unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;		None               void
  7377 ;; Registers used:
  7378 ;;		wreg, status,2, status,0, pclath, cstack
  7379 ;; Tracked objects:
  7380 ;;		On entry : 1E/0
  7381 ;;		On exit  : 1F/1
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7384 ;;      Params:         0       0       0       0
  7385 ;;      Locals:         0       0       0       0
  7386 ;;      Temps:          0       0       0       0
  7387 ;;      Totals:         0       0       0       0
  7388 ;;Total ram usage:        0 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    3
  7391 ;; This function calls:
  7392 ;;		i1_mrf49xaCfg
  7393 ;; This function is called by:
  7394 ;;		i1_Mrf49xaServe
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           
  7399                           ;psect for function i1_Mrf49xaModeRx
  7400  069A                     i1_Mrf49xaModeRx:	
  7401                           
  7402                           ;mrf49xa.c: 79: UI08_t k;
  7403                           ;mrf49xa.c: 81: mrf49xaCfg(mrfRegset_Rx, mrfRegset_RxCnt);
  7404                           
  7405                           ;incstack = 0
  7406                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  7407  069A  306D               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  7408  069B  3187               	movlp	high __stringtab
  7409  069C  000A               	callw
  7410  069D  3185               	pagesel	$	;select current page
  7411  069E  00F3               	movwf	i1mrf49xaCfg@count
  7412  069F  308F               	movlw	(_mrfRegset_Rx| (0+32768))& (0+255)
  7413  06A0  26E4               	fcall	i1_mrf49xaCfg
  7414                           
  7415                           ;mrf49xa.c: 83: rfTrcvStatus.state = RECV_IDLE;
  7416  06A1  0021               	movlb	1	; select bank1
  7417  06A2  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  7418                           
  7419                           ;mrf49xa.c: 84: rfTrcvStatus.hwByte = 0;
  7420  06A3  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  7421  06A4  0008               	return
  7422  06A5                     __end_ofi1_Mrf49xaModeRx:	
  7423  06A5                     __ptext41:	
  7424 ;; *************** function i1_Mrf49RxSts *****************
  7425 ;; Defined at:
  7426 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  7427 ;; Parameters:    Size  Location     Type
  7428 ;;		None
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;		None
  7431 ;; Return value:  Size  Location     Type
  7432 ;;		None               void
  7433 ;; Registers used:
  7434 ;;		wreg, status,2, pclath, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 1F/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7440 ;;      Params:         0       0       0       0
  7441 ;;      Locals:         0       0       0       0
  7442 ;;      Temps:          0       0       0       0
  7443 ;;      Totals:         0       0       0       0
  7444 ;;Total ram usage:        0 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    1
  7447 ;; This function calls:
  7448 ;;		i1_Mrf49SpiRx
  7449 ;; This function is called by:
  7450 ;;		i1_Mrf49xaServe
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           
  7455                           ;psect for function i1_Mrf49RxSts
  7456  06A5                     i1_Mrf49RxSts:	
  7457                           
  7458                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  7459                           
  7460                           ;incstack = 0
  7461                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  7462  06A5  120B               	bcf	11,4	;volatile
  7463                           
  7464                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  7465  06A6  0020               	movlb	0	; select bank0
  7466  06A7  130E               	bcf	14,6	;volatile
  7467                           
  7468                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  7469  06A8  26B0  3185         	fcall	i1_Mrf49SpiRx
  7470  06AA  00CB               	movwf	_mrf49Status
  7471                           
  7472                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  7473  06AB  26B0               	fcall	i1_Mrf49SpiRx
  7474  06AC  00CC               	movwf	_mrf49Status+1
  7475                           
  7476                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  7477  06AD  170E               	bsf	14,6	;volatile
  7478                           
  7479                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  7480  06AE  160B               	bsf	11,4	;volatile
  7481  06AF  0008               	return
  7482  06B0                     __end_ofi1_Mrf49RxSts:	
  7483  06B0                     __ptext45:	
  7484 ;; *************** function i1_Mrf49SpiRx *****************
  7485 ;; Defined at:
  7486 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;		None
  7489 ;; Auto vars:     Size  Location     Type
  7490 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  7491 ;; Return value:  Size  Location     Type
  7492 ;;                  1    wreg      unsigned char 
  7493 ;; Registers used:
  7494 ;;		wreg, status,2
  7495 ;; Tracked objects:
  7496 ;;		On entry : 1F/0
  7497 ;;		On exit  : 1F/0
  7498 ;;		Unchanged: 0/0
  7499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7500 ;;      Params:         0       0       0       0
  7501 ;;      Locals:         1       0       0       0
  7502 ;;      Temps:          0       0       0       0
  7503 ;;      Totals:         1       0       0       0
  7504 ;;Total ram usage:        1 bytes
  7505 ;; Hardware stack levels used:    1
  7506 ;; This function calls:
  7507 ;;		Nothing
  7508 ;; This function is called by:
  7509 ;;		i1_Mrf49RxCmd
  7510 ;;		i1_Mrf49RxSts
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           
  7515                           ;psect for function i1_Mrf49SpiRx
  7516  06B0                     i1_Mrf49SpiRx:	
  7517                           
  7518                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7519                           
  7520                           ;incstack = 0
  7521                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  7522  06B0  01F0               	clrf	i1Mrf49SpiRx@data
  7523                           
  7524                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  7525  06B1  138D               	bcf	13,7	;volatile
  7526  06B2  1A8E               	btfsc	14,5	;volatile
  7527  06B3  17F0               	bsf	i1Mrf49SpiRx@data,7
  7528  06B4  178E               	bsf	14,7	;volatile
  7529  06B5  0000               	nop	;# 
  7530  06B6  0020               	movlb	0	; select bank0
  7531  06B7  138E               	bcf	14,7	;volatile
  7532                           
  7533                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7534  06B8  1A8E               	btfsc	14,5	;volatile
  7535  06B9  1770               	bsf	i1Mrf49SpiRx@data,6
  7536  06BA  178E               	bsf	14,7	;volatile
  7537  06BB  0000               	nop	;# 
  7538  06BC  0020               	movlb	0	; select bank0
  7539  06BD  138E               	bcf	14,7	;volatile
  7540                           
  7541                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7542  06BE  1A8E               	btfsc	14,5	;volatile
  7543  06BF  16F0               	bsf	i1Mrf49SpiRx@data,5
  7544  06C0  178E               	bsf	14,7	;volatile
  7545  06C1  0000               	nop	;# 
  7546  06C2  0020               	movlb	0	; select bank0
  7547  06C3  138E               	bcf	14,7	;volatile
  7548                           
  7549                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7550  06C4  1A8E               	btfsc	14,5	;volatile
  7551  06C5  1670               	bsf	i1Mrf49SpiRx@data,4
  7552  06C6  178E               	bsf	14,7	;volatile
  7553  06C7  0000               	nop	;# 
  7554  06C8  0020               	movlb	0	; select bank0
  7555  06C9  138E               	bcf	14,7	;volatile
  7556                           
  7557                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7558  06CA  1A8E               	btfsc	14,5	;volatile
  7559  06CB  15F0               	bsf	i1Mrf49SpiRx@data,3
  7560  06CC  178E               	bsf	14,7	;volatile
  7561  06CD  0000               	nop	;# 
  7562  06CE  0020               	movlb	0	; select bank0
  7563  06CF  138E               	bcf	14,7	;volatile
  7564                           
  7565                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7566  06D0  1A8E               	btfsc	14,5	;volatile
  7567  06D1  1570               	bsf	i1Mrf49SpiRx@data,2
  7568  06D2  178E               	bsf	14,7	;volatile
  7569  06D3  0000               	nop	;# 
  7570  06D4  0020               	movlb	0	; select bank0
  7571  06D5  138E               	bcf	14,7	;volatile
  7572                           
  7573                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7574  06D6  1A8E               	btfsc	14,5	;volatile
  7575  06D7  14F0               	bsf	i1Mrf49SpiRx@data,1
  7576  06D8  178E               	bsf	14,7	;volatile
  7577  06D9  0000               	nop	;# 
  7578  06DA  0020               	movlb	0	; select bank0
  7579  06DB  138E               	bcf	14,7	;volatile
  7580                           
  7581                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7582  06DC  1A8E               	btfsc	14,5	;volatile
  7583  06DD  1470               	bsf	i1Mrf49SpiRx@data,0
  7584  06DE  178E               	bsf	14,7	;volatile
  7585  06DF  0000               	nop	;# 
  7586  06E0  0020               	movlb	0	; select bank0
  7587  06E1  138E               	bcf	14,7	;volatile
  7588                           
  7589                           ;mrf49xa_spi_pic16.c: 40: return data;
  7590  06E2  0870               	movf	i1Mrf49SpiRx@data,w
  7591  06E3  0008               	return
  7592  06E4                     __end_ofi1_Mrf49SpiRx:	
  7593  007E                     btemp	set	126	;btemp
  7594  007E                     wtemp	set	126
  7595  007E                     wtemp0	set	126
  7596  0080                     wtemp1	set	128
  7597  0082                     wtemp2	set	130
  7598  0084                     wtemp3	set	132
  7599  0086                     wtemp4	set	134
  7600  0088                     wtemp5	set	136
  7601  007F                     wtemp6	set	127
  7602  007E                     ttemp	set	126
  7603  007E                     ttemp0	set	126
  7604  0081                     ttemp1	set	129
  7605  0084                     ttemp2	set	132
  7606  0087                     ttemp3	set	135
  7607  007F                     ttemp4	set	127
  7608  007E                     ltemp	set	126
  7609  007E                     ltemp0	set	126
  7610  0082                     ltemp1	set	130
  7611  0086                     ltemp2	set	134
  7612  0080                     ltemp3	set	128
  7613  06E4                     __ptext38:	
  7614 ;; *************** function i1_mrf49xaCfg *****************
  7615 ;; Defined at:
  7616 ;;		line 71 in file "../../../src/devices/mrf49xa.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;  regs            1    wreg     PTR struct Mrf49InitReg_
  7619 ;;		 -> mrfRegset_Tx(8), mrfRegset_Rx(12), mrfRegset_Init(32), 
  7620 ;;  count           1    3[COMMON] unsigned char 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  regs            1    6[COMMON] PTR struct Mrf49InitReg_
  7623 ;;		 -> mrfRegset_Tx(8), mrfRegset_Rx(12), mrfRegset_Init(32), 
  7624 ;;  mrf49xaCfg      1    7[COMMON] unsigned char 
  7625 ;; Return value:  Size  Location     Type
  7626 ;;		None               void
  7627 ;; Registers used:
  7628 ;;		wreg, status,2, status,0, pclath, cstack
  7629 ;; Tracked objects:
  7630 ;;		On entry : 1E/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7634 ;;      Params:         1       0       0       0
  7635 ;;      Locals:         2       0       0       0
  7636 ;;      Temps:          2       0       0       0
  7637 ;;      Totals:         5       0       0       0
  7638 ;;Total ram usage:        5 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    2
  7641 ;; This function calls:
  7642 ;;		i1_Mrf49TxCmd
  7643 ;; This function is called by:
  7644 ;;		i1_Mrf49xaModeRx
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           
  7649                           ;psect for function i1_mrf49xaCfg
  7650  06E4                     i1_mrf49xaCfg:	
  7651                           
  7652                           ;incstack = 0
  7653                           ; Regs used in i1_mrf49xaCfg: [wreg+status,2+status,0+pclath+cstack]
  7654                           ;i1mrf49xaCfg@regs stored from wreg
  7655  06E4  00F6               	movwf	i1mrf49xaCfg@regs
  7656                           
  7657                           ;mrf49xa.c: 73: uint8_t k = 0;
  7658  06E5  01F7               	clrf	i1mrf49xaCfg@k
  7659                           
  7660                           ;mrf49xa.c: 74: for (k = 0; k < count; k++) { if (regs[k].reg == 0x55) { _delay(40000); 
      +                          } else { Mrf49TxCmd(regs[k].reg, regs[k].val); } };
  7661  06E6  01F7               	clrf	i1mrf49xaCfg@k
  7662  06E7                     i1l2345:	
  7663  06E7  0873               	movf	i1mrf49xaCfg@count,w
  7664  06E8  0277               	subwf	i1mrf49xaCfg@k,w
  7665  06E9  1803               	btfsc	3,0
  7666  06EA  0008               	return
  7667  06EB  0877               	movf	i1mrf49xaCfg@k,w
  7668  06EC  00F4               	movwf	??i1_mrf49xaCfg
  7669  06ED  35F4               	lslf	??i1_mrf49xaCfg,f
  7670  06EE  0876               	movf	i1mrf49xaCfg@regs,w
  7671  06EF  0774               	addwf	??i1_mrf49xaCfg,w
  7672  06F0  3187               	movlp	high __stringtab
  7673  06F1  000A               	callw
  7674  06F2  3185               	pagesel	$	;select current page
  7675  06F3  3A55               	xorlw	85
  7676  06F4  1D03               	skipz
  7677  06F5  2F00               	goto	i1l2341
  7678  06F6  3034               	movlw	52
  7679  06F7  00F5               	movwf	??i1_mrf49xaCfg+1
  7680  06F8  30F1               	movlw	241
  7681  06F9  00F4               	movwf	??i1_mrf49xaCfg
  7682  06FA                     u207_27:	
  7683  06FA  0BF4               	decfsz	??i1_mrf49xaCfg,f
  7684  06FB  2EFA               	goto	u207_27
  7685  06FC  0BF5               	decfsz	??i1_mrf49xaCfg+1,f
  7686  06FD  2EFA               	goto	u207_27
  7687  06FE  3200               	nop2
  7688  06FF  2F14               	goto	i1l2343
  7689  0700                     i1l2341:	
  7690  0700  0877               	movf	i1mrf49xaCfg@k,w
  7691  0701  00F4               	movwf	??i1_mrf49xaCfg
  7692  0702  35F4               	lslf	??i1_mrf49xaCfg,f
  7693  0703  0876               	movf	i1mrf49xaCfg@regs,w
  7694  0704  0774               	addwf	??i1_mrf49xaCfg,w
  7695  0705  3E01               	addlw	1
  7696  0706  3187               	movlp	high __stringtab
  7697  0707  000A               	callw
  7698  0708  00F1               	movwf	i1Mrf49TxCmd@val
  7699  0709  0877               	movf	i1mrf49xaCfg@k,w
  7700  070A  00F5               	movwf	??i1_mrf49xaCfg+1
  7701  070B  35F5               	lslf	??i1_mrf49xaCfg+1,f
  7702  070C  0876               	movf	i1mrf49xaCfg@regs,w
  7703  070D  0775               	addwf	??i1_mrf49xaCfg+1,w
  7704  070E  3187               	movlp	high __stringtab
  7705  070F  000A               	callw
  7706  0710  3185               	pagesel	$	;select current page
  7707  0711  3187  2716  3185   	fcall	i1_Mrf49TxCmd
  7708  0714                     i1l2343:	
  7709  0714  0AF7               	incf	i1mrf49xaCfg@k,f
  7710  0715  2EE7               	goto	i1l2345
  7711  0716                     __end_ofi1_mrf49xaCfg:	
  7712  0716                     __ptext40:	
  7713 ;; *************** function i1_Mrf49TxCmd *****************
  7714 ;; Defined at:
  7715 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;  cmd             1    wreg     unsigned char 
  7718 ;;  val             1    1[COMMON] unsigned char 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;  cmd             1    2[COMMON] unsigned char 
  7721 ;; Return value:  Size  Location     Type
  7722 ;;		None               void
  7723 ;; Registers used:
  7724 ;;		wreg, status,2, status,0, pclath, cstack
  7725 ;; Tracked objects:
  7726 ;;		On entry : 0/0
  7727 ;;		On exit  : 1F/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7730 ;;      Params:         1       0       0       0
  7731 ;;      Locals:         1       0       0       0
  7732 ;;      Temps:          0       0       0       0
  7733 ;;      Totals:         2       0       0       0
  7734 ;;Total ram usage:        2 bytes
  7735 ;; Hardware stack levels used:    1
  7736 ;; Hardware stack levels required when called:    1
  7737 ;; This function calls:
  7738 ;;		i1_Mrf49SpiTx
  7739 ;; This function is called by:
  7740 ;;		i1_mrf49xaCfg
  7741 ;;		i1_Mrf49TxByte
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           
  7746                           ;psect for function i1_Mrf49TxCmd
  7747  0716                     i1_Mrf49TxCmd:	
  7748                           
  7749                           ;incstack = 0
  7750                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  7751                           ;i1Mrf49TxCmd@cmd stored from wreg
  7752  0716  00F2               	movwf	i1Mrf49TxCmd@cmd
  7753                           
  7754                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  7755  0717  0020               	movlb	0	; select bank0
  7756  0718  130E               	bcf	14,6	;volatile
  7757                           
  7758                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  7759  0719  0872               	movf	i1Mrf49TxCmd@cmd,w
  7760  071A  2720  3185         	fcall	i1_Mrf49SpiTx
  7761                           
  7762                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  7763  071C  0871               	movf	i1Mrf49TxCmd@val,w
  7764  071D  2720               	fcall	i1_Mrf49SpiTx
  7765                           
  7766                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  7767  071E  170E               	bsf	14,6	;volatile
  7768  071F  0008               	return
  7769  0720                     __end_ofi1_Mrf49TxCmd:	
  7770  0720                     __ptext44:	
  7771 ;; *************** function i1_Mrf49SpiTx *****************
  7772 ;; Defined at:
  7773 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  byte            1    wreg     unsigned char 
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;  byte            1    0[COMMON] unsigned char 
  7778 ;; Return value:  Size  Location     Type
  7779 ;;		None               void
  7780 ;; Registers used:
  7781 ;;		wreg
  7782 ;; Tracked objects:
  7783 ;;		On entry : 1F/0
  7784 ;;		On exit  : 1F/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7787 ;;      Params:         0       0       0       0
  7788 ;;      Locals:         1       0       0       0
  7789 ;;      Temps:          0       0       0       0
  7790 ;;      Totals:         1       0       0       0
  7791 ;;Total ram usage:        1 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; This function calls:
  7794 ;;		Nothing
  7795 ;; This function is called by:
  7796 ;;		i1_Mrf49TxCmd
  7797 ;;		i1_Mrf49RxCmd
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function i1_Mrf49SpiTx
  7803  0720                     i1_Mrf49SpiTx:	
  7804                           
  7805                           ;incstack = 0
  7806                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  7807                           ;i1Mrf49SpiTx@byte stored from wreg
  7808  0720  00F0               	movwf	i1Mrf49SpiTx@byte
  7809                           
  7810                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; PORTCbits.RC7 = 1; asm("nop");; PORTCbits.RC7 = 0; } while (0);;
  7811  0721  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  7812  0722  2F25               	goto	i1l201
  7813  0723  178D               	bsf	13,7	;volatile
  7814  0724  2F26               	goto	i1l202
  7815  0725                     i1l201:	
  7816  0725  138D               	bcf	13,7	;volatile
  7817  0726                     i1l202:	
  7818  0726  178E               	bsf	14,7	;volatile
  7819  0727  0000               	nop	;# 
  7820  0728  0020               	movlb	0	; select bank0
  7821  0729  138E               	bcf	14,7	;volatile
  7822  072A  1F70               	btfss	i1Mrf49SpiTx@byte,6
  7823  072B  2F2E               	goto	i1l205
  7824  072C  178D               	bsf	13,7	;volatile
  7825  072D  2F2F               	goto	i1l206
  7826  072E                     i1l205:	
  7827  072E  138D               	bcf	13,7	;volatile
  7828  072F                     i1l206:	
  7829  072F  178E               	bsf	14,7	;volatile
  7830  0730  0000               	nop	;# 
  7831  0731  0020               	movlb	0	; select bank0
  7832  0732  138E               	bcf	14,7	;volatile
  7833  0733  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  7834  0734  2F37               	goto	i1l209
  7835  0735  178D               	bsf	13,7	;volatile
  7836  0736  2F38               	goto	i1l210
  7837  0737                     i1l209:	
  7838  0737  138D               	bcf	13,7	;volatile
  7839  0738                     i1l210:	
  7840  0738  178E               	bsf	14,7	;volatile
  7841  0739  0000               	nop	;# 
  7842  073A  0020               	movlb	0	; select bank0
  7843  073B  138E               	bcf	14,7	;volatile
  7844  073C  1E70               	btfss	i1Mrf49SpiTx@byte,4
  7845  073D  2F40               	goto	i1l213
  7846  073E  178D               	bsf	13,7	;volatile
  7847  073F  2F41               	goto	i1l214
  7848  0740                     i1l213:	
  7849  0740  138D               	bcf	13,7	;volatile
  7850  0741                     i1l214:	
  7851  0741  178E               	bsf	14,7	;volatile
  7852  0742  0000               	nop	;# 
  7853  0743  0020               	movlb	0	; select bank0
  7854  0744  138E               	bcf	14,7	;volatile
  7855  0745  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  7856  0746  2F49               	goto	i1l217
  7857  0747  178D               	bsf	13,7	;volatile
  7858  0748  2F4A               	goto	i1l218
  7859  0749                     i1l217:	
  7860  0749  138D               	bcf	13,7	;volatile
  7861  074A                     i1l218:	
  7862  074A  178E               	bsf	14,7	;volatile
  7863  074B  0000               	nop	;# 
  7864  074C  0020               	movlb	0	; select bank0
  7865  074D  138E               	bcf	14,7	;volatile
  7866  074E  1D70               	btfss	i1Mrf49SpiTx@byte,2
  7867  074F  2F52               	goto	i1l221
  7868  0750  178D               	bsf	13,7	;volatile
  7869  0751  2F53               	goto	i1l222
  7870  0752                     i1l221:	
  7871  0752  138D               	bcf	13,7	;volatile
  7872  0753                     i1l222:	
  7873  0753  178E               	bsf	14,7	;volatile
  7874  0754  0000               	nop	;# 
  7875  0755  0020               	movlb	0	; select bank0
  7876  0756  138E               	bcf	14,7	;volatile
  7877  0757  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  7878  0758  2F5B               	goto	i1l225
  7879  0759  178D               	bsf	13,7	;volatile
  7880  075A  2F5C               	goto	i1l226
  7881  075B                     i1l225:	
  7882  075B  138D               	bcf	13,7	;volatile
  7883  075C                     i1l226:	
  7884  075C  178E               	bsf	14,7	;volatile
  7885  075D  0000               	nop	;# 
  7886  075E  0020               	movlb	0	; select bank0
  7887  075F  138E               	bcf	14,7	;volatile
  7888  0760  1C70               	btfss	i1Mrf49SpiTx@byte,0
  7889  0761  2F64               	goto	i1l229
  7890  0762  178D               	bsf	13,7	;volatile
  7891  0763  2F65               	goto	i1l230
  7892  0764                     i1l229:	
  7893  0764  138D               	bcf	13,7	;volatile
  7894  0765                     i1l230:	
  7895  0765  178E               	bsf	14,7	;volatile
  7896  0766  0000               	nop	;# 
  7897  0767  0020               	movlb	0	; select bank0
  7898  0768  138E               	bcf	14,7	;volatile
  7899                           
  7900                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  7901  0769  138D               	bcf	13,7	;volatile
  7902  076A  0008               	return
  7903  076B                     __end_ofi1_Mrf49SpiTx:	


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     43      45
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwWrite@packetData	PTR unsigned int  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), NULL(NULL[0]), 

    handleFwWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), main@bf(BANK0[16]), handleFwWrite@packet..(COMMON[21]), 
		 -> eepromTxByte@byte(COMMON[1]), NULL(NULL[0]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), main@bf(BANK0[16]), handleFwRead@packet..(COMMON[21]), 
		 -> handleFwWrite@packet..(COMMON[21]), handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), NULL(NULL[0]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    mrf49xaCfg@regs	PTR struct Mrf49InitReg_s size(1) Largest target is 32
		 -> mrfRegset_Tx(CODE[8]), mrfRegset_Rx(CODE[12]), mrfRegset_Init(CODE[32]), 

    S328rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaModeRx->i1_mrf49xaCfg
    i1_mrf49xaCfg->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_mrf49xaCfg
    _HandlePacket->_handleFwWrite
    _handleFwWrite->_eepromRxBytes
    _handleFwWrite->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _handleFwRead->_eepromRxBytes
    _handleFwCmd->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaModeRx->_mrf49xaCfg
    _mrf49xaCfg->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   18359
                                             24 BANK0     19    19      0
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                        _SoftI2cInit
                        _SysInitGpio
                      _eepromRxBytes
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0   11431
                                             20 BANK0      4     4      0
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     952
                         _mrf49xaCfg
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     4      0   10219
                                             16 BANK0      4     4      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                        _handleFwCmd
                       _handleFwRead
                      _handleFwWrite
 ---------------------------------------------------------------------------------
 (3) _handleFwWrite                                        8     8      0    3229
                                              8 BANK0      8     8      0
                      _eepromRxBytes
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (1) _eepromTxBytes                                        4     0      4     949
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _handleFwRead                                         3     3      0    2033
                                              8 BANK0      3     3      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    2076
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (1) _eepromRxBytes                                        4     0      4    1886
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (2) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1318
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxPacket                                      6     4      2    1128
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          6     6      0    3629
                                             10 BANK0      3     3      0
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                         _mrf49xaCfg
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         2     2      0    1725
                                              8 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     952
                         _mrf49xaCfg
 ---------------------------------------------------------------------------------
 (3) _mrf49xaCfg                                           5     4      1     952
                                              3 BANK0      5     4      1
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     420
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     398
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _extInt                                               1     1      0    1124
                                             10 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaServe                                       2     2      0    1124
                                              8 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaModeRx                                      1     1      0     477
                       i1_mrf49xaCfg
 ---------------------------------------------------------------------------------
 (10) i1_mrf49xaCfg                                        5     4      1     477
                                              3 COMMON     5     4      1
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxByte                                        1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxSts                                         0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxByte                                        0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49xaModeRx
       _mrf49xaCfg
         _Mrf49TxCmd
           _Mrf49SpiTx
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _mrf49xaCfg
           _Mrf49TxCmd
             _Mrf49SpiTx
     _mrf49xaCfg
       _Mrf49TxCmd
         _Mrf49SpiTx
   _Mrf49xaTick
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwRead
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwWrite
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
         _eepromTxBytes
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaModeTx
       _mrf49xaCfg
         _Mrf49TxCmd
           _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
   _SoftI2cInit
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _SysInitGpio
   _eepromRxBytes
     _SoftI2cRepeatedStart
       _SoftI2cNop
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _eepromTxBytes
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_mrf49xaCfg
         i1_Mrf49TxCmd
           i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      87       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      2D       6       56.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      87      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sat May 17 17:45:57 2014

           Mrf49xaTxPacket@crc 0023                              pc 0002                    __CFG_CP$OFF 0000  
                           PL2 0578                             PL4 0593                             PL6 05A1  
                           PL8 05AB                             l32 0130                             l42 0184  
                           l34 013C                             l35 013E                             l39 0167  
                  __CFG_LVP$ON 0000          Mrf49xaTxPacket@packet 0025                            l201 03C2  
                          l210 03D5                            l202 03C3                            l221 03EF  
                          l213 03DD                            l205 03CB                            l230 0402  
                          l222 03F0                            l214 03DE                            l206 03CC  
                          l225 03F8                            l217 03E6                            l209 03D4  
                          l321 0546                            l226 03F9                            l218 03E7  
                          l229 0401                            l356 0263                            l378 02AE  
                          l546 00C1                            l379 02C6                            l548 00C7  
                          l469 04B8                            l485 046F                   __CFG_BORV$LO 0000  
                          wreg 0009                   __CFG_IESO$ON 0000         ??_SoftI2cRepeatedStart 0021  
                         S2849 07A3         Mrf49xaTxPacket@needAck 0021                           l2111 03B1  
                         l2113 0384                           l2109 039D                           l2029 0186  
                         l2205 011A                           l2135 051F                           l2151 0522  
                         l2207 012B                           l2161 052D                           l2217 00F9  
                         l2321 0059                           l2219 0107                           l2413 02F9  
                         l2405 02ED                           l2181 0534                           l2423 030F  
                         l2511 0465                           l2441 0336                           l2433 0323  
                         l2193 0554                           l2513 046B                           l2505 0450  
                         l2443 033A                           l2435 0327                           l2427 031B  
                         l2371 02B1                           l2523 047B                           l2515 0472  
                         l2531 049A                           l2603 01F0                           l2453 034A  
                         l2445 033E                           l2461 035D                           l2197 0108  
                         l2293 04D0                           l2285 04B9                           l2613 0207  
                         l2439 032E                           l2383 02CF                           l2463 0369  
                         l2375 02BA                           l2535 04A3                           l2519 0476  
                         l2615 0209                           l2607 01FA                           l2457 034C  
                         l2385 02D2                           l2529 047F                           l2641 0246  
                         l2625 0226                           l2609 01FE                           l2379 02CA  
                         l2539 04A8                           l2651 0250                           l2643 0247  
                         l2389 02D8                           l2493 050B                           l2629 0232  
                         l2821 00B3                           l2807 009F                           l2593 029E  
                         l1973 00C8                Mrf49TxByte@byte 0023                           l1897 0192  
                         l2793 0089                           u2017 022D                           u2027 0255  
                         u2037 0195                           u2047 027B                           u2057 028A  
                         u2067 0397                    mrf49xaCfg@k 0027                   __CFG_WRT$OFF 0000  
                __CFG_FCMEN$ON 0000                           _main 007A                __end_of_AdcInit 01B4  
                         fsr0h 0005                           fsr1h 0007                           fsr0l 0004  
                         indf0 0000                           indf1 0001                           fsr1l 0006  
                         btemp 007E                           ltemp 007E                           start 0014  
                         ttemp 007E                           wtemp 007E           __end_of_HandlePacket 04AA  
      __end_ofi1_Mrf49xaModeRx 06A5                  __CFG_MCLRE$ON 0000            __end_of_Mrf49RxByte 0375  
          __end_of_Mrf49TxByte 0373                ??_eepromRxBytes 0028                ??_eepromTxBytes 0028  
          __end_of_Mrf49xaInit 02A4            __end_of_Mrf49xaTick 0267           _Mrf49xaPacketPending 04FA  
                        ?_main 0070                  __CFG_WDTE$OFF 0000          __size_ofi1_mrf49xaCfg 0032  
                        i1l201 0725                          i1l210 0738                          i1l202 0726  
                        i1l131 0011                          i1l221 0752                          i1l213 0740  
                        i1l205 072E                          i1l230 0765                          i1l222 0753  
                        i1l214 0741                          i1l206 072F                          i1l225 075B  
                        i1l217 0749                          i1l209 0737                          i1l226 075C  
                        i1l218 074A                          i1l229 0764                          i1l378 05D2  
                        i1l379 05EA                     _Mrf49RxCmd 0267                     _Mrf49TxCmd 03B4  
                   _Mrf49SpiRx 0413                     _Mrf49SpiTx 03BD                     _Mrf49RxSts 0408  
        __end_of_SoftI2cRxByte 0192          __end_of_SoftI2cTxByte 015A        Mrf49xaTxPacket@response 0020  
                        main@i 004A                 __CFG_BOREN$OFF 0000                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __initialization 0016                     _ExtIntInit 01B4  
                 __end_of_main 00C8                   i1_mrf49xaCfg 06E4           __end_of_handleFwRead 04FA  
               __CFG_LPBOR$OFF 0000          ?_Mrf49xaPacketPending 0070                         ??_main 0038  
         __size_of_handleFwCmd 0034           __end_of_Mrf49xaTxAck 0578           __end_of_Mrf49xaServe 036E  
          HandlePacket@sendAck 0031                         _ADCON0 009D                         _ADCON1 009E  
                       _ADCON2 009F            HandlePacket@sendMsg 0032                      ??_AdcInit 0020  
                       _ANSELA 018C                         _ANSELB 018D                         _ANSELC 018E  
           i1Mrf49xaServe@data 0079                         i1l2341 0700                         i1l2343 0714  
                       i1l2345 06E7                         i1l2711 0612                         i1l2731 063D  
                       i1l2741 064B                         i1l2733 063F                         i1l2751 0662  
                       i1l2719 061E                         i1l2745 0652                         i1l2729 0635  
                       i1l2681 05DE                         i1l2747 065A                         i1l2739 0647  
                       i1l2763 0670                         i1l2691 05F6                         i1l2749 065E  
                       i1l2685 05EE                         i1l2677 05D5                         i1l2759 066E  
                       i1l2695 05FC                         i1l2767 0681                         i1l2689 05F3  
                       i1l2769 068D                         u207_27 06FA                         _FVRCON 0117  
                       _OSCCON 0099                    _Mrf49RxByte 0373                    _Mrf49TxByte 036E  
                ??_SoftI2cInit 0024                  ??_SoftI2cStop 0021                 __CFG_PWRTE$OFF 0000  
                   _SoftI2cNop 0192               ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 0271  
                  _Mrf49xaTick 01D8                _Mrf49xaRxPacket 0504                 __CFG_STVREN$ON 0000  
              _Mrf49xaTxPacket 0512                         _extInt 0004                         main@bf 003A  
                  ?_Mrf49RxCmd 0070                    ?_Mrf49TxCmd 0021                    ?_Mrf49SpiRx 0070  
                  ?_Mrf49SpiTx 0070                    ?_Mrf49RxSts 0070          __size_of_HandlePacket 005E  
      __end_of__initialization 0020          __end_ofi1_Mrf49RxByte 069A          __end_ofi1_Mrf49TxByte 0697  
                  ?_ExtIntInit 0070                 __pcstackCOMMON 0070               SoftI2cRxByte@ack 0021  
          __end_of_SoftI2cInit 002D            __end_of_SoftI2cStop 00D7         ??_Mrf49xaPacketPending 0020  
      __size_ofi1_Mrf49xaServe 00CA                     __end_ofPL2 0593                     __end_ofPL4 05A1  
                   __end_ofPL6 05AB                     __end_ofPL8 05B1          __end_of_handleFwWrite 007A  
               _OPTION_REGbits 0095                   _HandlePacket 044C        Mrf49xaFreePacket@packet 0020  
                ??_SysInitGpio 0020                     __pbssBANK0 004B                     __pbssBANK1 00A0  
                ?_SoftI2cStart 0070        __end_of_Mrf49xaRxPacket 0512              i1mrf49xaCfg@count 0073  
      __end_of_Mrf49xaTxPacket 0558          __size_of_handleFwRead 001C          __end_of_Mrf49xaModeRx 0381  
        __end_of_Mrf49xaModeTx 05BE                    ?_SoftI2cNop 0070            __size_of_Mrf49RxCmd 000A  
          __size_of_Mrf49TxCmd 0009            __size_of_Mrf49SpiRx 0034            __size_of_Mrf49SpiTx 004B  
          __size_of_Mrf49RxSts 000B                     __pmaintext 007A                     __pintentry 0004  
                      ?_extInt 0070          __size_of_Mrf49xaTxAck 0020          __size_of_Mrf49xaServe 00CA  
            handleFwCmd@packet 0028                 mrf49xaCfg@regs 0026                     _mrf49xaCfg 0381  
                      _AdcInit 01A5            __size_of_ExtIntInit 0005  __size_of_SoftI2cRepeatedStart 0015  
                   __stringtab 076B                   _handleFwRead 04DE                 ??_SoftI2cStart 0021  
                  _SoftI2cInit 0022                  ?i1_Mrf49RxCmd 0070                  ?i1_Mrf49TxCmd 0071  
                ?i1_Mrf49SpiRx 0070                  ?i1_Mrf49SpiTx 0070                    _SoftI2cStop 00C8  
                ?i1_Mrf49RxSts 0070            __end_of_SysInitGpio 01D8                   _Mrf49xaTxAck 0558  
                 _Mrf49xaServe 02A4           eepromRxBytes@address 0024          __end_of_eepromRxBytes 012C  
        __end_of_eepromTxBytes 0108                __size_of_extInt 0010              _mrfRegset_InitCnt 076C  
                      __ptext1 01B9                        __ptext2 0022                        __ptext3 01D8  
                      __ptext4 0504                        __ptext5 04FA                        __ptext6 05B1  
                      __ptext7 044C                        __ptext8 002D                        __ptext9 00EC  
          handleFwWrite@packet 002F            __size_of_SoftI2cNop 0006                        clrloop0 07B4  
         end_of_initialization 0020                   ?_Mrf49RxByte 0070                   ?_Mrf49TxByte 0070  
               ??i1_Mrf49RxCmd 0071                 ??i1_Mrf49TxCmd 0072                 ??i1_Mrf49SpiRx 0070  
               ??i1_Mrf49SpiTx 0070                 ??i1_Mrf49RxSts 0071               ?_Mrf49xaRxPacket 0070  
             ?_Mrf49xaTxPacket 0020                   ?_Mrf49xaInit 0070           __end_of_mrfRegset_Rx 079B  
         __end_of_mrfRegset_Tx 07A3                   ?_Mrf49xaTick 0070         __size_of_SoftI2cRxByte 0038  
       __size_of_SoftI2cTxByte 002E                 i1_Mrf49xaServe 05C8      __end_of_mrfRegset_InitCnt 076D  
                ??_handleFwCmd 0028                      _PORTAbits 000C                      _PORTBbits 000D  
                    _PORTCbits 000E                   ??_Mrf49RxCmd 0021                   ??_Mrf49TxCmd 0022  
                 ??_Mrf49SpiRx 0020                   ??_Mrf49SpiTx 0020                   ??_Mrf49RxSts 0021  
             __CFG_FOSC$INTOSC 0000                      _TRISAbits 008C                      _TRISBbits 008D  
                    _TRISCbits 008E                    ?_mrf49xaCfg 0023                    _SysInitGpio 01B9  
               Mrf49SpiRx@data 0020                 Mrf49SpiTx@byte 0020             __end_of_Mrf49RxCmd 0271  
           __end_of_Mrf49TxCmd 03BD         __end_ofi1_Mrf49xaServe 0692                   ??_ExtIntInit 0020  
           __end_of_Mrf49SpiRx 0447             __end_of_Mrf49SpiTx 0408             __end_of_Mrf49RxSts 0413  
            SoftI2cRxByte@data 0022              eepromRxBytes@data 0026           __end_of_SoftI2cStart 01A5  
     __size_ofi1_Mrf49xaModeRx 000B                 __end_of_extInt 0014              eepromRxBytes@size 0027  
          start_initialization 0016                  _SoftI2cRxByte 015A            __end_of_handleFwCmd 04DE  
                _SoftI2cTxByte 012C                 handleFwWrite@i 002C             __end_of_ExtIntInit 01B9  
            SoftI2cTxByte@data 0022                  i1mrf49xaCfg@k 0077             HandlePacket@packet 0033  
                 ??_SoftI2cNop 0020                ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 076D  
              _mrfRegset_TxCnt 076E            __size_of_mrf49xaCfg 0033                       ??_extInt 007A  
__size_of_Mrf49xaPacketPending 000A              eepromTxBytes@data 0026              eepromTxBytes@size 0027  
       __size_ofi1_Mrf49RxByte 0003         __size_ofi1_Mrf49TxByte 0005           __end_ofi1_Mrf49RxCmd 05C8  
         __end_ofi1_Mrf49TxCmd 0720           __end_ofi1_Mrf49SpiRx 06E4           __end_ofi1_Mrf49SpiTx 076B  
         __end_ofi1_Mrf49RxSts 06B0                      ___latbits 0001                  __pcstackBANK0 0020  
               ?_SoftI2cRxByte 0070                 ?_SoftI2cTxByte 0070              i1Mrf49TxByte@byte 0073  
           __end_of_SoftI2cNop 0198                       ?_AdcInit 0070                   _rfTrcvStatus 00A0  
                 ?_SoftI2cInit 0070                   ?_SoftI2cStop 0070         __size_of_handleFwWrite 004D  
         __size_of_Mrf49RxByte 0002           __size_of_Mrf49TxByte 0005               i1mrf49xaCfg@regs 0076  
 __end_of_SoftI2cRepeatedStart 00EC                  ?i1_mrf49xaCfg 0073           __size_of_Mrf49xaInit 0033  
         __size_of_Mrf49xaTick 008F                      __pstrings 076B                      __pswtext1 07A3  
                  _handleFwCmd 04AA         __size_of_Mrf49xaModeRx 000C         __size_of_Mrf49xaModeTx 000D  
                 _mrfRegset_Rx 078F                   _mrfRegset_Tx 079B              ??i1_Mrf49xaModeRx 0078  
                     _LATAbits 010C                       _LATBbits 010D                       _LATCbits 010E  
                i1_Mrf49RxByte 0697        __end_of_mrfRegset_RxCnt 076E                  i1_Mrf49TxByte 0692  
      __end_of_mrfRegset_TxCnt 076F                      clear_ram0 07B3                    _mrf49Status 004B  
            _Mrf49xaFreePacket 0447                 ??i1_mrf49xaCfg 0074                mrf49xaCfg@count 0023  
        __size_of_SoftI2cStart 000D                  Mrf49RxCmd@cmd 0021             ?_Mrf49xaFreePacket 0070  
                Mrf49RxCmd@val 0022                  Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021  
          ??_Mrf49xaFreePacket 0020                ??_SoftI2cRxByte 0021                  _handleFwWrite 002D  
              ??_SoftI2cTxByte 0021                       _WPUAbits 020C                   ??_mrf49xaCfg 0024  
             __size_of_AdcInit 000F                   ?_SysInitGpio 0070        handleFwWrite@packetData 002B  
       __size_of_eepromRxBytes 0024                 ?i1_Mrf49RxByte 0070         __size_of_eepromTxBytes 001C  
                 _SoftI2cStart 0198                 ?i1_Mrf49TxByte 0070      __end_of_Mrf49xaFreePacket 044C  
                _Mrf49xaModeRx 0375                  _Mrf49xaModeTx 05B1                 _mrfRegset_Init 076F  
           __end_of_mrf49xaCfg 03B4       __size_of_Mrf49xaRxPacket 000E          __size_ofi1_Mrf49RxCmd 000A  
        __size_ofi1_Mrf49TxCmd 000A          __size_ofi1_Mrf49SpiRx 0034          __size_ofi1_Mrf49SpiTx 004B  
             i1Mrf49SpiRx@data 0070          __size_ofi1_Mrf49RxSts 000B       __size_of_Mrf49xaTxPacket 0046  
             i1Mrf49SpiTx@byte 0070                 SoftI2cRxByte@i 0023             __end_of__stringtab 076C  
               ?_handleFwWrite 0070                 SoftI2cTxByte@i 0023                  ?_HandlePacket 0070  
         handleFwWrite@address 002D                       __ptext10 04DE                       __ptext11 04AA  
                     __ptext20 0512                       __ptext12 0108                       __ptext21 0447  
                     __ptext13 012C                       __ptext30 0267                       __ptext22 0271  
                     __ptext14 00C8                       __ptext31 03BD                       __ptext23 02A4  
                     __ptext15 0198                       __ptext40 0716                       __ptext32 0413  
                     __ptext24 0375                       __ptext16 015A                       __ptext41 06A5  
                     __ptext33 01B4                       __ptext25 0381                       __ptext17 00D7  
                     __ptext42 0697                       __ptext34 01A5                       __ptext26 036E  
                     __ptext18 0192                       __ptext43 05BE                       __ptext27 03B4  
                     __ptext19 0558                       __ptext44 0720                       __ptext36 05C8  
                     __ptext28 0408                       __ptext45 06B0                       __ptext37 069A  
                     __ptext29 0373                       __ptext38 06E4                       __ptext39 0692  
         _SoftI2cRepeatedStart 00D7            handleFwRead@address 0028               ??i1_Mrf49xaServe 0078  
                __size_of_main 004E                   i1_Mrf49RxCmd 05BE         __end_of_mrfRegset_Init 078F  
           Mrf49xaTxAck@packet 0026                   i1_Mrf49TxCmd 0716                   i1_Mrf49SpiRx 06B0  
                 i1_Mrf49SpiTx 0720                 ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070  
                 i1_Mrf49RxSts 06A5           __size_of_SoftI2cInit 000B           __size_of_SoftI2cStop 000F  
                _eepromRxBytes 0108                  _eepromTxBytes 00EC                i1Mrf49RxCmd@cmd 0071  
              i1Mrf49RxCmd@val 0072                 ??_HandlePacket 0030             Mrf49xaTick@timeout 0036  
                   _INTCONbits 000B                i1Mrf49TxCmd@cmd 0072                i1Mrf49TxCmd@val 0071  
         __end_ofi1_mrf49xaCfg 0716          ?_SoftI2cRepeatedStart 0070                  ?_handleFwRead 0070  
              ??i1_Mrf49RxByte 0073                       intlevel1 0000                ??i1_Mrf49TxByte 0073  
 __end_of_Mrf49xaPacketPending 0504              __CFG_CLKOUTEN$OFF 0000     __size_of_Mrf49xaFreePacket 0005  
                ?_Mrf49xaTxAck 0070             handleFwRead@packet 002A                  ?_Mrf49xaServe 0070  
            Mrf49xaTick@packet 0037                 ?_eepromRxBytes 0024           eepromTxBytes@address 0024  
              i1_Mrf49xaModeRx 069A                 ?_eepromTxBytes 0024                ??_handleFwWrite 0028  
                 ?_handleFwCmd 0070              ??_Mrf49xaRxPacket 0020              ??_Mrf49xaTxPacket 0022  
               ??_handleFwRead 0028                  ??_Mrf49RxByte 0023                  ??_Mrf49TxByte 0023  
              ??_Mrf49xaModeRx 0028                ??_Mrf49xaModeTx 0028           __size_of_SysInitGpio 001F  
               ??_Mrf49xaTxAck 0026               Mrf49xaServe@data 0029                 ??_Mrf49xaServe 0028  
                ??_Mrf49xaInit 002A                  ??_Mrf49xaTick 0034               Mrf49xaTxPacket@i 0024  



Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Thu Apr 17 12:09:23 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	swtext1,local,class=CONST,delta=2
    12                           	psect	swtext2,local,class=CONST,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	swtext3,local,class=CONST,delta=2
    15                           	psect	swtext4,local,class=CONST,delta=2
    16                           	psect	text26,local,class=CODE,merge=1,delta=2
    17                           	psect	pa_nodes,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000D                     	;# 
    33  000E                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0013                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0016                     	;# 
    40  0017                     	;# 
    41  0018                     	;# 
    42  0019                     	;# 
    43  001A                     	;# 
    44  001B                     	;# 
    45  001C                     	;# 
    46  008C                     	;# 
    47  008D                     	;# 
    48  008E                     	;# 
    49  0091                     	;# 
    50  0092                     	;# 
    51  0093                     	;# 
    52  0095                     	;# 
    53  0096                     	;# 
    54  0097                     	;# 
    55  0099                     	;# 
    56  009A                     	;# 
    57  009B                     	;# 
    58  009B                     	;# 
    59  009C                     	;# 
    60  009D                     	;# 
    61  009E                     	;# 
    62  009F                     	;# 
    63  010C                     	;# 
    64  010D                     	;# 
    65  010E                     	;# 
    66  0111                     	;# 
    67  0112                     	;# 
    68  0113                     	;# 
    69  0114                     	;# 
    70  0115                     	;# 
    71  0116                     	;# 
    72  0117                     	;# 
    73  0118                     	;# 
    74  0119                     	;# 
    75  011D                     	;# 
    76  018C                     	;# 
    77  018D                     	;# 
    78  018E                     	;# 
    79  0191                     	;# 
    80  0191                     	;# 
    81  0192                     	;# 
    82  0193                     	;# 
    83  0193                     	;# 
    84  0194                     	;# 
    85  0195                     	;# 
    86  0196                     	;# 
    87  0199                     	;# 
    88  019A                     	;# 
    89  019B                     	;# 
    90  019B                     	;# 
    91  019C                     	;# 
    92  019D                     	;# 
    93  019E                     	;# 
    94  019F                     	;# 
    95  020C                     	;# 
    96  020D                     	;# 
    97  0211                     	;# 
    98  0211                     	;# 
    99  0212                     	;# 
   100  0212                     	;# 
   101  0213                     	;# 
   102  0213                     	;# 
   103  0214                     	;# 
   104  0214                     	;# 
   105  0215                     	;# 
   106  0215                     	;# 
   107  0215                     	;# 
   108  0216                     	;# 
   109  0216                     	;# 
   110  0217                     	;# 
   111  0217                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0394                     	;# 
   116  0395                     	;# 
   117  0396                     	;# 
   118  0498                     	;# 
   119  0498                     	;# 
   120  0499                     	;# 
   121  049A                     	;# 
   122  049B                     	;# 
   123  049B                     	;# 
   124  049C                     	;# 
   125  049E                     	;# 
   126  049F                     	;# 
   127  0611                     	;# 
   128  0612                     	;# 
   129  0613                     	;# 
   130  0613                     	;# 
   131  0614                     	;# 
   132  0615                     	;# 
   133  0616                     	;# 
   134  0616                     	;# 
   135  0617                     	;# 
   136  0618                     	;# 
   137  0619                     	;# 
   138  0619                     	;# 
   139  061A                     	;# 
   140  061B                     	;# 
   141  061C                     	;# 
   142  061C                     	;# 
   143  0691                     	;# 
   144  0692                     	;# 
   145  0693                     	;# 
   146  0694                     	;# 
   147  0695                     	;# 
   148  0F0F                     	;# 
   149  0F10                     	;# 
   150  0F11                     	;# 
   151  0F12                     	;# 
   152  0F13                     	;# 
   153  0F14                     	;# 
   154  0F15                     	;# 
   155  0F16                     	;# 
   156  0F17                     	;# 
   157  0F18                     	;# 
   158  0F19                     	;# 
   159  0F1A                     	;# 
   160  0F1B                     	;# 
   161  0F1C                     	;# 
   162  0F1D                     	;# 
   163  0F1E                     	;# 
   164  0F1F                     	;# 
   165  0F20                     	;# 
   166  0F21                     	;# 
   167  0F22                     	;# 
   168  0F23                     	;# 
   169  0F24                     	;# 
   170  0F25                     	;# 
   171  0F26                     	;# 
   172  0F27                     	;# 
   173  0F28                     	;# 
   174  0F29                     	;# 
   175  0F2A                     	;# 
   176  0F2B                     	;# 
   177  0F2C                     	;# 
   178  0F2D                     	;# 
   179  0F2E                     	;# 
   180  0F2F                     	;# 
   181  0F8C                     	;# 
   182  0F8D                     	;# 
   183  0F91                     	;# 
   184  0F95                     	;# 
   185  0F96                     	;# 
   186  0F97                     	;# 
   187  0F9C                     	;# 
   188  0F9D                     	;# 
   189  0F9E                     	;# 
   190  0FE3                     	;# 
   191  0FE4                     	;# 
   192  0FE5                     	;# 
   193  0FE6                     	;# 
   194  0FE7                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEB                     	;# 
   199  0FED                     	;# 
   200  0FEE                     	;# 
   201  0FEF                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0008                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000D                     	;# 
   216  000E                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  008D                     	;# 
   231  008E                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  018E                     	;# 
   262  0191                     	;# 
   263  0191                     	;# 
   264  0192                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0199                     	;# 
   271  019A                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019C                     	;# 
   275  019D                     	;# 
   276  019E                     	;# 
   277  019F                     	;# 
   278  020C                     	;# 
   279  020D                     	;# 
   280  0211                     	;# 
   281  0211                     	;# 
   282  0212                     	;# 
   283  0212                     	;# 
   284  0213                     	;# 
   285  0213                     	;# 
   286  0214                     	;# 
   287  0214                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0216                     	;# 
   292  0216                     	;# 
   293  0217                     	;# 
   294  0217                     	;# 
   295  0391                     	;# 
   296  0392                     	;# 
   297  0393                     	;# 
   298  0394                     	;# 
   299  0395                     	;# 
   300  0396                     	;# 
   301  0498                     	;# 
   302  0498                     	;# 
   303  0499                     	;# 
   304  049A                     	;# 
   305  049B                     	;# 
   306  049B                     	;# 
   307  049C                     	;# 
   308  049E                     	;# 
   309  049F                     	;# 
   310  0611                     	;# 
   311  0612                     	;# 
   312  0613                     	;# 
   313  0613                     	;# 
   314  0614                     	;# 
   315  0615                     	;# 
   316  0616                     	;# 
   317  0616                     	;# 
   318  0617                     	;# 
   319  0618                     	;# 
   320  0619                     	;# 
   321  0619                     	;# 
   322  061A                     	;# 
   323  061B                     	;# 
   324  061C                     	;# 
   325  061C                     	;# 
   326  0691                     	;# 
   327  0692                     	;# 
   328  0693                     	;# 
   329  0694                     	;# 
   330  0695                     	;# 
   331  0F0F                     	;# 
   332  0F10                     	;# 
   333  0F11                     	;# 
   334  0F12                     	;# 
   335  0F13                     	;# 
   336  0F14                     	;# 
   337  0F15                     	;# 
   338  0F16                     	;# 
   339  0F17                     	;# 
   340  0F18                     	;# 
   341  0F19                     	;# 
   342  0F1A                     	;# 
   343  0F1B                     	;# 
   344  0F1C                     	;# 
   345  0F1D                     	;# 
   346  0F1E                     	;# 
   347  0F1F                     	;# 
   348  0F20                     	;# 
   349  0F21                     	;# 
   350  0F22                     	;# 
   351  0F23                     	;# 
   352  0F24                     	;# 
   353  0F25                     	;# 
   354  0F26                     	;# 
   355  0F27                     	;# 
   356  0F28                     	;# 
   357  0F29                     	;# 
   358  0F2A                     	;# 
   359  0F2B                     	;# 
   360  0F2C                     	;# 
   361  0F2D                     	;# 
   362  0F2E                     	;# 
   363  0F2F                     	;# 
   364  0F8C                     	;# 
   365  0F8D                     	;# 
   366  0F91                     	;# 
   367  0F95                     	;# 
   368  0F96                     	;# 
   369  0F97                     	;# 
   370  0F9C                     	;# 
   371  0F9D                     	;# 
   372  0F9E                     	;# 
   373  0FE3                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0093                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0111                     	;# 
   433  0112                     	;# 
   434  0113                     	;# 
   435  0114                     	;# 
   436  0115                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  0118                     	;# 
   440  0119                     	;# 
   441  011D                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0194                     	;# 
   451  0195                     	;# 
   452  0196                     	;# 
   453  0199                     	;# 
   454  019A                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020C                     	;# 
   462  020D                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0391                     	;# 
   479  0392                     	;# 
   480  0393                     	;# 
   481  0394                     	;# 
   482  0395                     	;# 
   483  0396                     	;# 
   484  0498                     	;# 
   485  0498                     	;# 
   486  0499                     	;# 
   487  049A                     	;# 
   488  049B                     	;# 
   489  049B                     	;# 
   490  049C                     	;# 
   491  049E                     	;# 
   492  049F                     	;# 
   493  0611                     	;# 
   494  0612                     	;# 
   495  0613                     	;# 
   496  0613                     	;# 
   497  0614                     	;# 
   498  0615                     	;# 
   499  0616                     	;# 
   500  0616                     	;# 
   501  0617                     	;# 
   502  0618                     	;# 
   503  0619                     	;# 
   504  0619                     	;# 
   505  061A                     	;# 
   506  061B                     	;# 
   507  061C                     	;# 
   508  061C                     	;# 
   509  0691                     	;# 
   510  0692                     	;# 
   511  0693                     	;# 
   512  0694                     	;# 
   513  0695                     	;# 
   514  0F0F                     	;# 
   515  0F10                     	;# 
   516  0F11                     	;# 
   517  0F12                     	;# 
   518  0F13                     	;# 
   519  0F14                     	;# 
   520  0F15                     	;# 
   521  0F16                     	;# 
   522  0F17                     	;# 
   523  0F18                     	;# 
   524  0F19                     	;# 
   525  0F1A                     	;# 
   526  0F1B                     	;# 
   527  0F1C                     	;# 
   528  0F1D                     	;# 
   529  0F1E                     	;# 
   530  0F1F                     	;# 
   531  0F20                     	;# 
   532  0F21                     	;# 
   533  0F22                     	;# 
   534  0F23                     	;# 
   535  0F24                     	;# 
   536  0F25                     	;# 
   537  0F26                     	;# 
   538  0F27                     	;# 
   539  0F28                     	;# 
   540  0F29                     	;# 
   541  0F2A                     	;# 
   542  0F2B                     	;# 
   543  0F2C                     	;# 
   544  0F2D                     	;# 
   545  0F2E                     	;# 
   546  0F2F                     	;# 
   547  0F8C                     	;# 
   548  0F8D                     	;# 
   549  0F91                     	;# 
   550  0F95                     	;# 
   551  0F96                     	;# 
   552  0F97                     	;# 
   553  0F9C                     	;# 
   554  0F9D                     	;# 
   555  0F9E                     	;# 
   556  0FE3                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  010C                     	;# 
   613  010D                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011D                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  018E                     	;# 
   628  0191                     	;# 
   629  0191                     	;# 
   630  0192                     	;# 
   631  0193                     	;# 
   632  0193                     	;# 
   633  0194                     	;# 
   634  0195                     	;# 
   635  0196                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019D                     	;# 
   642  019E                     	;# 
   643  019F                     	;# 
   644  020C                     	;# 
   645  020D                     	;# 
   646  0211                     	;# 
   647  0211                     	;# 
   648  0212                     	;# 
   649  0212                     	;# 
   650  0213                     	;# 
   651  0213                     	;# 
   652  0214                     	;# 
   653  0214                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0216                     	;# 
   659  0217                     	;# 
   660  0217                     	;# 
   661  0391                     	;# 
   662  0392                     	;# 
   663  0393                     	;# 
   664  0394                     	;# 
   665  0395                     	;# 
   666  0396                     	;# 
   667  0498                     	;# 
   668  0498                     	;# 
   669  0499                     	;# 
   670  049A                     	;# 
   671  049B                     	;# 
   672  049B                     	;# 
   673  049C                     	;# 
   674  049E                     	;# 
   675  049F                     	;# 
   676  0611                     	;# 
   677  0612                     	;# 
   678  0613                     	;# 
   679  0613                     	;# 
   680  0614                     	;# 
   681  0615                     	;# 
   682  0616                     	;# 
   683  0616                     	;# 
   684  0617                     	;# 
   685  0618                     	;# 
   686  0619                     	;# 
   687  0619                     	;# 
   688  061A                     	;# 
   689  061B                     	;# 
   690  061C                     	;# 
   691  061C                     	;# 
   692  0691                     	;# 
   693  0692                     	;# 
   694  0693                     	;# 
   695  0694                     	;# 
   696  0695                     	;# 
   697  0F0F                     	;# 
   698  0F10                     	;# 
   699  0F11                     	;# 
   700  0F12                     	;# 
   701  0F13                     	;# 
   702  0F14                     	;# 
   703  0F15                     	;# 
   704  0F16                     	;# 
   705  0F17                     	;# 
   706  0F18                     	;# 
   707  0F19                     	;# 
   708  0F1A                     	;# 
   709  0F1B                     	;# 
   710  0F1C                     	;# 
   711  0F1D                     	;# 
   712  0F1E                     	;# 
   713  0F1F                     	;# 
   714  0F20                     	;# 
   715  0F21                     	;# 
   716  0F22                     	;# 
   717  0F23                     	;# 
   718  0F24                     	;# 
   719  0F25                     	;# 
   720  0F26                     	;# 
   721  0F27                     	;# 
   722  0F28                     	;# 
   723  0F29                     	;# 
   724  0F2A                     	;# 
   725  0F2B                     	;# 
   726  0F2C                     	;# 
   727  0F2D                     	;# 
   728  0F2E                     	;# 
   729  0F2F                     	;# 
   730  0F8C                     	;# 
   731  0F8D                     	;# 
   732  0F91                     	;# 
   733  0F95                     	;# 
   734  0F96                     	;# 
   735  0F97                     	;# 
   736  0F9C                     	;# 
   737  0F9D                     	;# 
   738  0F9E                     	;# 
   739  0FE3                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE9                     	;# 
   746  0FEA                     	;# 
   747  0FEB                     	;# 
   748  0FED                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000D                     	;# 
   765  000E                     	;# 
   766  0011                     	;# 
   767  0012                     	;# 
   768  0013                     	;# 
   769  0015                     	;# 
   770  0016                     	;# 
   771  0016                     	;# 
   772  0017                     	;# 
   773  0018                     	;# 
   774  0019                     	;# 
   775  001A                     	;# 
   776  001B                     	;# 
   777  001C                     	;# 
   778  008C                     	;# 
   779  008D                     	;# 
   780  008E                     	;# 
   781  0091                     	;# 
   782  0092                     	;# 
   783  0093                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  009F                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  0111                     	;# 
   799  0112                     	;# 
   800  0113                     	;# 
   801  0114                     	;# 
   802  0115                     	;# 
   803  0116                     	;# 
   804  0117                     	;# 
   805  0118                     	;# 
   806  0119                     	;# 
   807  011D                     	;# 
   808  018C                     	;# 
   809  018D                     	;# 
   810  018E                     	;# 
   811  0191                     	;# 
   812  0191                     	;# 
   813  0192                     	;# 
   814  0193                     	;# 
   815  0193                     	;# 
   816  0194                     	;# 
   817  0195                     	;# 
   818  0196                     	;# 
   819  0199                     	;# 
   820  019A                     	;# 
   821  019B                     	;# 
   822  019B                     	;# 
   823  019C                     	;# 
   824  019D                     	;# 
   825  019E                     	;# 
   826  019F                     	;# 
   827  020C                     	;# 
   828  020D                     	;# 
   829  0211                     	;# 
   830  0211                     	;# 
   831  0212                     	;# 
   832  0212                     	;# 
   833  0213                     	;# 
   834  0213                     	;# 
   835  0214                     	;# 
   836  0214                     	;# 
   837  0215                     	;# 
   838  0215                     	;# 
   839  0215                     	;# 
   840  0216                     	;# 
   841  0216                     	;# 
   842  0217                     	;# 
   843  0217                     	;# 
   844  0391                     	;# 
   845  0392                     	;# 
   846  0393                     	;# 
   847  0394                     	;# 
   848  0395                     	;# 
   849  0396                     	;# 
   850  0498                     	;# 
   851  0498                     	;# 
   852  0499                     	;# 
   853  049A                     	;# 
   854  049B                     	;# 
   855  049B                     	;# 
   856  049C                     	;# 
   857  049E                     	;# 
   858  049F                     	;# 
   859  0611                     	;# 
   860  0612                     	;# 
   861  0613                     	;# 
   862  0613                     	;# 
   863  0614                     	;# 
   864  0615                     	;# 
   865  0616                     	;# 
   866  0616                     	;# 
   867  0617                     	;# 
   868  0618                     	;# 
   869  0619                     	;# 
   870  0619                     	;# 
   871  061A                     	;# 
   872  061B                     	;# 
   873  061C                     	;# 
   874  061C                     	;# 
   875  0691                     	;# 
   876  0692                     	;# 
   877  0693                     	;# 
   878  0694                     	;# 
   879  0695                     	;# 
   880  0F0F                     	;# 
   881  0F10                     	;# 
   882  0F11                     	;# 
   883  0F12                     	;# 
   884  0F13                     	;# 
   885  0F14                     	;# 
   886  0F15                     	;# 
   887  0F16                     	;# 
   888  0F17                     	;# 
   889  0F18                     	;# 
   890  0F19                     	;# 
   891  0F1A                     	;# 
   892  0F1B                     	;# 
   893  0F1C                     	;# 
   894  0F1D                     	;# 
   895  0F1E                     	;# 
   896  0F1F                     	;# 
   897  0F20                     	;# 
   898  0F21                     	;# 
   899  0F22                     	;# 
   900  0F23                     	;# 
   901  0F24                     	;# 
   902  0F25                     	;# 
   903  0F26                     	;# 
   904  0F27                     	;# 
   905  0F28                     	;# 
   906  0F29                     	;# 
   907  0F2A                     	;# 
   908  0F2B                     	;# 
   909  0F2C                     	;# 
   910  0F2D                     	;# 
   911  0F2E                     	;# 
   912  0F2F                     	;# 
   913  0F8C                     	;# 
   914  0F8D                     	;# 
   915  0F91                     	;# 
   916  0F95                     	;# 
   917  0F96                     	;# 
   918  0F97                     	;# 
   919  0F9C                     	;# 
   920  0F9D                     	;# 
   921  0F9E                     	;# 
   922  0FE3                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0013                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0093                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  009F                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0111                     	;# 
   982  0112                     	;# 
   983  0113                     	;# 
   984  0114                     	;# 
   985  0115                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  0118                     	;# 
   989  0119                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019D                     	;# 
  1008  019E                     	;# 
  1009  019F                     	;# 
  1010  020C                     	;# 
  1011  020D                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0391                     	;# 
  1028  0392                     	;# 
  1029  0393                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0498                     	;# 
  1034  0498                     	;# 
  1035  0499                     	;# 
  1036  049A                     	;# 
  1037  049B                     	;# 
  1038  049B                     	;# 
  1039  049C                     	;# 
  1040  049E                     	;# 
  1041  049F                     	;# 
  1042  0611                     	;# 
  1043  0612                     	;# 
  1044  0613                     	;# 
  1045  0613                     	;# 
  1046  0614                     	;# 
  1047  0615                     	;# 
  1048  0616                     	;# 
  1049  0616                     	;# 
  1050  0617                     	;# 
  1051  0618                     	;# 
  1052  0619                     	;# 
  1053  0619                     	;# 
  1054  061A                     	;# 
  1055  061B                     	;# 
  1056  061C                     	;# 
  1057  061C                     	;# 
  1058  0691                     	;# 
  1059  0692                     	;# 
  1060  0693                     	;# 
  1061  0694                     	;# 
  1062  0695                     	;# 
  1063  0F0F                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F28                     	;# 
  1089  0F29                     	;# 
  1090  0F2A                     	;# 
  1091  0F2B                     	;# 
  1092  0F2C                     	;# 
  1093  0F2D                     	;# 
  1094  0F2E                     	;# 
  1095  0F2F                     	;# 
  1096  0F8C                     	;# 
  1097  0F8D                     	;# 
  1098  0F91                     	;# 
  1099  0F95                     	;# 
  1100  0F96                     	;# 
  1101  0F97                     	;# 
  1102  0F9C                     	;# 
  1103  0F9D                     	;# 
  1104  0F9E                     	;# 
  1105  0FE3                     	;# 
  1106  0FE4                     	;# 
  1107  0FE5                     	;# 
  1108  0FE6                     	;# 
  1109  0FE7                     	;# 
  1110  0FE8                     	;# 
  1111  0FE9                     	;# 
  1112  0FEA                     	;# 
  1113  0FEB                     	;# 
  1114  0FED                     	;# 
  1115  0FEE                     	;# 
  1116  0FEF                     	;# 
  1117  0000                     	;# 
  1118  0001                     	;# 
  1119  0002                     	;# 
  1120  0003                     	;# 
  1121  0004                     	;# 
  1122  0005                     	;# 
  1123  0006                     	;# 
  1124  0007                     	;# 
  1125  0008                     	;# 
  1126  0009                     	;# 
  1127  000A                     	;# 
  1128  000B                     	;# 
  1129  000C                     	;# 
  1130  000D                     	;# 
  1131  000E                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  008C                     	;# 
  1145  008D                     	;# 
  1146  008E                     	;# 
  1147  0091                     	;# 
  1148  0092                     	;# 
  1149  0093                     	;# 
  1150  0095                     	;# 
  1151  0096                     	;# 
  1152  0097                     	;# 
  1153  0099                     	;# 
  1154  009A                     	;# 
  1155  009B                     	;# 
  1156  009B                     	;# 
  1157  009C                     	;# 
  1158  009D                     	;# 
  1159  009E                     	;# 
  1160  009F                     	;# 
  1161  010C                     	;# 
  1162  010D                     	;# 
  1163  010E                     	;# 
  1164  0111                     	;# 
  1165  0112                     	;# 
  1166  0113                     	;# 
  1167  0114                     	;# 
  1168  0115                     	;# 
  1169  0116                     	;# 
  1170  0117                     	;# 
  1171  0118                     	;# 
  1172  0119                     	;# 
  1173  011D                     	;# 
  1174  018C                     	;# 
  1175  018D                     	;# 
  1176  018E                     	;# 
  1177  0191                     	;# 
  1178  0191                     	;# 
  1179  0192                     	;# 
  1180  0193                     	;# 
  1181  0193                     	;# 
  1182  0194                     	;# 
  1183  0195                     	;# 
  1184  0196                     	;# 
  1185  0199                     	;# 
  1186  019A                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0391                     	;# 
  1211  0392                     	;# 
  1212  0393                     	;# 
  1213  0394                     	;# 
  1214  0395                     	;# 
  1215  0396                     	;# 
  1216  0498                     	;# 
  1217  0498                     	;# 
  1218  0499                     	;# 
  1219  049A                     	;# 
  1220  049B                     	;# 
  1221  049B                     	;# 
  1222  049C                     	;# 
  1223  049E                     	;# 
  1224  049F                     	;# 
  1225  0611                     	;# 
  1226  0612                     	;# 
  1227  0613                     	;# 
  1228  0613                     	;# 
  1229  0614                     	;# 
  1230  0615                     	;# 
  1231  0616                     	;# 
  1232  0616                     	;# 
  1233  0617                     	;# 
  1234  0618                     	;# 
  1235  0619                     	;# 
  1236  0619                     	;# 
  1237  061A                     	;# 
  1238  061B                     	;# 
  1239  061C                     	;# 
  1240  061C                     	;# 
  1241  0691                     	;# 
  1242  0692                     	;# 
  1243  0693                     	;# 
  1244  0694                     	;# 
  1245  0695                     	;# 
  1246  0F0F                     	;# 
  1247  0F10                     	;# 
  1248  0F11                     	;# 
  1249  0F12                     	;# 
  1250  0F13                     	;# 
  1251  0F14                     	;# 
  1252  0F15                     	;# 
  1253  0F16                     	;# 
  1254  0F17                     	;# 
  1255  0F18                     	;# 
  1256  0F19                     	;# 
  1257  0F1A                     	;# 
  1258  0F1B                     	;# 
  1259  0F1C                     	;# 
  1260  0F1D                     	;# 
  1261  0F1E                     	;# 
  1262  0F1F                     	;# 
  1263  0F20                     	;# 
  1264  0F21                     	;# 
  1265  0F22                     	;# 
  1266  0F23                     	;# 
  1267  0F24                     	;# 
  1268  0F25                     	;# 
  1269  0F26                     	;# 
  1270  0F27                     	;# 
  1271  0F28                     	;# 
  1272  0F29                     	;# 
  1273  0F2A                     	;# 
  1274  0F2B                     	;# 
  1275  0F2C                     	;# 
  1276  0F2D                     	;# 
  1277  0F2E                     	;# 
  1278  0F2F                     	;# 
  1279  0F8C                     	;# 
  1280  0F8D                     	;# 
  1281  0F91                     	;# 
  1282  0F95                     	;# 
  1283  0F96                     	;# 
  1284  0F97                     	;# 
  1285  0F9C                     	;# 
  1286  0F9D                     	;# 
  1287  0F9E                     	;# 
  1288  0FE3                     	;# 
  1289  0FE4                     	;# 
  1290  0FE5                     	;# 
  1291  0FE6                     	;# 
  1292  0FE7                     	;# 
  1293  0FE8                     	;# 
  1294  0FE9                     	;# 
  1295  0FEA                     	;# 
  1296  0FEB                     	;# 
  1297  0FED                     	;# 
  1298  0FEE                     	;# 
  1299  0FEF                     	;# 
  1300  0000                     	;# 
  1301  0001                     	;# 
  1302  0002                     	;# 
  1303  0003                     	;# 
  1304  0004                     	;# 
  1305  0005                     	;# 
  1306  0006                     	;# 
  1307  0007                     	;# 
  1308  0008                     	;# 
  1309  0009                     	;# 
  1310  000A                     	;# 
  1311  000B                     	;# 
  1312  000C                     	;# 
  1313  000D                     	;# 
  1314  000E                     	;# 
  1315  0011                     	;# 
  1316  0012                     	;# 
  1317  0013                     	;# 
  1318  0015                     	;# 
  1319  0016                     	;# 
  1320  0016                     	;# 
  1321  0017                     	;# 
  1322  0018                     	;# 
  1323  0019                     	;# 
  1324  001A                     	;# 
  1325  001B                     	;# 
  1326  001C                     	;# 
  1327  008C                     	;# 
  1328  008D                     	;# 
  1329  008E                     	;# 
  1330  0091                     	;# 
  1331  0092                     	;# 
  1332  0093                     	;# 
  1333  0095                     	;# 
  1334  0096                     	;# 
  1335  0097                     	;# 
  1336  0099                     	;# 
  1337  009A                     	;# 
  1338  009B                     	;# 
  1339  009B                     	;# 
  1340  009C                     	;# 
  1341  009D                     	;# 
  1342  009E                     	;# 
  1343  009F                     	;# 
  1344  010C                     	;# 
  1345  010D                     	;# 
  1346  010E                     	;# 
  1347  0111                     	;# 
  1348  0112                     	;# 
  1349  0113                     	;# 
  1350  0114                     	;# 
  1351  0115                     	;# 
  1352  0116                     	;# 
  1353  0117                     	;# 
  1354  0118                     	;# 
  1355  0119                     	;# 
  1356  011D                     	;# 
  1357  018C                     	;# 
  1358  018D                     	;# 
  1359  018E                     	;# 
  1360  0191                     	;# 
  1361  0191                     	;# 
  1362  0192                     	;# 
  1363  0193                     	;# 
  1364  0193                     	;# 
  1365  0194                     	;# 
  1366  0195                     	;# 
  1367  0196                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019C                     	;# 
  1373  019D                     	;# 
  1374  019E                     	;# 
  1375  019F                     	;# 
  1376  020C                     	;# 
  1377  020D                     	;# 
  1378  0211                     	;# 
  1379  0211                     	;# 
  1380  0212                     	;# 
  1381  0212                     	;# 
  1382  0213                     	;# 
  1383  0213                     	;# 
  1384  0214                     	;# 
  1385  0214                     	;# 
  1386  0215                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0216                     	;# 
  1390  0216                     	;# 
  1391  0217                     	;# 
  1392  0217                     	;# 
  1393  0391                     	;# 
  1394  0392                     	;# 
  1395  0393                     	;# 
  1396  0394                     	;# 
  1397  0395                     	;# 
  1398  0396                     	;# 
  1399  0498                     	;# 
  1400  0498                     	;# 
  1401  0499                     	;# 
  1402  049A                     	;# 
  1403  049B                     	;# 
  1404  049B                     	;# 
  1405  049C                     	;# 
  1406  049E                     	;# 
  1407  049F                     	;# 
  1408  0611                     	;# 
  1409  0612                     	;# 
  1410  0613                     	;# 
  1411  0613                     	;# 
  1412  0614                     	;# 
  1413  0615                     	;# 
  1414  0616                     	;# 
  1415  0616                     	;# 
  1416  0617                     	;# 
  1417  0618                     	;# 
  1418  0619                     	;# 
  1419  0619                     	;# 
  1420  061A                     	;# 
  1421  061B                     	;# 
  1422  061C                     	;# 
  1423  061C                     	;# 
  1424  0691                     	;# 
  1425  0692                     	;# 
  1426  0693                     	;# 
  1427  0694                     	;# 
  1428  0695                     	;# 
  1429  0F0F                     	;# 
  1430  0F10                     	;# 
  1431  0F11                     	;# 
  1432  0F12                     	;# 
  1433  0F13                     	;# 
  1434  0F14                     	;# 
  1435  0F15                     	;# 
  1436  0F16                     	;# 
  1437  0F17                     	;# 
  1438  0F18                     	;# 
  1439  0F19                     	;# 
  1440  0F1A                     	;# 
  1441  0F1B                     	;# 
  1442  0F1C                     	;# 
  1443  0F1D                     	;# 
  1444  0F1E                     	;# 
  1445  0F1F                     	;# 
  1446  0F20                     	;# 
  1447  0F21                     	;# 
  1448  0F22                     	;# 
  1449  0F23                     	;# 
  1450  0F24                     	;# 
  1451  0F25                     	;# 
  1452  0F26                     	;# 
  1453  0F27                     	;# 
  1454  0F28                     	;# 
  1455  0F29                     	;# 
  1456  0F2A                     	;# 
  1457  0F2B                     	;# 
  1458  0F2C                     	;# 
  1459  0F2D                     	;# 
  1460  0F2E                     	;# 
  1461  0F2F                     	;# 
  1462  0F8C                     	;# 
  1463  0F8D                     	;# 
  1464  0F91                     	;# 
  1465  0F95                     	;# 
  1466  0F96                     	;# 
  1467  0F97                     	;# 
  1468  0F9C                     	;# 
  1469  0F9D                     	;# 
  1470  0F9E                     	;# 
  1471  0FE3                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483  0000                     	;# 
  1484  0001                     	;# 
  1485  0002                     	;# 
  1486  0003                     	;# 
  1487  0004                     	;# 
  1488  0005                     	;# 
  1489  0006                     	;# 
  1490  0007                     	;# 
  1491  0008                     	;# 
  1492  0009                     	;# 
  1493  000A                     	;# 
  1494  000B                     	;# 
  1495  000C                     	;# 
  1496  000D                     	;# 
  1497  000E                     	;# 
  1498  0011                     	;# 
  1499  0012                     	;# 
  1500  0013                     	;# 
  1501  0015                     	;# 
  1502  0016                     	;# 
  1503  0016                     	;# 
  1504  0017                     	;# 
  1505  0018                     	;# 
  1506  0019                     	;# 
  1507  001A                     	;# 
  1508  001B                     	;# 
  1509  001C                     	;# 
  1510  008C                     	;# 
  1511  008D                     	;# 
  1512  008E                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0093                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0099                     	;# 
  1520  009A                     	;# 
  1521  009B                     	;# 
  1522  009B                     	;# 
  1523  009C                     	;# 
  1524  009D                     	;# 
  1525  009E                     	;# 
  1526  009F                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0111                     	;# 
  1531  0112                     	;# 
  1532  0113                     	;# 
  1533  0114                     	;# 
  1534  0115                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  0118                     	;# 
  1538  0119                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020C                     	;# 
  1560  020D                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0391                     	;# 
  1577  0392                     	;# 
  1578  0393                     	;# 
  1579  0394                     	;# 
  1580  0395                     	;# 
  1581  0396                     	;# 
  1582  0498                     	;# 
  1583  0498                     	;# 
  1584  0499                     	;# 
  1585  049A                     	;# 
  1586  049B                     	;# 
  1587  049B                     	;# 
  1588  049C                     	;# 
  1589  049E                     	;# 
  1590  049F                     	;# 
  1591  0611                     	;# 
  1592  0612                     	;# 
  1593  0613                     	;# 
  1594  0613                     	;# 
  1595  0614                     	;# 
  1596  0615                     	;# 
  1597  0616                     	;# 
  1598  0616                     	;# 
  1599  0617                     	;# 
  1600  0618                     	;# 
  1601  0619                     	;# 
  1602  0619                     	;# 
  1603  061A                     	;# 
  1604  061B                     	;# 
  1605  061C                     	;# 
  1606  061C                     	;# 
  1607  0691                     	;# 
  1608  0692                     	;# 
  1609  0693                     	;# 
  1610  0694                     	;# 
  1611  0695                     	;# 
  1612  0F0F                     	;# 
  1613  0F10                     	;# 
  1614  0F11                     	;# 
  1615  0F12                     	;# 
  1616  0F13                     	;# 
  1617  0F14                     	;# 
  1618  0F15                     	;# 
  1619  0F16                     	;# 
  1620  0F17                     	;# 
  1621  0F18                     	;# 
  1622  0F19                     	;# 
  1623  0F1A                     	;# 
  1624  0F1B                     	;# 
  1625  0F1C                     	;# 
  1626  0F1D                     	;# 
  1627  0F1E                     	;# 
  1628  0F1F                     	;# 
  1629  0F20                     	;# 
  1630  0F21                     	;# 
  1631  0F22                     	;# 
  1632  0F23                     	;# 
  1633  0F24                     	;# 
  1634  0F25                     	;# 
  1635  0F26                     	;# 
  1636  0F27                     	;# 
  1637  0F28                     	;# 
  1638  0F29                     	;# 
  1639  0F2A                     	;# 
  1640  0F2B                     	;# 
  1641  0F2C                     	;# 
  1642  0F2D                     	;# 
  1643  0F2E                     	;# 
  1644  0F2F                     	;# 
  1645  0F8C                     	;# 
  1646  0F8D                     	;# 
  1647  0F91                     	;# 
  1648  0F95                     	;# 
  1649  0F96                     	;# 
  1650  0F97                     	;# 
  1651  0F9C                     	;# 
  1652  0F9D                     	;# 
  1653  0F9E                     	;# 
  1654  0FE3                     	;# 
  1655  0FE4                     	;# 
  1656  0FE5                     	;# 
  1657  0FE6                     	;# 
  1658  0FE7                     	;# 
  1659  0FE8                     	;# 
  1660  0FE9                     	;# 
  1661  0FEA                     	;# 
  1662  0FEB                     	;# 
  1663  0FED                     	;# 
  1664  0FEE                     	;# 
  1665  0FEF                     	;# 
  1666  0000                     	;# 
  1667  0001                     	;# 
  1668  0002                     	;# 
  1669  0003                     	;# 
  1670  0004                     	;# 
  1671  0005                     	;# 
  1672  0006                     	;# 
  1673  0007                     	;# 
  1674  0008                     	;# 
  1675  0009                     	;# 
  1676  000A                     	;# 
  1677  000B                     	;# 
  1678  000C                     	;# 
  1679  000D                     	;# 
  1680  000E                     	;# 
  1681  0011                     	;# 
  1682  0012                     	;# 
  1683  0013                     	;# 
  1684  0015                     	;# 
  1685  0016                     	;# 
  1686  0016                     	;# 
  1687  0017                     	;# 
  1688  0018                     	;# 
  1689  0019                     	;# 
  1690  001A                     	;# 
  1691  001B                     	;# 
  1692  001C                     	;# 
  1693  008C                     	;# 
  1694  008D                     	;# 
  1695  008E                     	;# 
  1696  0091                     	;# 
  1697  0092                     	;# 
  1698  0093                     	;# 
  1699  0095                     	;# 
  1700  0096                     	;# 
  1701  0097                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  009F                     	;# 
  1710  010C                     	;# 
  1711  010D                     	;# 
  1712  010E                     	;# 
  1713  0111                     	;# 
  1714  0112                     	;# 
  1715  0113                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0117                     	;# 
  1720  0118                     	;# 
  1721  0119                     	;# 
  1722  011D                     	;# 
  1723  018C                     	;# 
  1724  018D                     	;# 
  1725  018E                     	;# 
  1726  0191                     	;# 
  1727  0191                     	;# 
  1728  0192                     	;# 
  1729  0193                     	;# 
  1730  0193                     	;# 
  1731  0194                     	;# 
  1732  0195                     	;# 
  1733  0196                     	;# 
  1734  0199                     	;# 
  1735  019A                     	;# 
  1736  019B                     	;# 
  1737  019B                     	;# 
  1738  019C                     	;# 
  1739  019D                     	;# 
  1740  019E                     	;# 
  1741  019F                     	;# 
  1742  020C                     	;# 
  1743  020D                     	;# 
  1744  0211                     	;# 
  1745  0211                     	;# 
  1746  0212                     	;# 
  1747  0212                     	;# 
  1748  0213                     	;# 
  1749  0213                     	;# 
  1750  0214                     	;# 
  1751  0214                     	;# 
  1752  0215                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0216                     	;# 
  1756  0216                     	;# 
  1757  0217                     	;# 
  1758  0217                     	;# 
  1759  0391                     	;# 
  1760  0392                     	;# 
  1761  0393                     	;# 
  1762  0394                     	;# 
  1763  0395                     	;# 
  1764  0396                     	;# 
  1765  0498                     	;# 
  1766  0498                     	;# 
  1767  0499                     	;# 
  1768  049A                     	;# 
  1769  049B                     	;# 
  1770  049B                     	;# 
  1771  049C                     	;# 
  1772  049E                     	;# 
  1773  049F                     	;# 
  1774  0611                     	;# 
  1775  0612                     	;# 
  1776  0613                     	;# 
  1777  0613                     	;# 
  1778  0614                     	;# 
  1779  0615                     	;# 
  1780  0616                     	;# 
  1781  0616                     	;# 
  1782  0617                     	;# 
  1783  0618                     	;# 
  1784  0619                     	;# 
  1785  0619                     	;# 
  1786  061A                     	;# 
  1787  061B                     	;# 
  1788  061C                     	;# 
  1789  061C                     	;# 
  1790  0691                     	;# 
  1791  0692                     	;# 
  1792  0693                     	;# 
  1793  0694                     	;# 
  1794  0695                     	;# 
  1795  0F0F                     	;# 
  1796  0F10                     	;# 
  1797  0F11                     	;# 
  1798  0F12                     	;# 
  1799  0F13                     	;# 
  1800  0F14                     	;# 
  1801  0F15                     	;# 
  1802  0F16                     	;# 
  1803  0F17                     	;# 
  1804  0F18                     	;# 
  1805  0F19                     	;# 
  1806  0F1A                     	;# 
  1807  0F1B                     	;# 
  1808  0F1C                     	;# 
  1809  0F1D                     	;# 
  1810  0F1E                     	;# 
  1811  0F1F                     	;# 
  1812  0F20                     	;# 
  1813  0F21                     	;# 
  1814  0F22                     	;# 
  1815  0F23                     	;# 
  1816  0F24                     	;# 
  1817  0F25                     	;# 
  1818  0F26                     	;# 
  1819  0F27                     	;# 
  1820  0F28                     	;# 
  1821  0F29                     	;# 
  1822  0F2A                     	;# 
  1823  0F2B                     	;# 
  1824  0F2C                     	;# 
  1825  0F2D                     	;# 
  1826  0F2E                     	;# 
  1827  0F2F                     	;# 
  1828  0F8C                     	;# 
  1829  0F8D                     	;# 
  1830  0F91                     	;# 
  1831  0F95                     	;# 
  1832  0F96                     	;# 
  1833  0F97                     	;# 
  1834  0F9C                     	;# 
  1835  0F9D                     	;# 
  1836  0F9E                     	;# 
  1837  0FE3                     	;# 
  1838  0FE4                     	;# 
  1839  0FE5                     	;# 
  1840  0FE6                     	;# 
  1841  0FE7                     	;# 
  1842  0FE8                     	;# 
  1843  0FE9                     	;# 
  1844  0FEA                     	;# 
  1845  0FEB                     	;# 
  1846  0FED                     	;# 
  1847  0FEE                     	;# 
  1848  0FEF                     	;# 
  1849  0000                     	;# 
  1850  0001                     	;# 
  1851  0002                     	;# 
  1852  0003                     	;# 
  1853  0004                     	;# 
  1854  0005                     	;# 
  1855  0006                     	;# 
  1856  0007                     	;# 
  1857  0008                     	;# 
  1858  0009                     	;# 
  1859  000A                     	;# 
  1860  000B                     	;# 
  1861  000C                     	;# 
  1862  000D                     	;# 
  1863  000E                     	;# 
  1864  0011                     	;# 
  1865  0012                     	;# 
  1866  0013                     	;# 
  1867  0015                     	;# 
  1868  0016                     	;# 
  1869  0016                     	;# 
  1870  0017                     	;# 
  1871  0018                     	;# 
  1872  0019                     	;# 
  1873  001A                     	;# 
  1874  001B                     	;# 
  1875  001C                     	;# 
  1876  008C                     	;# 
  1877  008D                     	;# 
  1878  008E                     	;# 
  1879  0091                     	;# 
  1880  0092                     	;# 
  1881  0093                     	;# 
  1882  0095                     	;# 
  1883  0096                     	;# 
  1884  0097                     	;# 
  1885  0099                     	;# 
  1886  009A                     	;# 
  1887  009B                     	;# 
  1888  009B                     	;# 
  1889  009C                     	;# 
  1890  009D                     	;# 
  1891  009E                     	;# 
  1892  009F                     	;# 
  1893  010C                     	;# 
  1894  010D                     	;# 
  1895  010E                     	;# 
  1896  0111                     	;# 
  1897  0112                     	;# 
  1898  0113                     	;# 
  1899  0114                     	;# 
  1900  0115                     	;# 
  1901  0116                     	;# 
  1902  0117                     	;# 
  1903  0118                     	;# 
  1904  0119                     	;# 
  1905  011D                     	;# 
  1906  018C                     	;# 
  1907  018D                     	;# 
  1908  018E                     	;# 
  1909  0191                     	;# 
  1910  0191                     	;# 
  1911  0192                     	;# 
  1912  0193                     	;# 
  1913  0193                     	;# 
  1914  0194                     	;# 
  1915  0195                     	;# 
  1916  0196                     	;# 
  1917  0199                     	;# 
  1918  019A                     	;# 
  1919  019B                     	;# 
  1920  019B                     	;# 
  1921  019C                     	;# 
  1922  019D                     	;# 
  1923  019E                     	;# 
  1924  019F                     	;# 
  1925  020C                     	;# 
  1926  020D                     	;# 
  1927  0211                     	;# 
  1928  0211                     	;# 
  1929  0212                     	;# 
  1930  0212                     	;# 
  1931  0213                     	;# 
  1932  0213                     	;# 
  1933  0214                     	;# 
  1934  0214                     	;# 
  1935  0215                     	;# 
  1936  0215                     	;# 
  1937  0215                     	;# 
  1938  0216                     	;# 
  1939  0216                     	;# 
  1940  0217                     	;# 
  1941  0217                     	;# 
  1942  0391                     	;# 
  1943  0392                     	;# 
  1944  0393                     	;# 
  1945  0394                     	;# 
  1946  0395                     	;# 
  1947  0396                     	;# 
  1948  0498                     	;# 
  1949  0498                     	;# 
  1950  0499                     	;# 
  1951  049A                     	;# 
  1952  049B                     	;# 
  1953  049B                     	;# 
  1954  049C                     	;# 
  1955  049E                     	;# 
  1956  049F                     	;# 
  1957  0611                     	;# 
  1958  0612                     	;# 
  1959  0613                     	;# 
  1960  0613                     	;# 
  1961  0614                     	;# 
  1962  0615                     	;# 
  1963  0616                     	;# 
  1964  0616                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0F0F                     	;# 
  1979  0F10                     	;# 
  1980  0F11                     	;# 
  1981  0F12                     	;# 
  1982  0F13                     	;# 
  1983  0F14                     	;# 
  1984  0F15                     	;# 
  1985  0F16                     	;# 
  1986  0F17                     	;# 
  1987  0F18                     	;# 
  1988  0F19                     	;# 
  1989  0F1A                     	;# 
  1990  0F1B                     	;# 
  1991  0F1C                     	;# 
  1992  0F1D                     	;# 
  1993  0F1E                     	;# 
  1994  0F1F                     	;# 
  1995  0F20                     	;# 
  1996  0F21                     	;# 
  1997  0F22                     	;# 
  1998  0F23                     	;# 
  1999  0F24                     	;# 
  2000  0F25                     	;# 
  2001  0F26                     	;# 
  2002  0F27                     	;# 
  2003  0F28                     	;# 
  2004  0F29                     	;# 
  2005  0F2A                     	;# 
  2006  0F2B                     	;# 
  2007  0F2C                     	;# 
  2008  0F2D                     	;# 
  2009  0F2E                     	;# 
  2010  0F2F                     	;# 
  2011  0F8C                     	;# 
  2012  0F8D                     	;# 
  2013  0F91                     	;# 
  2014  0F95                     	;# 
  2015  0F96                     	;# 
  2016  0F97                     	;# 
  2017  0F9C                     	;# 
  2018  0F9D                     	;# 
  2019  0F9E                     	;# 
  2020  0FE3                     	;# 
  2021  0FE4                     	;# 
  2022  0FE5                     	;# 
  2023  0FE6                     	;# 
  2024  0FE7                     	;# 
  2025  0FE8                     	;# 
  2026  0FE9                     	;# 
  2027  0FEA                     	;# 
  2028  0FEB                     	;# 
  2029  0FED                     	;# 
  2030  0FEE                     	;# 
  2031  0FEF                     	;# 
  2032                           
  2033                           	psect	strings
  2034  0600                     __pstrings:	
  2035  0600                     __stringtab:	
  2036  0600  3400               	retlw	0
  2037  0601                     __end_of__stringtab:	
  2038  0601                     _mrfRegset_InitCnt:	
  2039  0601  3410               	retlw	16
  2040  0602                     __end_of_mrfRegset_InitCnt:	
  2041  0602                     _mrfRegset_RxCnt:	
  2042  0602  3406               	retlw	6
  2043  0603                     __end_of_mrfRegset_RxCnt:	
  2044  0603                     _mrfRegset_TxCnt:	
  2045  0603  3404               	retlw	4
  2046  0604                     __end_of_mrfRegset_TxCnt:	
  2047  0604                     _mrfRegset_Init:	
  2048  0604  34CA               	retlw	202
  2049  0605  3471               	retlw	113
  2050  0606  34CA               	retlw	202
  2051  0607  3473               	retlw	115
  2052  0608  3480               	retlw	128
  2053  0609  3428               	retlw	40
  2054  060A  34C4               	retlw	196
  2055  060B  34D7               	retlw	215
  2056  060C  34A8               	retlw	168
  2057  060D  3460               	retlw	96
  2058  060E  34C6               	retlw	198
  2059  060F  3405               	retlw	5
  2060  0610  3482               	retlw	130
  2061  0611  3400               	retlw	0
  2062  0612  3490               	retlw	144
  2063  0613  3462               	retlw	98
  2064  0614  3498               	retlw	152
  2065  0615  3490               	retlw	144
  2066  0616  34C2               	retlw	194
  2067  0617  34AC               	retlw	172
  2068  0618  3482               	retlw	130
  2069  0619  3420               	retlw	32
  2070  061A  3455               	retlw	85
  2071  061B  3400               	retlw	0
  2072  061C  3482               	retlw	130
  2073  061D  3480               	retlw	128
  2074  061E  3480               	retlw	128
  2075  061F  3468               	retlw	104
  2076  0620  34CA               	retlw	202
  2077  0621  3471               	retlw	113
  2078  0622  34CA               	retlw	202
  2079  0623  3473               	retlw	115
  2080  0624                     __end_of_mrfRegset_Init:	
  2081  0624                     _mrfRegset_Rx:	
  2082  0624  3482               	retlw	130
  2083  0625  3400               	retlw	0
  2084  0626  34CA               	retlw	202
  2085  0627  3471               	retlw	113
  2086  0628  3480               	retlw	128
  2087  0629  3428               	retlw	40
  2088  062A  3482               	retlw	130
  2089  062B  3480               	retlw	128
  2090  062C  3480               	retlw	128
  2091  062D  3468               	retlw	104
  2092  062E  34CA               	retlw	202
  2093  062F  3473               	retlw	115
  2094  0630                     __end_of_mrfRegset_Rx:	
  2095  0630                     _mrfRegset_Tx:	
  2096  0630  34CA               	retlw	202
  2097  0631  3471               	retlw	113
  2098  0632  3482               	retlw	130
  2099  0633  3400               	retlw	0
  2100  0634  3480               	retlw	128
  2101  0635  34A8               	retlw	168
  2102  0636  3482               	retlw	130
  2103  0637  3420               	retlw	32
  2104  0638                     __end_of_mrfRegset_Tx:	
  2105  000B                     _INTCONbits	set	11
  2106  000C                     _PORTAbits	set	12
  2107  000E                     _PORTCbits	set	14
  2108  009D                     _ADCON0	set	157
  2109  009E                     _ADCON1	set	158
  2110  009F                     _ADCON2	set	159
  2111  0095                     _OPTION_REGbits	set	149
  2112  0099                     _OSCCON	set	153
  2113  008C                     _TRISAbits	set	140
  2114  008D                     _TRISBbits	set	141
  2115  008E                     _TRISCbits	set	142
  2116  0117                     _FVRCON	set	279
  2117  010C                     _LATAbits	set	268
  2118  010D                     _LATBbits	set	269
  2119  010E                     _LATCbits	set	270
  2120  018C                     _ANSELA	set	396
  2121  018D                     _ANSELB	set	397
  2122  018E                     _ANSELC	set	398
  2123  020C                     _WPUAbits	set	524
  2124                           
  2125                           	psect	cinit
  2126  0016                     start_initialization:	
  2127                           ; #config settings
  2128                           
  2129  0016                     __initialization:	
  2130                           
  2131                           ; Clear objects allocated to BANK0
  2132  0016  01AC               	clrf	__pbssBANK0& (0+127)
  2133  0017  01AD               	clrf	(__pbssBANK0+1)& (0+127)
  2134                           
  2135                           ; Clear objects allocated to BANK1
  2136  0018  30A0               	movlw	low __pbssBANK1
  2137  0019  0084               	movwf	4
  2138  001A  3000               	movlw	high __pbssBANK1
  2139  001B  0085               	movwf	5
  2140  001C  3049               	movlw	73
  2141  001D  3186  2638  3180   	fcall	clear_ram0
  2142  0020                     end_of_initialization:	
  2143                           ;End of C runtime variable initialization code
  2144                           
  2145  0020                     __end_of__initialization:	
  2146  0020  0020               	movlb	0
  2147  0021  284C               	ljmp	_main	;jump to C main() function
  2148  0022                     __ptext6:	
  2149 ;; *************** function _Mrf49xaModeTx *****************
  2150 ;; Defined at:
  2151 ;;		line 265 in file "../../../src/devices/mrf49xa.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  k               1    3[BANK0 ] unsigned char 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;		None               void
  2158 ;; Registers used:
  2159 ;;		wreg, status,2, status,0, pclath, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 1F/0
  2162 ;;		On exit  : 1F/1
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2165 ;;      Params:         0       0       0       0
  2166 ;;      Locals:         0       1       0       0
  2167 ;;      Temps:          0       0       0       0
  2168 ;;      Totals:         0       1       0       0
  2169 ;;Total ram usage:        1 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    7
  2172 ;; This function calls:
  2173 ;;		_Mrf49TxCmd
  2174 ;; This function is called by:
  2175 ;;		_Mrf49xaTick
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           
  2180                           ;psect for function _Mrf49xaModeTx
  2181  0022                     _Mrf49xaModeTx:	
  2182  0022  3003               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2183                           
  2184                           ;mrf49xa.c: 267: UI08_t k;
  2185                           ;mrf49xa.c: 268: for (k = 0; k < mrfRegset_TxCnt; k++) { if (mrfRegset_Tx[k].reg != 0x55
      +                          ) Mrf49TxCmd(mrfRegset_Tx[k].reg, mrfRegset_Tx[k].val); };
  2186                           
  2187                           ;incstack = 0
  2188                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  2189  0023  01A3               	clrf	Mrf49xaModeTx@k
  2190  0024  3186               	movlp	high __stringtab
  2191  0025  000A               	callw
  2192  0026  3180               	pagesel	$	;select current page
  2193  0027  3800               	iorlw	0
  2194  0028  1903               	btfsc	3,2
  2195  0029  2847               	goto	l1903
  2196  002A                     l1895:	
  2197  002A  3523               	lslf	Mrf49xaModeTx@k,w
  2198  002B  3E30               	addlw	low (_mrfRegset_Tx| (0+32768))
  2199  002C  3186               	movlp	high __stringtab
  2200  002D  000A               	callw
  2201  002E  3180               	pagesel	$	;select current page
  2202  002F  3A55               	xorlw	85
  2203  0030  1903               	skipnz
  2204  0031  283E               	goto	l1899
  2205  0032  3523               	lslf	Mrf49xaModeTx@k,w
  2206  0033  3E31               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  2207  0034  3186               	movlp	high __stringtab
  2208  0035  000A               	callw
  2209  0036  3180               	pagesel	$	;select current page
  2210  0037  00A1               	movwf	Mrf49TxCmd@val
  2211  0038  3523               	lslf	Mrf49xaModeTx@k,w
  2212  0039  3E30               	addlw	low (_mrfRegset_Tx| (0+32768))
  2213  003A  3186               	movlp	high __stringtab
  2214  003B  000A               	callw
  2215  003C  3180               	pagesel	$	;select current page
  2216  003D  21F5               	fcall	_Mrf49TxCmd
  2217  003E                     l1899:	
  2218  003E  0020               	movlb	0	; select bank0
  2219  003F  3003               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2220  0040  0AA3               	incf	Mrf49xaModeTx@k,f
  2221  0041  3186               	movlp	high __stringtab
  2222  0042  000A               	callw
  2223  0043  3180               	pagesel	$	;select current page
  2224  0044  0223               	subwf	Mrf49xaModeTx@k,w
  2225  0045  1C03               	skipc
  2226  0046  282A               	goto	l1895
  2227  0047                     l1903:	
  2228                           
  2229                           ;mrf49xa.c: 270: rfTrcvStatus.state = TX_PACKET;
  2230  0047  3003               	movlw	3
  2231  0048  0021               	movlb	1	; select bank1
  2232  0049  00A0               	movwf	_rfTrcvStatus^(0+128)
  2233                           
  2234                           ;mrf49xa.c: 271: rfTrcvStatus.hwByte = 0;
  2235  004A  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  2236  004B  0008               	return
  2237  004C                     __end_of_Mrf49xaModeTx:	
  2238  004C                     __pmaintext:	
  2239 ;;
  2240 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2241 ;;
  2242 ;; *************** function _main *****************
  2243 ;; Defined at:
  2244 ;;		line 23 in file "../../../src/node/main.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  i               1   11[BANK0 ] unsigned char 
  2249 ;;  j               1   10[BANK0 ] unsigned char 
  2250 ;; Return value:  Size  Location     Type
  2251 ;;		None               void
  2252 ;; Registers used:
  2253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2254 ;; Tracked objects:
  2255 ;;		On entry : 17F/0
  2256 ;;		On exit  : 1F/1
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2259 ;;      Params:         0       0       0       0
  2260 ;;      Locals:         0       2       0       0
  2261 ;;      Temps:          0       0       0       0
  2262 ;;      Totals:         0       2       0       0
  2263 ;;Total ram usage:        2 bytes
  2264 ;; Hardware stack levels required when called:   10
  2265 ;; This function calls:
  2266 ;;		_AdcInit
  2267 ;;		_ExtIntInit
  2268 ;;		_Mrf49xaInit
  2269 ;;		_Mrf49xaTick
  2270 ;;		_SysInitGpio
  2271 ;; This function is called by:
  2272 ;;		Startup code after reset
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           
  2277                           ;psect for function _main
  2278  004C                     _main:	
  2279                           
  2280                           ;main.c: 26: OSCCON = 0b01111000;
  2281                           
  2282                           ;incstack = 0
  2283                           ; Regs used in _main: [allreg]
  2284  004C  3078               	movlw	120
  2285  004D  0021               	movlb	1	; select bank1
  2286  004E  0099               	movwf	25	;volatile
  2287                           
  2288                           ;main.c: 27: WPUAbits.WPUA2 = 1;
  2289  004F  0024               	movlb	4	; select bank4
  2290  0050  150C               	bsf	12,2	;volatile
  2291                           
  2292                           ;main.c: 29: SysInitGpio();
  2293  0051  231A  3180         	fcall	_SysInitGpio
  2294                           
  2295                           ;main.c: 30: AdcInit();
  2296  0053  22B6  3180         	fcall	_AdcInit
  2297                           
  2298                           ;main.c: 31: ExtIntInit();
  2299  0055  22C5  3180         	fcall	_ExtIntInit
  2300                           
  2301                           ;main.c: 33: uint8_t i, j;
  2302                           ;main.c: 35: LATAbits.LATA4 = 0;
  2303  0057  0022               	movlb	2	; select bank2
  2304  0058  120C               	bcf	12,4	;volatile
  2305                           
  2306                           ;main.c: 36: LATCbits.LATC1 = 1;
  2307  0059  148E               	bsf	14,1	;volatile
  2308                           
  2309                           ;main.c: 37: for (i = 0; i < 250; i++)
  2310  005A  0020               	movlb	0	; select bank0
  2311  005B  01AB               	clrf	main@i
  2312  005C                     l2143:	
  2313                           
  2314                           ;main.c: 38: {
  2315                           ;main.c: 39: if (i == 125)
  2316  005C  082B               	movf	main@i,w
  2317  005D  3A7D               	xorlw	125
  2318  005E  1D03               	skipz
  2319  005F  2862               	goto	l2147
  2320                           
  2321                           ;main.c: 40: LATAbits.LATA4 = 1;
  2322  0060  0022               	movlb	2	; select bank2
  2323  0061  160C               	bsf	12,4	;volatile
  2324  0062                     l2147:	
  2325                           
  2326                           ;main.c: 41: for (j = 0; j < 250; j++) asm ("nop");
  2327  0062  0020               	movlb	0	; select bank0
  2328  0063  01AA               	clrf	main@j
  2329  0064                     l415:	
  2330  0064  0000               	nop	;# 
  2331  0065  0020               	movlb	0	; select bank0
  2332  0066  30FA               	movlw	250
  2333  0067  0AAA               	incf	main@j,f
  2334  0068  022A               	subwf	main@j,w
  2335  0069  1C03               	skipc
  2336  006A  2864               	goto	l415
  2337  006B  30FA               	movlw	250
  2338  006C  0AAB               	incf	main@i,f
  2339  006D  022B               	subwf	main@i,w
  2340  006E  1C03               	skipc
  2341  006F  285C               	goto	l2143
  2342                           
  2343                           ;main.c: 42: }
  2344                           ;main.c: 44: LATCbits.LATC4 = 1;
  2345  0070  0022               	movlb	2	; select bank2
  2346  0071  160E               	bsf	14,4	;volatile
  2347                           
  2348                           ;main.c: 45: LATAbits.LATA5 = 1;
  2349  0072  168C               	bsf	12,5	;volatile
  2350                           
  2351                           ;main.c: 47: Mrf49xaInit();
  2352  0073  20C1  3180         	fcall	_Mrf49xaInit
  2353  0075                     l2163:	
  2354                           
  2355                           ;main.c: 50: {
  2356                           ;main.c: 51: Mrf49xaTick();
  2357  0075  2078  3180         	fcall	_Mrf49xaTick
  2358  0077  2875               	goto	l2163
  2359  0078                     __end_of_main:	
  2360  0078                     __ptext2:	
  2361 ;; *************** function _Mrf49xaTick *****************
  2362 ;; Defined at:
  2363 ;;		line 66 in file "../../../src/devices/mrf49xa_packet.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;		None
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  timeout         1    5[BANK0 ] unsigned char 
  2368 ;;  packet          1    4[BANK0 ] PTR struct rfTrcvPacket_
  2369 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(46), rfTrcvStatus(73), 
  2370 ;;  j               1    7[BANK0 ] unsigned char 
  2371 ;;  i               1    6[BANK0 ] unsigned char 
  2372 ;; Return value:  Size  Location     Type
  2373 ;;		None               void
  2374 ;; Registers used:
  2375 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2376 ;; Tracked objects:
  2377 ;;		On entry : 1E/0
  2378 ;;		On exit  : 1F/1
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2381 ;;      Params:         0       0       0       0
  2382 ;;      Locals:         0       4       0       0
  2383 ;;      Temps:          0       0       0       0
  2384 ;;      Totals:         0       4       0       0
  2385 ;;Total ram usage:        4 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    8
  2388 ;; This function calls:
  2389 ;;		_Mrf49RxSts
  2390 ;;		_Mrf49xaModeTx
  2391 ;;		_Mrf49xaPacketPending
  2392 ;;		_Mrf49xaRxPacket
  2393 ;;		_Mrf49xaTxPacket
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           
  2400                           ;psect for function _Mrf49xaTick
  2401  0078                     _Mrf49xaTick:	
  2402                           
  2403                           ;mrf49xa_packet.c: 68: uint8_t i, j;
  2404                           ;mrf49xa_packet.c: 69: if (Mrf49xaPacketPending())
  2405                           
  2406                           ;incstack = 0
  2407                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2408  0078  22CA  3180         	fcall	_Mrf49xaPacketPending
  2409  007A  3A00               	xorlw	0
  2410  007B  1903               	skipnz
  2411  007C  2886               	goto	l2079
  2412                           
  2413                           ;mrf49xa_packet.c: 70: {
  2414                           ;mrf49xa_packet.c: 71: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  2415  007D  22D4  3180         	fcall	_Mrf49xaRxPacket
  2416  007F  0020               	movlb	0	; select bank0
  2417  0080  00A4               	movwf	Mrf49xaTick@packet
  2418                           
  2419                           ;mrf49xa_packet.c: 74: Mrf49xaTxPacket(packet, 1);
  2420  0081  01A0               	clrf	Mrf49xaTxPacket@swapSrcDst
  2421  0082  0AA0               	incf	Mrf49xaTxPacket@swapSrcDst,f
  2422  0083  0824               	movf	Mrf49xaTick@packet,w
  2423  0084  22E2  3180         	fcall	_Mrf49xaTxPacket
  2424  0086                     l2079:	
  2425                           
  2426                           ;mrf49xa_packet.c: 75: }
  2427                           ;mrf49xa_packet.c: 77: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  2428                           ;mrf49xa_packet.c: 78: rfTrcvStatus.state == RECV_IDLE)
  2429  0086  0021               	movlb	1	; select bank1
  2430  0087  0B21               	decfsz	(_rfTrcvStatus^(0+128)+1),w
  2431  0088  0008               	return
  2432  0089  08A0               	movf	_rfTrcvStatus^(0+128),f
  2433  008A  1D03               	skipz
  2434  008B  0008               	return
  2435                           
  2436                           ;mrf49xa_packet.c: 79: {
  2437                           ;mrf49xa_packet.c: 80: uint8_t timeout = 0;
  2438  008C  0020               	movlb	0	; select bank0
  2439  008D  01A5               	clrf	Mrf49xaTick@timeout
  2440  008E                     l2085:	
  2441                           
  2442                           ;mrf49xa_packet.c: 85: {
  2443                           ;mrf49xa_packet.c: 86: Mrf49RxSts();
  2444  008E  2263  3180         	fcall	_Mrf49RxSts
  2445                           
  2446                           ;mrf49xa_packet.c: 88: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sign
      +                          alPresent == 0)
  2447  0090  0021               	movlb	1	; select bank1
  2448  0091  08A0               	movf	_rfTrcvStatus^(0+128),f
  2449  0092  1D03               	skipz
  2450  0093  2897               	goto	l2093
  2451  0094  0020               	movlb	0	; select bank0
  2452  0095  1C2C               	btfss	_mrf49Status,0
  2453  0096  28AE               	goto	l372
  2454  0097                     l2093:	
  2455                           
  2456                           ;mrf49xa_packet.c: 92: }
  2457                           ;mrf49xa_packet.c: 94: for (i = 0; i < 12; i++) { for (j = 0; j < 250; j++) { asm ("nop"
      +                          ); } };
  2458  0097  0020               	movlb	0	; select bank0
  2459  0098  01A6               	clrf	Mrf49xaTick@i
  2460  0099                     l2099:	
  2461  0099  01A7               	clrf	Mrf49xaTick@j
  2462  009A                     l375:	
  2463  009A  0000               	nop	;# 
  2464  009B  0020               	movlb	0	; select bank0
  2465  009C  30FA               	movlw	250
  2466  009D  0AA7               	incf	Mrf49xaTick@j,f
  2467  009E  0227               	subwf	Mrf49xaTick@j,w
  2468  009F  1C03               	skipc
  2469  00A0  289A               	goto	l375
  2470  00A1  300C               	movlw	12
  2471  00A2  0AA6               	incf	Mrf49xaTick@i,f
  2472  00A3  0226               	subwf	Mrf49xaTick@i,w
  2473  00A4  1C03               	skipc
  2474  00A5  2899               	goto	l2099
  2475  00A6  300B               	movlw	11
  2476                           
  2477                           ;mrf49xa_packet.c: 95: timeout++;
  2478  00A7  0AA5               	incf	Mrf49xaTick@timeout,f
  2479                           
  2480                           ;mrf49xa_packet.c: 97: if (timeout > 10)
  2481  00A8  0225               	subwf	Mrf49xaTick@timeout,w
  2482  00A9  1C03               	skipc
  2483  00AA  288E               	goto	l2085
  2484                           
  2485                           ;mrf49xa_packet.c: 98: {
  2486                           ;mrf49xa_packet.c: 99: rfTrcvStatus.txPacket.retry++;
  2487  00AB  0021               	movlb	1	; select bank1
  2488  00AC  0AB7               	incf	(_rfTrcvStatus^(0+128)+23),f
  2489  00AD  0008               	return
  2490  00AE                     l372:	
  2491                           
  2492                           ;mrf49xa_packet.c: 109: INTCONbits.INTE = 0;;
  2493  00AE  120B               	bcf	11,4	;volatile
  2494                           
  2495                           ;mrf49xa_packet.c: 110: Mrf49xaModeTx();
  2496  00AF  2022               	fcall	_Mrf49xaModeTx
  2497                           
  2498                           ;mrf49xa_packet.c: 113: INTCONbits.INTE = 1;;
  2499  00B0  160B               	bsf	11,4	;volatile
  2500  00B1  0008               	return
  2501  00B2                     __end_of_Mrf49xaTick:	
  2502  00B2                     __ptext14:	
  2503 ;; *************** function _Mrf49RxCmd *****************
  2504 ;; Defined at:
  2505 ;;		line 16 in file "../../../src/devices/mrf49xa_cmd.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  cmd             1    wreg     unsigned char 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  cmd             1    1[BANK0 ] unsigned char 
  2510 ;;  val             1    2[BANK0 ] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      unsigned char 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0, pclath, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 1E/1
  2517 ;;		On exit  : 1F/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2520 ;;      Params:         0       0       0       0
  2521 ;;      Locals:         0       2       0       0
  2522 ;;      Temps:          0       0       0       0
  2523 ;;      Totals:         0       2       0       0
  2524 ;;Total ram usage:        2 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    6
  2527 ;; This function calls:
  2528 ;;		_Mrf49SpiRx
  2529 ;;		_Mrf49SpiTx
  2530 ;; This function is called by:
  2531 ;;		_Mrf49RxByte
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           
  2536                           ;psect for function _Mrf49RxCmd
  2537  00B2                     _Mrf49RxCmd:	
  2538                           
  2539                           ;incstack = 0
  2540                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  2541                           ;Mrf49RxCmd@cmd stored from wreg
  2542  00B2  0020               	movlb	0	; select bank0
  2543  00B3  00A1               	movwf	Mrf49RxCmd@cmd
  2544                           
  2545                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  2546  00B4  0022               	movlb	2	; select bank2
  2547  00B5  130E               	bcf	14,6	;volatile
  2548                           
  2549                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  2550  00B6  0020               	movlb	0	; select bank0
  2551  00B7  0821               	movf	Mrf49RxCmd@cmd,w
  2552  00B8  2201  3180         	fcall	_Mrf49SpiTx
  2553                           
  2554                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  2555  00BA  226F               	fcall	_Mrf49SpiRx
  2556  00BB  00A2               	movwf	Mrf49RxCmd@val
  2557                           
  2558                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  2559  00BC  0022               	movlb	2	; select bank2
  2560  00BD  170E               	bsf	14,6	;volatile
  2561                           
  2562                           ;mrf49xa_cmd.c: 25: return val;
  2563  00BE  0020               	movlb	0	; select bank0
  2564  00BF  0822               	movf	Mrf49RxCmd@val,w
  2565  00C0  0008               	return
  2566  00C1                     __end_of_Mrf49RxCmd:	
  2567  00C1                     __ptext7:	
  2568 ;; *************** function _Mrf49xaInit *****************
  2569 ;; Defined at:
  2570 ;;		line 303 in file "../../../src/devices/mrf49xa.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;  k               1    9[BANK0 ] unsigned char 
  2575 ;;  j               1    8[BANK0 ] unsigned char 
  2576 ;;  i               1    7[BANK0 ] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;		None               void
  2579 ;; Registers used:
  2580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 1F/2
  2583 ;;		On exit  : 1F/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2586 ;;      Params:         0       0       0       0
  2587 ;;      Locals:         0       3       0       0
  2588 ;;      Temps:          0       0       0       0
  2589 ;;      Totals:         0       3       0       0
  2590 ;;Total ram usage:        3 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    9
  2593 ;; This function calls:
  2594 ;;		_Mrf49TxCmd
  2595 ;;		_Mrf49xaModeRx
  2596 ;;		_Mrf49xaServe
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function _Mrf49xaInit
  2604  00C1                     _Mrf49xaInit:	
  2605                           
  2606                           ;mrf49xa.c: 305: UI08_t i, j, k;
  2607                           ;mrf49xa.c: 306: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { for (i = 0; i < 12; i++) { for (j = 0; j < 250; j++) { asm ("nop"); } }; } else 
      +                          { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } };
  2608                           
  2609                           ;incstack = 0
  2610                           ; Regs used in _Mrf49xaInit: [allreg]
  2611  00C1  0020               	movlb	0	; select bank0
  2612  00C2  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  2613  00C3  01A9               	clrf	Mrf49xaInit@k
  2614  00C4  3186               	movlp	high __stringtab
  2615  00C5  000A               	callw
  2616  00C6  3180               	pagesel	$	;select current page
  2617  00C7  3800               	iorlw	0
  2618  00C8  1903               	btfsc	3,2
  2619  00C9  28F6               	goto	l1941
  2620  00CA                     l1913:	
  2621  00CA  3529               	lslf	Mrf49xaInit@k,w
  2622  00CB  3E04               	addlw	low (_mrfRegset_Init| (0+32768))
  2623  00CC  3186               	movlp	high __stringtab
  2624  00CD  000A               	callw
  2625  00CE  3180               	pagesel	$	;select current page
  2626  00CF  3A55               	xorlw	85
  2627  00D0  1D03               	skipz
  2628  00D1  28E1               	goto	l1935
  2629  00D2  01A7               	clrf	Mrf49xaInit@i
  2630  00D3                     l1921:	
  2631  00D3  01A8               	clrf	Mrf49xaInit@j
  2632  00D4                     l232:	
  2633  00D4  0000               	nop	;# 
  2634  00D5  0020               	movlb	0	; select bank0
  2635  00D6  30FA               	movlw	250
  2636  00D7  0AA8               	incf	Mrf49xaInit@j,f
  2637  00D8  0228               	subwf	Mrf49xaInit@j,w
  2638  00D9  1C03               	skipc
  2639  00DA  28D4               	goto	l232
  2640  00DB  300C               	movlw	12
  2641  00DC  0AA7               	incf	Mrf49xaInit@i,f
  2642  00DD  0227               	subwf	Mrf49xaInit@i,w
  2643  00DE  1803               	btfsc	3,0
  2644  00DF  28ED               	goto	l1937
  2645  00E0  28D3               	goto	l1921
  2646  00E1                     l1935:	
  2647  00E1  3529               	lslf	Mrf49xaInit@k,w
  2648  00E2  3E05               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  2649  00E3  3186               	movlp	high __stringtab
  2650  00E4  000A               	callw
  2651  00E5  3180               	pagesel	$	;select current page
  2652  00E6  00A1               	movwf	Mrf49TxCmd@val
  2653  00E7  3529               	lslf	Mrf49xaInit@k,w
  2654  00E8  3E04               	addlw	low (_mrfRegset_Init| (0+32768))
  2655  00E9  3186               	movlp	high __stringtab
  2656  00EA  000A               	callw
  2657  00EB  3180               	pagesel	$	;select current page
  2658  00EC  21F5               	fcall	_Mrf49TxCmd
  2659  00ED                     l1937:	
  2660  00ED  0020               	movlb	0	; select bank0
  2661  00EE  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  2662  00EF  0AA9               	incf	Mrf49xaInit@k,f
  2663  00F0  3186               	movlp	high __stringtab
  2664  00F1  000A               	callw
  2665  00F2  3180               	pagesel	$	;select current page
  2666  00F3  0229               	subwf	Mrf49xaInit@k,w
  2667  00F4  1C03               	skipc
  2668  00F5  28CA               	goto	l1913
  2669  00F6                     l1941:	
  2670                           
  2671                           ;mrf49xa.c: 308: Mrf49xaModeRx();
  2672  00F6  21CB  3180         	fcall	_Mrf49xaModeRx
  2673  00F8                     l1945:	
  2674                           ;mrf49xa.c: 310: while(PORTAbits.RA2 == 0)
  2675                           
  2676  00F8  0020               	movlb	0	; select bank0
  2677  00F9  190C               	btfsc	12,2	;volatile
  2678  00FA  0008               	return
  2679                           
  2680                           ;mrf49xa.c: 311: Mrf49xaServe();
  2681  00FB  20FE  3180         	fcall	_Mrf49xaServe
  2682  00FD  28F8               	goto	l1945
  2683  00FE                     __end_of_Mrf49xaInit:	
  2684  00FE                     __ptext8:	
  2685 ;; *************** function _Mrf49xaServe *****************
  2686 ;; Defined at:
  2687 ;;		line 73 in file "../../../src/devices/mrf49xa.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;		None
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  data            1    6[BANK0 ] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      unsigned char 
  2694 ;; Registers used:
  2695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 1D/0
  2698 ;;		On exit  : 1F/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2701 ;;      Params:         0       0       0       0
  2702 ;;      Locals:         0       1       0       0
  2703 ;;      Temps:          0       2       0       0
  2704 ;;      Totals:         0       3       0       0
  2705 ;;Total ram usage:        3 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    8
  2708 ;; This function calls:
  2709 ;;		_Mrf49RxByte
  2710 ;;		_Mrf49RxSts
  2711 ;;		_Mrf49TxByte
  2712 ;;		_Mrf49xaModeRx
  2713 ;; This function is called by:
  2714 ;;		_Mrf49xaInit
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           
  2719                           ;psect for function _Mrf49xaServe
  2720  00FE                     _Mrf49xaServe:	
  2721                           
  2722                           ;mrf49xa.c: 75: unsigned char data;
  2723                           ;mrf49xa.c: 81: Mrf49RxSts();
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _Mrf49xaServe: [allreg]
  2727  00FE  2263  3180         	fcall	_Mrf49RxSts
  2728                           
  2729                           ;mrf49xa.c: 86: }
  2730                           ;mrf49xa.c: 89: if (mrf49Status.flags.msb.overflow == 1)
  2731                           
  2732                           ;mrf49xa.c: 84: {
  2733  0100  0020               	movlb	0	; select bank0
  2734  0101  1AAC               	btfsc	_mrf49Status,5
  2735  0102  290D               	goto	l1759
  2736  0103  2918               	goto	l179
  2737  0104                     l1755:	
  2738                           
  2739                           ;mrf49xa.c: 94: case RECV_DATA:
  2740                           ;mrf49xa.c: 95: case RECV_TIMEOUT:
  2741                           ;mrf49xa.c: 98: data = Mrf49RxByte();
  2742  0104  21C9  3180         	fcall	_Mrf49RxByte
  2743  0106  00A6               	movwf	Mrf49xaServe@data
  2744                           
  2745                           ;mrf49xa.c: 99: data = Mrf49RxByte();
  2746  0107  21C9  3180         	fcall	_Mrf49RxByte
  2747  0109  00A6               	movwf	Mrf49xaServe@data
  2748                           
  2749                           ;mrf49xa.c: 102: Mrf49xaModeRx();
  2750  010A  21CB  3180         	fcall	_Mrf49xaModeRx
  2751                           
  2752                           ;mrf49xa.c: 106: break;
  2753  010C  2918               	goto	l179
  2754  010D                     l1759:	
  2755  010D  0021               	movlb	1	; select bank1
  2756  010E  0820               	movf	_rfTrcvStatus^(0+128),w
  2757                           
  2758                           ; Switch size 1, requested type "speed"
  2759                           ; Number of cases is 4, Range of values is 0 to 3
  2760                           ; switch strategies available:
  2761                           ; Name         Instructions Cycles
  2762                           ; direct_byte           14     6 (fixed)
  2763                           ; simple_byte           13     7 (average)
  2764                           ; jumptable            260     6 (fixed)
  2765                           ;	Chosen strategy is direct_byte
  2766  010F  0084               	movwf	4
  2767  0110  3004               	movlw	4
  2768  0111  0204               	subwf	4,w
  2769  0112  1803               	skipnc
  2770  0113  2918               	goto	l179
  2771  0114  3184               	movlp	high S2461
  2772  0115  3504               	lslf	4,w
  2773  0116  3EE8               	addlw	low S2461
  2774  0117  0082               	movwf	2
  2775  0118                     l179:	
  2776                           
  2777                           ;mrf49xa.c: 114: }
  2778                           ;mrf49xa.c: 123: if (mrf49Status.flags.msb.fifoTxRx == 1)
  2779  0118  0020               	movlb	0	; select bank0
  2780  0119  1BAC               	btfsc	_mrf49Status,7
  2781  011A  29B3               	goto	l1839
  2782  011B  29BF               	goto	l1841
  2783  011C                     l1763:	
  2784                           
  2785                           ;mrf49xa.c: 129: data = Mrf49RxByte();
  2786  011C  21C9  3180         	fcall	_Mrf49RxByte
  2787  011E  00A6               	movwf	Mrf49xaServe@data
  2788                           
  2789                           ;mrf49xa.c: 133: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  2790  011F  1BAD               	btfsc	_mrf49Status+1,7
  2791  0120  2924               	goto	l1769
  2792  0121                     l1767:	
  2793                           
  2794                           ;mrf49xa.c: 134: {
  2795                           ;mrf49xa.c: 135: Mrf49xaModeRx();
  2796  0121  21CB  3180         	fcall	_Mrf49xaModeRx
  2797                           
  2798                           ;mrf49xa.c: 136: break;
  2799  0123  29BF               	goto	l1841
  2800  0124                     l1769:	
  2801                           
  2802                           ;mrf49xa.c: 137: }
  2803                           ;mrf49xa.c: 139: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx = &(r
      +                          fTrcvStatus.rxPacket[0]);
  2804  0124  0021               	movlb	1	; select bank1
  2805  0125  08B8               	movf	(_rfTrcvStatus^(0+128)+24),f
  2806  0126  1D03               	skipz
  2807  0127  292A               	goto	l1773
  2808  0128  30B8               	movlw	(_rfTrcvStatus+24)& (0+255)
  2809  0129  292E               	goto	L1
  2810  012A                     l1773:	
  2811                           
  2812                           ;mrf49xa.c: 140: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.hwRx 
      +                          = &(rfTrcvStatus.rxPacket[1]);
  2813  012A  08CF               	movf	(_rfTrcvStatus^(0+128)+47),f
  2814  012B  1D03               	skipz
  2815  012C  2921               	goto	l1767
  2816  012D  30CF               	movlw	(_rfTrcvStatus+47)& (0+255)
  2817  012E                     L1:	
  2818  012E  00E6               	movwf	(_rfTrcvStatus+70)^(0+128)
  2819                           
  2820                           ;mrf49xa.c: 147: }
  2821                           ;mrf49xa.c: 148: rfTrcvStatus.hwRx->packet.size = data;
  2822  012F  0A66               	incf	(_rfTrcvStatus+70)^(0+128),w
  2823  0130  0086               	movwf	6
  2824  0131  0187               	clrf	7
  2825  0132  0020               	movlb	0	; select bank0
  2826  0133  0826               	movf	Mrf49xaServe@data,w
  2827  0134  0081               	movwf	1
  2828                           
  2829                           ;mrf49xa.c: 149: rfTrcvStatus.hwRx->crc = 0;
  2830  0135  0021               	movlb	1	; select bank1
  2831  0136  0866               	movf	(_rfTrcvStatus+70)^(0+128),w
  2832  0137  3E15               	addlw	21
  2833  0138  0086               	movwf	6
  2834  0139  0181               	clrf	1
  2835                           
  2836                           ;mrf49xa.c: 150: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  2837  013A  0866               	movf	(_rfTrcvStatus+70)^(0+128),w
  2838  013B  0086               	movwf	6
  2839  013C  3002               	movlw	2
  2840  013D  0081               	movwf	1
  2841                           
  2842                           ;mrf49xa.c: 152: rfTrcvStatus.state = RECV_DATA;
  2843  013E  01A0               	clrf	_rfTrcvStatus^(0+128)
  2844  013F  0AA0               	incf	_rfTrcvStatus^(0+128),f
  2845                           
  2846                           ;mrf49xa.c: 153: rfTrcvStatus.hwByte = 1;
  2847  0140  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  2848  0141  296A               	goto	L2
  2849  0142                     l1789:	
  2850                           ;mrf49xa.c: 155: break;
  2851                           
  2852                           
  2853                           ;mrf49xa.c: 159: data = Mrf49RxByte();
  2854  0142  21C9  3180         	fcall	_Mrf49RxByte
  2855  0144  00A6               	movwf	Mrf49xaServe@data
  2856                           
  2857                           ;mrf49xa.c: 163: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  2858  0145  1FAD               	btfss	_mrf49Status+1,7
  2859  0146  2921               	goto	l1767
  2860                           
  2861                           ;mrf49xa.c: 167: }
  2862                           ;mrf49xa.c: 169: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  2863  0147  0021               	movlb	1	; select bank1
  2864  0148  0A66               	incf	(_rfTrcvStatus+70)^(0+128),w
  2865  0149  0086               	movwf	6
  2866  014A  0187               	clrf	7
  2867  014B  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  2868  014C  0601               	xorwf	1,w
  2869  014D  1D03               	skipz
  2870  014E  2960               	goto	l1805
  2871                           
  2872                           ;mrf49xa.c: 170: {
  2873                           ;mrf49xa.c: 171: rfTrcvStatus.hwRx->crc = data;
  2874  014F  0866               	movf	(_rfTrcvStatus+70)^(0+128),w
  2875  0150  3E15               	addlw	21
  2876  0151  0086               	movwf	6
  2877  0152  0020               	movlb	0	; select bank0
  2878  0153  0826               	movf	Mrf49xaServe@data,w
  2879  0154  0081               	movwf	1
  2880                           
  2881                           ;mrf49xa.c: 175: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  2882  0155  0021               	movlb	1	; select bank1
  2883  0156  0866               	movf	(_rfTrcvStatus+70)^(0+128),w
  2884  0157  0086               	movwf	6
  2885  0158  3003               	movlw	3
  2886  0159  0081               	movwf	1
  2887                           
  2888                           ;mrf49xa.c: 178: Mrf49xaModeRx();
  2889  015A  21CB  3180         	fcall	_Mrf49xaModeRx
  2890                           
  2891                           ;mrf49xa.c: 181: LATCbits.LATC2 = 1;
  2892  015C  0022               	movlb	2	; select bank2
  2893  015D  150E               	bsf	14,2	;volatile
  2894                           
  2895                           ;mrf49xa.c: 182: LATCbits.LATC2 = 0;
  2896  015E  110E               	bcf	14,2	;volatile
  2897                           
  2898                           ;mrf49xa.c: 184: }
  2899  015F  29BF               	goto	l1841
  2900  0160                     l1805:	
  2901                           
  2902                           ;mrf49xa.c: 185: else
  2903                           ;mrf49xa.c: 186: {
  2904                           ;mrf49xa.c: 187: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  2905  0160  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  2906  0161  0766               	addwf	(_rfTrcvStatus+70)^(0+128),w
  2907  0162  0020               	movlb	0	; select bank0
  2908  0163  00A4               	movwf	??_Mrf49xaServe
  2909  0164  0A24               	incf	??_Mrf49xaServe,w
  2910  0165  0086               	movwf	6
  2911  0166  0187               	clrf	7
  2912  0167  0826               	movf	Mrf49xaServe@data,w
  2913  0168  0081               	movwf	1
  2914  0169                     l1807:	
  2915  0169  0021               	movlb	1	; select bank1
  2916  016A                     L2:	
  2917  016A  0AE7               	incf	(_rfTrcvStatus^(0+128)+71),f
  2918  016B  29BF               	goto	l1841
  2919  016C                     l1809:	
  2920                           
  2921                           ;mrf49xa.c: 197: case 1:
  2922                           ;mrf49xa.c: 198: Mrf49TxByte(0xAA);
  2923  016C  30AA               	movlw	170
  2924  016D  21C4  3180         	fcall	_Mrf49TxByte
  2925                           
  2926                           ;mrf49xa.c: 199: break;
  2927  016F  2969               	goto	l1807
  2928  0170                     l1811:	
  2929                           
  2930                           ;mrf49xa.c: 202: Mrf49TxByte(0x2D);
  2931  0170  302D               	movlw	45
  2932  0171  21C4  3180         	fcall	_Mrf49TxByte
  2933                           
  2934                           ;mrf49xa.c: 203: break;
  2935  0173  2969               	goto	l1807
  2936  0174                     l1813:	
  2937                           
  2938                           ;mrf49xa.c: 206: Mrf49TxByte(0xD4);
  2939  0174  30D4               	movlw	212
  2940  0175  21C4  3180         	fcall	_Mrf49TxByte
  2941                           
  2942                           ;mrf49xa.c: 207: break;
  2943  0177  2969               	goto	l1807
  2944  0178                     l1815:	
  2945                           
  2946                           ;mrf49xa.c: 211: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte-4]);
  2947  0178  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  2948  0179  3E9E               	addlw	(_rfTrcvStatus+254)& (0+255)
  2949  017A  0086               	movwf	6
  2950  017B  0187               	clrf	7
  2951  017C  0801               	movf	1,w
  2952  017D  21C4  3180         	fcall	_Mrf49TxByte
  2953                           
  2954                           ;mrf49xa.c: 212: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStatus.tx
      +                          Packet.raw[rfTrcvStatus.hwByte-4];
  2955  017F  0021               	movlb	1	; select bank1
  2956  0180  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  2957  0181  3E9E               	addlw	(_rfTrcvStatus+254)& (0+255)
  2958  0182  0086               	movwf	6
  2959  0183  0187               	clrf	7
  2960  0184  0836               	movf	(_rfTrcvStatus^(0+128)+22),w
  2961  0185  0601               	xorwf	1,w
  2962  0186  00B6               	movwf	(_rfTrcvStatus^(0+128)+22)
  2963                           
  2964                           ;mrf49xa.c: 213: if (rfTrcvStatus.hwByte-4 == rfTrcvStatus.txPacket.packet.size)
  2965  0187  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  2966  0188  3EFC               	addlw	252
  2967  0189  0020               	movlb	0	; select bank0
  2968  018A  00A4               	movwf	??_Mrf49xaServe
  2969  018B  30FF               	movlw	255
  2970  018C  1803               	skipnc
  2971  018D  3000               	movlw	0
  2972  018E  00A5               	movwf	??_Mrf49xaServe+1
  2973  018F  0021               	movlb	1	; select bank1
  2974  0190  0822               	movf	(_rfTrcvStatus^(0+128)+2),w
  2975  0191  0020               	movlb	0	; select bank0
  2976  0192  0624               	xorwf	??_Mrf49xaServe,w
  2977  0193  0425               	iorwf	??_Mrf49xaServe+1,w
  2978  0194  1D03               	skipz
  2979  0195  2969               	goto	l1807
  2980                           
  2981                           ;mrf49xa.c: 214: {
  2982                           ;mrf49xa.c: 215: rfTrcvStatus.hwByte = 49;
  2983  0196  3031               	movlw	49
  2984  0197  0021               	movlb	1	; select bank1
  2985  0198  00E7               	movwf	(_rfTrcvStatus^(0+128)+71)
  2986  0199  2969               	goto	l1807
  2987  019A                     l1823:	
  2988                           
  2989                           ;mrf49xa.c: 220: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  2990  019A  0836               	movf	(_rfTrcvStatus^(0+128)+22),w
  2991  019B  21C4  3180         	fcall	_Mrf49TxByte
  2992                           
  2993                           ;mrf49xa.c: 221: break;
  2994  019D  2969               	goto	l1807
  2995  019E                     l1825:	
  2996                           
  2997                           ;mrf49xa.c: 224: case 52:
  2998                           ;mrf49xa.c: 225: Mrf49TxByte(0x00);
  2999  019E  3000               	movlw	0
  3000  019F  21C4  3180         	fcall	_Mrf49TxByte
  3001                           
  3002                           ;mrf49xa.c: 226: break;
  3003  01A1  2969               	goto	l1807
  3004  01A2                     l1827:	
  3005                           
  3006                           ;mrf49xa.c: 229: Mrf49TxByte(0x00);
  3007  01A2  3000               	movlw	0
  3008  01A3  21C4  3180         	fcall	_Mrf49TxByte
  3009                           
  3010                           ;mrf49xa.c: 230: Mrf49xaModeRx();
  3011  01A5  21CB  3180         	fcall	_Mrf49xaModeRx
  3012                           
  3013                           ;mrf49xa.c: 231: rfTrcvStatus.txPacket.state = PKT_FREE;
  3014  01A7  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  3015                           
  3016                           ;mrf49xa.c: 232: break;
  3017  01A8  2969               	goto	l1807
  3018  01A9                     l1833:	
  3019  01A9  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  3020                           
  3021                           ; Switch size 1, requested type "speed"
  3022                           ; Number of cases is 8, Range of values is 0 to 54
  3023                           ; switch strategies available:
  3024                           ; Name         Instructions Cycles
  3025                           ; direct_byte          116     6 (fixed)
  3026                           ; simple_byte           25    13 (average)
  3027                           ; jumptable            260     6 (fixed)
  3028                           ;	Chosen strategy is direct_byte
  3029  01AA  0084               	movwf	4
  3030  01AB  3037               	movlw	55
  3031  01AC  0204               	subwf	4,w
  3032  01AD  1803               	skipnc
  3033  01AE  2978               	goto	l1815
  3034  01AF  3185               	movlp	high S2463
  3035  01B0  3504               	lslf	4,w
  3036  01B1  3E00               	addlw	low S2463
  3037  01B2  0082               	movwf	2
  3038  01B3                     l1839:	
  3039  01B3  0021               	movlb	1	; select bank1
  3040  01B4  0820               	movf	_rfTrcvStatus^(0+128),w
  3041                           
  3042                           ; Switch size 1, requested type "speed"
  3043                           ; Number of cases is 3, Range of values is 0 to 3
  3044                           ; switch strategies available:
  3045                           ; Name         Instructions Cycles
  3046                           ; simple_byte           10     6 (average)
  3047                           ; direct_byte           14     6 (fixed)
  3048                           ; jumptable            260     6 (fixed)
  3049                           ;	Chosen strategy is simple_byte
  3050  01B5  3A00               	xorlw	0	; case 0
  3051  01B6  1903               	skipnz
  3052  01B7  291C               	goto	l1763
  3053  01B8  3A01               	xorlw	1	; case 1
  3054  01B9  1903               	skipnz
  3055  01BA  2942               	goto	l1789
  3056  01BB  3A02               	xorlw	2	; case 3
  3057  01BC  1903               	skipnz
  3058  01BD  29A9               	goto	l1833
  3059  01BE  29BF               	goto	l1841
  3060  01BF                     l1841:	
  3061                           
  3062                           ;mrf49xa.c: 239: }
  3063                           ;mrf49xa.c: 253: return PORTAbits.RA2 == 1 ? 1 : 0;
  3064  01BF  0020               	movlb	0	; select bank0
  3065  01C0  0C0C               	rrf	12,w	;volatile
  3066  01C1  0C89               	rrf	9,f
  3067  01C2  3901               	andlw	1
  3068  01C3  0008               	return
  3069  01C4                     __end_of_Mrf49xaServe:	
  3070  01C4                     __ptext10:	
  3071 ;; *************** function _Mrf49TxByte *****************
  3072 ;; Defined at:
  3073 ;;		line 46 in file "../../../src/devices/mrf49xa_cmd.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  byte            1    wreg     unsigned char 
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;  byte            1    3[BANK0 ] unsigned char 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;		None               void
  3080 ;; Registers used:
  3081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : 1E/1
  3084 ;;		On exit  : 1F/2
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3087 ;;      Params:         0       0       0       0
  3088 ;;      Locals:         0       1       0       0
  3089 ;;      Temps:          0       0       0       0
  3090 ;;      Totals:         0       1       0       0
  3091 ;;Total ram usage:        1 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    7
  3094 ;; This function calls:
  3095 ;;		_Mrf49TxCmd
  3096 ;; This function is called by:
  3097 ;;		_Mrf49xaServe
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           
  3102                           ;psect for function _Mrf49TxByte
  3103  01C4                     _Mrf49TxByte:	
  3104                           
  3105                           ;incstack = 0
  3106                           ; Regs used in _Mrf49TxByte: [allreg]
  3107                           ;Mrf49TxByte@byte stored from wreg
  3108  01C4  0020               	movlb	0	; select bank0
  3109  01C5  00A3               	movwf	Mrf49TxByte@byte
  3110                           
  3111                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  3112  01C6  00A1               	movwf	Mrf49TxCmd@val
  3113  01C7  30B8               	movlw	184
  3114  01C8  29F5               	ljmp	_Mrf49TxCmd
  3115  01C9                     __end_of_Mrf49TxByte:	
  3116  01C9                     __ptext13:	
  3117 ;; *************** function _Mrf49RxByte *****************
  3118 ;; Defined at:
  3119 ;;		line 41 in file "../../../src/devices/mrf49xa_cmd.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;		None
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      unsigned char 
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, pclath, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 1E/1
  3130 ;;		On exit  : 1F/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3133 ;;      Params:         0       0       0       0
  3134 ;;      Locals:         0       0       0       0
  3135 ;;      Temps:          0       0       0       0
  3136 ;;      Totals:         0       0       0       0
  3137 ;;Total ram usage:        0 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    7
  3140 ;; This function calls:
  3141 ;;		_Mrf49RxCmd
  3142 ;; This function is called by:
  3143 ;;		_Mrf49xaServe
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           
  3148                           ;psect for function _Mrf49RxByte
  3149  01C9                     _Mrf49RxByte:	
  3150                           
  3151                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  3152                           
  3153                           ;incstack = 0
  3154                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  3155  01C9  30B0               	movlw	176
  3156  01CA  28B2               	ljmp	_Mrf49RxCmd
  3157  01CB                     __end_of_Mrf49RxByte:	
  3158  01CB                     __ptext9:	
  3159 ;; *************** function _Mrf49xaModeRx *****************
  3160 ;; Defined at:
  3161 ;;		line 256 in file "../../../src/devices/mrf49xa.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  k               1    3[BANK0 ] unsigned char 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 1C/0
  3172 ;;		On exit  : 1F/1
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3175 ;;      Params:         0       0       0       0
  3176 ;;      Locals:         0       1       0       0
  3177 ;;      Temps:          0       0       0       0
  3178 ;;      Totals:         0       1       0       0
  3179 ;;Total ram usage:        1 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    7
  3182 ;; This function calls:
  3183 ;;		_Mrf49TxCmd
  3184 ;; This function is called by:
  3185 ;;		_Mrf49xaServe
  3186 ;;		_Mrf49xaInit
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           
  3191                           ;psect for function _Mrf49xaModeRx
  3192  01CB                     _Mrf49xaModeRx:	
  3193                           
  3194                           ;mrf49xa.c: 258: UI08_t k;
  3195                           ;mrf49xa.c: 259: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55
      +                          ) Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  3196                           
  3197                           ;incstack = 0
  3198                           ; Regs used in _Mrf49xaModeRx: [allreg]
  3199  01CB  0020               	movlb	0	; select bank0
  3200  01CC  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3201  01CD  01A3               	clrf	Mrf49xaModeRx@k
  3202  01CE  3186               	movlp	high __stringtab
  3203  01CF  000A               	callw
  3204  01D0  3180               	pagesel	$	;select current page
  3205  01D1  3800               	iorlw	0
  3206  01D2  1903               	btfsc	3,2
  3207  01D3  29F1               	goto	l1879
  3208  01D4                     l1871:	
  3209  01D4  3523               	lslf	Mrf49xaModeRx@k,w
  3210  01D5  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  3211  01D6  3186               	movlp	high __stringtab
  3212  01D7  000A               	callw
  3213  01D8  3180               	pagesel	$	;select current page
  3214  01D9  3A55               	xorlw	85
  3215  01DA  1903               	skipnz
  3216  01DB  29E8               	goto	l1875
  3217  01DC  3523               	lslf	Mrf49xaModeRx@k,w
  3218  01DD  3E25               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  3219  01DE  3186               	movlp	high __stringtab
  3220  01DF  000A               	callw
  3221  01E0  3180               	pagesel	$	;select current page
  3222  01E1  00A1               	movwf	Mrf49TxCmd@val
  3223  01E2  3523               	lslf	Mrf49xaModeRx@k,w
  3224  01E3  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  3225  01E4  3186               	movlp	high __stringtab
  3226  01E5  000A               	callw
  3227  01E6  3180               	pagesel	$	;select current page
  3228  01E7  21F5               	fcall	_Mrf49TxCmd
  3229  01E8                     l1875:	
  3230  01E8  0020               	movlb	0	; select bank0
  3231  01E9  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3232  01EA  0AA3               	incf	Mrf49xaModeRx@k,f
  3233  01EB  3186               	movlp	high __stringtab
  3234  01EC  000A               	callw
  3235  01ED  3180               	pagesel	$	;select current page
  3236  01EE  0223               	subwf	Mrf49xaModeRx@k,w
  3237  01EF  1C03               	skipc
  3238  01F0  29D4               	goto	l1871
  3239  01F1                     l1879:	
  3240                           
  3241                           ;mrf49xa.c: 261: rfTrcvStatus.state = RECV_IDLE;
  3242  01F1  0021               	movlb	1	; select bank1
  3243  01F2  01A0               	clrf	_rfTrcvStatus^(0+128)
  3244                           
  3245                           ;mrf49xa.c: 262: rfTrcvStatus.hwByte = 0;
  3246  01F3  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  3247  01F4  0008               	return
  3248  01F5                     __end_of_Mrf49xaModeRx:	
  3249  01F5                     __ptext11:	
  3250 ;; *************** function _Mrf49TxCmd *****************
  3251 ;; Defined at:
  3252 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;  cmd             1    wreg     unsigned char 
  3255 ;;  val             1    1[BANK0 ] unsigned char 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  cmd             1    2[BANK0 ] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;		None               void
  3260 ;; Registers used:
  3261 ;;		wreg, status,2, status,0, pclath, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 1F/0
  3264 ;;		On exit  : 1F/2
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3267 ;;      Params:         0       1       0       0
  3268 ;;      Locals:         0       1       0       0
  3269 ;;      Temps:          0       0       0       0
  3270 ;;      Totals:         0       2       0       0
  3271 ;;Total ram usage:        2 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    6
  3274 ;; This function calls:
  3275 ;;		_Mrf49SpiTx
  3276 ;; This function is called by:
  3277 ;;		_Mrf49xaModeRx
  3278 ;;		_Mrf49xaModeTx
  3279 ;;		_Mrf49xaInit
  3280 ;;		_Mrf49TxByte
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           
  3285                           ;psect for function _Mrf49TxCmd
  3286  01F5                     _Mrf49TxCmd:	
  3287                           
  3288                           ;incstack = 0
  3289                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  3290                           ;Mrf49TxCmd@cmd stored from wreg
  3291  01F5  00A2               	movwf	Mrf49TxCmd@cmd
  3292                           
  3293                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  3294  01F6  0022               	movlb	2	; select bank2
  3295  01F7  130E               	bcf	14,6	;volatile
  3296                           
  3297                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  3298  01F8  0020               	movlb	0	; select bank0
  3299  01F9  0822               	movf	Mrf49TxCmd@cmd,w
  3300  01FA  2201  3180         	fcall	_Mrf49SpiTx
  3301                           
  3302                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  3303  01FC  0020               	movlb	0	; select bank0
  3304  01FD  0821               	movf	Mrf49TxCmd@val,w
  3305  01FE  2201               	fcall	_Mrf49SpiTx
  3306                           
  3307                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  3308  01FF  170E               	bsf	14,6	;volatile
  3309  0200  0008               	return
  3310  0201                     __end_of_Mrf49TxCmd:	
  3311  0201                     __ptext15:	
  3312 ;; *************** function _Mrf49SpiTx *****************
  3313 ;; Defined at:
  3314 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;  byte            1    wreg     unsigned char 
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;  byte            1    0[BANK0 ] unsigned char 
  3319 ;; Return value:  Size  Location     Type
  3320 ;;		None               void
  3321 ;; Registers used:
  3322 ;;		wreg
  3323 ;; Tracked objects:
  3324 ;;		On entry : 1F/0
  3325 ;;		On exit  : 1F/2
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3328 ;;      Params:         0       0       0       0
  3329 ;;      Locals:         0       1       0       0
  3330 ;;      Temps:          0       0       0       0
  3331 ;;      Totals:         0       1       0       0
  3332 ;;Total ram usage:        1 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    5
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		_Mrf49TxCmd
  3339 ;;		_Mrf49RxCmd
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _Mrf49SpiTx
  3345  0201                     _Mrf49SpiTx:	
  3346                           
  3347                           ;incstack = 0
  3348                           ; Regs used in _Mrf49SpiTx: [wreg]
  3349                           ;Mrf49SpiTx@byte stored from wreg
  3350  0201  00A0               	movwf	Mrf49SpiTx@byte
  3351                           
  3352                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  3353  0202  1FA0               	btfss	Mrf49SpiTx@byte,7
  3354  0203  2A07               	goto	l248
  3355  0204  0022               	movlb	2	; select bank2
  3356  0205  178D               	bsf	13,7	;volatile
  3357  0206  2A09               	goto	l249
  3358  0207                     l248:	
  3359  0207  0022               	movlb	2	; select bank2
  3360  0208  138D               	bcf	13,7	;volatile
  3361  0209                     l249:	
  3362  0209  178E               	bsf	14,7	;volatile
  3363  020A  0000               	nop	;# 
  3364  020B  0022               	movlb	2	; select bank2
  3365  020C  138E               	bcf	14,7	;volatile
  3366  020D  0020               	movlb	0	; select bank0
  3367  020E  1F20               	btfss	Mrf49SpiTx@byte,6
  3368  020F  2A13               	goto	l252
  3369  0210  0022               	movlb	2	; select bank2
  3370  0211  178D               	bsf	13,7	;volatile
  3371  0212  2A15               	goto	l253
  3372  0213                     l252:	
  3373  0213  0022               	movlb	2	; select bank2
  3374  0214  138D               	bcf	13,7	;volatile
  3375  0215                     l253:	
  3376  0215  178E               	bsf	14,7	;volatile
  3377  0216  0000               	nop	;# 
  3378  0217  0022               	movlb	2	; select bank2
  3379  0218  138E               	bcf	14,7	;volatile
  3380  0219  0020               	movlb	0	; select bank0
  3381  021A  1EA0               	btfss	Mrf49SpiTx@byte,5
  3382  021B  2A1F               	goto	l256
  3383  021C  0022               	movlb	2	; select bank2
  3384  021D  178D               	bsf	13,7	;volatile
  3385  021E  2A21               	goto	l257
  3386  021F                     l256:	
  3387  021F  0022               	movlb	2	; select bank2
  3388  0220  138D               	bcf	13,7	;volatile
  3389  0221                     l257:	
  3390  0221  178E               	bsf	14,7	;volatile
  3391  0222  0000               	nop	;# 
  3392  0223  0022               	movlb	2	; select bank2
  3393  0224  138E               	bcf	14,7	;volatile
  3394  0225  0020               	movlb	0	; select bank0
  3395  0226  1E20               	btfss	Mrf49SpiTx@byte,4
  3396  0227  2A2B               	goto	l260
  3397  0228  0022               	movlb	2	; select bank2
  3398  0229  178D               	bsf	13,7	;volatile
  3399  022A  2A2D               	goto	l261
  3400  022B                     l260:	
  3401  022B  0022               	movlb	2	; select bank2
  3402  022C  138D               	bcf	13,7	;volatile
  3403  022D                     l261:	
  3404  022D  178E               	bsf	14,7	;volatile
  3405  022E  0000               	nop	;# 
  3406  022F  0022               	movlb	2	; select bank2
  3407  0230  138E               	bcf	14,7	;volatile
  3408  0231  0020               	movlb	0	; select bank0
  3409  0232  1DA0               	btfss	Mrf49SpiTx@byte,3
  3410  0233  2A37               	goto	l264
  3411  0234  0022               	movlb	2	; select bank2
  3412  0235  178D               	bsf	13,7	;volatile
  3413  0236  2A39               	goto	l265
  3414  0237                     l264:	
  3415  0237  0022               	movlb	2	; select bank2
  3416  0238  138D               	bcf	13,7	;volatile
  3417  0239                     l265:	
  3418  0239  178E               	bsf	14,7	;volatile
  3419  023A  0000               	nop	;# 
  3420  023B  0022               	movlb	2	; select bank2
  3421  023C  138E               	bcf	14,7	;volatile
  3422  023D  0020               	movlb	0	; select bank0
  3423  023E  1D20               	btfss	Mrf49SpiTx@byte,2
  3424  023F  2A43               	goto	l268
  3425  0240  0022               	movlb	2	; select bank2
  3426  0241  178D               	bsf	13,7	;volatile
  3427  0242  2A45               	goto	l269
  3428  0243                     l268:	
  3429  0243  0022               	movlb	2	; select bank2
  3430  0244  138D               	bcf	13,7	;volatile
  3431  0245                     l269:	
  3432  0245  178E               	bsf	14,7	;volatile
  3433  0246  0000               	nop	;# 
  3434  0247  0022               	movlb	2	; select bank2
  3435  0248  138E               	bcf	14,7	;volatile
  3436  0249  0020               	movlb	0	; select bank0
  3437  024A  1CA0               	btfss	Mrf49SpiTx@byte,1
  3438  024B  2A4F               	goto	l272
  3439  024C  0022               	movlb	2	; select bank2
  3440  024D  178D               	bsf	13,7	;volatile
  3441  024E  2A51               	goto	l273
  3442  024F                     l272:	
  3443  024F  0022               	movlb	2	; select bank2
  3444  0250  138D               	bcf	13,7	;volatile
  3445  0251                     l273:	
  3446  0251  178E               	bsf	14,7	;volatile
  3447  0252  0000               	nop	;# 
  3448  0253  0022               	movlb	2	; select bank2
  3449  0254  138E               	bcf	14,7	;volatile
  3450  0255  0020               	movlb	0	; select bank0
  3451  0256  1C20               	btfss	Mrf49SpiTx@byte,0
  3452  0257  2A5B               	goto	l276
  3453  0258  0022               	movlb	2	; select bank2
  3454  0259  178D               	bsf	13,7	;volatile
  3455  025A  2A5D               	goto	l277
  3456  025B                     l276:	
  3457  025B  0022               	movlb	2	; select bank2
  3458  025C  138D               	bcf	13,7	;volatile
  3459  025D                     l277:	
  3460  025D  178E               	bsf	14,7	;volatile
  3461  025E  0000               	nop	;# 
  3462  025F  0022               	movlb	2	; select bank2
  3463  0260  138E               	bcf	14,7	;volatile
  3464                           
  3465                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  3466  0261  138D               	bcf	13,7	;volatile
  3467  0262  0008               	return
  3468  0263                     __end_of_Mrf49SpiTx:	
  3469  0263                     __ptext12:	
  3470 ;; *************** function _Mrf49RxSts *****************
  3471 ;; Defined at:
  3472 ;;		line 29 in file "../../../src/devices/mrf49xa_cmd.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;		None               void
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, pclath, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 1C/0
  3483 ;;		On exit  : 1F/2
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3486 ;;      Params:         0       0       0       0
  3487 ;;      Locals:         0       0       0       0
  3488 ;;      Temps:          0       0       0       0
  3489 ;;      Totals:         0       0       0       0
  3490 ;;Total ram usage:        0 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    6
  3493 ;; This function calls:
  3494 ;;		_Mrf49SpiRx
  3495 ;; This function is called by:
  3496 ;;		_Mrf49xaServe
  3497 ;;		_Mrf49xaTick
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           
  3502                           ;psect for function _Mrf49RxSts
  3503  0263                     _Mrf49RxSts:	
  3504                           
  3505                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  3506                           
  3507                           ;incstack = 0
  3508                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  3509  0263  120B               	bcf	11,4	;volatile
  3510                           
  3511                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  3512  0264  0022               	movlb	2	; select bank2
  3513  0265  130E               	bcf	14,6	;volatile
  3514                           
  3515                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  3516  0266  226F  3180         	fcall	_Mrf49SpiRx
  3517  0268  00AC               	movwf	_mrf49Status
  3518                           
  3519                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  3520  0269  226F               	fcall	_Mrf49SpiRx
  3521  026A  00AD               	movwf	_mrf49Status+1
  3522                           
  3523                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  3524  026B  0022               	movlb	2	; select bank2
  3525  026C  170E               	bsf	14,6	;volatile
  3526                           
  3527                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  3528  026D  160B               	bsf	11,4	;volatile
  3529  026E  0008               	return
  3530  026F                     __end_of_Mrf49RxSts:	
  3531  026F                     __ptext16:	
  3532 ;; *************** function _Mrf49SpiRx *****************
  3533 ;; Defined at:
  3534 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;		None
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  data            1    0[BANK0 ] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      unsigned char 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2
  3543 ;; Tracked objects:
  3544 ;;		On entry : 1D/2
  3545 ;;		On exit  : 1F/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3548 ;;      Params:         0       0       0       0
  3549 ;;      Locals:         0       1       0       0
  3550 ;;      Temps:          0       0       0       0
  3551 ;;      Totals:         0       1       0       0
  3552 ;;Total ram usage:        1 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    5
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_Mrf49RxCmd
  3559 ;;		_Mrf49RxSts
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           
  3564                           ;psect for function _Mrf49SpiRx
  3565  026F                     _Mrf49SpiRx:	
  3566                           
  3567                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  3568                           
  3569                           ;incstack = 0
  3570                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  3571  026F  0020               	movlb	0	; select bank0
  3572  0270  01A0               	clrf	Mrf49SpiRx@data
  3573                           
  3574                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  3575  0271  0022               	movlb	2	; select bank2
  3576  0272  138D               	bcf	13,7	;volatile
  3577  0273  0020               	movlb	0	; select bank0
  3578  0274  1A8E               	btfsc	14,5	;volatile
  3579  0275  17A0               	bsf	Mrf49SpiRx@data,7
  3580  0276  0022               	movlb	2	; select bank2
  3581  0277  178E               	bsf	14,7	;volatile
  3582  0278  0000               	nop	;# 
  3583  0279  0022               	movlb	2	; select bank2
  3584  027A  138E               	bcf	14,7	;volatile
  3585                           
  3586                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3587  027B  0020               	movlb	0	; select bank0
  3588  027C  1A8E               	btfsc	14,5	;volatile
  3589  027D  1720               	bsf	Mrf49SpiRx@data,6
  3590  027E  0022               	movlb	2	; select bank2
  3591  027F  178E               	bsf	14,7	;volatile
  3592  0280  0000               	nop	;# 
  3593  0281  0022               	movlb	2	; select bank2
  3594  0282  138E               	bcf	14,7	;volatile
  3595                           
  3596                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3597  0283  0020               	movlb	0	; select bank0
  3598  0284  1A8E               	btfsc	14,5	;volatile
  3599  0285  16A0               	bsf	Mrf49SpiRx@data,5
  3600  0286  0022               	movlb	2	; select bank2
  3601  0287  178E               	bsf	14,7	;volatile
  3602  0288  0000               	nop	;# 
  3603  0289  0022               	movlb	2	; select bank2
  3604  028A  138E               	bcf	14,7	;volatile
  3605                           
  3606                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3607  028B  0020               	movlb	0	; select bank0
  3608  028C  1A8E               	btfsc	14,5	;volatile
  3609  028D  1620               	bsf	Mrf49SpiRx@data,4
  3610  028E  0022               	movlb	2	; select bank2
  3611  028F  178E               	bsf	14,7	;volatile
  3612  0290  0000               	nop	;# 
  3613  0291  0022               	movlb	2	; select bank2
  3614  0292  138E               	bcf	14,7	;volatile
  3615                           
  3616                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3617  0293  0020               	movlb	0	; select bank0
  3618  0294  1A8E               	btfsc	14,5	;volatile
  3619  0295  15A0               	bsf	Mrf49SpiRx@data,3
  3620  0296  0022               	movlb	2	; select bank2
  3621  0297  178E               	bsf	14,7	;volatile
  3622  0298  0000               	nop	;# 
  3623  0299  0022               	movlb	2	; select bank2
  3624  029A  138E               	bcf	14,7	;volatile
  3625                           
  3626                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3627  029B  0020               	movlb	0	; select bank0
  3628  029C  1A8E               	btfsc	14,5	;volatile
  3629  029D  1520               	bsf	Mrf49SpiRx@data,2
  3630  029E  0022               	movlb	2	; select bank2
  3631  029F  178E               	bsf	14,7	;volatile
  3632  02A0  0000               	nop	;# 
  3633  02A1  0022               	movlb	2	; select bank2
  3634  02A2  138E               	bcf	14,7	;volatile
  3635                           
  3636                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3637  02A3  0020               	movlb	0	; select bank0
  3638  02A4  1A8E               	btfsc	14,5	;volatile
  3639  02A5  14A0               	bsf	Mrf49SpiRx@data,1
  3640  02A6  0022               	movlb	2	; select bank2
  3641  02A7  178E               	bsf	14,7	;volatile
  3642  02A8  0000               	nop	;# 
  3643  02A9  0022               	movlb	2	; select bank2
  3644  02AA  138E               	bcf	14,7	;volatile
  3645                           
  3646                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3647  02AB  0020               	movlb	0	; select bank0
  3648  02AC  1A8E               	btfsc	14,5	;volatile
  3649  02AD  1420               	bsf	Mrf49SpiRx@data,0
  3650  02AE  0022               	movlb	2	; select bank2
  3651  02AF  178E               	bsf	14,7	;volatile
  3652  02B0  0000               	nop	;# 
  3653  02B1  0022               	movlb	2	; select bank2
  3654  02B2  138E               	bcf	14,7	;volatile
  3655                           
  3656                           ;mrf49xa_spi_pic16.c: 40: return data;
  3657  02B3  0020               	movlb	0	; select bank0
  3658  02B4  0820               	movf	Mrf49SpiRx@data,w
  3659  02B5  0008               	return
  3660  02B6                     __end_of_Mrf49SpiRx:	
  3661  02B6                     __ptext18:	
  3662 ;; *************** function _AdcInit *****************
  3663 ;; Defined at:
  3664 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;		None
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;		None
  3669 ;; Return value:  Size  Location     Type
  3670 ;;		None               void
  3671 ;; Registers used:
  3672 ;;		wreg, status,2
  3673 ;; Tracked objects:
  3674 ;;		On entry : 17F/2
  3675 ;;		On exit  : 17F/1
  3676 ;;		Unchanged: 160/0
  3677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3678 ;;      Params:         0       0       0       0
  3679 ;;      Locals:         0       0       0       0
  3680 ;;      Temps:          0       0       0       0
  3681 ;;      Totals:         0       0       0       0
  3682 ;;Total ram usage:        0 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    5
  3685 ;; This function calls:
  3686 ;;		Nothing
  3687 ;; This function is called by:
  3688 ;;		_main
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           
  3693                           ;psect for function _AdcInit
  3694  02B6                     _AdcInit:	
  3695                           
  3696                           ;adc16.c: 6: ANSELA = 0;
  3697                           
  3698                           ;incstack = 0
  3699                           ; Regs used in _AdcInit: [wreg+status,2]
  3700  02B6  0023               	movlb	3	; select bank3
  3701  02B7  018C               	clrf	12	;volatile
  3702                           
  3703                           ;adc16.c: 7: ANSELB = 0;
  3704  02B8  018D               	clrf	13	;volatile
  3705                           
  3706                           ;adc16.c: 8: ANSELC = 0;
  3707  02B9  018E               	clrf	14	;volatile
  3708                           
  3709                           ;adc16.c: 10: FVRCON = 0b11100001;
  3710  02BA  30E1               	movlw	225
  3711  02BB  0022               	movlb	2	; select bank2
  3712  02BC  0097               	movwf	23	;volatile
  3713                           
  3714                           ;adc16.c: 12: ADCON2 = 0b00000000;
  3715  02BD  0021               	movlb	1	; select bank1
  3716  02BE  019F               	clrf	31	;volatile
  3717                           
  3718                           ;adc16.c: 13: ADCON1 = 0b11110000;
  3719  02BF  30F0               	movlw	240
  3720  02C0  009E               	movwf	30	;volatile
  3721                           
  3722                           ;adc16.c: 14: ADCON0 = 0b00000000;
  3723  02C1  019D               	clrf	29	;volatile
  3724                           
  3725                           ;adc16.c: 16: ADCON0 = 0b00010011;
  3726  02C2  3013               	movlw	19
  3727  02C3  009D               	movwf	29	;volatile
  3728  02C4  0008               	return
  3729  02C5                     __end_of_AdcInit:	
  3730  02C5                     __ptext17:	
  3731 ;; *************** function _ExtIntInit *****************
  3732 ;; Defined at:
  3733 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;		None               void
  3740 ;; Registers used:
  3741 ;;		None
  3742 ;; Tracked objects:
  3743 ;;		On entry : 17F/1
  3744 ;;		On exit  : 17F/1
  3745 ;;		Unchanged: 160/0
  3746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3747 ;;      Params:         0       0       0       0
  3748 ;;      Locals:         0       0       0       0
  3749 ;;      Temps:          0       0       0       0
  3750 ;;      Totals:         0       0       0       0
  3751 ;;Total ram usage:        0 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    5
  3754 ;; This function calls:
  3755 ;;		Nothing
  3756 ;; This function is called by:
  3757 ;;		_main
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           
  3762                           ;psect for function _ExtIntInit
  3763  02C5                     _ExtIntInit:	
  3764                           
  3765                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _ExtIntInit: []
  3769  02C5  1315               	bcf	21,6	;volatile
  3770                           
  3771                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3772  02C6  108B               	bcf	11,1	;volatile
  3773                           
  3774                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3775  02C7  160B               	bsf	11,4	;volatile
  3776                           
  3777                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3778  02C8  178B               	bsf	11,7	;volatile
  3779  02C9  0008               	return
  3780  02CA                     __end_of_ExtIntInit:	
  3781  02CA                     __ptext5:	
  3782 ;; *************** function _Mrf49xaPacketPending *****************
  3783 ;; Defined at:
  3784 ;;		line 3 in file "../../../src/devices/mrf49xa_packet.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;		None
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;		None
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  1    wreg      unsigned char 
  3791 ;; Registers used:
  3792 ;;		wreg
  3793 ;; Tracked objects:
  3794 ;;		On entry : 1E/0
  3795 ;;		On exit  : 1F/1
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3798 ;;      Params:         0       0       0       0
  3799 ;;      Locals:         0       0       0       0
  3800 ;;      Temps:          0       0       0       0
  3801 ;;      Totals:         0       0       0       0
  3802 ;;Total ram usage:        0 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    5
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_Mrf49xaTick
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           
  3813                           ;psect for function _Mrf49xaPacketPending
  3814  02CA                     _Mrf49xaPacketPending:	
  3815                           
  3816                           ;mrf49xa_packet.c: 5: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  3817                           ;mrf49xa_packet.c: 6: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  3818                           
  3819                           ;incstack = 0
  3820                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  3821  02CA  0021               	movlb	1	; select bank1
  3822  02CB  0838               	movf	(_rfTrcvStatus^(0+128)+24),w
  3823  02CC  3A03               	xorlw	3
  3824  02CD  1903               	skipnz
  3825  02CE  3401               	retlw	1
  3826  02CF  084F               	movf	(_rfTrcvStatus^(0+128)+47),w
  3827  02D0  3A03               	xorlw	3
  3828  02D1  1903               	btfsc	3,2
  3829                           
  3830                           ;mrf49xa_packet.c: 7: return 1;
  3831  02D2  3401               	retlw	1
  3832                           
  3833                           ;mrf49xa_packet.c: 8: else
  3834                           ;mrf49xa_packet.c: 9: return 0;
  3835  02D3  3400               	retlw	0
  3836  02D4                     __end_of_Mrf49xaPacketPending:	
  3837  02D4                     __ptext4:	
  3838 ;; *************** function _Mrf49xaRxPacket *****************
  3839 ;; Defined at:
  3840 ;;		line 49 in file "../../../src/devices/mrf49xa_packet.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      PTR struct rfTrcvPacket_
  3847 ;; Registers used:
  3848 ;;		wreg
  3849 ;; Tracked objects:
  3850 ;;		On entry : 1F/1
  3851 ;;		On exit  : 1F/1
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3854 ;;      Params:         0       0       0       0
  3855 ;;      Locals:         0       0       0       0
  3856 ;;      Temps:          0       0       0       0
  3857 ;;      Totals:         0       0       0       0
  3858 ;;Total ram usage:        0 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    5
  3861 ;; This function calls:
  3862 ;;		Nothing
  3863 ;; This function is called by:
  3864 ;;		_Mrf49xaTick
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function _Mrf49xaRxPacket
  3870  02D4                     _Mrf49xaRxPacket:	
  3871                           
  3872                           ;mrf49xa_packet.c: 51: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  3876  02D4  0838               	movf	(_rfTrcvStatus^(0+128)+24),w
  3877  02D5  3A03               	xorlw	3
  3878  02D6  1D03               	skipz
  3879  02D7  2ADB               	goto	l2063
  3880                           
  3881                           ;mrf49xa_packet.c: 52: {
  3882                           ;mrf49xa_packet.c: 53: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  3883  02D8  3004               	movlw	4
  3884  02D9  00B8               	movwf	(_rfTrcvStatus^(0+128)+24)
  3885                           
  3886                           ;mrf49xa_packet.c: 54: return &(rfTrcvStatus.rxPacket[0]);
  3887  02DA  34B8               	retlw	(_rfTrcvStatus+24)& (0+255)
  3888  02DB                     l2063:	
  3889                           
  3890                           ;mrf49xa_packet.c: 55: }
  3891                           ;mrf49xa_packet.c: 57: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  3892  02DB  084F               	movf	(_rfTrcvStatus^(0+128)+47),w
  3893  02DC  3A03               	xorlw	3
  3894  02DD  1D03               	skipz
  3895  02DE  3400               	retlw	0
  3896                           
  3897                           ;mrf49xa_packet.c: 58: {
  3898                           ;mrf49xa_packet.c: 59: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  3899  02DF  3004               	movlw	4
  3900  02E0  00CF               	movwf	(_rfTrcvStatus^(0+128)+47)
  3901                           
  3902                           ;mrf49xa_packet.c: 60: return &(rfTrcvStatus.rxPacket[1]);
  3903  02E1  34CF               	retlw	(_rfTrcvStatus+47)& (0+255)
  3904  02E2                     __end_of_Mrf49xaRxPacket:	
  3905                           ;mrf49xa_packet.c: 61: }
  3906                           ;mrf49xa_packet.c: 63: return (0);
  3907                           
  3908  02E2                     __ptext3:	
  3909 ;; *************** function _Mrf49xaTxPacket *****************
  3910 ;; Defined at:
  3911 ;;		line 12 in file "../../../src/devices/mrf49xa_packet.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3914 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(46), rfTrcvStatus(73), 
  3915 ;;  swapSrcDst      1    0[BANK0 ] unsigned char 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  packet          1    3[BANK0 ] PTR struct rfTrcvPacket_
  3918 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(46), rfTrcvStatus(73), 
  3919 ;;  i               1    2[BANK0 ] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      unsigned char 
  3922 ;; Registers used:
  3923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3924 ;; Tracked objects:
  3925 ;;		On entry : 1F/0
  3926 ;;		On exit  : 1E/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3929 ;;      Params:         0       1       0       0
  3930 ;;      Locals:         0       2       0       0
  3931 ;;      Temps:          0       1       0       0
  3932 ;;      Totals:         0       4       0       0
  3933 ;;Total ram usage:        4 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    5
  3936 ;; This function calls:
  3937 ;;		Nothing
  3938 ;; This function is called by:
  3939 ;;		_Mrf49xaTick
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           
  3944                           ;psect for function _Mrf49xaTxPacket
  3945  02E2                     _Mrf49xaTxPacket:	
  3946                           
  3947                           ;incstack = 0
  3948                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  3949                           ;Mrf49xaTxPacket@packet stored from wreg
  3950  02E2  00A3               	movwf	Mrf49xaTxPacket@packet
  3951                           
  3952                           ;mrf49xa_packet.c: 14: uint8_t i;
  3953                           ;mrf49xa_packet.c: 17: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  3954  02E3  0021               	movlb	1	; select bank1
  3955  02E4  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  3956  02E5  1D03               	skipz
  3957  02E6  0008               	return
  3958                           
  3959                           ;mrf49xa_packet.c: 22: else
  3960                           ;mrf49xa_packet.c: 23: {
  3961                           ;mrf49xa_packet.c: 24: if (swapSrcDst)
  3962  02E7  0020               	movlb	0	; select bank0
  3963  02E8  0820               	movf	Mrf49xaTxPacket@swapSrcDst,w
  3964  02E9  1903               	btfsc	3,2
  3965  02EA  2AFB               	goto	l2041
  3966                           
  3967                           ;mrf49xa_packet.c: 25: {
  3968                           ;mrf49xa_packet.c: 26: packet->packet.dst = packet->packet.src;
  3969  02EB  0823               	movf	Mrf49xaTxPacket@packet,w
  3970  02EC  3E03               	addlw	3
  3971  02ED  0086               	movwf	6
  3972  02EE  0187               	clrf	7
  3973  02EF  0823               	movf	Mrf49xaTxPacket@packet,w
  3974  02F0  3E02               	addlw	2
  3975  02F1  0084               	movwf	4
  3976  02F2  0185               	clrf	5
  3977  02F3  0800               	movf	0,w
  3978  02F4  0081               	movwf	1
  3979                           
  3980                           ;mrf49xa_packet.c: 27: packet->packet.src = rfTrcvStatus.src;
  3981  02F5  0823               	movf	Mrf49xaTxPacket@packet,w
  3982  02F6  3E02               	addlw	2
  3983  02F7  0086               	movwf	6
  3984  02F8  0021               	movlb	1	; select bank1
  3985  02F9  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3986  02FA  0081               	movwf	1
  3987  02FB                     l2041:	
  3988                           
  3989                           ;mrf49xa_packet.c: 28: }
  3990                           ;mrf49xa_packet.c: 30: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  3991  02FB  0021               	movlb	1	; select bank1
  3992  02FC  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  3993  02FD  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  3994                           
  3995                           ;mrf49xa_packet.c: 31: rfTrcvStatus.txPacket.crc = 0;
  3996  02FE  01B6               	clrf	(_rfTrcvStatus^(0+128)+22)
  3997                           
  3998                           ;mrf49xa_packet.c: 32: rfTrcvStatus.txPacket.retry = 0;
  3999  02FF  01B7               	clrf	(_rfTrcvStatus^(0+128)+23)
  4000                           
  4001                           ;mrf49xa_packet.c: 34: packet->state = PKT_FREE;
  4002  0300  0020               	movlb	0	; select bank0
  4003  0301  0823               	movf	Mrf49xaTxPacket@packet,w
  4004  0302  0086               	movwf	6
  4005  0303  0187               	clrf	7
  4006  0304  0181               	clrf	1
  4007                           
  4008                           ;mrf49xa_packet.c: 37: for (i = 0; i < packet->packet.size; i++)
  4009  0305  01A2               	clrf	Mrf49xaTxPacket@i
  4010  0306                     l2055:	
  4011  0306  0A23               	incf	Mrf49xaTxPacket@packet,w
  4012  0307  0086               	movwf	6
  4013  0308  0187               	clrf	7
  4014  0309  0801               	movf	1,w
  4015  030A  0222               	subwf	Mrf49xaTxPacket@i,w
  4016  030B  1803               	btfsc	3,0
  4017  030C  0008               	return
  4018                           
  4019                           ;mrf49xa_packet.c: 38: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  4020  030D  0822               	movf	Mrf49xaTxPacket@i,w
  4021  030E  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  4022  030F  0086               	movwf	6
  4023  0310  0822               	movf	Mrf49xaTxPacket@i,w
  4024  0311  0723               	addwf	Mrf49xaTxPacket@packet,w
  4025  0312  00A1               	movwf	??_Mrf49xaTxPacket
  4026  0313  0A21               	incf	??_Mrf49xaTxPacket,w
  4027  0314  0084               	movwf	4
  4028  0315  0185               	clrf	5
  4029  0316  0800               	movf	0,w
  4030  0317  0081               	movwf	1
  4031  0318  0AA2               	incf	Mrf49xaTxPacket@i,f
  4032  0319  2B06               	goto	l2055
  4033  031A                     __end_of_Mrf49xaTxPacket:	
  4034  031A                     __ptext1:	
  4035 ;; *************** function _SysInitGpio *****************
  4036 ;; Defined at:
  4037 ;;		line 10 in file "../../../src/node/main.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;		None
  4042 ;; Return value:  Size  Location     Type
  4043 ;;		None               void
  4044 ;; Registers used:
  4045 ;;		None
  4046 ;; Tracked objects:
  4047 ;;		On entry : 17F/4
  4048 ;;		On exit  : 17F/2
  4049 ;;		Unchanged: 160/0
  4050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4051 ;;      Params:         0       0       0       0
  4052 ;;      Locals:         0       0       0       0
  4053 ;;      Temps:          0       0       0       0
  4054 ;;      Totals:         0       0       0       0
  4055 ;;Total ram usage:        0 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    5
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _SysInitGpio
  4067  031A                     _SysInitGpio:	
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _SysInitGpio: []
  4071                           ;main.c: 12: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  4072  031A  0021               	movlb	1	; select bank1
  4073  031B  150C               	bsf	12,2	;volatile
  4074  031C  120C               	bcf	12,4	;volatile
  4075  031D  128C               	bcf	12,5	;volatile
  4076  031E  0022               	movlb	2	; select bank2
  4077  031F  120C               	bcf	12,4	;volatile
  4078  0320  128C               	bcf	12,5	;volatile
  4079                           
  4080                           ;main.c: 13: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4081  0321  0021               	movlb	1	; select bank1
  4082  0322  120D               	bcf	13,4	;volatile
  4083  0323  130D               	bcf	13,6	;volatile
  4084  0324  138D               	bcf	13,7	;volatile
  4085  0325  168D               	bsf	13,5	;volatile
  4086                           
  4087                           ;main.c: 14: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  4088  0326  108E               	bcf	14,1	;volatile
  4089  0327  110E               	bcf	14,2	;volatile
  4090  0328  120E               	bcf	14,4	;volatile
  4091  0329  130E               	bcf	14,6	;volatile
  4092  032A  138E               	bcf	14,7	;volatile
  4093  032B  140E               	bsf	14,0	;volatile
  4094  032C  158E               	bsf	14,3	;volatile
  4095  032D  168E               	bsf	14,5	;volatile
  4096  032E  0022               	movlb	2	; select bank2
  4097  032F  108E               	bcf	14,1	;volatile
  4098  0330  110E               	bcf	14,2	;volatile
  4099  0331  120E               	bcf	14,4	;volatile
  4100  0332  170E               	bsf	14,6	;volatile
  4101  0333  138E               	bcf	14,7	;volatile
  4102                           
  4103                           ;main.c: 16: LATCbits.LATC1 = 0;
  4104  0334  108E               	bcf	14,1	;volatile
  4105                           
  4106                           ;main.c: 17: LATCbits.LATC2 = 0;
  4107  0335  110E               	bcf	14,2	;volatile
  4108  0336  0008               	return
  4109  0337                     __end_of_SysInitGpio:	
  4110                           
  4111                           	psect	bssBANK0
  4112  002C                     __pbssBANK0:	
  4113  002C                     _mrf49Status:	
  4114  002C                     	ds	2
  4115                           
  4116                           	psect	bssBANK1
  4117  00A0                     __pbssBANK1:	
  4118  00A0                     _rfTrcvStatus:	
  4119  00A0                     	ds	73
  4120                           
  4121                           	psect	clrtext
  4122  0638                     clear_ram0:	
  4123                           ;	Called with FSR0 containing the base address, and
  4124                           ;	WREG with the size to clear
  4125                           
  4126  0638  0064               	clrwdt	;clear the watchdog before getting into this loop
  4127  0639                     clrloop0:	
  4128  0639  0180               	clrf	0	;clear RAM location pointed to by FSR
  4129  063A  3101               	addfsr 0,1
  4130  063B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4131  063C  2E39               	goto	clrloop0	;have we reached the end yet?
  4132  063D  3400               	retlw	0	;all done for this memory range, return
  4133                           
  4134                           	psect	cstackCOMMON
  4135  0070                     __pcstackCOMMON:	
  4136  0070                     ?_Mrf49RxSts:	
  4137  0070                     ?_Mrf49xaModeRx:	
  4138                           ; 0 bytes @ 0x0
  4139                           
  4140  0070                     ?_Mrf49TxByte:	
  4141                           ; 0 bytes @ 0x0
  4142                           
  4143  0070                     ?_AdcInit:	
  4144                           ; 0 bytes @ 0x0
  4145                           
  4146  0070                     ?_ExtIntInit:	
  4147                           ; 0 bytes @ 0x0
  4148                           
  4149  0070                     ?_extInt:	
  4150                           ; 0 bytes @ 0x0
  4151                           
  4152  0070                     ?_Mrf49xaModeTx:	
  4153                           ; 0 bytes @ 0x0
  4154                           
  4155  0070                     ?_Mrf49xaInit:	
  4156                           ; 0 bytes @ 0x0
  4157                           
  4158  0070                     ?_Mrf49SpiTx:	
  4159                           ; 0 bytes @ 0x0
  4160                           
  4161  0070                     ?_Mrf49xaTick:	
  4162                           ; 0 bytes @ 0x0
  4163                           
  4164  0070                     ?_SysInitGpio:	
  4165                           ; 0 bytes @ 0x0
  4166                           
  4167  0070                     ?_main:	
  4168                           ; 0 bytes @ 0x0
  4169                           
  4170  0070                     ?i1_Mrf49xaModeRx:	
  4171                           ; 0 bytes @ 0x0
  4172                           
  4173  0070                     ?i1_Mrf49SpiTx:	
  4174                           ; 0 bytes @ 0x0
  4175                           
  4176  0070                     ??i1_Mrf49SpiTx:	
  4177                           ; 0 bytes @ 0x0
  4178                           
  4179  0070                     ??i1_Mrf49SpiRx:	
  4180                           ; 0 bytes @ 0x0
  4181                           
  4182  0070                     ?i1_Mrf49RxSts:	
  4183                           ; 0 bytes @ 0x0
  4184                           
  4185  0070                     ?i1_Mrf49TxByte:	
  4186                           ; 0 bytes @ 0x0
  4187                           
  4188  0070                     ?_Mrf49xaServe:	
  4189                           ; 0 bytes @ 0x0
  4190                           
  4191  0070                     ?_Mrf49RxByte:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0070                     ?_Mrf49SpiRx:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0070                     ?_Mrf49RxCmd:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0070                     ?_Mrf49xaPacketPending:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ?_Mrf49xaRxPacket:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?i1_Mrf49xaServe:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ?i1_Mrf49SpiRx:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?i1_Mrf49RxCmd:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?i1_Mrf49RxByte:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     i1Mrf49SpiTx@byte:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     i1Mrf49SpiRx@data:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224                           
  4225                           ; 1 bytes @ 0x0
  4226  0070                     	ds	1
  4227  0071                     ?i1_Mrf49TxCmd:	
  4228  0071                     ??i1_Mrf49RxCmd:	
  4229                           ; 0 bytes @ 0x1
  4230                           
  4231  0071                     ??i1_Mrf49RxSts:	
  4232                           ; 0 bytes @ 0x1
  4233                           
  4234  0071                     i1Mrf49TxCmd@val:	
  4235                           ; 0 bytes @ 0x1
  4236                           
  4237  0071                     i1Mrf49RxCmd@cmd:	
  4238                           ; 1 bytes @ 0x1
  4239                           
  4240                           
  4241                           ; 1 bytes @ 0x1
  4242  0071                     	ds	1
  4243  0072                     ??i1_Mrf49TxCmd:	
  4244  0072                     i1Mrf49TxCmd@cmd:	
  4245                           ; 0 bytes @ 0x2
  4246                           
  4247  0072                     i1Mrf49RxCmd@val:	
  4248                           ; 1 bytes @ 0x2
  4249                           
  4250                           
  4251                           ; 1 bytes @ 0x2
  4252  0072                     	ds	1
  4253  0073                     ??i1_Mrf49xaModeRx:	
  4254  0073                     ??i1_Mrf49RxByte:	
  4255                           ; 0 bytes @ 0x3
  4256                           
  4257  0073                     ??i1_Mrf49TxByte:	
  4258                           ; 0 bytes @ 0x3
  4259                           
  4260  0073                     i1Mrf49xaModeRx@k:	
  4261                           ; 0 bytes @ 0x3
  4262                           
  4263  0073                     i1Mrf49TxByte@byte:	
  4264                           ; 1 bytes @ 0x3
  4265                           
  4266                           
  4267                           ; 1 bytes @ 0x3
  4268  0073                     	ds	1
  4269  0074                     ??i1_Mrf49xaServe:	
  4270                           
  4271                           ; 0 bytes @ 0x4
  4272  0074                     	ds	2
  4273  0076                     i1Mrf49xaServe@data:	
  4274                           
  4275                           ; 1 bytes @ 0x6
  4276  0076                     	ds	1
  4277  0077                     ??_extInt:	
  4278                           
  4279                           ; 0 bytes @ 0x7
  4280  0077                     	ds	1
  4281                           
  4282                           	psect	cstackBANK0
  4283  0020                     __pcstackBANK0:	
  4284  0020                     ??_AdcInit:	
  4285  0020                     ??_ExtIntInit:	
  4286                           ; 0 bytes @ 0x0
  4287                           
  4288  0020                     ??_Mrf49SpiTx:	
  4289                           ; 0 bytes @ 0x0
  4290                           
  4291  0020                     ??_Mrf49SpiRx:	
  4292                           ; 0 bytes @ 0x0
  4293                           
  4294  0020                     ??_Mrf49xaPacketPending:	
  4295                           ; 0 bytes @ 0x0
  4296                           
  4297  0020                     ??_Mrf49xaRxPacket:	
  4298                           ; 0 bytes @ 0x0
  4299                           
  4300  0020                     ??_SysInitGpio:	
  4301                           ; 0 bytes @ 0x0
  4302                           
  4303  0020                     ?_Mrf49xaTxPacket:	
  4304                           ; 0 bytes @ 0x0
  4305                           
  4306  0020                     Mrf49SpiTx@byte:	
  4307                           ; 1 bytes @ 0x0
  4308                           
  4309  0020                     Mrf49SpiRx@data:	
  4310                           ; 1 bytes @ 0x0
  4311                           
  4312  0020                     Mrf49xaTxPacket@swapSrcDst:	
  4313                           ; 1 bytes @ 0x0
  4314                           
  4315                           
  4316                           ; 1 bytes @ 0x0
  4317  0020                     	ds	1
  4318  0021                     ??_Mrf49RxSts:	
  4319  0021                     ?_Mrf49TxCmd:	
  4320                           ; 0 bytes @ 0x1
  4321                           
  4322  0021                     ??_Mrf49RxCmd:	
  4323                           ; 0 bytes @ 0x1
  4324                           
  4325  0021                     ??_Mrf49xaTxPacket:	
  4326                           ; 0 bytes @ 0x1
  4327                           
  4328  0021                     Mrf49TxCmd@val:	
  4329                           ; 0 bytes @ 0x1
  4330                           
  4331  0021                     Mrf49RxCmd@cmd:	
  4332                           ; 1 bytes @ 0x1
  4333                           
  4334                           
  4335                           ; 1 bytes @ 0x1
  4336  0021                     	ds	1
  4337  0022                     ??_Mrf49TxCmd:	
  4338  0022                     Mrf49TxCmd@cmd:	
  4339                           ; 0 bytes @ 0x2
  4340                           
  4341  0022                     Mrf49RxCmd@val:	
  4342                           ; 1 bytes @ 0x2
  4343                           
  4344  0022                     Mrf49xaTxPacket@i:	
  4345                           ; 1 bytes @ 0x2
  4346                           
  4347                           
  4348                           ; 1 bytes @ 0x2
  4349  0022                     	ds	1
  4350  0023                     ??_Mrf49RxByte:	
  4351  0023                     ??_Mrf49xaModeRx:	
  4352                           ; 0 bytes @ 0x3
  4353                           
  4354  0023                     ??_Mrf49TxByte:	
  4355                           ; 0 bytes @ 0x3
  4356                           
  4357  0023                     ??_Mrf49xaModeTx:	
  4358                           ; 0 bytes @ 0x3
  4359                           
  4360  0023                     Mrf49xaModeRx@k:	
  4361                           ; 0 bytes @ 0x3
  4362                           
  4363  0023                     Mrf49xaModeTx@k:	
  4364                           ; 1 bytes @ 0x3
  4365                           
  4366  0023                     Mrf49TxByte@byte:	
  4367                           ; 1 bytes @ 0x3
  4368                           
  4369  0023                     Mrf49xaTxPacket@packet:	
  4370                           ; 1 bytes @ 0x3
  4371                           
  4372                           
  4373                           ; 1 bytes @ 0x3
  4374  0023                     	ds	1
  4375  0024                     ??_Mrf49xaServe:	
  4376  0024                     ??_Mrf49xaTick:	
  4377                           ; 0 bytes @ 0x4
  4378                           
  4379  0024                     Mrf49xaTick@packet:	
  4380                           ; 0 bytes @ 0x4
  4381                           
  4382                           
  4383                           ; 1 bytes @ 0x4
  4384  0024                     	ds	1
  4385  0025                     Mrf49xaTick@timeout:	
  4386                           
  4387                           ; 1 bytes @ 0x5
  4388  0025                     	ds	1
  4389  0026                     Mrf49xaServe@data:	
  4390  0026                     Mrf49xaTick@i:	
  4391                           ; 1 bytes @ 0x6
  4392                           
  4393                           
  4394                           ; 1 bytes @ 0x6
  4395  0026                     	ds	1
  4396  0027                     ??_Mrf49xaInit:	
  4397  0027                     Mrf49xaInit@i:	
  4398                           ; 0 bytes @ 0x7
  4399                           
  4400  0027                     Mrf49xaTick@j:	
  4401                           ; 1 bytes @ 0x7
  4402                           
  4403                           
  4404                           ; 1 bytes @ 0x7
  4405  0027                     	ds	1
  4406  0028                     Mrf49xaInit@j:	
  4407                           
  4408                           ; 1 bytes @ 0x8
  4409  0028                     	ds	1
  4410  0029                     Mrf49xaInit@k:	
  4411                           
  4412                           ; 1 bytes @ 0x9
  4413  0029                     	ds	1
  4414  002A                     ??_main:	
  4415  002A                     main@j:	
  4416                           ; 0 bytes @ 0xA
  4417                           
  4418                           
  4419                           ; 1 bytes @ 0xA
  4420  002A                     	ds	1
  4421  002B                     main@i:	
  4422                           
  4423                           ; 1 bytes @ 0xB
  4424  002B                     	ds	1
  4425                           
  4426                           	psect	swtext1
  4427  04E8                     __pswtext1:	
  4428  04E8                     S2461:	
  4429  04E8  3181  2904         	ljmp	l1755
  4430  04EA  3181  2904         	ljmp	l1755
  4431  04EC  3181  2904         	ljmp	l1755
  4432  04EE  3181  2918         	ljmp	l179
  4433                           
  4434                           	psect	swtext2
  4435  0500                     __pswtext2:	
  4436  0500                     S2463:	
  4437  0500  3181  296C         	ljmp	l1809
  4438  0502  3181  296C         	ljmp	l1809
  4439  0504  3181  2970         	ljmp	l1811
  4440  0506  3181  2974         	ljmp	l1813
  4441  0508  3181  2978         	ljmp	l1815
  4442  050A  3181  2978         	ljmp	l1815
  4443  050C  3181  2978         	ljmp	l1815
  4444  050E  3181  2978         	ljmp	l1815
  4445  0510  3181  2978         	ljmp	l1815
  4446  0512  3181  2978         	ljmp	l1815
  4447  0514  3181  2978         	ljmp	l1815
  4448  0516  3181  2978         	ljmp	l1815
  4449  0518  3181  2978         	ljmp	l1815
  4450  051A  3181  2978         	ljmp	l1815
  4451  051C  3181  2978         	ljmp	l1815
  4452  051E  3181  2978         	ljmp	l1815
  4453  0520  3181  2978         	ljmp	l1815
  4454  0522  3181  2978         	ljmp	l1815
  4455  0524  3181  2978         	ljmp	l1815
  4456  0526  3181  2978         	ljmp	l1815
  4457  0528  3181  2978         	ljmp	l1815
  4458  052A  3181  2978         	ljmp	l1815
  4459  052C  3181  2978         	ljmp	l1815
  4460  052E  3181  2978         	ljmp	l1815
  4461  0530  3181  2978         	ljmp	l1815
  4462  0532  3181  2978         	ljmp	l1815
  4463  0534  3181  2978         	ljmp	l1815
  4464  0536  3181  2978         	ljmp	l1815
  4465  0538  3181  2978         	ljmp	l1815
  4466  053A  3181  2978         	ljmp	l1815
  4467  053C  3181  2978         	ljmp	l1815
  4468  053E  3181  2978         	ljmp	l1815
  4469  0540  3181  2978         	ljmp	l1815
  4470  0542  3181  2978         	ljmp	l1815
  4471  0544  3181  2978         	ljmp	l1815
  4472  0546  3181  2978         	ljmp	l1815
  4473  0548  3181  2978         	ljmp	l1815
  4474  054A  3181  2978         	ljmp	l1815
  4475  054C  3181  2978         	ljmp	l1815
  4476  054E  3181  2978         	ljmp	l1815
  4477  0550  3181  2978         	ljmp	l1815
  4478  0552  3181  2978         	ljmp	l1815
  4479  0554  3181  2978         	ljmp	l1815
  4480  0556  3181  2978         	ljmp	l1815
  4481  0558  3181  2978         	ljmp	l1815
  4482  055A  3181  2978         	ljmp	l1815
  4483  055C  3181  2978         	ljmp	l1815
  4484  055E  3181  2978         	ljmp	l1815
  4485  0560  3181  2978         	ljmp	l1815
  4486  0562  3181  299A         	ljmp	l1823
  4487  0564  3181  2978         	ljmp	l1815
  4488  0566  3181  299E         	ljmp	l1825
  4489  0568  3181  299E         	ljmp	l1825
  4490  056A  3181  2978         	ljmp	l1815
  4491  056C  3181  29A2         	ljmp	l1827
  4492                           
  4493                           	psect	intentry
  4494  0004                     __pintentry:	
  4495 ;; *************** function _extInt *****************
  4496 ;; Defined at:
  4497 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;		None               void
  4504 ;; Registers used:
  4505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 1F/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4511 ;;      Params:         0       0       0       0
  4512 ;;      Locals:         0       0       0       0
  4513 ;;      Temps:          1       0       0       0
  4514 ;;      Totals:         1       0       0       0
  4515 ;;Total ram usage:        1 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    4
  4518 ;; This function calls:
  4519 ;;		i1_Mrf49xaServe
  4520 ;; This function is called by:
  4521 ;;		Interrupt level 1
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525  0004                     _extInt:	
  4526                           
  4527                           ;incstack = 0
  4528                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4529  0004  3180               	pagesel	$
  4530  0005  0020               	movlb	0	; select bank0
  4531  0006  087F               	movf	127,w
  4532  0007  00F7               	movwf	??_extInt
  4533                           
  4534                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  4535  0008  1C8B               	btfss	11,1	;volatile
  4536  0009  2811               	goto	i1l131
  4537                           
  4538                           ;interrupt.c: 34: {
  4539                           ;interrupt.c: 35: if (Mrf49xaServe())
  4540  000A  3183  2341  3180   	fcall	i1_Mrf49xaServe
  4541  000D  3A00               	xorlw	0
  4542  000E  1903               	skipnz
  4543  000F  2811               	goto	i1l131
  4544                           
  4545                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  4546  0010  108B               	bcf	11,1	;volatile
  4547  0011                     i1l131:	
  4548  0011  0877               	movf	??_extInt,w
  4549  0012  00FF               	movwf	127
  4550  0013  0009               	retfie
  4551  0014                     __end_of_extInt:	
  4552                           
  4553                           	psect	swtext3
  4554  04F0                     __pswtext3:	
  4555  04F0                     i1S2465:	
  4556  04F0  3183  2B47         	ljmp	i1l2277
  4557  04F2  3183  2B47         	ljmp	i1l2277
  4558  04F4  3183  2B47         	ljmp	i1l2277
  4559  04F6  3183  2B5B         	ljmp	i1l179
  4560                           
  4561                           	psect	swtext4
  4562  056E                     __pswtext4:	
  4563  056E                     i1S2467:	
  4564  056E  3183  2BAC         	ljmp	i1l2331
  4565  0570  3183  2BAC         	ljmp	i1l2331
  4566  0572  3183  2BB0         	ljmp	i1l2333
  4567  0574  3183  2BB4         	ljmp	i1l2335
  4568  0576  3183  2BB8         	ljmp	i1l2337
  4569  0578  3183  2BB8         	ljmp	i1l2337
  4570  057A  3183  2BB8         	ljmp	i1l2337
  4571  057C  3183  2BB8         	ljmp	i1l2337
  4572  057E  3183  2BB8         	ljmp	i1l2337
  4573  0580  3183  2BB8         	ljmp	i1l2337
  4574  0582  3183  2BB8         	ljmp	i1l2337
  4575  0584  3183  2BB8         	ljmp	i1l2337
  4576  0586  3183  2BB8         	ljmp	i1l2337
  4577  0588  3183  2BB8         	ljmp	i1l2337
  4578  058A  3183  2BB8         	ljmp	i1l2337
  4579  058C  3183  2BB8         	ljmp	i1l2337
  4580  058E  3183  2BB8         	ljmp	i1l2337
  4581  0590  3183  2BB8         	ljmp	i1l2337
  4582  0592  3183  2BB8         	ljmp	i1l2337
  4583  0594  3183  2BB8         	ljmp	i1l2337
  4584  0596  3183  2BB8         	ljmp	i1l2337
  4585  0598  3183  2BB8         	ljmp	i1l2337
  4586  059A  3183  2BB8         	ljmp	i1l2337
  4587  059C  3183  2BB8         	ljmp	i1l2337
  4588  059E  3183  2BB8         	ljmp	i1l2337
  4589  05A0  3183  2BB8         	ljmp	i1l2337
  4590  05A2  3183  2BB8         	ljmp	i1l2337
  4591  05A4  3183  2BB8         	ljmp	i1l2337
  4592  05A6  3183  2BB8         	ljmp	i1l2337
  4593  05A8  3183  2BB8         	ljmp	i1l2337
  4594  05AA  3183  2BB8         	ljmp	i1l2337
  4595  05AC  3183  2BB8         	ljmp	i1l2337
  4596  05AE  3183  2BB8         	ljmp	i1l2337
  4597  05B0  3183  2BB8         	ljmp	i1l2337
  4598  05B2  3183  2BB8         	ljmp	i1l2337
  4599  05B4  3183  2BB8         	ljmp	i1l2337
  4600  05B6  3183  2BB8         	ljmp	i1l2337
  4601  05B8  3183  2BB8         	ljmp	i1l2337
  4602  05BA  3183  2BB8         	ljmp	i1l2337
  4603  05BC  3183  2BB8         	ljmp	i1l2337
  4604  05BE  3183  2BB8         	ljmp	i1l2337
  4605  05C0  3183  2BB8         	ljmp	i1l2337
  4606  05C2  3183  2BB8         	ljmp	i1l2337
  4607  05C4  3183  2BB8         	ljmp	i1l2337
  4608  05C6  3183  2BB8         	ljmp	i1l2337
  4609  05C8  3183  2BB8         	ljmp	i1l2337
  4610  05CA  3183  2BB8         	ljmp	i1l2337
  4611  05CC  3183  2BB8         	ljmp	i1l2337
  4612  05CE  3183  2BB8         	ljmp	i1l2337
  4613  05D0  3183  2BD6         	ljmp	i1l2345
  4614  05D2  3183  2BB8         	ljmp	i1l2337
  4615  05D4  3183  2BDA         	ljmp	i1l2347
  4616  05D6  3183  2BDA         	ljmp	i1l2347
  4617  05D8  3183  2BB8         	ljmp	i1l2337
  4618  05DA  3183  2BDE         	ljmp	i1l2349
  4619                           
  4620                           	psect	text26
  4621  0337                     __ptext26:	
  4622 ;; *************** function i1_Mrf49RxCmd *****************
  4623 ;; Defined at:
  4624 ;;		line 16 in file "../../../src/devices/mrf49xa_cmd.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  cmd             1    wreg     unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  cmd             1    1[COMMON] unsigned char 
  4629 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      unsigned char 
  4632 ;; Registers used:
  4633 ;;		wreg, status,2, status,0, pclath, cstack
  4634 ;; Tracked objects:
  4635 ;;		On entry : 1C/1
  4636 ;;		On exit  : 1F/2
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4639 ;;      Params:         0       0       0       0
  4640 ;;      Locals:         2       0       0       0
  4641 ;;      Temps:          0       0       0       0
  4642 ;;      Totals:         2       0       0       0
  4643 ;;Total ram usage:        2 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:    1
  4646 ;; This function calls:
  4647 ;;		i1_Mrf49SpiRx
  4648 ;;		i1_Mrf49SpiTx
  4649 ;; This function is called by:
  4650 ;;		i1_Mrf49RxByte
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function i1_Mrf49RxCmd
  4656  0337                     i1_Mrf49RxCmd:	
  4657                           
  4658                           ;incstack = 0
  4659                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  4660                           ;i1Mrf49RxCmd@cmd stored from wreg
  4661  0337  00F1               	movwf	i1Mrf49RxCmd@cmd
  4662                           
  4663                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  4664  0338  0022               	movlb	2	; select bank2
  4665  0339  130E               	bcf	14,6	;volatile
  4666                           
  4667                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  4668  033A  0871               	movf	i1Mrf49RxCmd@cmd,w
  4669  033B  243A  3183         	fcall	i1_Mrf49SpiTx
  4670                           
  4671                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  4672  033D  24A3               	fcall	i1_Mrf49SpiRx
  4673  033E  00F2               	movwf	i1Mrf49RxCmd@val
  4674                           
  4675                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  4676  033F  170E               	bsf	14,6	;volatile
  4677                           
  4678                           ;mrf49xa_cmd.c: 25: return val;
  4679  0340  0008               	return
  4680  0341                     __end_ofi1_Mrf49RxCmd:	
  4681  0341                     __ptext20:	
  4682 ;; *************** function i1_Mrf49xaServe *****************
  4683 ;; Defined at:
  4684 ;;		line 73 in file "../../../src/devices/mrf49xa.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;		None
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  Mrf49xaServe    1    6[COMMON] unsigned char 
  4689 ;; Return value:  Size  Location     Type
  4690 ;;                  1    wreg      unsigned char 
  4691 ;; Registers used:
  4692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 1F/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4698 ;;      Params:         0       0       0       0
  4699 ;;      Locals:         1       0       0       0
  4700 ;;      Temps:          2       0       0       0
  4701 ;;      Totals:         3       0       0       0
  4702 ;;Total ram usage:        3 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    3
  4705 ;; This function calls:
  4706 ;;		i1_Mrf49RxByte
  4707 ;;		i1_Mrf49RxSts
  4708 ;;		i1_Mrf49TxByte
  4709 ;;		i1_Mrf49xaModeRx
  4710 ;; This function is called by:
  4711 ;;		_extInt
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           
  4716                           ;psect for function i1_Mrf49xaServe
  4717  0341                     i1_Mrf49xaServe:	
  4718                           
  4719                           ;mrf49xa.c: 75: unsigned char data;
  4720                           ;mrf49xa.c: 81: Mrf49RxSts();
  4721                           
  4722                           ;incstack = 0
  4723                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4724  0341  2495  3183         	fcall	i1_Mrf49RxSts
  4725                           
  4726                           ;mrf49xa.c: 86: }
  4727                           ;mrf49xa.c: 89: if (mrf49Status.flags.msb.overflow == 1)
  4728                           
  4729                           ;mrf49xa.c: 84: {
  4730  0343  0020               	movlb	0	; select bank0
  4731  0344  1AAC               	btfsc	_mrf49Status,5
  4732  0345  2B50               	goto	i1l2281
  4733  0346  2B5B               	goto	i1l179
  4734  0347                     i1l2277:	
  4735                           
  4736                           ;mrf49xa.c: 94: case RECV_DATA:
  4737                           ;mrf49xa.c: 95: case RECV_TIMEOUT:
  4738                           ;mrf49xa.c: 98: data = Mrf49RxByte();
  4739  0347  2405  3183         	fcall	i1_Mrf49RxByte
  4740  0349  00F6               	movwf	i1Mrf49xaServe@data
  4741                           
  4742                           ;mrf49xa.c: 99: data = Mrf49RxByte();
  4743  034A  2405  3183         	fcall	i1_Mrf49RxByte
  4744  034C  00F6               	movwf	i1Mrf49xaServe@data
  4745                           
  4746                           ;mrf49xa.c: 102: Mrf49xaModeRx();
  4747  034D  2408  3183         	fcall	i1_Mrf49xaModeRx
  4748                           
  4749                           ;mrf49xa.c: 106: break;
  4750  034F  2B5B               	goto	i1l179
  4751  0350                     i1l2281:	
  4752  0350  0021               	movlb	1	; select bank1
  4753  0351  0820               	movf	_rfTrcvStatus^(0+128),w
  4754                           
  4755                           ; Switch size 1, requested type "speed"
  4756                           ; Number of cases is 4, Range of values is 0 to 3
  4757                           ; switch strategies available:
  4758                           ; Name         Instructions Cycles
  4759                           ; direct_byte           14     6 (fixed)
  4760                           ; simple_byte           13     7 (average)
  4761                           ; jumptable            260     6 (fixed)
  4762                           ;	Chosen strategy is direct_byte
  4763  0352  0084               	movwf	4
  4764  0353  3004               	movlw	4
  4765  0354  0204               	subwf	4,w
  4766  0355  1803               	skipnc
  4767  0356  2B5B               	goto	i1l179
  4768  0357  3184               	movlp	high i1S2465
  4769  0358  3504               	lslf	4,w
  4770  0359  3EF0               	addlw	low i1S2465
  4771  035A  0082               	movwf	2
  4772  035B                     i1l179:	
  4773                           
  4774                           ;mrf49xa.c: 114: }
  4775                           ;mrf49xa.c: 123: if (mrf49Status.flags.msb.fifoTxRx == 1)
  4776  035B  0020               	movlb	0	; select bank0
  4777  035C  1BAC               	btfsc	_mrf49Status,7
  4778  035D  2BEF               	goto	i1l2361
  4779  035E  2BFB               	goto	i1l2363
  4780  035F                     i1l2285:	
  4781                           
  4782                           ;mrf49xa.c: 129: data = Mrf49RxByte();
  4783  035F  2405  3183         	fcall	i1_Mrf49RxByte
  4784  0361  00F6               	movwf	i1Mrf49xaServe@data
  4785                           
  4786                           ;mrf49xa.c: 133: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4787  0362  0020               	movlb	0	; select bank0
  4788  0363  1BAD               	btfsc	_mrf49Status+1,7
  4789  0364  2B68               	goto	i1l2291
  4790  0365                     i1l2289:	
  4791                           
  4792                           ;mrf49xa.c: 134: {
  4793                           ;mrf49xa.c: 135: Mrf49xaModeRx();
  4794  0365  2408  3183         	fcall	i1_Mrf49xaModeRx
  4795                           
  4796                           ;mrf49xa.c: 136: break;
  4797  0367  2BFB               	goto	i1l2363
  4798  0368                     i1l2291:	
  4799                           
  4800                           ;mrf49xa.c: 137: }
  4801                           ;mrf49xa.c: 139: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx = &(r
      +                          fTrcvStatus.rxPacket[0]);
  4802  0368  0021               	movlb	1	; select bank1
  4803  0369  08B8               	movf	(_rfTrcvStatus^(0+128)+24),f
  4804  036A  1D03               	skipz
  4805  036B  2B6E               	goto	i1l2295
  4806  036C  30B8               	movlw	(_rfTrcvStatus+24)& (0+255)
  4807  036D  2B72               	goto	L3
  4808  036E                     i1l2295:	
  4809                           
  4810                           ;mrf49xa.c: 140: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.hwRx 
      +                          = &(rfTrcvStatus.rxPacket[1]);
  4811  036E  08CF               	movf	(_rfTrcvStatus^(0+128)+47),f
  4812  036F  1D03               	skipz
  4813  0370  2B65               	goto	i1l2289
  4814  0371  30CF               	movlw	(_rfTrcvStatus+47)& (0+255)
  4815  0372                     L3:	
  4816  0372  00E6               	movwf	(_rfTrcvStatus+70)^(0+128)
  4817                           
  4818                           ;mrf49xa.c: 147: }
  4819                           ;mrf49xa.c: 148: rfTrcvStatus.hwRx->packet.size = data;
  4820  0373  0A66               	incf	(_rfTrcvStatus+70)^(0+128),w
  4821  0374  0086               	movwf	6
  4822  0375  0187               	clrf	7
  4823  0376  0876               	movf	i1Mrf49xaServe@data,w
  4824  0377  0081               	movwf	1
  4825                           
  4826                           ;mrf49xa.c: 149: rfTrcvStatus.hwRx->crc = 0;
  4827  0378  0866               	movf	(_rfTrcvStatus+70)^(0+128),w
  4828  0379  3E15               	addlw	21
  4829  037A  0086               	movwf	6
  4830  037B  0181               	clrf	1
  4831                           
  4832                           ;mrf49xa.c: 150: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  4833  037C  0866               	movf	(_rfTrcvStatus+70)^(0+128),w
  4834  037D  0086               	movwf	6
  4835  037E  3002               	movlw	2
  4836  037F  0081               	movwf	1
  4837                           
  4838                           ;mrf49xa.c: 152: rfTrcvStatus.state = RECV_DATA;
  4839  0380  01A0               	clrf	_rfTrcvStatus^(0+128)
  4840  0381  0AA0               	incf	_rfTrcvStatus^(0+128),f
  4841                           
  4842                           ;mrf49xa.c: 153: rfTrcvStatus.hwByte = 1;
  4843  0382  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  4844  0383  2BAA               	goto	L4
  4845  0384                     i1l2311:	
  4846                           ;mrf49xa.c: 155: break;
  4847                           
  4848                           
  4849                           ;mrf49xa.c: 159: data = Mrf49RxByte();
  4850  0384  2405  3183         	fcall	i1_Mrf49RxByte
  4851  0386  00F6               	movwf	i1Mrf49xaServe@data
  4852                           
  4853                           ;mrf49xa.c: 163: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4854  0387  0020               	movlb	0	; select bank0
  4855  0388  1FAD               	btfss	_mrf49Status+1,7
  4856  0389  2B65               	goto	i1l2289
  4857                           
  4858                           ;mrf49xa.c: 167: }
  4859                           ;mrf49xa.c: 169: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  4860  038A  0021               	movlb	1	; select bank1
  4861  038B  0A66               	incf	(_rfTrcvStatus+70)^(0+128),w
  4862  038C  0086               	movwf	6
  4863  038D  0187               	clrf	7
  4864  038E  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  4865  038F  0601               	xorwf	1,w
  4866  0390  1D03               	skipz
  4867  0391  2BA1               	goto	i1l2327
  4868                           
  4869                           ;mrf49xa.c: 170: {
  4870                           ;mrf49xa.c: 171: rfTrcvStatus.hwRx->crc = data;
  4871  0392  0866               	movf	(_rfTrcvStatus+70)^(0+128),w
  4872  0393  3E15               	addlw	21
  4873  0394  0086               	movwf	6
  4874  0395  0876               	movf	i1Mrf49xaServe@data,w
  4875  0396  0081               	movwf	1
  4876                           
  4877                           ;mrf49xa.c: 175: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  4878  0397  0866               	movf	(_rfTrcvStatus+70)^(0+128),w
  4879  0398  0086               	movwf	6
  4880  0399  3003               	movlw	3
  4881  039A  0081               	movwf	1
  4882                           
  4883                           ;mrf49xa.c: 178: Mrf49xaModeRx();
  4884  039B  2408  3183         	fcall	i1_Mrf49xaModeRx
  4885                           
  4886                           ;mrf49xa.c: 181: LATCbits.LATC2 = 1;
  4887  039D  0022               	movlb	2	; select bank2
  4888  039E  150E               	bsf	14,2	;volatile
  4889                           
  4890                           ;mrf49xa.c: 182: LATCbits.LATC2 = 0;
  4891  039F  110E               	bcf	14,2	;volatile
  4892                           
  4893                           ;mrf49xa.c: 184: }
  4894  03A0  2BFB               	goto	i1l2363
  4895  03A1                     i1l2327:	
  4896                           
  4897                           ;mrf49xa.c: 185: else
  4898                           ;mrf49xa.c: 186: {
  4899                           ;mrf49xa.c: 187: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  4900  03A1  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  4901  03A2  0766               	addwf	(_rfTrcvStatus+70)^(0+128),w
  4902  03A3  00F4               	movwf	??i1_Mrf49xaServe
  4903  03A4  0A74               	incf	??i1_Mrf49xaServe,w
  4904  03A5  0086               	movwf	6
  4905  03A6  0187               	clrf	7
  4906  03A7  0876               	movf	i1Mrf49xaServe@data,w
  4907  03A8  0081               	movwf	1
  4908  03A9                     i1l2329:	
  4909  03A9  0021               	movlb	1	; select bank1
  4910  03AA                     L4:	
  4911  03AA  0AE7               	incf	(_rfTrcvStatus^(0+128)+71),f
  4912  03AB  2BFB               	goto	i1l2363
  4913  03AC                     i1l2331:	
  4914                           
  4915                           ;mrf49xa.c: 197: case 1:
  4916                           ;mrf49xa.c: 198: Mrf49TxByte(0xAA);
  4917  03AC  30AA               	movlw	170
  4918  03AD  2400  3183         	fcall	i1_Mrf49TxByte
  4919                           
  4920                           ;mrf49xa.c: 199: break;
  4921  03AF  2BA9               	goto	i1l2329
  4922  03B0                     i1l2333:	
  4923                           
  4924                           ;mrf49xa.c: 202: Mrf49TxByte(0x2D);
  4925  03B0  302D               	movlw	45
  4926  03B1  2400  3183         	fcall	i1_Mrf49TxByte
  4927                           
  4928                           ;mrf49xa.c: 203: break;
  4929  03B3  2BA9               	goto	i1l2329
  4930  03B4                     i1l2335:	
  4931                           
  4932                           ;mrf49xa.c: 206: Mrf49TxByte(0xD4);
  4933  03B4  30D4               	movlw	212
  4934  03B5  2400  3183         	fcall	i1_Mrf49TxByte
  4935                           
  4936                           ;mrf49xa.c: 207: break;
  4937  03B7  2BA9               	goto	i1l2329
  4938  03B8                     i1l2337:	
  4939                           
  4940                           ;mrf49xa.c: 211: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte-4]);
  4941  03B8  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  4942  03B9  3E9E               	addlw	(_rfTrcvStatus+254)& (0+255)
  4943  03BA  0086               	movwf	6
  4944  03BB  0187               	clrf	7
  4945  03BC  0801               	movf	1,w
  4946  03BD  2400  3183         	fcall	i1_Mrf49TxByte
  4947                           
  4948                           ;mrf49xa.c: 212: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStatus.tx
      +                          Packet.raw[rfTrcvStatus.hwByte-4];
  4949  03BF  0021               	movlb	1	; select bank1
  4950  03C0  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  4951  03C1  3E9E               	addlw	(_rfTrcvStatus+254)& (0+255)
  4952  03C2  0086               	movwf	6
  4953  03C3  0187               	clrf	7
  4954  03C4  0836               	movf	(_rfTrcvStatus^(0+128)+22),w
  4955  03C5  0601               	xorwf	1,w
  4956  03C6  00B6               	movwf	(_rfTrcvStatus^(0+128)+22)
  4957                           
  4958                           ;mrf49xa.c: 213: if (rfTrcvStatus.hwByte-4 == rfTrcvStatus.txPacket.packet.size)
  4959  03C7  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  4960  03C8  3EFC               	addlw	252
  4961  03C9  00F4               	movwf	??i1_Mrf49xaServe
  4962  03CA  30FF               	movlw	255
  4963  03CB  1803               	skipnc
  4964  03CC  3000               	movlw	0
  4965  03CD  00F5               	movwf	??i1_Mrf49xaServe+1
  4966  03CE  0822               	movf	(_rfTrcvStatus^(0+128)+2),w
  4967  03CF  0674               	xorwf	??i1_Mrf49xaServe,w
  4968  03D0  0475               	iorwf	??i1_Mrf49xaServe+1,w
  4969  03D1  1D03               	skipz
  4970  03D2  2BA9               	goto	i1l2329
  4971                           
  4972                           ;mrf49xa.c: 214: {
  4973                           ;mrf49xa.c: 215: rfTrcvStatus.hwByte = 49;
  4974  03D3  3031               	movlw	49
  4975  03D4  00E7               	movwf	(_rfTrcvStatus^(0+128)+71)
  4976  03D5  2BA9               	goto	i1l2329
  4977  03D6                     i1l2345:	
  4978                           
  4979                           ;mrf49xa.c: 220: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  4980  03D6  0836               	movf	(_rfTrcvStatus^(0+128)+22),w
  4981  03D7  2400  3183         	fcall	i1_Mrf49TxByte
  4982                           
  4983                           ;mrf49xa.c: 221: break;
  4984  03D9  2BA9               	goto	i1l2329
  4985  03DA                     i1l2347:	
  4986                           
  4987                           ;mrf49xa.c: 224: case 52:
  4988                           ;mrf49xa.c: 225: Mrf49TxByte(0x00);
  4989  03DA  3000               	movlw	0
  4990  03DB  2400  3183         	fcall	i1_Mrf49TxByte
  4991                           
  4992                           ;mrf49xa.c: 226: break;
  4993  03DD  2BA9               	goto	i1l2329
  4994  03DE                     i1l2349:	
  4995                           
  4996                           ;mrf49xa.c: 229: Mrf49TxByte(0x00);
  4997  03DE  3000               	movlw	0
  4998  03DF  2400  3183         	fcall	i1_Mrf49TxByte
  4999                           
  5000                           ;mrf49xa.c: 230: Mrf49xaModeRx();
  5001  03E1  2408  3183         	fcall	i1_Mrf49xaModeRx
  5002                           
  5003                           ;mrf49xa.c: 231: rfTrcvStatus.txPacket.state = PKT_FREE;
  5004  03E3  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  5005                           
  5006                           ;mrf49xa.c: 232: break;
  5007  03E4  2BA9               	goto	i1l2329
  5008  03E5                     i1l2355:	
  5009  03E5  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  5010                           
  5011                           ; Switch size 1, requested type "speed"
  5012                           ; Number of cases is 8, Range of values is 0 to 54
  5013                           ; switch strategies available:
  5014                           ; Name         Instructions Cycles
  5015                           ; direct_byte          116     6 (fixed)
  5016                           ; simple_byte           25    13 (average)
  5017                           ; jumptable            260     6 (fixed)
  5018                           ;	Chosen strategy is direct_byte
  5019  03E6  0084               	movwf	4
  5020  03E7  3037               	movlw	55
  5021  03E8  0204               	subwf	4,w
  5022  03E9  1803               	skipnc
  5023  03EA  2BB8               	goto	i1l2337
  5024  03EB  3185               	movlp	high i1S2467
  5025  03EC  3504               	lslf	4,w
  5026  03ED  3E6E               	addlw	low i1S2467
  5027  03EE  0082               	movwf	2
  5028  03EF                     i1l2361:	
  5029  03EF  0021               	movlb	1	; select bank1
  5030  03F0  0820               	movf	_rfTrcvStatus^(0+128),w
  5031                           
  5032                           ; Switch size 1, requested type "speed"
  5033                           ; Number of cases is 3, Range of values is 0 to 3
  5034                           ; switch strategies available:
  5035                           ; Name         Instructions Cycles
  5036                           ; simple_byte           10     6 (average)
  5037                           ; direct_byte           14     6 (fixed)
  5038                           ; jumptable            260     6 (fixed)
  5039                           ;	Chosen strategy is simple_byte
  5040  03F1  3A00               	xorlw	0	; case 0
  5041  03F2  1903               	skipnz
  5042  03F3  2B5F               	goto	i1l2285
  5043  03F4  3A01               	xorlw	1	; case 1
  5044  03F5  1903               	skipnz
  5045  03F6  2B84               	goto	i1l2311
  5046  03F7  3A02               	xorlw	2	; case 3
  5047  03F8  1903               	skipnz
  5048  03F9  2BE5               	goto	i1l2355
  5049  03FA  2BFB               	goto	i1l2363
  5050  03FB                     i1l2363:	
  5051                           
  5052                           ;mrf49xa.c: 239: }
  5053                           ;mrf49xa.c: 253: return PORTAbits.RA2 == 1 ? 1 : 0;
  5054  03FB  0020               	movlb	0	; select bank0
  5055  03FC  0C0C               	rrf	12,w	;volatile
  5056  03FD  0C89               	rrf	9,f
  5057  03FE  3901               	andlw	1
  5058  03FF  0008               	return
  5059  0400                     __end_ofi1_Mrf49xaServe:	
  5060  0400                     __ptext22:	
  5061 ;; *************** function i1_Mrf49TxByte *****************
  5062 ;; Defined at:
  5063 ;;		line 46 in file "../../../src/devices/mrf49xa_cmd.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;  byte            1    wreg     unsigned char 
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;  byte            1    3[COMMON] unsigned char 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;		None               void
  5070 ;; Registers used:
  5071 ;;		wreg, status,2, status,0, pclath, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 1E/1
  5074 ;;		On exit  : 1F/2
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5077 ;;      Params:         0       0       0       0
  5078 ;;      Locals:         1       0       0       0
  5079 ;;      Temps:          0       0       0       0
  5080 ;;      Totals:         1       0       0       0
  5081 ;;Total ram usage:        1 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    2
  5084 ;; This function calls:
  5085 ;;		i1_Mrf49TxCmd
  5086 ;; This function is called by:
  5087 ;;		i1_Mrf49xaServe
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function i1_Mrf49TxByte
  5093  0400                     i1_Mrf49TxByte:	
  5094                           
  5095                           ;incstack = 0
  5096                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  5097                           ;i1Mrf49TxByte@byte stored from wreg
  5098  0400  00F3               	movwf	i1Mrf49TxByte@byte
  5099                           
  5100                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  5101  0401  00F1               	movwf	i1Mrf49TxCmd@val
  5102  0402  30B8               	movlw	184
  5103  0403  2430               	fcall	i1_Mrf49TxCmd
  5104  0404  0008               	return
  5105  0405                     __end_ofi1_Mrf49TxByte:	
  5106  0405                     __ptext25:	
  5107 ;; *************** function i1_Mrf49RxByte *****************
  5108 ;; Defined at:
  5109 ;;		line 41 in file "../../../src/devices/mrf49xa_cmd.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;		None
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;		None
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  1    wreg      unsigned char 
  5116 ;; Registers used:
  5117 ;;		wreg, status,2, status,0, pclath, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 1C/1
  5120 ;;		On exit  : 1F/2
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5123 ;;      Params:         0       0       0       0
  5124 ;;      Locals:         0       0       0       0
  5125 ;;      Temps:          0       0       0       0
  5126 ;;      Totals:         0       0       0       0
  5127 ;;Total ram usage:        0 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    2
  5130 ;; This function calls:
  5131 ;;		i1_Mrf49RxCmd
  5132 ;; This function is called by:
  5133 ;;		i1_Mrf49xaServe
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           
  5138                           ;psect for function i1_Mrf49RxByte
  5139  0405                     i1_Mrf49RxByte:	
  5140                           
  5141                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  5145  0405  30B0               	movlw	176
  5146  0406  2337               	fcall	i1_Mrf49RxCmd
  5147  0407  0008               	return
  5148  0408                     __end_ofi1_Mrf49RxByte:	
  5149  0408                     __ptext21:	
  5150 ;; *************** function i1_Mrf49xaModeRx *****************
  5151 ;; Defined at:
  5152 ;;		line 256 in file "../../../src/devices/mrf49xa.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;		None
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;		None               void
  5159 ;; Registers used:
  5160 ;;		wreg, status,2, status,0, pclath, cstack
  5161 ;; Tracked objects:
  5162 ;;		On entry : 1C/2
  5163 ;;		On exit  : 1F/1
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5166 ;;      Params:         0       0       0       0
  5167 ;;      Locals:         1       0       0       0
  5168 ;;      Temps:          0       0       0       0
  5169 ;;      Totals:         1       0       0       0
  5170 ;;Total ram usage:        1 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    2
  5173 ;; This function calls:
  5174 ;;		i1_Mrf49TxCmd
  5175 ;; This function is called by:
  5176 ;;		i1_Mrf49xaServe
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           
  5181                           ;psect for function i1_Mrf49xaModeRx
  5182  0408                     i1_Mrf49xaModeRx:	
  5183  0408  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5184                           
  5185                           ;mrf49xa.c: 258: UI08_t k;
  5186                           ;mrf49xa.c: 259: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55
      +                          ) Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  5187                           
  5188                           ;incstack = 0
  5189                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  5190  0409  01F3               	clrf	i1Mrf49xaModeRx@k
  5191  040A  3186               	movlp	high __stringtab
  5192  040B  000A               	callw
  5193  040C  3183               	pagesel	$	;select current page
  5194  040D  3800               	iorlw	0
  5195  040E  1903               	btfsc	3,2
  5196  040F  2C2C               	goto	i1l2263
  5197  0410                     i1l2255:	
  5198  0410  3573               	lslf	i1Mrf49xaModeRx@k,w
  5199  0411  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  5200  0412  3186               	movlp	high __stringtab
  5201  0413  000A               	callw
  5202  0414  3183               	pagesel	$	;select current page
  5203  0415  3A55               	xorlw	85
  5204  0416  1903               	skipnz
  5205  0417  2C24               	goto	i1l2259
  5206  0418  3573               	lslf	i1Mrf49xaModeRx@k,w
  5207  0419  3E25               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  5208  041A  3186               	movlp	high __stringtab
  5209  041B  000A               	callw
  5210  041C  00F1               	movwf	i1Mrf49TxCmd@val
  5211  041D  3573               	lslf	i1Mrf49xaModeRx@k,w
  5212  041E  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  5213  041F  3186               	movlp	high __stringtab
  5214  0420  000A               	callw
  5215  0421  3183               	pagesel	$	;select current page
  5216  0422  3184  2430         	fcall	i1_Mrf49TxCmd
  5217  0424                     i1l2259:	
  5218  0424  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5219  0425  0AF3               	incf	i1Mrf49xaModeRx@k,f
  5220  0426  3186               	movlp	high __stringtab
  5221  0427  000A               	callw
  5222  0428  3183               	pagesel	$	;select current page
  5223  0429  0273               	subwf	i1Mrf49xaModeRx@k,w
  5224  042A  1C03               	skipc
  5225  042B  2C10               	goto	i1l2255
  5226  042C                     i1l2263:	
  5227                           
  5228                           ;mrf49xa.c: 261: rfTrcvStatus.state = RECV_IDLE;
  5229  042C  0021               	movlb	1	; select bank1
  5230  042D  01A0               	clrf	_rfTrcvStatus^(0+128)
  5231                           
  5232                           ;mrf49xa.c: 262: rfTrcvStatus.hwByte = 0;
  5233  042E  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  5234  042F  0008               	return
  5235  0430                     __end_ofi1_Mrf49xaModeRx:	
  5236  0430                     __ptext23:	
  5237 ;; *************** function i1_Mrf49TxCmd *****************
  5238 ;; Defined at:
  5239 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  cmd             1    wreg     unsigned char 
  5242 ;;  val             1    1[COMMON] unsigned char 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  cmd             1    2[COMMON] unsigned char 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;		None               void
  5247 ;; Registers used:
  5248 ;;		wreg, status,2, status,0, pclath, cstack
  5249 ;; Tracked objects:
  5250 ;;		On entry : 1C/2
  5251 ;;		On exit  : 1F/2
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5254 ;;      Params:         1       0       0       0
  5255 ;;      Locals:         1       0       0       0
  5256 ;;      Temps:          0       0       0       0
  5257 ;;      Totals:         2       0       0       0
  5258 ;;Total ram usage:        2 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:    1
  5261 ;; This function calls:
  5262 ;;		i1_Mrf49SpiTx
  5263 ;; This function is called by:
  5264 ;;		i1_Mrf49xaModeRx
  5265 ;;		i1_Mrf49TxByte
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function i1_Mrf49TxCmd
  5271  0430                     i1_Mrf49TxCmd:	
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  5275                           ;i1Mrf49TxCmd@cmd stored from wreg
  5276  0430  00F2               	movwf	i1Mrf49TxCmd@cmd
  5277                           
  5278                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  5279  0431  0022               	movlb	2	; select bank2
  5280  0432  130E               	bcf	14,6	;volatile
  5281                           
  5282                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  5283  0433  0872               	movf	i1Mrf49TxCmd@cmd,w
  5284  0434  243A  3183         	fcall	i1_Mrf49SpiTx
  5285                           
  5286                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  5287  0436  0871               	movf	i1Mrf49TxCmd@val,w
  5288  0437  243A               	fcall	i1_Mrf49SpiTx
  5289                           
  5290                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  5291  0438  170E               	bsf	14,6	;volatile
  5292  0439  0008               	return
  5293  043A                     __end_ofi1_Mrf49TxCmd:	
  5294  043A                     __ptext27:	
  5295 ;; *************** function i1_Mrf49SpiTx *****************
  5296 ;; Defined at:
  5297 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;  byte            1    wreg     unsigned char 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  byte            1    0[COMMON] unsigned char 
  5302 ;; Return value:  Size  Location     Type
  5303 ;;		None               void
  5304 ;; Registers used:
  5305 ;;		wreg
  5306 ;; Tracked objects:
  5307 ;;		On entry : 1F/2
  5308 ;;		On exit  : 1F/2
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5311 ;;      Params:         0       0       0       0
  5312 ;;      Locals:         1       0       0       0
  5313 ;;      Temps:          0       0       0       0
  5314 ;;      Totals:         1       0       0       0
  5315 ;;Total ram usage:        1 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; This function calls:
  5318 ;;		Nothing
  5319 ;; This function is called by:
  5320 ;;		i1_Mrf49TxCmd
  5321 ;;		i1_Mrf49RxCmd
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           
  5326                           ;psect for function i1_Mrf49SpiTx
  5327  043A                     i1_Mrf49SpiTx:	
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  5331                           ;i1Mrf49SpiTx@byte stored from wreg
  5332  043A  00F0               	movwf	i1Mrf49SpiTx@byte
  5333                           
  5334                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  5335  043B  1BF0               	btfsc	i1Mrf49SpiTx@byte,7
  5336  043C  2C3F               	goto	i1l2167
  5337  043D  0020               	movlb	0	; select bank0
  5338  043E  2C41               	goto	i1l248
  5339  043F                     i1l2167:	
  5340  043F  178D               	bsf	13,7	;volatile
  5341  0440  2C42               	goto	i1l249
  5342  0441                     i1l248:	
  5343  0441  138D               	bcf	13,7	;volatile
  5344  0442                     i1l249:	
  5345  0442  178E               	bsf	14,7	;volatile
  5346  0443  0000               	nop	;# 
  5347  0444  0022               	movlb	2	; select bank2
  5348  0445  138E               	bcf	14,7	;volatile
  5349  0446  1B70               	btfsc	i1Mrf49SpiTx@byte,6
  5350  0447  2C4A               	goto	i1l2171
  5351  0448  0020               	movlb	0	; select bank0
  5352  0449  2C4C               	goto	i1l252
  5353  044A                     i1l2171:	
  5354  044A  178D               	bsf	13,7	;volatile
  5355  044B  2C4D               	goto	i1l253
  5356  044C                     i1l252:	
  5357  044C  138D               	bcf	13,7	;volatile
  5358  044D                     i1l253:	
  5359  044D  178E               	bsf	14,7	;volatile
  5360  044E  0000               	nop	;# 
  5361  044F  0022               	movlb	2	; select bank2
  5362  0450  138E               	bcf	14,7	;volatile
  5363  0451  1AF0               	btfsc	i1Mrf49SpiTx@byte,5
  5364  0452  2C55               	goto	i1l2175
  5365  0453  0020               	movlb	0	; select bank0
  5366  0454  2C57               	goto	i1l256
  5367  0455                     i1l2175:	
  5368  0455  178D               	bsf	13,7	;volatile
  5369  0456  2C58               	goto	i1l257
  5370  0457                     i1l256:	
  5371  0457  138D               	bcf	13,7	;volatile
  5372  0458                     i1l257:	
  5373  0458  178E               	bsf	14,7	;volatile
  5374  0459  0000               	nop	;# 
  5375  045A  0022               	movlb	2	; select bank2
  5376  045B  138E               	bcf	14,7	;volatile
  5377  045C  1A70               	btfsc	i1Mrf49SpiTx@byte,4
  5378  045D  2C60               	goto	i1l2179
  5379  045E  0020               	movlb	0	; select bank0
  5380  045F  2C62               	goto	i1l260
  5381  0460                     i1l2179:	
  5382  0460  178D               	bsf	13,7	;volatile
  5383  0461  2C63               	goto	i1l261
  5384  0462                     i1l260:	
  5385  0462  138D               	bcf	13,7	;volatile
  5386  0463                     i1l261:	
  5387  0463  178E               	bsf	14,7	;volatile
  5388  0464  0000               	nop	;# 
  5389  0465  0022               	movlb	2	; select bank2
  5390  0466  138E               	bcf	14,7	;volatile
  5391  0467  19F0               	btfsc	i1Mrf49SpiTx@byte,3
  5392  0468  2C6B               	goto	i1l2183
  5393  0469  0020               	movlb	0	; select bank0
  5394  046A  2C6D               	goto	i1l264
  5395  046B                     i1l2183:	
  5396  046B  178D               	bsf	13,7	;volatile
  5397  046C  2C6E               	goto	i1l265
  5398  046D                     i1l264:	
  5399  046D  138D               	bcf	13,7	;volatile
  5400  046E                     i1l265:	
  5401  046E  178E               	bsf	14,7	;volatile
  5402  046F  0000               	nop	;# 
  5403  0470  0022               	movlb	2	; select bank2
  5404  0471  138E               	bcf	14,7	;volatile
  5405  0472  1970               	btfsc	i1Mrf49SpiTx@byte,2
  5406  0473  2C76               	goto	i1l2187
  5407  0474  0020               	movlb	0	; select bank0
  5408  0475  2C78               	goto	i1l268
  5409  0476                     i1l2187:	
  5410  0476  178D               	bsf	13,7	;volatile
  5411  0477  2C79               	goto	i1l269
  5412  0478                     i1l268:	
  5413  0478  138D               	bcf	13,7	;volatile
  5414  0479                     i1l269:	
  5415  0479  178E               	bsf	14,7	;volatile
  5416  047A  0000               	nop	;# 
  5417  047B  0022               	movlb	2	; select bank2
  5418  047C  138E               	bcf	14,7	;volatile
  5419  047D  18F0               	btfsc	i1Mrf49SpiTx@byte,1
  5420  047E  2C81               	goto	i1l2191
  5421  047F  0020               	movlb	0	; select bank0
  5422  0480  2C83               	goto	i1l272
  5423  0481                     i1l2191:	
  5424  0481  178D               	bsf	13,7	;volatile
  5425  0482  2C84               	goto	i1l273
  5426  0483                     i1l272:	
  5427  0483  138D               	bcf	13,7	;volatile
  5428  0484                     i1l273:	
  5429  0484  178E               	bsf	14,7	;volatile
  5430  0485  0000               	nop	;# 
  5431  0486  0022               	movlb	2	; select bank2
  5432  0487  138E               	bcf	14,7	;volatile
  5433  0488  1870               	btfsc	i1Mrf49SpiTx@byte,0
  5434  0489  2C8C               	goto	i1l2195
  5435  048A  0020               	movlb	0	; select bank0
  5436  048B  2C8E               	goto	i1l276
  5437  048C                     i1l2195:	
  5438  048C  178D               	bsf	13,7	;volatile
  5439  048D  2C8F               	goto	i1l277
  5440  048E                     i1l276:	
  5441  048E  138D               	bcf	13,7	;volatile
  5442  048F                     i1l277:	
  5443  048F  178E               	bsf	14,7	;volatile
  5444  0490  0000               	nop	;# 
  5445  0491  0022               	movlb	2	; select bank2
  5446  0492  138E               	bcf	14,7	;volatile
  5447                           
  5448                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  5449  0493  138D               	bcf	13,7	;volatile
  5450  0494  0008               	return
  5451  0495                     __end_ofi1_Mrf49SpiTx:	
  5452  0495                     __ptext24:	
  5453 ;; *************** function i1_Mrf49RxSts *****************
  5454 ;; Defined at:
  5455 ;;		line 29 in file "../../../src/devices/mrf49xa_cmd.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;		None
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;		None
  5460 ;; Return value:  Size  Location     Type
  5461 ;;		None               void
  5462 ;; Registers used:
  5463 ;;		wreg, status,2, pclath, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 1F/2
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5469 ;;      Params:         0       0       0       0
  5470 ;;      Locals:         0       0       0       0
  5471 ;;      Temps:          0       0       0       0
  5472 ;;      Totals:         0       0       0       0
  5473 ;;Total ram usage:        0 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; Hardware stack levels required when called:    1
  5476 ;; This function calls:
  5477 ;;		i1_Mrf49SpiRx
  5478 ;; This function is called by:
  5479 ;;		i1_Mrf49xaServe
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           
  5484                           ;psect for function i1_Mrf49RxSts
  5485  0495                     i1_Mrf49RxSts:	
  5486                           
  5487                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  5491  0495  120B               	bcf	11,4	;volatile
  5492                           
  5493                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  5494  0496  0022               	movlb	2	; select bank2
  5495  0497  130E               	bcf	14,6	;volatile
  5496                           
  5497                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  5498  0498  24A3  3183         	fcall	i1_Mrf49SpiRx
  5499  049A  0020               	movlb	0	; select bank0
  5500  049B  00AC               	movwf	_mrf49Status
  5501                           
  5502                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  5503  049C  24A3               	fcall	i1_Mrf49SpiRx
  5504  049D  0020               	movlb	0	; select bank0
  5505  049E  00AD               	movwf	_mrf49Status+1
  5506                           
  5507                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  5508  049F  0022               	movlb	2	; select bank2
  5509  04A0  170E               	bsf	14,6	;volatile
  5510                           
  5511                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  5512  04A1  160B               	bsf	11,4	;volatile
  5513  04A2  0008               	return
  5514  04A3                     __end_ofi1_Mrf49RxSts:	
  5515  04A3                     __ptext28:	
  5516 ;; *************** function i1_Mrf49SpiRx *****************
  5517 ;; Defined at:
  5518 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      unsigned char 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2
  5527 ;; Tracked objects:
  5528 ;;		On entry : 1D/2
  5529 ;;		On exit  : 1F/2
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5532 ;;      Params:         0       0       0       0
  5533 ;;      Locals:         1       0       0       0
  5534 ;;      Temps:          0       0       0       0
  5535 ;;      Totals:         1       0       0       0
  5536 ;;Total ram usage:        1 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; This function calls:
  5539 ;;		Nothing
  5540 ;; This function is called by:
  5541 ;;		i1_Mrf49RxCmd
  5542 ;;		i1_Mrf49RxSts
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           
  5547                           ;psect for function i1_Mrf49SpiRx
  5548  04A3                     i1_Mrf49SpiRx:	
  5549                           
  5550                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  5551                           
  5552                           ;incstack = 0
  5553                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  5554  04A3  01F0               	clrf	i1Mrf49SpiRx@data
  5555                           
  5556                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  5557  04A4  0022               	movlb	2	; select bank2
  5558  04A5  138D               	bcf	13,7	;volatile
  5559  04A6  0020               	movlb	0	; select bank0
  5560  04A7  1A8E               	btfsc	14,5	;volatile
  5561  04A8  17F0               	bsf	i1Mrf49SpiRx@data,7
  5562  04A9  0022               	movlb	2	; select bank2
  5563  04AA  178E               	bsf	14,7	;volatile
  5564  04AB  0000               	nop	;# 
  5565  04AC  0022               	movlb	2	; select bank2
  5566  04AD  138E               	bcf	14,7	;volatile
  5567                           
  5568                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5569  04AE  0020               	movlb	0	; select bank0
  5570  04AF  1A8E               	btfsc	14,5	;volatile
  5571  04B0  1770               	bsf	i1Mrf49SpiRx@data,6
  5572  04B1  0022               	movlb	2	; select bank2
  5573  04B2  178E               	bsf	14,7	;volatile
  5574  04B3  0000               	nop	;# 
  5575  04B4  0022               	movlb	2	; select bank2
  5576  04B5  138E               	bcf	14,7	;volatile
  5577                           
  5578                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5579  04B6  0020               	movlb	0	; select bank0
  5580  04B7  1A8E               	btfsc	14,5	;volatile
  5581  04B8  16F0               	bsf	i1Mrf49SpiRx@data,5
  5582  04B9  0022               	movlb	2	; select bank2
  5583  04BA  178E               	bsf	14,7	;volatile
  5584  04BB  0000               	nop	;# 
  5585  04BC  0022               	movlb	2	; select bank2
  5586  04BD  138E               	bcf	14,7	;volatile
  5587                           
  5588                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5589  04BE  0020               	movlb	0	; select bank0
  5590  04BF  1A8E               	btfsc	14,5	;volatile
  5591  04C0  1670               	bsf	i1Mrf49SpiRx@data,4
  5592  04C1  0022               	movlb	2	; select bank2
  5593  04C2  178E               	bsf	14,7	;volatile
  5594  04C3  0000               	nop	;# 
  5595  04C4  0022               	movlb	2	; select bank2
  5596  04C5  138E               	bcf	14,7	;volatile
  5597                           
  5598                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5599  04C6  0020               	movlb	0	; select bank0
  5600  04C7  1A8E               	btfsc	14,5	;volatile
  5601  04C8  15F0               	bsf	i1Mrf49SpiRx@data,3
  5602  04C9  0022               	movlb	2	; select bank2
  5603  04CA  178E               	bsf	14,7	;volatile
  5604  04CB  0000               	nop	;# 
  5605  04CC  0022               	movlb	2	; select bank2
  5606  04CD  138E               	bcf	14,7	;volatile
  5607                           
  5608                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5609  04CE  0020               	movlb	0	; select bank0
  5610  04CF  1A8E               	btfsc	14,5	;volatile
  5611  04D0  1570               	bsf	i1Mrf49SpiRx@data,2
  5612  04D1  0022               	movlb	2	; select bank2
  5613  04D2  178E               	bsf	14,7	;volatile
  5614  04D3  0000               	nop	;# 
  5615  04D4  0022               	movlb	2	; select bank2
  5616  04D5  138E               	bcf	14,7	;volatile
  5617                           
  5618                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5619  04D6  0020               	movlb	0	; select bank0
  5620  04D7  1A8E               	btfsc	14,5	;volatile
  5621  04D8  14F0               	bsf	i1Mrf49SpiRx@data,1
  5622  04D9  0022               	movlb	2	; select bank2
  5623  04DA  178E               	bsf	14,7	;volatile
  5624  04DB  0000               	nop	;# 
  5625  04DC  0022               	movlb	2	; select bank2
  5626  04DD  138E               	bcf	14,7	;volatile
  5627                           
  5628                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5629  04DE  0020               	movlb	0	; select bank0
  5630  04DF  1A8E               	btfsc	14,5	;volatile
  5631  04E0  1470               	bsf	i1Mrf49SpiRx@data,0
  5632  04E1  0022               	movlb	2	; select bank2
  5633  04E2  178E               	bsf	14,7	;volatile
  5634  04E3  0000               	nop	;# 
  5635  04E4  0022               	movlb	2	; select bank2
  5636  04E5  138E               	bcf	14,7	;volatile
  5637                           
  5638                           ;mrf49xa_spi_pic16.c: 40: return data;
  5639  04E6  0870               	movf	i1Mrf49SpiRx@data,w
  5640  04E7  0008               	return
  5641  04E8                     __end_ofi1_Mrf49SpiRx:	
  5642  007E                     btemp	set	126	;btemp
  5643  007E                     wtemp	set	126
  5644  007E                     wtemp0	set	126
  5645  0080                     wtemp1	set	128
  5646  0082                     wtemp2	set	130
  5647  0084                     wtemp3	set	132
  5648  0086                     wtemp4	set	134
  5649  0088                     wtemp5	set	136
  5650  007F                     wtemp6	set	127
  5651  007E                     ttemp	set	126
  5652  007E                     ttemp0	set	126
  5653  0081                     ttemp1	set	129
  5654  0084                     ttemp2	set	132
  5655  0087                     ttemp3	set	135
  5656  007F                     ttemp4	set	127
  5657  007E                     ltemp	set	126
  5658  007E                     ltemp0	set	126
  5659  0082                     ltemp1	set	130
  5660  0086                     ltemp2	set	134
  5661  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     12      14
    BANK1            80      0      73
    BANK2            80      0       0

Pointer List with Targets:

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 74
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[46]), rfTrcvStatus(BANK1[73]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 74
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[46]), rfTrcvStatus(BANK1[73]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 74
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[46]), rfTrcvStatus(BANK1[73]), 

    S322rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 74
		 -> rfTrcvStatus(BANK1[73]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 74
		 -> rfTrcvStatus.rxPacket(BANK1[46]), rfTrcvStatus(BANK1[73]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaInit
    _Mrf49xaTick->_Mrf49xaModeTx
    _Mrf49xaTick->_Mrf49xaTxPacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4150
                                             10 BANK0      2     2      0
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0    1137
                                              4 BANK0      4     4      0
                         _Mrf49RxSts
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      4     3      1     331
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     636
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          3     3      0    2899
                                              7 BANK0      3     3      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         3     3      0    1535
                                              4 BANK0      3     3      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     636
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     546
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxCmd                                           2     1      1     524
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _extInt                                               1     1      0    3399
                                              7 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (7) i1_Mrf49xaServe                                       3     3      0    3399
                                              4 COMMON     3     3      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaModeRx                                      1     1      0    1277
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49TxByte                                        1     1      0     981
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxCmd                                         2     1      1     908
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxSts                                         0     0      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxByte                                        0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxCmd                                         2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49SpiRx                                         1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49TxCmd
       _Mrf49SpiTx
     _Mrf49xaModeRx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _Mrf49xaTick
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Mrf49xaTxPacket
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C       E       6       17.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      49       8       91.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      5F      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Thu Apr 17 12:09:23 2014

                            pc 0002          Mrf49xaTxPacket@packet 0023                            l232 00D4  
                          l260 022B                            l252 0213                            l261 022D  
                          l253 0215                            l415 0064                            l272 024F  
                          l264 0237                            l256 021F                            l248 0207  
                          l273 0251                            l265 0239                            l257 0221  
                          l249 0209                            l179 0118                            l276 025B  
                          l268 0243                            l372 00AE                            l277 025D  
                          l269 0245                            l375 009A                            wreg 0009  
             i1Mrf49xaModeRx@k 0073                           S2461 04E8                           S2463 0500  
                         l2041 02FB      Mrf49xaTxPacket@swapSrcDst 0020                           l2063 02DB  
                         l2055 0306                           l2143 005C                           l2163 0075  
                         l2147 0062                           l2093 0097                           l2085 008E  
                         l2079 0086                           l1811 0170                           l2099 0099  
                         l1813 0174                           l1805 0160                           l1823 019A  
                         l1815 0178                           l1807 0169                           l1903 0047  
                         l1833 01A9                           l1825 019E                           l1809 016C  
                         l1841 01BF                           l1921 00D3                           l1913 00CA  
                         l1827 01A2                           l1763 011C                           l1755 0104  
                         l1773 012A                           l1941 00F6                           l1871 01D4  
                         l1767 0121                           l1839 01B3                           l1759 010D  
                         l1935 00E1                           l1769 0124                           l1945 00F8  
                         l1937 00ED                           l1875 01E8                           l1789 0142  
              Mrf49TxByte@byte 0023                           l1879 01F1                           l1895 002A  
                         l1899 003E                           _main 004C                __end_of_AdcInit 02C5  
                         fsr0h 0005                           fsr1h 0007                           fsr0l 0004  
                         indf0 0000                           indf1 0001                           fsr1l 0006  
                         btemp 007E                           ltemp 007E                           start 0014  
                         ttemp 007E                           wtemp 007E        __end_ofi1_Mrf49xaModeRx 0430  
          __end_of_Mrf49RxByte 01CB            __end_of_Mrf49TxByte 01C9            __end_of_Mrf49xaInit 00FE  
          __end_of_Mrf49xaTick 00B2           _Mrf49xaPacketPending 02CA                          ?_main 0070  
                        i1l131 0011                          i1l260 0462                          i1l252 044C  
                        i1l261 0463                          i1l253 044D                          i1l272 0483  
                        i1l264 046D                          i1l256 0457                          i1l248 0441  
                        i1l273 0484                          i1l265 046E                          i1l257 0458  
                        i1l249 0442                          i1l179 035B                          i1l276 048E  
                        i1l268 0478                          i1l277 048F                          i1l269 0479  
                   _Mrf49RxCmd 00B2                     _Mrf49TxCmd 01F5                     _Mrf49SpiRx 026F  
                   _Mrf49SpiTx 0201                     _Mrf49RxSts 0263                          main@i 002B  
                        main@j 002A                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F                __initialization 0016  
                   _ExtIntInit 02C5                   __end_of_main 0078          ?_Mrf49xaPacketPending 0070  
                       ??_main 002A           __end_of_Mrf49xaServe 01C4                         _ADCON0 009D  
                       _ADCON1 009E                         _ADCON2 009F                      ??_AdcInit 0020  
                       i1S2465 04F0                         i1S2467 056E                         _ANSELA 018C  
                       _ANSELB 018D                         _ANSELC 018E             i1Mrf49xaServe@data 0076  
                       i1l2311 0384                         i1l2171 044A                         i1l2331 03AC  
                       i1l2333 03B0                         i1l2191 0481                         i1l2183 046B  
                       i1l2175 0455                         i1l2167 043F                         i1l2263 042C  
                       i1l2255 0410                         i1l2335 03B4                         i1l2327 03A1  
                       i1l2345 03D6                         i1l2337 03B8                         i1l2329 03A9  
                       i1l2361 03EF                         i1l2281 0350                         i1l2195 048C  
                       i1l2187 0476                         i1l2179 0460                         i1l2259 0424  
                       i1l2355 03E5                         i1l2347 03DA                         i1l2291 0368  
                       i1l2363 03FB                         i1l2349 03DE                         i1l2285 035F  
                       i1l2277 0347                         i1l2295 036E                         i1l2289 0365  
                       _FVRCON 0117                         _OSCCON 0099                    _Mrf49RxByte 01C9  
                  _Mrf49TxByte 01C4               ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 00C1  
                  _Mrf49xaTick 0078                _Mrf49xaRxPacket 02D4                _Mrf49xaTxPacket 02E2  
                       _extInt 0004                    ?_Mrf49RxCmd 0070                    ?_Mrf49TxCmd 0021  
                  ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070                    ?_Mrf49RxSts 0070  
      __end_of__initialization 0020          __end_ofi1_Mrf49RxByte 0408          __end_ofi1_Mrf49TxByte 0405  
                  ?_ExtIntInit 0070                 __pcstackCOMMON 0070         ??_Mrf49xaPacketPending 0020  
      __size_ofi1_Mrf49xaServe 00BF                 _OPTION_REGbits 0095                  ??_SysInitGpio 0020  
                   __pbssBANK0 002C                     __pbssBANK1 00A0        __end_of_Mrf49xaRxPacket 02E2  
      __end_of_Mrf49xaTxPacket 031A          __end_of_Mrf49xaModeRx 01F5          __end_of_Mrf49xaModeTx 004C  
          __size_of_Mrf49RxCmd 000F            __size_of_Mrf49TxCmd 000C            __size_of_Mrf49SpiRx 0047  
          __size_of_Mrf49SpiTx 0062            __size_of_Mrf49RxSts 000C                     __pmaintext 004C  
                   __pintentry 0004                        ?_extInt 0070          __size_of_Mrf49xaServe 00C6  
                      _AdcInit 02B6            __size_of_ExtIntInit 0005                     __stringtab 0600  
                ?i1_Mrf49RxCmd 0070                  ?i1_Mrf49TxCmd 0071                  ?i1_Mrf49SpiRx 0070  
                ?i1_Mrf49SpiTx 0070                  ?i1_Mrf49RxSts 0070            __end_of_SysInitGpio 0337  
                 _Mrf49xaServe 00FE                __size_of_extInt 0010              _mrfRegset_InitCnt 0601  
                      __ptext1 031A                        __ptext2 0078                        __ptext3 02E2  
                      __ptext4 02D4                        __ptext5 02CA                        __ptext6 0022  
                      __ptext7 00C1                        __ptext8 00FE                        __ptext9 01CB  
                      clrloop0 0639           end_of_initialization 0020                   ?_Mrf49RxByte 0070  
                 ?_Mrf49TxByte 0070                 ??i1_Mrf49RxCmd 0071                 ??i1_Mrf49TxCmd 0072  
               ??i1_Mrf49SpiRx 0070                 ??i1_Mrf49SpiTx 0070                 ??i1_Mrf49RxSts 0071  
             ?_Mrf49xaRxPacket 0070               ?_Mrf49xaTxPacket 0020                   ?_Mrf49xaInit 0070  
         __end_of_mrfRegset_Rx 0630           __end_of_mrfRegset_Tx 0638                   ?_Mrf49xaTick 0070  
               i1_Mrf49xaServe 0341      __end_of_mrfRegset_InitCnt 0602                      _PORTAbits 000C  
                    _PORTCbits 000E                   ??_Mrf49RxCmd 0021                   ??_Mrf49TxCmd 0022  
                 ??_Mrf49SpiRx 0020                   ??_Mrf49SpiTx 0020                   ??_Mrf49RxSts 0021  
                    _TRISAbits 008C                      _TRISBbits 008D                      _TRISCbits 008E  
                  _SysInitGpio 031A                 Mrf49SpiRx@data 0020                 Mrf49SpiTx@byte 0020  
           __end_of_Mrf49RxCmd 00C1             __end_of_Mrf49TxCmd 0201         __end_ofi1_Mrf49xaServe 0400  
                 ??_ExtIntInit 0020             __end_of_Mrf49SpiRx 02B6             __end_of_Mrf49SpiTx 0263  
           __end_of_Mrf49RxSts 026F       __size_ofi1_Mrf49xaModeRx 0028                 __end_of_extInt 0014  
          start_initialization 0016             __end_of_ExtIntInit 02CA                ?i1_Mrf49xaServe 0070  
              _mrfRegset_RxCnt 0602                _mrfRegset_TxCnt 0603                       ??_extInt 0077  
__size_of_Mrf49xaPacketPending 000A         __size_ofi1_Mrf49RxByte 0003         __size_ofi1_Mrf49TxByte 0005  
         __end_ofi1_Mrf49RxCmd 0341           __end_ofi1_Mrf49TxCmd 043A           __end_ofi1_Mrf49SpiRx 04E8  
         __end_ofi1_Mrf49SpiTx 0495           __end_ofi1_Mrf49RxSts 04A3                      ___latbits 0001  
                __pcstackBANK0 0020              i1Mrf49TxByte@byte 0073                       ?_AdcInit 0070  
                 _rfTrcvStatus 00A0           __size_of_Mrf49RxByte 0002           __size_of_Mrf49TxByte 0005  
         __size_of_Mrf49xaInit 003D           __size_of_Mrf49xaTick 003A                      __pstrings 0600  
                    __pswtext1 04E8                      __pswtext2 0500                      __pswtext3 04F0  
                    __pswtext4 056E         __size_of_Mrf49xaModeRx 002A         __size_of_Mrf49xaModeTx 002A  
                 _mrfRegset_Rx 0624                   _mrfRegset_Tx 0630              ??i1_Mrf49xaModeRx 0073  
                     _LATAbits 010C                       _LATBbits 010D                       _LATCbits 010E  
                i1_Mrf49RxByte 0405        __end_of_mrfRegset_RxCnt 0603                  i1_Mrf49TxByte 0400  
      __end_of_mrfRegset_TxCnt 0604                      clear_ram0 0638                    _mrf49Status 002C  
               Mrf49xaModeRx@k 0023                 Mrf49xaModeTx@k 0023                  Mrf49RxCmd@cmd 0021  
                Mrf49RxCmd@val 0022                  Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021  
                     _WPUAbits 020C               __size_of_AdcInit 000F                   ?_SysInitGpio 0070  
               ?i1_Mrf49RxByte 0070                 ?i1_Mrf49TxByte 0070                  _Mrf49xaModeRx 01CB  
                _Mrf49xaModeTx 0022                 _mrfRegset_Init 0604       __size_of_Mrf49xaRxPacket 000E  
        __size_ofi1_Mrf49RxCmd 000A          __size_ofi1_Mrf49TxCmd 000A          __size_ofi1_Mrf49SpiRx 0045  
        __size_ofi1_Mrf49SpiTx 005B               i1Mrf49SpiRx@data 0070          __size_ofi1_Mrf49RxSts 000E  
     __size_of_Mrf49xaTxPacket 0038               i1Mrf49SpiTx@byte 0070             __end_of__stringtab 0601  
                     __ptext10 01C4                       __ptext11 01F5                       __ptext20 0341  
                     __ptext12 0263                       __ptext21 0408                       __ptext13 01C9  
                     __ptext22 0400                       __ptext14 00B2                       __ptext23 0430  
                     __ptext15 0201                       __ptext24 0495                       __ptext16 026F  
                     __ptext25 0405                       __ptext17 02C5                       __ptext26 0337  
                     __ptext18 02B6                       __ptext27 043A                       __ptext28 04A3  
             ??i1_Mrf49xaServe 0074                  __size_of_main 002C                   i1_Mrf49RxCmd 0337  
       __end_of_mrfRegset_Init 0624                   i1_Mrf49TxCmd 0430                   i1_Mrf49SpiRx 04A3  
                 i1_Mrf49SpiTx 043A                 ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070  
                 i1_Mrf49RxSts 0495                i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072  
           Mrf49xaTick@timeout 0025                     _INTCONbits 000B                i1Mrf49TxCmd@cmd 0072  
              i1Mrf49TxCmd@val 0071                ??i1_Mrf49RxByte 0073                       intlevel1 0000  
              ??i1_Mrf49TxByte 0073   __end_of_Mrf49xaPacketPending 02D4                   Mrf49xaInit@i 0027  
                 Mrf49xaInit@j 0028                   Mrf49xaInit@k 0029                  ?_Mrf49xaServe 0070  
                 Mrf49xaTick@i 0026                   Mrf49xaTick@j 0027              Mrf49xaTick@packet 0024  
              i1_Mrf49xaModeRx 0408              ??_Mrf49xaRxPacket 0020              ??_Mrf49xaTxPacket 0021  
                ??_Mrf49RxByte 0023                  ??_Mrf49TxByte 0023                ??_Mrf49xaModeRx 0023  
              ??_Mrf49xaModeTx 0023           __size_of_SysInitGpio 001D               Mrf49xaServe@data 0026  
               ??_Mrf49xaServe 0024                  ??_Mrf49xaInit 0027                  ??_Mrf49xaTick 0024  
             Mrf49xaTxPacket@i 0022  
